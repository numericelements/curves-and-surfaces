/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/chart.js/dist/Chart.js":
/*!*********************************************!*\
  !*** ./node_modules/chart.js/dist/Chart.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/*!
 * Chart.js v2.9.4
 * https://www.chartjs.org
 * (c) 2020 Chart.js Contributors
 * Released under the MIT License
 */
(function (global, factory) {
 true ? module.exports = factory(function() { try { return __webpack_require__(/*! moment */ "./node_modules/moment/moment.js"); } catch(e) { } }()) :
0;
}(this, (function (moment) { 'use strict';

moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

function getCjsExportFromNamespace (n) {
	return n && n['default'] || n;
}

var colorName = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};

var conversions = createCommonjsModule(function (module) {
/* MIT license */


// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

var reverseKeywords = {};
for (var key in colorName) {
	if (colorName.hasOwnProperty(key)) {
		reverseKeywords[colorName[key]] = key;
	}
}

var convert = module.exports = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

// hide .channels and .labels properties
for (var model in convert) {
	if (convert.hasOwnProperty(model)) {
		if (!('channels' in convert[model])) {
			throw new Error('missing channels property: ' + model);
		}

		if (!('labels' in convert[model])) {
			throw new Error('missing channel labels property: ' + model);
		}

		if (convert[model].labels.length !== convert[model].channels) {
			throw new Error('channel and label counts mismatch: ' + model);
		}

		var channels = convert[model].channels;
		var labels = convert[model].labels;
		delete convert[model].channels;
		delete convert[model].labels;
		Object.defineProperty(convert[model], 'channels', {value: channels});
		Object.defineProperty(convert[model], 'labels', {value: labels});
	}
}

convert.rgb.hsl = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var min = Math.min(r, g, b);
	var max = Math.max(r, g, b);
	var delta = max - min;
	var h;
	var s;
	var l;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	var rdif;
	var gdif;
	var bdif;
	var h;
	var s;

	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var v = Math.max(r, g, b);
	var diff = v - Math.min(r, g, b);
	var diffc = function (c) {
		return (v - c) / 6 / diff + 1 / 2;
	};

	if (diff === 0) {
		h = s = 0;
	} else {
		s = diff / v;
		rdif = diffc(r);
		gdif = diffc(g);
		bdif = diffc(b);

		if (r === v) {
			h = bdif - gdif;
		} else if (g === v) {
			h = (1 / 3) + rdif - bdif;
		} else if (b === v) {
			h = (2 / 3) + gdif - rdif;
		}
		if (h < 0) {
			h += 1;
		} else if (h > 1) {
			h -= 1;
		}
	}

	return [
		h * 360,
		s * 100,
		v * 100
	];
};

convert.rgb.hwb = function (rgb) {
	var r = rgb[0];
	var g = rgb[1];
	var b = rgb[2];
	var h = convert.rgb.hsl(rgb)[0];
	var w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var c;
	var m;
	var y;
	var k;

	k = Math.min(1 - r, 1 - g, 1 - b);
	c = (1 - r - k) / (1 - k) || 0;
	m = (1 - g - k) / (1 - k) || 0;
	y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

/**
 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
 * */
function comparativeDistance(x, y) {
	return (
		Math.pow(x[0] - y[0], 2) +
		Math.pow(x[1] - y[1], 2) +
		Math.pow(x[2] - y[2], 2)
	);
}

convert.rgb.keyword = function (rgb) {
	var reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	var currentClosestDistance = Infinity;
	var currentClosestKeyword;

	for (var keyword in colorName) {
		if (colorName.hasOwnProperty(keyword)) {
			var value = colorName[keyword];

			// Compute comparative distance
			var distance = comparativeDistance(rgb, value);

			// Check if its less, if so set as closest
			if (distance < currentClosestDistance) {
				currentClosestDistance = distance;
				currentClosestKeyword = keyword;
			}
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return colorName[keyword];
};

convert.rgb.xyz = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;

	// assume sRGB
	r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
	g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
	b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

	var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	var xyz = convert.rgb.xyz(rgb);
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	var h = hsl[0] / 360;
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var t1;
	var t2;
	var t3;
	var rgb;
	var val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	t1 = 2 * l - t2;

	rgb = [0, 0, 0];
	for (var i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}
		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	var h = hsl[0];
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var smin = s;
	var lmin = Math.max(l, 0.01);
	var sv;
	var v;

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	v = (l + s) / 2;
	sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	var h = hsv[0] / 60;
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var hi = Math.floor(h) % 6;

	var f = h - Math.floor(h);
	var p = 255 * v * (1 - s);
	var q = 255 * v * (1 - (s * f));
	var t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	var h = hsv[0];
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var vmin = Math.max(v, 0.01);
	var lmin;
	var sl;
	var l;

	l = (2 - s) * v;
	lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
	var h = hwb[0] / 360;
	var wh = hwb[1] / 100;
	var bl = hwb[2] / 100;
	var ratio = wh + bl;
	var i;
	var v;
	var f;
	var n;

	// wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	i = Math.floor(6 * h);
	v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	n = wh + f * (v - wh); // linear interpolation

	var r;
	var g;
	var b;
	switch (i) {
		default:
		case 6:
		case 0: r = v; g = n; b = wh; break;
		case 1: r = n; g = v; b = wh; break;
		case 2: r = wh; g = v; b = n; break;
		case 3: r = wh; g = n; b = v; break;
		case 4: r = n; g = wh; b = v; break;
		case 5: r = v; g = wh; b = n; break;
	}

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	var c = cmyk[0] / 100;
	var m = cmyk[1] / 100;
	var y = cmyk[2] / 100;
	var k = cmyk[3] / 100;
	var r;
	var g;
	var b;

	r = 1 - Math.min(1, c * (1 - k) + k);
	g = 1 - Math.min(1, m * (1 - k) + k);
	b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	var x = xyz[0] / 100;
	var y = xyz[1] / 100;
	var z = xyz[2] / 100;
	var r;
	var g;
	var b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// assume sRGB
	r = r > 0.0031308
		? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var x;
	var y;
	var z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	var y2 = Math.pow(y, 3);
	var x2 = Math.pow(x, 3);
	var z2 = Math.pow(z, 3);
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var hr;
	var h;
	var c;

	hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	var l = lch[0];
	var c = lch[1];
	var h = lch[2];
	var a;
	var b;
	var hr;

	hr = h / 360 * 2 * Math.PI;
	a = c * Math.cos(hr);
	b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];
	var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	var ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	// optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];

	// we use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	var ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	var color = args % 10;

	// handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	var mult = (~~(args > 50) + 1) * 0.5;
	var r = ((color & 1) * mult) * 255;
	var g = (((color >> 1) & 1) * mult) * 255;
	var b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	// handle greyscale
	if (args >= 232) {
		var c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	var rem;
	var r = Math.floor(args / 36) / 5 * 255;
	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	var b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert.rgb.hex = function (args) {
	var integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
	var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	var colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(function (char) {
			return char + char;
		}).join('');
	}

	var integer = parseInt(colorString, 16);
	var r = (integer >> 16) & 0xFF;
	var g = (integer >> 8) & 0xFF;
	var b = integer & 0xFF;

	return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var max = Math.max(Math.max(r, g), b);
	var min = Math.min(Math.min(r, g), b);
	var chroma = (max - min);
	var grayscale;
	var hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma + 4;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var c = 1;
	var f = 0;

	if (l < 0.5) {
		c = 2.0 * s * l;
	} else {
		c = 2.0 * s * (1.0 - l);
	}

	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;

	var c = s * v;
	var f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
	var h = hcg[0] / 360;
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	var pure = [0, 0, 0];
	var hi = (h % 1) * 6;
	var v = hi % 1;
	var w = 1 - v;
	var mg = 0;

	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert.hcg.hsv = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var v = c + g * (1.0 - c);
	var f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var l = g * (1.0 - c) + 0.5 * c;
	var s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;
	var v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
	var w = hwb[1] / 100;
	var b = hwb[2] / 100;
	var v = 1 - b;
	var c = v - w;
	var g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
};

convert.rgb.apple = function (rgb) {
	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
};

convert.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = convert.gray.hsv = function (args) {
	return [0, 0, args[0]];
};

convert.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
	var val = Math.round(gray[0] / 100 * 255) & 0xFF;
	var integer = (val << 16) + (val << 8) + val;

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
	var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};
});
var conversions_1 = conversions.rgb;
var conversions_2 = conversions.hsl;
var conversions_3 = conversions.hsv;
var conversions_4 = conversions.hwb;
var conversions_5 = conversions.cmyk;
var conversions_6 = conversions.xyz;
var conversions_7 = conversions.lab;
var conversions_8 = conversions.lch;
var conversions_9 = conversions.hex;
var conversions_10 = conversions.keyword;
var conversions_11 = conversions.ansi16;
var conversions_12 = conversions.ansi256;
var conversions_13 = conversions.hcg;
var conversions_14 = conversions.apple;
var conversions_15 = conversions.gray;

/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
	var graph = {};
	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
	var models = Object.keys(conversions);

	for (var len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	var graph = buildGraph();
	var queue = [fromModel]; // unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		var current = queue.pop();
		var adjacents = Object.keys(conversions[current]);

		for (var len = adjacents.length, i = 0; i < len; i++) {
			var adjacent = adjacents[i];
			var node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	var path = [graph[toModel].parent, toModel];
	var fn = conversions[graph[toModel].parent][toModel];

	var cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

var route = function (fromModel) {
	var graph = deriveBFS(fromModel);
	var conversion = {};

	var models = Object.keys(graph);
	for (var len = models.length, i = 0; i < len; i++) {
		var toModel = models[i];
		var node = graph[toModel];

		if (node.parent === null) {
			// no possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};

var convert = {};

var models = Object.keys(conversions);

function wrapRaw(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		return fn(args);
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		var result = fn(args);

		// we're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (var len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(function (fromModel) {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	var routes = route(fromModel);
	var routeModels = Object.keys(routes);

	routeModels.forEach(function (toModel) {
		var fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

var colorConvert = convert;

var colorName$1 = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};

/* MIT license */


var colorString = {
   getRgba: getRgba,
   getHsla: getHsla,
   getRgb: getRgb,
   getHsl: getHsl,
   getHwb: getHwb,
   getAlpha: getAlpha,

   hexString: hexString,
   rgbString: rgbString,
   rgbaString: rgbaString,
   percentString: percentString,
   percentaString: percentaString,
   hslString: hslString,
   hslaString: hslaString,
   hwbString: hwbString,
   keyword: keyword
};

function getRgba(string) {
   if (!string) {
      return;
   }
   var abbr =  /^#([a-fA-F0-9]{3,4})$/i,
       hex =  /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,
       rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
       per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
       keyword = /(\w+)/;

   var rgb = [0, 0, 0],
       a = 1,
       match = string.match(abbr),
       hexAlpha = "";
   if (match) {
      match = match[1];
      hexAlpha = match[3];
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match[i] + match[i], 16);
      }
      if (hexAlpha) {
         a = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;
      }
   }
   else if (match = string.match(hex)) {
      hexAlpha = match[2];
      match = match[1];
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
      }
      if (hexAlpha) {
         a = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;
      }
   }
   else if (match = string.match(rgba)) {
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match[i + 1]);
      }
      a = parseFloat(match[4]);
   }
   else if (match = string.match(per)) {
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
      }
      a = parseFloat(match[4]);
   }
   else if (match = string.match(keyword)) {
      if (match[1] == "transparent") {
         return [0, 0, 0, 0];
      }
      rgb = colorName$1[match[1]];
      if (!rgb) {
         return;
      }
   }

   for (var i = 0; i < rgb.length; i++) {
      rgb[i] = scale(rgb[i], 0, 255);
   }
   if (!a && a != 0) {
      a = 1;
   }
   else {
      a = scale(a, 0, 1);
   }
   rgb[3] = a;
   return rgb;
}

function getHsla(string) {
   if (!string) {
      return;
   }
   var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
   var match = string.match(hsl);
   if (match) {
      var alpha = parseFloat(match[4]);
      var h = scale(parseInt(match[1]), 0, 360),
          s = scale(parseFloat(match[2]), 0, 100),
          l = scale(parseFloat(match[3]), 0, 100),
          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, s, l, a];
   }
}

function getHwb(string) {
   if (!string) {
      return;
   }
   var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
   var match = string.match(hwb);
   if (match) {
    var alpha = parseFloat(match[4]);
      var h = scale(parseInt(match[1]), 0, 360),
          w = scale(parseFloat(match[2]), 0, 100),
          b = scale(parseFloat(match[3]), 0, 100),
          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, w, b, a];
   }
}

function getRgb(string) {
   var rgba = getRgba(string);
   return rgba && rgba.slice(0, 3);
}

function getHsl(string) {
  var hsla = getHsla(string);
  return hsla && hsla.slice(0, 3);
}

function getAlpha(string) {
   var vals = getRgba(string);
   if (vals) {
      return vals[3];
   }
   else if (vals = getHsla(string)) {
      return vals[3];
   }
   else if (vals = getHwb(string)) {
      return vals[3];
   }
}

// generators
function hexString(rgba, a) {
   var a = (a !== undefined && rgba.length === 3) ? a : rgba[3];
   return "#" + hexDouble(rgba[0]) 
              + hexDouble(rgba[1])
              + hexDouble(rgba[2])
              + (
                 (a >= 0 && a < 1)
                 ? hexDouble(Math.round(a * 255))
                 : ""
              );
}

function rgbString(rgba, alpha) {
   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
      return rgbaString(rgba, alpha);
   }
   return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
}

function rgbaString(rgba, alpha) {
   if (alpha === undefined) {
      alpha = (rgba[3] !== undefined ? rgba[3] : 1);
   }
   return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2]
           + ", " + alpha + ")";
}

function percentString(rgba, alpha) {
   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
      return percentaString(rgba, alpha);
   }
   var r = Math.round(rgba[0]/255 * 100),
       g = Math.round(rgba[1]/255 * 100),
       b = Math.round(rgba[2]/255 * 100);

   return "rgb(" + r + "%, " + g + "%, " + b + "%)";
}

function percentaString(rgba, alpha) {
   var r = Math.round(rgba[0]/255 * 100),
       g = Math.round(rgba[1]/255 * 100),
       b = Math.round(rgba[2]/255 * 100);
   return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
}

function hslString(hsla, alpha) {
   if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
      return hslaString(hsla, alpha);
   }
   return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
}

function hslaString(hsla, alpha) {
   if (alpha === undefined) {
      alpha = (hsla[3] !== undefined ? hsla[3] : 1);
   }
   return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, "
           + alpha + ")";
}

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
function hwbString(hwb, alpha) {
   if (alpha === undefined) {
      alpha = (hwb[3] !== undefined ? hwb[3] : 1);
   }
   return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%"
           + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
}

function keyword(rgb) {
  return reverseNames[rgb.slice(0, 3)];
}

// helpers
function scale(num, min, max) {
   return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
  var str = num.toString(16).toUpperCase();
  return (str.length < 2) ? "0" + str : str;
}


//create a list of reverse color names
var reverseNames = {};
for (var name in colorName$1) {
   reverseNames[colorName$1[name]] = name;
}

/* MIT license */



var Color = function (obj) {
	if (obj instanceof Color) {
		return obj;
	}
	if (!(this instanceof Color)) {
		return new Color(obj);
	}

	this.valid = false;
	this.values = {
		rgb: [0, 0, 0],
		hsl: [0, 0, 0],
		hsv: [0, 0, 0],
		hwb: [0, 0, 0],
		cmyk: [0, 0, 0, 0],
		alpha: 1
	};

	// parse Color() argument
	var vals;
	if (typeof obj === 'string') {
		vals = colorString.getRgba(obj);
		if (vals) {
			this.setValues('rgb', vals);
		} else if (vals = colorString.getHsla(obj)) {
			this.setValues('hsl', vals);
		} else if (vals = colorString.getHwb(obj)) {
			this.setValues('hwb', vals);
		}
	} else if (typeof obj === 'object') {
		vals = obj;
		if (vals.r !== undefined || vals.red !== undefined) {
			this.setValues('rgb', vals);
		} else if (vals.l !== undefined || vals.lightness !== undefined) {
			this.setValues('hsl', vals);
		} else if (vals.v !== undefined || vals.value !== undefined) {
			this.setValues('hsv', vals);
		} else if (vals.w !== undefined || vals.whiteness !== undefined) {
			this.setValues('hwb', vals);
		} else if (vals.c !== undefined || vals.cyan !== undefined) {
			this.setValues('cmyk', vals);
		}
	}
};

Color.prototype = {
	isValid: function () {
		return this.valid;
	},
	rgb: function () {
		return this.setSpace('rgb', arguments);
	},
	hsl: function () {
		return this.setSpace('hsl', arguments);
	},
	hsv: function () {
		return this.setSpace('hsv', arguments);
	},
	hwb: function () {
		return this.setSpace('hwb', arguments);
	},
	cmyk: function () {
		return this.setSpace('cmyk', arguments);
	},

	rgbArray: function () {
		return this.values.rgb;
	},
	hslArray: function () {
		return this.values.hsl;
	},
	hsvArray: function () {
		return this.values.hsv;
	},
	hwbArray: function () {
		var values = this.values;
		if (values.alpha !== 1) {
			return values.hwb.concat([values.alpha]);
		}
		return values.hwb;
	},
	cmykArray: function () {
		return this.values.cmyk;
	},
	rgbaArray: function () {
		var values = this.values;
		return values.rgb.concat([values.alpha]);
	},
	hslaArray: function () {
		var values = this.values;
		return values.hsl.concat([values.alpha]);
	},
	alpha: function (val) {
		if (val === undefined) {
			return this.values.alpha;
		}
		this.setValues('alpha', val);
		return this;
	},

	red: function (val) {
		return this.setChannel('rgb', 0, val);
	},
	green: function (val) {
		return this.setChannel('rgb', 1, val);
	},
	blue: function (val) {
		return this.setChannel('rgb', 2, val);
	},
	hue: function (val) {
		if (val) {
			val %= 360;
			val = val < 0 ? 360 + val : val;
		}
		return this.setChannel('hsl', 0, val);
	},
	saturation: function (val) {
		return this.setChannel('hsl', 1, val);
	},
	lightness: function (val) {
		return this.setChannel('hsl', 2, val);
	},
	saturationv: function (val) {
		return this.setChannel('hsv', 1, val);
	},
	whiteness: function (val) {
		return this.setChannel('hwb', 1, val);
	},
	blackness: function (val) {
		return this.setChannel('hwb', 2, val);
	},
	value: function (val) {
		return this.setChannel('hsv', 2, val);
	},
	cyan: function (val) {
		return this.setChannel('cmyk', 0, val);
	},
	magenta: function (val) {
		return this.setChannel('cmyk', 1, val);
	},
	yellow: function (val) {
		return this.setChannel('cmyk', 2, val);
	},
	black: function (val) {
		return this.setChannel('cmyk', 3, val);
	},

	hexString: function () {
		return colorString.hexString(this.values.rgb);
	},
	rgbString: function () {
		return colorString.rgbString(this.values.rgb, this.values.alpha);
	},
	rgbaString: function () {
		return colorString.rgbaString(this.values.rgb, this.values.alpha);
	},
	percentString: function () {
		return colorString.percentString(this.values.rgb, this.values.alpha);
	},
	hslString: function () {
		return colorString.hslString(this.values.hsl, this.values.alpha);
	},
	hslaString: function () {
		return colorString.hslaString(this.values.hsl, this.values.alpha);
	},
	hwbString: function () {
		return colorString.hwbString(this.values.hwb, this.values.alpha);
	},
	keyword: function () {
		return colorString.keyword(this.values.rgb, this.values.alpha);
	},

	rgbNumber: function () {
		var rgb = this.values.rgb;
		return (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];
	},

	luminosity: function () {
		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
		var rgb = this.values.rgb;
		var lum = [];
		for (var i = 0; i < rgb.length; i++) {
			var chan = rgb[i] / 255;
			lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
		}
		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
	},

	contrast: function (color2) {
		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
		var lum1 = this.luminosity();
		var lum2 = color2.luminosity();
		if (lum1 > lum2) {
			return (lum1 + 0.05) / (lum2 + 0.05);
		}
		return (lum2 + 0.05) / (lum1 + 0.05);
	},

	level: function (color2) {
		var contrastRatio = this.contrast(color2);
		if (contrastRatio >= 7.1) {
			return 'AAA';
		}

		return (contrastRatio >= 4.5) ? 'AA' : '';
	},

	dark: function () {
		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
		var rgb = this.values.rgb;
		var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
		return yiq < 128;
	},

	light: function () {
		return !this.dark();
	},

	negate: function () {
		var rgb = [];
		for (var i = 0; i < 3; i++) {
			rgb[i] = 255 - this.values.rgb[i];
		}
		this.setValues('rgb', rgb);
		return this;
	},

	lighten: function (ratio) {
		var hsl = this.values.hsl;
		hsl[2] += hsl[2] * ratio;
		this.setValues('hsl', hsl);
		return this;
	},

	darken: function (ratio) {
		var hsl = this.values.hsl;
		hsl[2] -= hsl[2] * ratio;
		this.setValues('hsl', hsl);
		return this;
	},

	saturate: function (ratio) {
		var hsl = this.values.hsl;
		hsl[1] += hsl[1] * ratio;
		this.setValues('hsl', hsl);
		return this;
	},

	desaturate: function (ratio) {
		var hsl = this.values.hsl;
		hsl[1] -= hsl[1] * ratio;
		this.setValues('hsl', hsl);
		return this;
	},

	whiten: function (ratio) {
		var hwb = this.values.hwb;
		hwb[1] += hwb[1] * ratio;
		this.setValues('hwb', hwb);
		return this;
	},

	blacken: function (ratio) {
		var hwb = this.values.hwb;
		hwb[2] += hwb[2] * ratio;
		this.setValues('hwb', hwb);
		return this;
	},

	greyscale: function () {
		var rgb = this.values.rgb;
		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
		var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
		this.setValues('rgb', [val, val, val]);
		return this;
	},

	clearer: function (ratio) {
		var alpha = this.values.alpha;
		this.setValues('alpha', alpha - (alpha * ratio));
		return this;
	},

	opaquer: function (ratio) {
		var alpha = this.values.alpha;
		this.setValues('alpha', alpha + (alpha * ratio));
		return this;
	},

	rotate: function (degrees) {
		var hsl = this.values.hsl;
		var hue = (hsl[0] + degrees) % 360;
		hsl[0] = hue < 0 ? 360 + hue : hue;
		this.setValues('hsl', hsl);
		return this;
	},

	/**
	 * Ported from sass implementation in C
	 * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
	 */
	mix: function (mixinColor, weight) {
		var color1 = this;
		var color2 = mixinColor;
		var p = weight === undefined ? 0.5 : weight;

		var w = 2 * p - 1;
		var a = color1.alpha() - color2.alpha();

		var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
		var w2 = 1 - w1;

		return this
			.rgb(
				w1 * color1.red() + w2 * color2.red(),
				w1 * color1.green() + w2 * color2.green(),
				w1 * color1.blue() + w2 * color2.blue()
			)
			.alpha(color1.alpha() * p + color2.alpha() * (1 - p));
	},

	toJSON: function () {
		return this.rgb();
	},

	clone: function () {
		// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
		// making the final build way to big to embed in Chart.js. So let's do it manually,
		// assuming that values to clone are 1 dimension arrays containing only numbers,
		// except 'alpha' which is a number.
		var result = new Color();
		var source = this.values;
		var target = result.values;
		var value, type;

		for (var prop in source) {
			if (source.hasOwnProperty(prop)) {
				value = source[prop];
				type = ({}).toString.call(value);
				if (type === '[object Array]') {
					target[prop] = value.slice(0);
				} else if (type === '[object Number]') {
					target[prop] = value;
				} else {
					console.error('unexpected color value:', value);
				}
			}
		}

		return result;
	}
};

Color.prototype.spaces = {
	rgb: ['red', 'green', 'blue'],
	hsl: ['hue', 'saturation', 'lightness'],
	hsv: ['hue', 'saturation', 'value'],
	hwb: ['hue', 'whiteness', 'blackness'],
	cmyk: ['cyan', 'magenta', 'yellow', 'black']
};

Color.prototype.maxes = {
	rgb: [255, 255, 255],
	hsl: [360, 100, 100],
	hsv: [360, 100, 100],
	hwb: [360, 100, 100],
	cmyk: [100, 100, 100, 100]
};

Color.prototype.getValues = function (space) {
	var values = this.values;
	var vals = {};

	for (var i = 0; i < space.length; i++) {
		vals[space.charAt(i)] = values[space][i];
	}

	if (values.alpha !== 1) {
		vals.a = values.alpha;
	}

	// {r: 255, g: 255, b: 255, a: 0.4}
	return vals;
};

Color.prototype.setValues = function (space, vals) {
	var values = this.values;
	var spaces = this.spaces;
	var maxes = this.maxes;
	var alpha = 1;
	var i;

	this.valid = true;

	if (space === 'alpha') {
		alpha = vals;
	} else if (vals.length) {
		// [10, 10, 10]
		values[space] = vals.slice(0, space.length);
		alpha = vals[space.length];
	} else if (vals[space.charAt(0)] !== undefined) {
		// {r: 10, g: 10, b: 10}
		for (i = 0; i < space.length; i++) {
			values[space][i] = vals[space.charAt(i)];
		}

		alpha = vals.a;
	} else if (vals[spaces[space][0]] !== undefined) {
		// {red: 10, green: 10, blue: 10}
		var chans = spaces[space];

		for (i = 0; i < space.length; i++) {
			values[space][i] = vals[chans[i]];
		}

		alpha = vals.alpha;
	}

	values.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));

	if (space === 'alpha') {
		return false;
	}

	var capped;

	// cap values of the space prior converting all values
	for (i = 0; i < space.length; i++) {
		capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
		values[space][i] = Math.round(capped);
	}

	// convert to all the other color spaces
	for (var sname in spaces) {
		if (sname !== space) {
			values[sname] = colorConvert[space][sname](values[space]);
		}
	}

	return true;
};

Color.prototype.setSpace = function (space, args) {
	var vals = args[0];

	if (vals === undefined) {
		// color.rgb()
		return this.getValues(space);
	}

	// color.rgb(10, 10, 10)
	if (typeof vals === 'number') {
		vals = Array.prototype.slice.call(args);
	}

	this.setValues(space, vals);
	return this;
};

Color.prototype.setChannel = function (space, index, val) {
	var svalues = this.values[space];
	if (val === undefined) {
		// color.red()
		return svalues[index];
	} else if (val === svalues[index]) {
		// color.red(color.red())
		return this;
	}

	// color.red(100)
	svalues[index] = val;
	this.setValues(space, svalues);

	return this;
};

if (typeof window !== 'undefined') {
	window.Color = Color;
}

var chartjsColor = Color;

function isValidKey(key) {
	return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;
}

/**
 * @namespace Chart.helpers
 */
var helpers = {
	/**
	 * An empty function that can be used, for example, for optional callback.
	 */
	noop: function() {},

	/**
	 * Returns a unique id, sequentially generated from a global variable.
	 * @returns {number}
	 * @function
	 */
	uid: (function() {
		var id = 0;
		return function() {
			return id++;
		};
	}()),

	/**
	 * Returns true if `value` is neither null nor undefined, else returns false.
	 * @param {*} value - The value to test.
	 * @returns {boolean}
	 * @since 2.7.0
	 */
	isNullOrUndef: function(value) {
		return value === null || typeof value === 'undefined';
	},

	/**
	 * Returns true if `value` is an array (including typed arrays), else returns false.
	 * @param {*} value - The value to test.
	 * @returns {boolean}
	 * @function
	 */
	isArray: function(value) {
		if (Array.isArray && Array.isArray(value)) {
			return true;
		}
		var type = Object.prototype.toString.call(value);
		if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {
			return true;
		}
		return false;
	},

	/**
	 * Returns true if `value` is an object (excluding null), else returns false.
	 * @param {*} value - The value to test.
	 * @returns {boolean}
	 * @since 2.7.0
	 */
	isObject: function(value) {
		return value !== null && Object.prototype.toString.call(value) === '[object Object]';
	},

	/**
	 * Returns true if `value` is a finite number, else returns false
	 * @param {*} value  - The value to test.
	 * @returns {boolean}
	 */
	isFinite: function(value) {
		return (typeof value === 'number' || value instanceof Number) && isFinite(value);
	},

	/**
	 * Returns `value` if defined, else returns `defaultValue`.
	 * @param {*} value - The value to return if defined.
	 * @param {*} defaultValue - The value to return if `value` is undefined.
	 * @returns {*}
	 */
	valueOrDefault: function(value, defaultValue) {
		return typeof value === 'undefined' ? defaultValue : value;
	},

	/**
	 * Returns value at the given `index` in array if defined, else returns `defaultValue`.
	 * @param {Array} value - The array to lookup for value at `index`.
	 * @param {number} index - The index in `value` to lookup for value.
	 * @param {*} defaultValue - The value to return if `value[index]` is undefined.
	 * @returns {*}
	 */
	valueAtIndexOrDefault: function(value, index, defaultValue) {
		return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);
	},

	/**
	 * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
	 * value returned by `fn`. If `fn` is not a function, this method returns undefined.
	 * @param {function} fn - The function to call.
	 * @param {Array|undefined|null} args - The arguments with which `fn` should be called.
	 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
	 * @returns {*}
	 */
	callback: function(fn, args, thisArg) {
		if (fn && typeof fn.call === 'function') {
			return fn.apply(thisArg, args);
		}
	},

	/**
	 * Note(SB) for performance sake, this method should only be used when loopable type
	 * is unknown or in none intensive code (not called often and small loopable). Else
	 * it's preferable to use a regular for() loop and save extra function calls.
	 * @param {object|Array} loopable - The object or array to be iterated.
	 * @param {function} fn - The function to call for each item.
	 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
	 * @param {boolean} [reverse] - If true, iterates backward on the loopable.
	 */
	each: function(loopable, fn, thisArg, reverse) {
		var i, len, keys;
		if (helpers.isArray(loopable)) {
			len = loopable.length;
			if (reverse) {
				for (i = len - 1; i >= 0; i--) {
					fn.call(thisArg, loopable[i], i);
				}
			} else {
				for (i = 0; i < len; i++) {
					fn.call(thisArg, loopable[i], i);
				}
			}
		} else if (helpers.isObject(loopable)) {
			keys = Object.keys(loopable);
			len = keys.length;
			for (i = 0; i < len; i++) {
				fn.call(thisArg, loopable[keys[i]], keys[i]);
			}
		}
	},

	/**
	 * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
	 * @see https://stackoverflow.com/a/14853974
	 * @param {Array} a0 - The array to compare
	 * @param {Array} a1 - The array to compare
	 * @returns {boolean}
	 */
	arrayEquals: function(a0, a1) {
		var i, ilen, v0, v1;

		if (!a0 || !a1 || a0.length !== a1.length) {
			return false;
		}

		for (i = 0, ilen = a0.length; i < ilen; ++i) {
			v0 = a0[i];
			v1 = a1[i];

			if (v0 instanceof Array && v1 instanceof Array) {
				if (!helpers.arrayEquals(v0, v1)) {
					return false;
				}
			} else if (v0 !== v1) {
				// NOTE: two different object instances will never be equal: {x:20} != {x:20}
				return false;
			}
		}

		return true;
	},

	/**
	 * Returns a deep copy of `source` without keeping references on objects and arrays.
	 * @param {*} source - The value to clone.
	 * @returns {*}
	 */
	clone: function(source) {
		if (helpers.isArray(source)) {
			return source.map(helpers.clone);
		}

		if (helpers.isObject(source)) {
			var target = Object.create(source);
			var keys = Object.keys(source);
			var klen = keys.length;
			var k = 0;

			for (; k < klen; ++k) {
				target[keys[k]] = helpers.clone(source[keys[k]]);
			}

			return target;
		}

		return source;
	},

	/**
	 * The default merger when Chart.helpers.merge is called without merger option.
	 * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
	 * @private
	 */
	_merger: function(key, target, source, options) {
		if (!isValidKey(key)) {
			// We want to ensure we do not copy prototypes over
			// as this can pollute global namespaces
			return;
		}

		var tval = target[key];
		var sval = source[key];

		if (helpers.isObject(tval) && helpers.isObject(sval)) {
			helpers.merge(tval, sval, options);
		} else {
			target[key] = helpers.clone(sval);
		}
	},

	/**
	 * Merges source[key] in target[key] only if target[key] is undefined.
	 * @private
	 */
	_mergerIf: function(key, target, source) {
		if (!isValidKey(key)) {
			// We want to ensure we do not copy prototypes over
			// as this can pollute global namespaces
			return;
		}

		var tval = target[key];
		var sval = source[key];

		if (helpers.isObject(tval) && helpers.isObject(sval)) {
			helpers.mergeIf(tval, sval);
		} else if (!target.hasOwnProperty(key)) {
			target[key] = helpers.clone(sval);
		}
	},

	/**
	 * Recursively deep copies `source` properties into `target` with the given `options`.
	 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
	 * @param {object} target - The target object in which all sources are merged into.
	 * @param {object|object[]} source - Object(s) to merge into `target`.
	 * @param {object} [options] - Merging options:
	 * @param {function} [options.merger] - The merge method (key, target, source, options)
	 * @returns {object} The `target` object.
	 */
	merge: function(target, source, options) {
		var sources = helpers.isArray(source) ? source : [source];
		var ilen = sources.length;
		var merge, i, keys, klen, k;

		if (!helpers.isObject(target)) {
			return target;
		}

		options = options || {};
		merge = options.merger || helpers._merger;

		for (i = 0; i < ilen; ++i) {
			source = sources[i];
			if (!helpers.isObject(source)) {
				continue;
			}

			keys = Object.keys(source);
			for (k = 0, klen = keys.length; k < klen; ++k) {
				merge(keys[k], target, source, options);
			}
		}

		return target;
	},

	/**
	 * Recursively deep copies `source` properties into `target` *only* if not defined in target.
	 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
	 * @param {object} target - The target object in which all sources are merged into.
	 * @param {object|object[]} source - Object(s) to merge into `target`.
	 * @returns {object} The `target` object.
	 */
	mergeIf: function(target, source) {
		return helpers.merge(target, source, {merger: helpers._mergerIf});
	},

	/**
	 * Applies the contents of two or more objects together into the first object.
	 * @param {object} target - The target object in which all objects are merged into.
	 * @param {object} arg1 - Object containing additional properties to merge in target.
	 * @param {object} argN - Additional objects containing properties to merge in target.
	 * @returns {object} The `target` object.
	 */
	extend: Object.assign || function(target) {
		return helpers.merge(target, [].slice.call(arguments, 1), {
			merger: function(key, dst, src) {
				dst[key] = src[key];
			}
		});
	},

	/**
	 * Basic javascript inheritance based on the model created in Backbone.js
	 */
	inherits: function(extensions) {
		var me = this;
		var ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {
			return me.apply(this, arguments);
		};

		var Surrogate = function() {
			this.constructor = ChartElement;
		};

		Surrogate.prototype = me.prototype;
		ChartElement.prototype = new Surrogate();
		ChartElement.extend = helpers.inherits;

		if (extensions) {
			helpers.extend(ChartElement.prototype, extensions);
		}

		ChartElement.__super__ = me.prototype;
		return ChartElement;
	},

	_deprecated: function(scope, value, previous, current) {
		if (value !== undefined) {
			console.warn(scope + ': "' + previous +
				'" is deprecated. Please use "' + current + '" instead');
		}
	}
};

var helpers_core = helpers;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.helpers.callback instead.
 * @function Chart.helpers.callCallback
 * @deprecated since version 2.6.0
 * @todo remove at version 3
 * @private
 */
helpers.callCallback = helpers.callback;

/**
 * Provided for backward compatibility, use Array.prototype.indexOf instead.
 * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+
 * @function Chart.helpers.indexOf
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers.indexOf = function(array, item, fromIndex) {
	return Array.prototype.indexOf.call(array, item, fromIndex);
};

/**
 * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.
 * @function Chart.helpers.getValueOrDefault
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers.getValueOrDefault = helpers.valueOrDefault;

/**
 * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.
 * @function Chart.helpers.getValueAtIndexOrDefault
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;

/**
 * Easing functions adapted from Robert Penner's easing equations.
 * @namespace Chart.helpers.easingEffects
 * @see http://www.robertpenner.com/easing/
 */
var effects = {
	linear: function(t) {
		return t;
	},

	easeInQuad: function(t) {
		return t * t;
	},

	easeOutQuad: function(t) {
		return -t * (t - 2);
	},

	easeInOutQuad: function(t) {
		if ((t /= 0.5) < 1) {
			return 0.5 * t * t;
		}
		return -0.5 * ((--t) * (t - 2) - 1);
	},

	easeInCubic: function(t) {
		return t * t * t;
	},

	easeOutCubic: function(t) {
		return (t = t - 1) * t * t + 1;
	},

	easeInOutCubic: function(t) {
		if ((t /= 0.5) < 1) {
			return 0.5 * t * t * t;
		}
		return 0.5 * ((t -= 2) * t * t + 2);
	},

	easeInQuart: function(t) {
		return t * t * t * t;
	},

	easeOutQuart: function(t) {
		return -((t = t - 1) * t * t * t - 1);
	},

	easeInOutQuart: function(t) {
		if ((t /= 0.5) < 1) {
			return 0.5 * t * t * t * t;
		}
		return -0.5 * ((t -= 2) * t * t * t - 2);
	},

	easeInQuint: function(t) {
		return t * t * t * t * t;
	},

	easeOutQuint: function(t) {
		return (t = t - 1) * t * t * t * t + 1;
	},

	easeInOutQuint: function(t) {
		if ((t /= 0.5) < 1) {
			return 0.5 * t * t * t * t * t;
		}
		return 0.5 * ((t -= 2) * t * t * t * t + 2);
	},

	easeInSine: function(t) {
		return -Math.cos(t * (Math.PI / 2)) + 1;
	},

	easeOutSine: function(t) {
		return Math.sin(t * (Math.PI / 2));
	},

	easeInOutSine: function(t) {
		return -0.5 * (Math.cos(Math.PI * t) - 1);
	},

	easeInExpo: function(t) {
		return (t === 0) ? 0 : Math.pow(2, 10 * (t - 1));
	},

	easeOutExpo: function(t) {
		return (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1;
	},

	easeInOutExpo: function(t) {
		if (t === 0) {
			return 0;
		}
		if (t === 1) {
			return 1;
		}
		if ((t /= 0.5) < 1) {
			return 0.5 * Math.pow(2, 10 * (t - 1));
		}
		return 0.5 * (-Math.pow(2, -10 * --t) + 2);
	},

	easeInCirc: function(t) {
		if (t >= 1) {
			return t;
		}
		return -(Math.sqrt(1 - t * t) - 1);
	},

	easeOutCirc: function(t) {
		return Math.sqrt(1 - (t = t - 1) * t);
	},

	easeInOutCirc: function(t) {
		if ((t /= 0.5) < 1) {
			return -0.5 * (Math.sqrt(1 - t * t) - 1);
		}
		return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
	},

	easeInElastic: function(t) {
		var s = 1.70158;
		var p = 0;
		var a = 1;
		if (t === 0) {
			return 0;
		}
		if (t === 1) {
			return 1;
		}
		if (!p) {
			p = 0.3;
		}
		if (a < 1) {
			a = 1;
			s = p / 4;
		} else {
			s = p / (2 * Math.PI) * Math.asin(1 / a);
		}
		return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
	},

	easeOutElastic: function(t) {
		var s = 1.70158;
		var p = 0;
		var a = 1;
		if (t === 0) {
			return 0;
		}
		if (t === 1) {
			return 1;
		}
		if (!p) {
			p = 0.3;
		}
		if (a < 1) {
			a = 1;
			s = p / 4;
		} else {
			s = p / (2 * Math.PI) * Math.asin(1 / a);
		}
		return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
	},

	easeInOutElastic: function(t) {
		var s = 1.70158;
		var p = 0;
		var a = 1;
		if (t === 0) {
			return 0;
		}
		if ((t /= 0.5) === 2) {
			return 1;
		}
		if (!p) {
			p = 0.45;
		}
		if (a < 1) {
			a = 1;
			s = p / 4;
		} else {
			s = p / (2 * Math.PI) * Math.asin(1 / a);
		}
		if (t < 1) {
			return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
		}
		return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;
	},
	easeInBack: function(t) {
		var s = 1.70158;
		return t * t * ((s + 1) * t - s);
	},

	easeOutBack: function(t) {
		var s = 1.70158;
		return (t = t - 1) * t * ((s + 1) * t + s) + 1;
	},

	easeInOutBack: function(t) {
		var s = 1.70158;
		if ((t /= 0.5) < 1) {
			return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));
		}
		return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
	},

	easeInBounce: function(t) {
		return 1 - effects.easeOutBounce(1 - t);
	},

	easeOutBounce: function(t) {
		if (t < (1 / 2.75)) {
			return 7.5625 * t * t;
		}
		if (t < (2 / 2.75)) {
			return 7.5625 * (t -= (1.5 / 2.75)) * t + 0.75;
		}
		if (t < (2.5 / 2.75)) {
			return 7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375;
		}
		return 7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375;
	},

	easeInOutBounce: function(t) {
		if (t < 0.5) {
			return effects.easeInBounce(t * 2) * 0.5;
		}
		return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
	}
};

var helpers_easing = {
	effects: effects
};

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.helpers.easing.effects instead.
 * @function Chart.helpers.easingEffects
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers_core.easingEffects = effects;

var PI = Math.PI;
var RAD_PER_DEG = PI / 180;
var DOUBLE_PI = PI * 2;
var HALF_PI = PI / 2;
var QUARTER_PI = PI / 4;
var TWO_THIRDS_PI = PI * 2 / 3;

/**
 * @namespace Chart.helpers.canvas
 */
var exports$1 = {
	/**
	 * Clears the entire canvas associated to the given `chart`.
	 * @param {Chart} chart - The chart for which to clear the canvas.
	 */
	clear: function(chart) {
		chart.ctx.clearRect(0, 0, chart.width, chart.height);
	},

	/**
	 * Creates a "path" for a rectangle with rounded corners at position (x, y) with a
	 * given size (width, height) and the same `radius` for all corners.
	 * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.
	 * @param {number} x - The x axis of the coordinate for the rectangle starting point.
	 * @param {number} y - The y axis of the coordinate for the rectangle starting point.
	 * @param {number} width - The rectangle's width.
	 * @param {number} height - The rectangle's height.
	 * @param {number} radius - The rounded amount (in pixels) for the four corners.
	 * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?
	 */
	roundedRect: function(ctx, x, y, width, height, radius) {
		if (radius) {
			var r = Math.min(radius, height / 2, width / 2);
			var left = x + r;
			var top = y + r;
			var right = x + width - r;
			var bottom = y + height - r;

			ctx.moveTo(x, top);
			if (left < right && top < bottom) {
				ctx.arc(left, top, r, -PI, -HALF_PI);
				ctx.arc(right, top, r, -HALF_PI, 0);
				ctx.arc(right, bottom, r, 0, HALF_PI);
				ctx.arc(left, bottom, r, HALF_PI, PI);
			} else if (left < right) {
				ctx.moveTo(left, y);
				ctx.arc(right, top, r, -HALF_PI, HALF_PI);
				ctx.arc(left, top, r, HALF_PI, PI + HALF_PI);
			} else if (top < bottom) {
				ctx.arc(left, top, r, -PI, 0);
				ctx.arc(left, bottom, r, 0, PI);
			} else {
				ctx.arc(left, top, r, -PI, PI);
			}
			ctx.closePath();
			ctx.moveTo(x, y);
		} else {
			ctx.rect(x, y, width, height);
		}
	},

	drawPoint: function(ctx, style, radius, x, y, rotation) {
		var type, xOffset, yOffset, size, cornerRadius;
		var rad = (rotation || 0) * RAD_PER_DEG;

		if (style && typeof style === 'object') {
			type = style.toString();
			if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
				ctx.save();
				ctx.translate(x, y);
				ctx.rotate(rad);
				ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
				ctx.restore();
				return;
			}
		}

		if (isNaN(radius) || radius <= 0) {
			return;
		}

		ctx.beginPath();

		switch (style) {
		// Default includes circle
		default:
			ctx.arc(x, y, radius, 0, DOUBLE_PI);
			ctx.closePath();
			break;
		case 'triangle':
			ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
			rad += TWO_THIRDS_PI;
			ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
			rad += TWO_THIRDS_PI;
			ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
			ctx.closePath();
			break;
		case 'rectRounded':
			// NOTE: the rounded rect implementation changed to use `arc` instead of
			// `quadraticCurveTo` since it generates better results when rect is
			// almost a circle. 0.516 (instead of 0.5) produces results with visually
			// closer proportion to the previous impl and it is inscribed in the
			// circle with `radius`. For more details, see the following PRs:
			// https://github.com/chartjs/Chart.js/issues/5597
			// https://github.com/chartjs/Chart.js/issues/5858
			cornerRadius = radius * 0.516;
			size = radius - cornerRadius;
			xOffset = Math.cos(rad + QUARTER_PI) * size;
			yOffset = Math.sin(rad + QUARTER_PI) * size;
			ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
			ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
			ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
			ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
			ctx.closePath();
			break;
		case 'rect':
			if (!rotation) {
				size = Math.SQRT1_2 * radius;
				ctx.rect(x - size, y - size, 2 * size, 2 * size);
				break;
			}
			rad += QUARTER_PI;
			/* falls through */
		case 'rectRot':
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + yOffset, y - xOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			ctx.lineTo(x - yOffset, y + xOffset);
			ctx.closePath();
			break;
		case 'crossRot':
			rad += QUARTER_PI;
			/* falls through */
		case 'cross':
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			ctx.moveTo(x + yOffset, y - xOffset);
			ctx.lineTo(x - yOffset, y + xOffset);
			break;
		case 'star':
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			ctx.moveTo(x + yOffset, y - xOffset);
			ctx.lineTo(x - yOffset, y + xOffset);
			rad += QUARTER_PI;
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			ctx.moveTo(x + yOffset, y - xOffset);
			ctx.lineTo(x - yOffset, y + xOffset);
			break;
		case 'line':
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			break;
		case 'dash':
			ctx.moveTo(x, y);
			ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
			break;
		}

		ctx.fill();
		ctx.stroke();
	},

	/**
	 * Returns true if the point is inside the rectangle
	 * @param {object} point - The point to test
	 * @param {object} area - The rectangle
	 * @returns {boolean}
	 * @private
	 */
	_isPointInArea: function(point, area) {
		var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.

		return point.x > area.left - epsilon && point.x < area.right + epsilon &&
			point.y > area.top - epsilon && point.y < area.bottom + epsilon;
	},

	clipArea: function(ctx, area) {
		ctx.save();
		ctx.beginPath();
		ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
		ctx.clip();
	},

	unclipArea: function(ctx) {
		ctx.restore();
	},

	lineTo: function(ctx, previous, target, flip) {
		var stepped = target.steppedLine;
		if (stepped) {
			if (stepped === 'middle') {
				var midpoint = (previous.x + target.x) / 2.0;
				ctx.lineTo(midpoint, flip ? target.y : previous.y);
				ctx.lineTo(midpoint, flip ? previous.y : target.y);
			} else if ((stepped === 'after' && !flip) || (stepped !== 'after' && flip)) {
				ctx.lineTo(previous.x, target.y);
			} else {
				ctx.lineTo(target.x, previous.y);
			}
			ctx.lineTo(target.x, target.y);
			return;
		}

		if (!target.tension) {
			ctx.lineTo(target.x, target.y);
			return;
		}

		ctx.bezierCurveTo(
			flip ? previous.controlPointPreviousX : previous.controlPointNextX,
			flip ? previous.controlPointPreviousY : previous.controlPointNextY,
			flip ? target.controlPointNextX : target.controlPointPreviousX,
			flip ? target.controlPointNextY : target.controlPointPreviousY,
			target.x,
			target.y);
	}
};

var helpers_canvas = exports$1;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.
 * @namespace Chart.helpers.clear
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers_core.clear = exports$1.clear;

/**
 * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.
 * @namespace Chart.helpers.drawRoundedRectangle
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers_core.drawRoundedRectangle = function(ctx) {
	ctx.beginPath();
	exports$1.roundedRect.apply(exports$1, arguments);
};

var defaults = {
	/**
	 * @private
	 */
	_set: function(scope, values) {
		return helpers_core.merge(this[scope] || (this[scope] = {}), values);
	}
};

// TODO(v3): remove 'global' from namespace.  all default are global and
// there's inconsistency around which options are under 'global'
defaults._set('global', {
	defaultColor: 'rgba(0,0,0,0.1)',
	defaultFontColor: '#666',
	defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
	defaultFontSize: 12,
	defaultFontStyle: 'normal',
	defaultLineHeight: 1.2,
	showLines: true
});

var core_defaults = defaults;

var valueOrDefault = helpers_core.valueOrDefault;

/**
 * Converts the given font object into a CSS font string.
 * @param {object} font - A font object.
 * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
 * @private
 */
function toFontString(font) {
	if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {
		return null;
	}

	return (font.style ? font.style + ' ' : '')
		+ (font.weight ? font.weight + ' ' : '')
		+ font.size + 'px '
		+ font.family;
}

/**
 * @alias Chart.helpers.options
 * @namespace
 */
var helpers_options = {
	/**
	 * Converts the given line height `value` in pixels for a specific font `size`.
	 * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
	 * @param {number} size - The font size (in pixels) used to resolve relative `value`.
	 * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).
	 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
	 * @since 2.7.0
	 */
	toLineHeight: function(value, size) {
		var matches = ('' + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
		if (!matches || matches[1] === 'normal') {
			return size * 1.2;
		}

		value = +matches[2];

		switch (matches[3]) {
		case 'px':
			return value;
		case '%':
			value /= 100;
			break;
		}

		return size * value;
	},

	/**
	 * Converts the given value into a padding object with pre-computed width/height.
	 * @param {number|object} value - If a number, set the value to all TRBL component,
	 *  else, if and object, use defined properties and sets undefined ones to 0.
	 * @returns {object} The padding values (top, right, bottom, left, width, height)
	 * @since 2.7.0
	 */
	toPadding: function(value) {
		var t, r, b, l;

		if (helpers_core.isObject(value)) {
			t = +value.top || 0;
			r = +value.right || 0;
			b = +value.bottom || 0;
			l = +value.left || 0;
		} else {
			t = r = b = l = +value || 0;
		}

		return {
			top: t,
			right: r,
			bottom: b,
			left: l,
			height: t + b,
			width: l + r
		};
	},

	/**
	 * Parses font options and returns the font object.
	 * @param {object} options - A object that contains font options to be parsed.
	 * @return {object} The font object.
	 * @todo Support font.* options and renamed to toFont().
	 * @private
	 */
	_parseFont: function(options) {
		var globalDefaults = core_defaults.global;
		var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
		var font = {
			family: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),
			lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),
			size: size,
			style: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),
			weight: null,
			string: ''
		};

		font.string = toFontString(font);
		return font;
	},

	/**
	 * Evaluates the given `inputs` sequentially and returns the first defined value.
	 * @param {Array} inputs - An array of values, falling back to the last value.
	 * @param {object} [context] - If defined and the current value is a function, the value
	 * is called with `context` as first argument and the result becomes the new input.
	 * @param {number} [index] - If defined and the current value is an array, the value
	 * at `index` become the new input.
	 * @param {object} [info] - object to return information about resolution in
	 * @param {boolean} [info.cacheable] - Will be set to `false` if option is not cacheable.
	 * @since 2.7.0
	 */
	resolve: function(inputs, context, index, info) {
		var cacheable = true;
		var i, ilen, value;

		for (i = 0, ilen = inputs.length; i < ilen; ++i) {
			value = inputs[i];
			if (value === undefined) {
				continue;
			}
			if (context !== undefined && typeof value === 'function') {
				value = value(context);
				cacheable = false;
			}
			if (index !== undefined && helpers_core.isArray(value)) {
				value = value[index];
				cacheable = false;
			}
			if (value !== undefined) {
				if (info && !cacheable) {
					info.cacheable = false;
				}
				return value;
			}
		}
	}
};

/**
 * @alias Chart.helpers.math
 * @namespace
 */
var exports$2 = {
	/**
	 * Returns an array of factors sorted from 1 to sqrt(value)
	 * @private
	 */
	_factorize: function(value) {
		var result = [];
		var sqrt = Math.sqrt(value);
		var i;

		for (i = 1; i < sqrt; i++) {
			if (value % i === 0) {
				result.push(i);
				result.push(value / i);
			}
		}
		if (sqrt === (sqrt | 0)) { // if value is a square number
			result.push(sqrt);
		}

		result.sort(function(a, b) {
			return a - b;
		}).pop();
		return result;
	},

	log10: Math.log10 || function(x) {
		var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.
		// Check for whole powers of 10,
		// which due to floating point rounding error should be corrected.
		var powerOf10 = Math.round(exponent);
		var isPowerOf10 = x === Math.pow(10, powerOf10);

		return isPowerOf10 ? powerOf10 : exponent;
	}
};

var helpers_math = exports$2;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.helpers.math.log10 instead.
 * @namespace Chart.helpers.log10
 * @deprecated since version 2.9.0
 * @todo remove at version 3
 * @private
 */
helpers_core.log10 = exports$2.log10;

var getRtlAdapter = function(rectX, width) {
	return {
		x: function(x) {
			return rectX + rectX + width - x;
		},
		setWidth: function(w) {
			width = w;
		},
		textAlign: function(align) {
			if (align === 'center') {
				return align;
			}
			return align === 'right' ? 'left' : 'right';
		},
		xPlus: function(x, value) {
			return x - value;
		},
		leftForLtr: function(x, itemWidth) {
			return x - itemWidth;
		},
	};
};

var getLtrAdapter = function() {
	return {
		x: function(x) {
			return x;
		},
		setWidth: function(w) { // eslint-disable-line no-unused-vars
		},
		textAlign: function(align) {
			return align;
		},
		xPlus: function(x, value) {
			return x + value;
		},
		leftForLtr: function(x, _itemWidth) { // eslint-disable-line no-unused-vars
			return x;
		},
	};
};

var getAdapter = function(rtl, rectX, width) {
	return rtl ? getRtlAdapter(rectX, width) : getLtrAdapter();
};

var overrideTextDirection = function(ctx, direction) {
	var style, original;
	if (direction === 'ltr' || direction === 'rtl') {
		style = ctx.canvas.style;
		original = [
			style.getPropertyValue('direction'),
			style.getPropertyPriority('direction'),
		];

		style.setProperty('direction', direction, 'important');
		ctx.prevTextDirection = original;
	}
};

var restoreTextDirection = function(ctx) {
	var original = ctx.prevTextDirection;
	if (original !== undefined) {
		delete ctx.prevTextDirection;
		ctx.canvas.style.setProperty('direction', original[0], original[1]);
	}
};

var helpers_rtl = {
	getRtlAdapter: getAdapter,
	overrideTextDirection: overrideTextDirection,
	restoreTextDirection: restoreTextDirection,
};

var helpers$1 = helpers_core;
var easing = helpers_easing;
var canvas = helpers_canvas;
var options = helpers_options;
var math = helpers_math;
var rtl = helpers_rtl;
helpers$1.easing = easing;
helpers$1.canvas = canvas;
helpers$1.options = options;
helpers$1.math = math;
helpers$1.rtl = rtl;

function interpolate(start, view, model, ease) {
	var keys = Object.keys(model);
	var i, ilen, key, actual, origin, target, type, c0, c1;

	for (i = 0, ilen = keys.length; i < ilen; ++i) {
		key = keys[i];

		target = model[key];

		// if a value is added to the model after pivot() has been called, the view
		// doesn't contain it, so let's initialize the view to the target value.
		if (!view.hasOwnProperty(key)) {
			view[key] = target;
		}

		actual = view[key];

		if (actual === target || key[0] === '_') {
			continue;
		}

		if (!start.hasOwnProperty(key)) {
			start[key] = actual;
		}

		origin = start[key];

		type = typeof target;

		if (type === typeof origin) {
			if (type === 'string') {
				c0 = chartjsColor(origin);
				if (c0.valid) {
					c1 = chartjsColor(target);
					if (c1.valid) {
						view[key] = c1.mix(c0, ease).rgbString();
						continue;
					}
				}
			} else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {
				view[key] = origin + (target - origin) * ease;
				continue;
			}
		}

		view[key] = target;
	}
}

var Element = function(configuration) {
	helpers$1.extend(this, configuration);
	this.initialize.apply(this, arguments);
};

helpers$1.extend(Element.prototype, {
	_type: undefined,

	initialize: function() {
		this.hidden = false;
	},

	pivot: function() {
		var me = this;
		if (!me._view) {
			me._view = helpers$1.extend({}, me._model);
		}
		me._start = {};
		return me;
	},

	transition: function(ease) {
		var me = this;
		var model = me._model;
		var start = me._start;
		var view = me._view;

		// No animation -> No Transition
		if (!model || ease === 1) {
			me._view = helpers$1.extend({}, model);
			me._start = null;
			return me;
		}

		if (!view) {
			view = me._view = {};
		}

		if (!start) {
			start = me._start = {};
		}

		interpolate(start, view, model, ease);

		return me;
	},

	tooltipPosition: function() {
		return {
			x: this._model.x,
			y: this._model.y
		};
	},

	hasValue: function() {
		return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);
	}
});

Element.extend = helpers$1.inherits;

var core_element = Element;

var exports$3 = core_element.extend({
	chart: null, // the animation associated chart instance
	currentStep: 0, // the current animation step
	numSteps: 60, // default number of steps
	easing: '', // the easing to use for this animation
	render: null, // render function used by the animation service

	onAnimationProgress: null, // user specified callback to fire on each step of the animation
	onAnimationComplete: null, // user specified callback to fire when the animation finishes
});

var core_animation = exports$3;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.Animation instead
 * @prop Chart.Animation#animationObject
 * @deprecated since version 2.6.0
 * @todo remove at version 3
 */
Object.defineProperty(exports$3.prototype, 'animationObject', {
	get: function() {
		return this;
	}
});

/**
 * Provided for backward compatibility, use Chart.Animation#chart instead
 * @prop Chart.Animation#chartInstance
 * @deprecated since version 2.6.0
 * @todo remove at version 3
 */
Object.defineProperty(exports$3.prototype, 'chartInstance', {
	get: function() {
		return this.chart;
	},
	set: function(value) {
		this.chart = value;
	}
});

core_defaults._set('global', {
	animation: {
		duration: 1000,
		easing: 'easeOutQuart',
		onProgress: helpers$1.noop,
		onComplete: helpers$1.noop
	}
});

var core_animations = {
	animations: [],
	request: null,

	/**
	 * @param {Chart} chart - The chart to animate.
	 * @param {Chart.Animation} animation - The animation that we will animate.
	 * @param {number} duration - The animation duration in ms.
	 * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions
	 */
	addAnimation: function(chart, animation, duration, lazy) {
		var animations = this.animations;
		var i, ilen;

		animation.chart = chart;
		animation.startTime = Date.now();
		animation.duration = duration;

		if (!lazy) {
			chart.animating = true;
		}

		for (i = 0, ilen = animations.length; i < ilen; ++i) {
			if (animations[i].chart === chart) {
				animations[i] = animation;
				return;
			}
		}

		animations.push(animation);

		// If there are no animations queued, manually kickstart a digest, for lack of a better word
		if (animations.length === 1) {
			this.requestAnimationFrame();
		}
	},

	cancelAnimation: function(chart) {
		var index = helpers$1.findIndex(this.animations, function(animation) {
			return animation.chart === chart;
		});

		if (index !== -1) {
			this.animations.splice(index, 1);
			chart.animating = false;
		}
	},

	requestAnimationFrame: function() {
		var me = this;
		if (me.request === null) {
			// Skip animation frame requests until the active one is executed.
			// This can happen when processing mouse events, e.g. 'mousemove'
			// and 'mouseout' events will trigger multiple renders.
			me.request = helpers$1.requestAnimFrame.call(window, function() {
				me.request = null;
				me.startDigest();
			});
		}
	},

	/**
	 * @private
	 */
	startDigest: function() {
		var me = this;

		me.advance();

		// Do we have more stuff to animate?
		if (me.animations.length > 0) {
			me.requestAnimationFrame();
		}
	},

	/**
	 * @private
	 */
	advance: function() {
		var animations = this.animations;
		var animation, chart, numSteps, nextStep;
		var i = 0;

		// 1 animation per chart, so we are looping charts here
		while (i < animations.length) {
			animation = animations[i];
			chart = animation.chart;
			numSteps = animation.numSteps;

			// Make sure that currentStep starts at 1
			// https://github.com/chartjs/Chart.js/issues/6104
			nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;
			animation.currentStep = Math.min(nextStep, numSteps);

			helpers$1.callback(animation.render, [chart, animation], chart);
			helpers$1.callback(animation.onAnimationProgress, [animation], chart);

			if (animation.currentStep >= numSteps) {
				helpers$1.callback(animation.onAnimationComplete, [animation], chart);
				chart.animating = false;
				animations.splice(i, 1);
			} else {
				++i;
			}
		}
	}
};

var resolve = helpers$1.options.resolve;

var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];

/**
 * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',
 * 'unshift') and notify the listener AFTER the array has been altered. Listeners are
 * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.
 */
function listenArrayEvents(array, listener) {
	if (array._chartjs) {
		array._chartjs.listeners.push(listener);
		return;
	}

	Object.defineProperty(array, '_chartjs', {
		configurable: true,
		enumerable: false,
		value: {
			listeners: [listener]
		}
	});

	arrayEvents.forEach(function(key) {
		var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
		var base = array[key];

		Object.defineProperty(array, key, {
			configurable: true,
			enumerable: false,
			value: function() {
				var args = Array.prototype.slice.call(arguments);
				var res = base.apply(this, args);

				helpers$1.each(array._chartjs.listeners, function(object) {
					if (typeof object[method] === 'function') {
						object[method].apply(object, args);
					}
				});

				return res;
			}
		});
	});
}

/**
 * Removes the given array event listener and cleanup extra attached properties (such as
 * the _chartjs stub and overridden methods) if array doesn't have any more listeners.
 */
function unlistenArrayEvents(array, listener) {
	var stub = array._chartjs;
	if (!stub) {
		return;
	}

	var listeners = stub.listeners;
	var index = listeners.indexOf(listener);
	if (index !== -1) {
		listeners.splice(index, 1);
	}

	if (listeners.length > 0) {
		return;
	}

	arrayEvents.forEach(function(key) {
		delete array[key];
	});

	delete array._chartjs;
}

// Base class for all dataset controllers (line, bar, etc)
var DatasetController = function(chart, datasetIndex) {
	this.initialize(chart, datasetIndex);
};

helpers$1.extend(DatasetController.prototype, {

	/**
	 * Element type used to generate a meta dataset (e.g. Chart.element.Line).
	 * @type {Chart.core.element}
	 */
	datasetElementType: null,

	/**
	 * Element type used to generate a meta data (e.g. Chart.element.Point).
	 * @type {Chart.core.element}
	 */
	dataElementType: null,

	/**
	 * Dataset element option keys to be resolved in _resolveDatasetElementOptions.
	 * A derived controller may override this to resolve controller-specific options.
	 * The keys defined here are for backward compatibility for legend styles.
	 * @private
	 */
	_datasetElementOptions: [
		'backgroundColor',
		'borderCapStyle',
		'borderColor',
		'borderDash',
		'borderDashOffset',
		'borderJoinStyle',
		'borderWidth'
	],

	/**
	 * Data element option keys to be resolved in _resolveDataElementOptions.
	 * A derived controller may override this to resolve controller-specific options.
	 * The keys defined here are for backward compatibility for legend styles.
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderWidth',
		'pointStyle'
	],

	initialize: function(chart, datasetIndex) {
		var me = this;
		me.chart = chart;
		me.index = datasetIndex;
		me.linkScales();
		me.addElements();
		me._type = me.getMeta().type;
	},

	updateIndex: function(datasetIndex) {
		this.index = datasetIndex;
	},

	linkScales: function() {
		var me = this;
		var meta = me.getMeta();
		var chart = me.chart;
		var scales = chart.scales;
		var dataset = me.getDataset();
		var scalesOpts = chart.options.scales;

		if (meta.xAxisID === null || !(meta.xAxisID in scales) || dataset.xAxisID) {
			meta.xAxisID = dataset.xAxisID || scalesOpts.xAxes[0].id;
		}
		if (meta.yAxisID === null || !(meta.yAxisID in scales) || dataset.yAxisID) {
			meta.yAxisID = dataset.yAxisID || scalesOpts.yAxes[0].id;
		}
	},

	getDataset: function() {
		return this.chart.data.datasets[this.index];
	},

	getMeta: function() {
		return this.chart.getDatasetMeta(this.index);
	},

	getScaleForId: function(scaleID) {
		return this.chart.scales[scaleID];
	},

	/**
	 * @private
	 */
	_getValueScaleId: function() {
		return this.getMeta().yAxisID;
	},

	/**
	 * @private
	 */
	_getIndexScaleId: function() {
		return this.getMeta().xAxisID;
	},

	/**
	 * @private
	 */
	_getValueScale: function() {
		return this.getScaleForId(this._getValueScaleId());
	},

	/**
	 * @private
	 */
	_getIndexScale: function() {
		return this.getScaleForId(this._getIndexScaleId());
	},

	reset: function() {
		this._update(true);
	},

	/**
	 * @private
	 */
	destroy: function() {
		if (this._data) {
			unlistenArrayEvents(this._data, this);
		}
	},

	createMetaDataset: function() {
		var me = this;
		var type = me.datasetElementType;
		return type && new type({
			_chart: me.chart,
			_datasetIndex: me.index
		});
	},

	createMetaData: function(index) {
		var me = this;
		var type = me.dataElementType;
		return type && new type({
			_chart: me.chart,
			_datasetIndex: me.index,
			_index: index
		});
	},

	addElements: function() {
		var me = this;
		var meta = me.getMeta();
		var data = me.getDataset().data || [];
		var metaData = meta.data;
		var i, ilen;

		for (i = 0, ilen = data.length; i < ilen; ++i) {
			metaData[i] = metaData[i] || me.createMetaData(i);
		}

		meta.dataset = meta.dataset || me.createMetaDataset();
	},

	addElementAndReset: function(index) {
		var element = this.createMetaData(index);
		this.getMeta().data.splice(index, 0, element);
		this.updateElement(element, index, true);
	},

	buildOrUpdateElements: function() {
		var me = this;
		var dataset = me.getDataset();
		var data = dataset.data || (dataset.data = []);

		// In order to correctly handle data addition/deletion animation (an thus simulate
		// real-time charts), we need to monitor these data modifications and synchronize
		// the internal meta data accordingly.
		if (me._data !== data) {
			if (me._data) {
				// This case happens when the user replaced the data array instance.
				unlistenArrayEvents(me._data, me);
			}

			if (data && Object.isExtensible(data)) {
				listenArrayEvents(data, me);
			}
			me._data = data;
		}

		// Re-sync meta data in case the user replaced the data array or if we missed
		// any updates and so make sure that we handle number of datapoints changing.
		me.resyncElements();
	},

	/**
	 * Returns the merged user-supplied and default dataset-level options
	 * @private
	 */
	_configure: function() {
		var me = this;
		me._config = helpers$1.merge(Object.create(null), [
			me.chart.options.datasets[me._type],
			me.getDataset(),
		], {
			merger: function(key, target, source) {
				if (key !== '_meta' && key !== 'data') {
					helpers$1._merger(key, target, source);
				}
			}
		});
	},

	_update: function(reset) {
		var me = this;
		me._configure();
		me._cachedDataOpts = null;
		me.update(reset);
	},

	update: helpers$1.noop,

	transition: function(easingValue) {
		var meta = this.getMeta();
		var elements = meta.data || [];
		var ilen = elements.length;
		var i = 0;

		for (; i < ilen; ++i) {
			elements[i].transition(easingValue);
		}

		if (meta.dataset) {
			meta.dataset.transition(easingValue);
		}
	},

	draw: function() {
		var meta = this.getMeta();
		var elements = meta.data || [];
		var ilen = elements.length;
		var i = 0;

		if (meta.dataset) {
			meta.dataset.draw();
		}

		for (; i < ilen; ++i) {
			elements[i].draw();
		}
	},

	/**
	 * Returns a set of predefined style properties that should be used to represent the dataset
	 * or the data if the index is specified
	 * @param {number} index - data index
	 * @return {IStyleInterface} style object
	 */
	getStyle: function(index) {
		var me = this;
		var meta = me.getMeta();
		var dataset = meta.dataset;
		var style;

		me._configure();
		if (dataset && index === undefined) {
			style = me._resolveDatasetElementOptions(dataset || {});
		} else {
			index = index || 0;
			style = me._resolveDataElementOptions(meta.data[index] || {}, index);
		}

		if (style.fill === false || style.fill === null) {
			style.backgroundColor = style.borderColor;
		}

		return style;
	},

	/**
	 * @private
	 */
	_resolveDatasetElementOptions: function(element, hover) {
		var me = this;
		var chart = me.chart;
		var datasetOpts = me._config;
		var custom = element.custom || {};
		var options = chart.options.elements[me.datasetElementType.prototype._type] || {};
		var elementOptions = me._datasetElementOptions;
		var values = {};
		var i, ilen, key, readKey;

		// Scriptable options
		var context = {
			chart: chart,
			dataset: me.getDataset(),
			datasetIndex: me.index,
			hover: hover
		};

		for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
			key = elementOptions[i];
			readKey = hover ? 'hover' + key.charAt(0).toUpperCase() + key.slice(1) : key;
			values[key] = resolve([
				custom[readKey],
				datasetOpts[readKey],
				options[readKey]
			], context);
		}

		return values;
	},

	/**
	 * @private
	 */
	_resolveDataElementOptions: function(element, index) {
		var me = this;
		var custom = element && element.custom;
		var cached = me._cachedDataOpts;
		if (cached && !custom) {
			return cached;
		}
		var chart = me.chart;
		var datasetOpts = me._config;
		var options = chart.options.elements[me.dataElementType.prototype._type] || {};
		var elementOptions = me._dataElementOptions;
		var values = {};

		// Scriptable options
		var context = {
			chart: chart,
			dataIndex: index,
			dataset: me.getDataset(),
			datasetIndex: me.index
		};

		// `resolve` sets cacheable to `false` if any option is indexed or scripted
		var info = {cacheable: !custom};

		var keys, i, ilen, key;

		custom = custom || {};

		if (helpers$1.isArray(elementOptions)) {
			for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
				key = elementOptions[i];
				values[key] = resolve([
					custom[key],
					datasetOpts[key],
					options[key]
				], context, index, info);
			}
		} else {
			keys = Object.keys(elementOptions);
			for (i = 0, ilen = keys.length; i < ilen; ++i) {
				key = keys[i];
				values[key] = resolve([
					custom[key],
					datasetOpts[elementOptions[key]],
					datasetOpts[key],
					options[key]
				], context, index, info);
			}
		}

		if (info.cacheable) {
			me._cachedDataOpts = Object.freeze(values);
		}

		return values;
	},

	removeHoverStyle: function(element) {
		helpers$1.merge(element._model, element.$previousStyle || {});
		delete element.$previousStyle;
	},

	setHoverStyle: function(element) {
		var dataset = this.chart.data.datasets[element._datasetIndex];
		var index = element._index;
		var custom = element.custom || {};
		var model = element._model;
		var getHoverColor = helpers$1.getHoverColor;

		element.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth
		};

		model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);
		model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);
		model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);
	},

	/**
	 * @private
	 */
	_removeDatasetHoverStyle: function() {
		var element = this.getMeta().dataset;

		if (element) {
			this.removeHoverStyle(element);
		}
	},

	/**
	 * @private
	 */
	_setDatasetHoverStyle: function() {
		var element = this.getMeta().dataset;
		var prev = {};
		var i, ilen, key, keys, hoverOptions, model;

		if (!element) {
			return;
		}

		model = element._model;
		hoverOptions = this._resolveDatasetElementOptions(element, true);

		keys = Object.keys(hoverOptions);
		for (i = 0, ilen = keys.length; i < ilen; ++i) {
			key = keys[i];
			prev[key] = model[key];
			model[key] = hoverOptions[key];
		}

		element.$previousStyle = prev;
	},

	/**
	 * @private
	 */
	resyncElements: function() {
		var me = this;
		var meta = me.getMeta();
		var data = me.getDataset().data;
		var numMeta = meta.data.length;
		var numData = data.length;

		if (numData < numMeta) {
			meta.data.splice(numData, numMeta - numData);
		} else if (numData > numMeta) {
			me.insertElements(numMeta, numData - numMeta);
		}
	},

	/**
	 * @private
	 */
	insertElements: function(start, count) {
		for (var i = 0; i < count; ++i) {
			this.addElementAndReset(start + i);
		}
	},

	/**
	 * @private
	 */
	onDataPush: function() {
		var count = arguments.length;
		this.insertElements(this.getDataset().data.length - count, count);
	},

	/**
	 * @private
	 */
	onDataPop: function() {
		this.getMeta().data.pop();
	},

	/**
	 * @private
	 */
	onDataShift: function() {
		this.getMeta().data.shift();
	},

	/**
	 * @private
	 */
	onDataSplice: function(start, count) {
		this.getMeta().data.splice(start, count);
		this.insertElements(start, arguments.length - 2);
	},

	/**
	 * @private
	 */
	onDataUnshift: function() {
		this.insertElements(0, arguments.length);
	}
});

DatasetController.extend = helpers$1.inherits;

var core_datasetController = DatasetController;

var TAU = Math.PI * 2;

core_defaults._set('global', {
	elements: {
		arc: {
			backgroundColor: core_defaults.global.defaultColor,
			borderColor: '#fff',
			borderWidth: 2,
			borderAlign: 'center'
		}
	}
});

function clipArc(ctx, arc) {
	var startAngle = arc.startAngle;
	var endAngle = arc.endAngle;
	var pixelMargin = arc.pixelMargin;
	var angleMargin = pixelMargin / arc.outerRadius;
	var x = arc.x;
	var y = arc.y;

	// Draw an inner border by cliping the arc and drawing a double-width border
	// Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders
	ctx.beginPath();
	ctx.arc(x, y, arc.outerRadius, startAngle - angleMargin, endAngle + angleMargin);
	if (arc.innerRadius > pixelMargin) {
		angleMargin = pixelMargin / arc.innerRadius;
		ctx.arc(x, y, arc.innerRadius - pixelMargin, endAngle + angleMargin, startAngle - angleMargin, true);
	} else {
		ctx.arc(x, y, pixelMargin, endAngle + Math.PI / 2, startAngle - Math.PI / 2);
	}
	ctx.closePath();
	ctx.clip();
}

function drawFullCircleBorders(ctx, vm, arc, inner) {
	var endAngle = arc.endAngle;
	var i;

	if (inner) {
		arc.endAngle = arc.startAngle + TAU;
		clipArc(ctx, arc);
		arc.endAngle = endAngle;
		if (arc.endAngle === arc.startAngle && arc.fullCircles) {
			arc.endAngle += TAU;
			arc.fullCircles--;
		}
	}

	ctx.beginPath();
	ctx.arc(arc.x, arc.y, arc.innerRadius, arc.startAngle + TAU, arc.startAngle, true);
	for (i = 0; i < arc.fullCircles; ++i) {
		ctx.stroke();
	}

	ctx.beginPath();
	ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.startAngle + TAU);
	for (i = 0; i < arc.fullCircles; ++i) {
		ctx.stroke();
	}
}

function drawBorder(ctx, vm, arc) {
	var inner = vm.borderAlign === 'inner';

	if (inner) {
		ctx.lineWidth = vm.borderWidth * 2;
		ctx.lineJoin = 'round';
	} else {
		ctx.lineWidth = vm.borderWidth;
		ctx.lineJoin = 'bevel';
	}

	if (arc.fullCircles) {
		drawFullCircleBorders(ctx, vm, arc, inner);
	}

	if (inner) {
		clipArc(ctx, arc);
	}

	ctx.beginPath();
	ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.endAngle);
	ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
	ctx.closePath();
	ctx.stroke();
}

var element_arc = core_element.extend({
	_type: 'arc',

	inLabelRange: function(mouseX) {
		var vm = this._view;

		if (vm) {
			return (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));
		}
		return false;
	},

	inRange: function(chartX, chartY) {
		var vm = this._view;

		if (vm) {
			var pointRelativePosition = helpers$1.getAngleFromPoint(vm, {x: chartX, y: chartY});
			var angle = pointRelativePosition.angle;
			var distance = pointRelativePosition.distance;

			// Sanitise angle range
			var startAngle = vm.startAngle;
			var endAngle = vm.endAngle;
			while (endAngle < startAngle) {
				endAngle += TAU;
			}
			while (angle > endAngle) {
				angle -= TAU;
			}
			while (angle < startAngle) {
				angle += TAU;
			}

			// Check if within the range of the open/close angle
			var betweenAngles = (angle >= startAngle && angle <= endAngle);
			var withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);

			return (betweenAngles && withinRadius);
		}
		return false;
	},

	getCenterPoint: function() {
		var vm = this._view;
		var halfAngle = (vm.startAngle + vm.endAngle) / 2;
		var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
		return {
			x: vm.x + Math.cos(halfAngle) * halfRadius,
			y: vm.y + Math.sin(halfAngle) * halfRadius
		};
	},

	getArea: function() {
		var vm = this._view;
		return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
	},

	tooltipPosition: function() {
		var vm = this._view;
		var centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2);
		var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;

		return {
			x: vm.x + (Math.cos(centreAngle) * rangeFromCentre),
			y: vm.y + (Math.sin(centreAngle) * rangeFromCentre)
		};
	},

	draw: function() {
		var ctx = this._chart.ctx;
		var vm = this._view;
		var pixelMargin = (vm.borderAlign === 'inner') ? 0.33 : 0;
		var arc = {
			x: vm.x,
			y: vm.y,
			innerRadius: vm.innerRadius,
			outerRadius: Math.max(vm.outerRadius - pixelMargin, 0),
			pixelMargin: pixelMargin,
			startAngle: vm.startAngle,
			endAngle: vm.endAngle,
			fullCircles: Math.floor(vm.circumference / TAU)
		};
		var i;

		ctx.save();

		ctx.fillStyle = vm.backgroundColor;
		ctx.strokeStyle = vm.borderColor;

		if (arc.fullCircles) {
			arc.endAngle = arc.startAngle + TAU;
			ctx.beginPath();
			ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
			ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
			ctx.closePath();
			for (i = 0; i < arc.fullCircles; ++i) {
				ctx.fill();
			}
			arc.endAngle = arc.startAngle + vm.circumference % TAU;
		}

		ctx.beginPath();
		ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
		ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
		ctx.closePath();
		ctx.fill();

		if (vm.borderWidth) {
			drawBorder(ctx, vm, arc);
		}

		ctx.restore();
	}
});

var valueOrDefault$1 = helpers$1.valueOrDefault;

var defaultColor = core_defaults.global.defaultColor;

core_defaults._set('global', {
	elements: {
		line: {
			tension: 0.4,
			backgroundColor: defaultColor,
			borderWidth: 3,
			borderColor: defaultColor,
			borderCapStyle: 'butt',
			borderDash: [],
			borderDashOffset: 0.0,
			borderJoinStyle: 'miter',
			capBezierPoints: true,
			fill: true, // do we fill in the area between the line and its base axis
		}
	}
});

var element_line = core_element.extend({
	_type: 'line',

	draw: function() {
		var me = this;
		var vm = me._view;
		var ctx = me._chart.ctx;
		var spanGaps = vm.spanGaps;
		var points = me._children.slice(); // clone array
		var globalDefaults = core_defaults.global;
		var globalOptionLineElements = globalDefaults.elements.line;
		var lastDrawnIndex = -1;
		var closePath = me._loop;
		var index, previous, currentVM;

		if (!points.length) {
			return;
		}

		if (me._loop) {
			for (index = 0; index < points.length; ++index) {
				previous = helpers$1.previousItem(points, index);
				// If the line has an open path, shift the point array
				if (!points[index]._view.skip && previous._view.skip) {
					points = points.slice(index).concat(points.slice(0, index));
					closePath = spanGaps;
					break;
				}
			}
			// If the line has a close path, add the first point again
			if (closePath) {
				points.push(points[0]);
			}
		}

		ctx.save();

		// Stroke Line Options
		ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;

		// IE 9 and 10 do not support line dash
		if (ctx.setLineDash) {
			ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
		}

		ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);
		ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
		ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);
		ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;

		// Stroke Line
		ctx.beginPath();

		// First point moves to it's starting position no matter what
		currentVM = points[0]._view;
		if (!currentVM.skip) {
			ctx.moveTo(currentVM.x, currentVM.y);
			lastDrawnIndex = 0;
		}

		for (index = 1; index < points.length; ++index) {
			currentVM = points[index]._view;
			previous = lastDrawnIndex === -1 ? helpers$1.previousItem(points, index) : points[lastDrawnIndex];

			if (!currentVM.skip) {
				if ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {
					// There was a gap and this is the first point after the gap
					ctx.moveTo(currentVM.x, currentVM.y);
				} else {
					// Line to next point
					helpers$1.canvas.lineTo(ctx, previous._view, currentVM);
				}
				lastDrawnIndex = index;
			}
		}

		if (closePath) {
			ctx.closePath();
		}

		ctx.stroke();
		ctx.restore();
	}
});

var valueOrDefault$2 = helpers$1.valueOrDefault;

var defaultColor$1 = core_defaults.global.defaultColor;

core_defaults._set('global', {
	elements: {
		point: {
			radius: 3,
			pointStyle: 'circle',
			backgroundColor: defaultColor$1,
			borderColor: defaultColor$1,
			borderWidth: 1,
			// Hover
			hitRadius: 1,
			hoverRadius: 4,
			hoverBorderWidth: 1
		}
	}
});

function xRange(mouseX) {
	var vm = this._view;
	return vm ? (Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius) : false;
}

function yRange(mouseY) {
	var vm = this._view;
	return vm ? (Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius) : false;
}

var element_point = core_element.extend({
	_type: 'point',

	inRange: function(mouseX, mouseY) {
		var vm = this._view;
		return vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;
	},

	inLabelRange: xRange,
	inXRange: xRange,
	inYRange: yRange,

	getCenterPoint: function() {
		var vm = this._view;
		return {
			x: vm.x,
			y: vm.y
		};
	},

	getArea: function() {
		return Math.PI * Math.pow(this._view.radius, 2);
	},

	tooltipPosition: function() {
		var vm = this._view;
		return {
			x: vm.x,
			y: vm.y,
			padding: vm.radius + vm.borderWidth
		};
	},

	draw: function(chartArea) {
		var vm = this._view;
		var ctx = this._chart.ctx;
		var pointStyle = vm.pointStyle;
		var rotation = vm.rotation;
		var radius = vm.radius;
		var x = vm.x;
		var y = vm.y;
		var globalDefaults = core_defaults.global;
		var defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow

		if (vm.skip) {
			return;
		}

		// Clipping for Points.
		if (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {
			ctx.strokeStyle = vm.borderColor || defaultColor;
			ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);
			ctx.fillStyle = vm.backgroundColor || defaultColor;
			helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);
		}
	}
});

var defaultColor$2 = core_defaults.global.defaultColor;

core_defaults._set('global', {
	elements: {
		rectangle: {
			backgroundColor: defaultColor$2,
			borderColor: defaultColor$2,
			borderSkipped: 'bottom',
			borderWidth: 0
		}
	}
});

function isVertical(vm) {
	return vm && vm.width !== undefined;
}

/**
 * Helper function to get the bounds of the bar regardless of the orientation
 * @param bar {Chart.Element.Rectangle} the bar
 * @return {Bounds} bounds of the bar
 * @private
 */
function getBarBounds(vm) {
	var x1, x2, y1, y2, half;

	if (isVertical(vm)) {
		half = vm.width / 2;
		x1 = vm.x - half;
		x2 = vm.x + half;
		y1 = Math.min(vm.y, vm.base);
		y2 = Math.max(vm.y, vm.base);
	} else {
		half = vm.height / 2;
		x1 = Math.min(vm.x, vm.base);
		x2 = Math.max(vm.x, vm.base);
		y1 = vm.y - half;
		y2 = vm.y + half;
	}

	return {
		left: x1,
		top: y1,
		right: x2,
		bottom: y2
	};
}

function swap(orig, v1, v2) {
	return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}

function parseBorderSkipped(vm) {
	var edge = vm.borderSkipped;
	var res = {};

	if (!edge) {
		return res;
	}

	if (vm.horizontal) {
		if (vm.base > vm.x) {
			edge = swap(edge, 'left', 'right');
		}
	} else if (vm.base < vm.y) {
		edge = swap(edge, 'bottom', 'top');
	}

	res[edge] = true;
	return res;
}

function parseBorderWidth(vm, maxW, maxH) {
	var value = vm.borderWidth;
	var skip = parseBorderSkipped(vm);
	var t, r, b, l;

	if (helpers$1.isObject(value)) {
		t = +value.top || 0;
		r = +value.right || 0;
		b = +value.bottom || 0;
		l = +value.left || 0;
	} else {
		t = r = b = l = +value || 0;
	}

	return {
		t: skip.top || (t < 0) ? 0 : t > maxH ? maxH : t,
		r: skip.right || (r < 0) ? 0 : r > maxW ? maxW : r,
		b: skip.bottom || (b < 0) ? 0 : b > maxH ? maxH : b,
		l: skip.left || (l < 0) ? 0 : l > maxW ? maxW : l
	};
}

function boundingRects(vm) {
	var bounds = getBarBounds(vm);
	var width = bounds.right - bounds.left;
	var height = bounds.bottom - bounds.top;
	var border = parseBorderWidth(vm, width / 2, height / 2);

	return {
		outer: {
			x: bounds.left,
			y: bounds.top,
			w: width,
			h: height
		},
		inner: {
			x: bounds.left + border.l,
			y: bounds.top + border.t,
			w: width - border.l - border.r,
			h: height - border.t - border.b
		}
	};
}

function inRange(vm, x, y) {
	var skipX = x === null;
	var skipY = y === null;
	var bounds = !vm || (skipX && skipY) ? false : getBarBounds(vm);

	return bounds
		&& (skipX || x >= bounds.left && x <= bounds.right)
		&& (skipY || y >= bounds.top && y <= bounds.bottom);
}

var element_rectangle = core_element.extend({
	_type: 'rectangle',

	draw: function() {
		var ctx = this._chart.ctx;
		var vm = this._view;
		var rects = boundingRects(vm);
		var outer = rects.outer;
		var inner = rects.inner;

		ctx.fillStyle = vm.backgroundColor;
		ctx.fillRect(outer.x, outer.y, outer.w, outer.h);

		if (outer.w === inner.w && outer.h === inner.h) {
			return;
		}

		ctx.save();
		ctx.beginPath();
		ctx.rect(outer.x, outer.y, outer.w, outer.h);
		ctx.clip();
		ctx.fillStyle = vm.borderColor;
		ctx.rect(inner.x, inner.y, inner.w, inner.h);
		ctx.fill('evenodd');
		ctx.restore();
	},

	height: function() {
		var vm = this._view;
		return vm.base - vm.y;
	},

	inRange: function(mouseX, mouseY) {
		return inRange(this._view, mouseX, mouseY);
	},

	inLabelRange: function(mouseX, mouseY) {
		var vm = this._view;
		return isVertical(vm)
			? inRange(vm, mouseX, null)
			: inRange(vm, null, mouseY);
	},

	inXRange: function(mouseX) {
		return inRange(this._view, mouseX, null);
	},

	inYRange: function(mouseY) {
		return inRange(this._view, null, mouseY);
	},

	getCenterPoint: function() {
		var vm = this._view;
		var x, y;
		if (isVertical(vm)) {
			x = vm.x;
			y = (vm.y + vm.base) / 2;
		} else {
			x = (vm.x + vm.base) / 2;
			y = vm.y;
		}

		return {x: x, y: y};
	},

	getArea: function() {
		var vm = this._view;

		return isVertical(vm)
			? vm.width * Math.abs(vm.y - vm.base)
			: vm.height * Math.abs(vm.x - vm.base);
	},

	tooltipPosition: function() {
		var vm = this._view;
		return {
			x: vm.x,
			y: vm.y
		};
	}
});

var elements = {};
var Arc = element_arc;
var Line = element_line;
var Point = element_point;
var Rectangle = element_rectangle;
elements.Arc = Arc;
elements.Line = Line;
elements.Point = Point;
elements.Rectangle = Rectangle;

var deprecated = helpers$1._deprecated;
var valueOrDefault$3 = helpers$1.valueOrDefault;

core_defaults._set('bar', {
	hover: {
		mode: 'label'
	},

	scales: {
		xAxes: [{
			type: 'category',
			offset: true,
			gridLines: {
				offsetGridLines: true
			}
		}],

		yAxes: [{
			type: 'linear'
		}]
	}
});

core_defaults._set('global', {
	datasets: {
		bar: {
			categoryPercentage: 0.8,
			barPercentage: 0.9
		}
	}
});

/**
 * Computes the "optimal" sample size to maintain bars equally sized while preventing overlap.
 * @private
 */
function computeMinSampleSize(scale, pixels) {
	var min = scale._length;
	var prev, curr, i, ilen;

	for (i = 1, ilen = pixels.length; i < ilen; ++i) {
		min = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));
	}

	for (i = 0, ilen = scale.getTicks().length; i < ilen; ++i) {
		curr = scale.getPixelForTick(i);
		min = i > 0 ? Math.min(min, Math.abs(curr - prev)) : min;
		prev = curr;
	}

	return min;
}

/**
 * Computes an "ideal" category based on the absolute bar thickness or, if undefined or null,
 * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This
 * mode currently always generates bars equally sized (until we introduce scriptable options?).
 * @private
 */
function computeFitCategoryTraits(index, ruler, options) {
	var thickness = options.barThickness;
	var count = ruler.stackCount;
	var curr = ruler.pixels[index];
	var min = helpers$1.isNullOrUndef(thickness)
		? computeMinSampleSize(ruler.scale, ruler.pixels)
		: -1;
	var size, ratio;

	if (helpers$1.isNullOrUndef(thickness)) {
		size = min * options.categoryPercentage;
		ratio = options.barPercentage;
	} else {
		// When bar thickness is enforced, category and bar percentages are ignored.
		// Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')
		// and deprecate barPercentage since this value is ignored when thickness is absolute.
		size = thickness * count;
		ratio = 1;
	}

	return {
		chunk: size / count,
		ratio: ratio,
		start: curr - (size / 2)
	};
}

/**
 * Computes an "optimal" category that globally arranges bars side by side (no gap when
 * percentage options are 1), based on the previous and following categories. This mode
 * generates bars with different widths when data are not evenly spaced.
 * @private
 */
function computeFlexCategoryTraits(index, ruler, options) {
	var pixels = ruler.pixels;
	var curr = pixels[index];
	var prev = index > 0 ? pixels[index - 1] : null;
	var next = index < pixels.length - 1 ? pixels[index + 1] : null;
	var percent = options.categoryPercentage;
	var start, size;

	if (prev === null) {
		// first data: its size is double based on the next point or,
		// if it's also the last data, we use the scale size.
		prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
	}

	if (next === null) {
		// last data: its size is also double based on the previous point.
		next = curr + curr - prev;
	}

	start = curr - (curr - Math.min(prev, next)) / 2 * percent;
	size = Math.abs(next - prev) / 2 * percent;

	return {
		chunk: size / ruler.stackCount,
		ratio: options.barPercentage,
		start: start
	};
}

var controller_bar = core_datasetController.extend({

	dataElementType: elements.Rectangle,

	/**
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderSkipped',
		'borderWidth',
		'barPercentage',
		'barThickness',
		'categoryPercentage',
		'maxBarThickness',
		'minBarLength'
	],

	initialize: function() {
		var me = this;
		var meta, scaleOpts;

		core_datasetController.prototype.initialize.apply(me, arguments);

		meta = me.getMeta();
		meta.stack = me.getDataset().stack;
		meta.bar = true;

		scaleOpts = me._getIndexScale().options;
		deprecated('bar chart', scaleOpts.barPercentage, 'scales.[x/y]Axes.barPercentage', 'dataset.barPercentage');
		deprecated('bar chart', scaleOpts.barThickness, 'scales.[x/y]Axes.barThickness', 'dataset.barThickness');
		deprecated('bar chart', scaleOpts.categoryPercentage, 'scales.[x/y]Axes.categoryPercentage', 'dataset.categoryPercentage');
		deprecated('bar chart', me._getValueScale().options.minBarLength, 'scales.[x/y]Axes.minBarLength', 'dataset.minBarLength');
		deprecated('bar chart', scaleOpts.maxBarThickness, 'scales.[x/y]Axes.maxBarThickness', 'dataset.maxBarThickness');
	},

	update: function(reset) {
		var me = this;
		var rects = me.getMeta().data;
		var i, ilen;

		me._ruler = me.getRuler();

		for (i = 0, ilen = rects.length; i < ilen; ++i) {
			me.updateElement(rects[i], i, reset);
		}
	},

	updateElement: function(rectangle, index, reset) {
		var me = this;
		var meta = me.getMeta();
		var dataset = me.getDataset();
		var options = me._resolveDataElementOptions(rectangle, index);

		rectangle._xScale = me.getScaleForId(meta.xAxisID);
		rectangle._yScale = me.getScaleForId(meta.yAxisID);
		rectangle._datasetIndex = me.index;
		rectangle._index = index;
		rectangle._model = {
			backgroundColor: options.backgroundColor,
			borderColor: options.borderColor,
			borderSkipped: options.borderSkipped,
			borderWidth: options.borderWidth,
			datasetLabel: dataset.label,
			label: me.chart.data.labels[index]
		};

		if (helpers$1.isArray(dataset.data[index])) {
			rectangle._model.borderSkipped = null;
		}

		me._updateElementGeometry(rectangle, index, reset, options);

		rectangle.pivot();
	},

	/**
	 * @private
	 */
	_updateElementGeometry: function(rectangle, index, reset, options) {
		var me = this;
		var model = rectangle._model;
		var vscale = me._getValueScale();
		var base = vscale.getBasePixel();
		var horizontal = vscale.isHorizontal();
		var ruler = me._ruler || me.getRuler();
		var vpixels = me.calculateBarValuePixels(me.index, index, options);
		var ipixels = me.calculateBarIndexPixels(me.index, index, ruler, options);

		model.horizontal = horizontal;
		model.base = reset ? base : vpixels.base;
		model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;
		model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;
		model.height = horizontal ? ipixels.size : undefined;
		model.width = horizontal ? undefined : ipixels.size;
	},

	/**
	 * Returns the stacks based on groups and bar visibility.
	 * @param {number} [last] - The dataset index
	 * @returns {string[]} The list of stack IDs
	 * @private
	 */
	_getStacks: function(last) {
		var me = this;
		var scale = me._getIndexScale();
		var metasets = scale._getMatchingVisibleMetas(me._type);
		var stacked = scale.options.stacked;
		var ilen = metasets.length;
		var stacks = [];
		var i, meta;

		for (i = 0; i < ilen; ++i) {
			meta = metasets[i];
			// stacked   | meta.stack
			//           | found | not found | undefined
			// false     |   x   |     x     |     x
			// true      |       |     x     |
			// undefined |       |     x     |     x
			if (stacked === false || stacks.indexOf(meta.stack) === -1 ||
				(stacked === undefined && meta.stack === undefined)) {
				stacks.push(meta.stack);
			}
			if (meta.index === last) {
				break;
			}
		}

		return stacks;
	},

	/**
	 * Returns the effective number of stacks based on groups and bar visibility.
	 * @private
	 */
	getStackCount: function() {
		return this._getStacks().length;
	},

	/**
	 * Returns the stack index for the given dataset based on groups and bar visibility.
	 * @param {number} [datasetIndex] - The dataset index
	 * @param {string} [name] - The stack name to find
	 * @returns {number} The stack index
	 * @private
	 */
	getStackIndex: function(datasetIndex, name) {
		var stacks = this._getStacks(datasetIndex);
		var index = (name !== undefined)
			? stacks.indexOf(name)
			: -1; // indexOf returns -1 if element is not present

		return (index === -1)
			? stacks.length - 1
			: index;
	},

	/**
	 * @private
	 */
	getRuler: function() {
		var me = this;
		var scale = me._getIndexScale();
		var pixels = [];
		var i, ilen;

		for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {
			pixels.push(scale.getPixelForValue(null, i, me.index));
		}

		return {
			pixels: pixels,
			start: scale._startPixel,
			end: scale._endPixel,
			stackCount: me.getStackCount(),
			scale: scale
		};
	},

	/**
	 * Note: pixel values are not clamped to the scale area.
	 * @private
	 */
	calculateBarValuePixels: function(datasetIndex, index, options) {
		var me = this;
		var chart = me.chart;
		var scale = me._getValueScale();
		var isHorizontal = scale.isHorizontal();
		var datasets = chart.data.datasets;
		var metasets = scale._getMatchingVisibleMetas(me._type);
		var value = scale._parseValue(datasets[datasetIndex].data[index]);
		var minBarLength = options.minBarLength;
		var stacked = scale.options.stacked;
		var stack = me.getMeta().stack;
		var start = value.start === undefined ? 0 : value.max >= 0 && value.min >= 0 ? value.min : value.max;
		var length = value.start === undefined ? value.end : value.max >= 0 && value.min >= 0 ? value.max - value.min : value.min - value.max;
		var ilen = metasets.length;
		var i, imeta, ivalue, base, head, size, stackLength;

		if (stacked || (stacked === undefined && stack !== undefined)) {
			for (i = 0; i < ilen; ++i) {
				imeta = metasets[i];

				if (imeta.index === datasetIndex) {
					break;
				}

				if (imeta.stack === stack) {
					stackLength = scale._parseValue(datasets[imeta.index].data[index]);
					ivalue = stackLength.start === undefined ? stackLength.end : stackLength.min >= 0 && stackLength.max >= 0 ? stackLength.max : stackLength.min;

					if ((value.min < 0 && ivalue < 0) || (value.max >= 0 && ivalue > 0)) {
						start += ivalue;
					}
				}
			}
		}

		base = scale.getPixelForValue(start);
		head = scale.getPixelForValue(start + length);
		size = head - base;

		if (minBarLength !== undefined && Math.abs(size) < minBarLength) {
			size = minBarLength;
			if (length >= 0 && !isHorizontal || length < 0 && isHorizontal) {
				head = base - minBarLength;
			} else {
				head = base + minBarLength;
			}
		}

		return {
			size: size,
			base: base,
			head: head,
			center: head + size / 2
		};
	},

	/**
	 * @private
	 */
	calculateBarIndexPixels: function(datasetIndex, index, ruler, options) {
		var me = this;
		var range = options.barThickness === 'flex'
			? computeFlexCategoryTraits(index, ruler, options)
			: computeFitCategoryTraits(index, ruler, options);

		var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);
		var center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);
		var size = Math.min(
			valueOrDefault$3(options.maxBarThickness, Infinity),
			range.chunk * range.ratio);

		return {
			base: center - size / 2,
			head: center + size / 2,
			center: center,
			size: size
		};
	},

	draw: function() {
		var me = this;
		var chart = me.chart;
		var scale = me._getValueScale();
		var rects = me.getMeta().data;
		var dataset = me.getDataset();
		var ilen = rects.length;
		var i = 0;

		helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);

		for (; i < ilen; ++i) {
			var val = scale._parseValue(dataset.data[i]);
			if (!isNaN(val.min) && !isNaN(val.max)) {
				rects[i].draw();
			}
		}

		helpers$1.canvas.unclipArea(chart.ctx);
	},

	/**
	 * @private
	 */
	_resolveDataElementOptions: function() {
		var me = this;
		var values = helpers$1.extend({}, core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments));
		var indexOpts = me._getIndexScale().options;
		var valueOpts = me._getValueScale().options;

		values.barPercentage = valueOrDefault$3(indexOpts.barPercentage, values.barPercentage);
		values.barThickness = valueOrDefault$3(indexOpts.barThickness, values.barThickness);
		values.categoryPercentage = valueOrDefault$3(indexOpts.categoryPercentage, values.categoryPercentage);
		values.maxBarThickness = valueOrDefault$3(indexOpts.maxBarThickness, values.maxBarThickness);
		values.minBarLength = valueOrDefault$3(valueOpts.minBarLength, values.minBarLength);

		return values;
	}

});

var valueOrDefault$4 = helpers$1.valueOrDefault;
var resolve$1 = helpers$1.options.resolve;

core_defaults._set('bubble', {
	hover: {
		mode: 'single'
	},

	scales: {
		xAxes: [{
			type: 'linear', // bubble should probably use a linear scale by default
			position: 'bottom',
			id: 'x-axis-0' // need an ID so datasets can reference the scale
		}],
		yAxes: [{
			type: 'linear',
			position: 'left',
			id: 'y-axis-0'
		}]
	},

	tooltips: {
		callbacks: {
			title: function() {
				// Title doesn't make sense for scatter since we format the data as a point
				return '';
			},
			label: function(item, data) {
				var datasetLabel = data.datasets[item.datasetIndex].label || '';
				var dataPoint = data.datasets[item.datasetIndex].data[item.index];
				return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';
			}
		}
	}
});

var controller_bubble = core_datasetController.extend({
	/**
	 * @protected
	 */
	dataElementType: elements.Point,

	/**
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderWidth',
		'hoverBackgroundColor',
		'hoverBorderColor',
		'hoverBorderWidth',
		'hoverRadius',
		'hitRadius',
		'pointStyle',
		'rotation'
	],

	/**
	 * @protected
	 */
	update: function(reset) {
		var me = this;
		var meta = me.getMeta();
		var points = meta.data;

		// Update Points
		helpers$1.each(points, function(point, index) {
			me.updateElement(point, index, reset);
		});
	},

	/**
	 * @protected
	 */
	updateElement: function(point, index, reset) {
		var me = this;
		var meta = me.getMeta();
		var custom = point.custom || {};
		var xScale = me.getScaleForId(meta.xAxisID);
		var yScale = me.getScaleForId(meta.yAxisID);
		var options = me._resolveDataElementOptions(point, index);
		var data = me.getDataset().data[index];
		var dsIndex = me.index;

		var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);
		var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);

		point._xScale = xScale;
		point._yScale = yScale;
		point._options = options;
		point._datasetIndex = dsIndex;
		point._index = index;
		point._model = {
			backgroundColor: options.backgroundColor,
			borderColor: options.borderColor,
			borderWidth: options.borderWidth,
			hitRadius: options.hitRadius,
			pointStyle: options.pointStyle,
			rotation: options.rotation,
			radius: reset ? 0 : options.radius,
			skip: custom.skip || isNaN(x) || isNaN(y),
			x: x,
			y: y,
		};

		point.pivot();
	},

	/**
	 * @protected
	 */
	setHoverStyle: function(point) {
		var model = point._model;
		var options = point._options;
		var getHoverColor = helpers$1.getHoverColor;

		point.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
			radius: model.radius
		};

		model.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);
		model.radius = options.radius + options.hoverRadius;
	},

	/**
	 * @private
	 */
	_resolveDataElementOptions: function(point, index) {
		var me = this;
		var chart = me.chart;
		var dataset = me.getDataset();
		var custom = point.custom || {};
		var data = dataset.data[index] || {};
		var values = core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments);

		// Scriptable options
		var context = {
			chart: chart,
			dataIndex: index,
			dataset: dataset,
			datasetIndex: me.index
		};

		// In case values were cached (and thus frozen), we need to clone the values
		if (me._cachedDataOpts === values) {
			values = helpers$1.extend({}, values);
		}

		// Custom radius resolution
		values.radius = resolve$1([
			custom.radius,
			data.r,
			me._config.radius,
			chart.options.elements.point.radius
		], context, index);

		return values;
	}
});

var valueOrDefault$5 = helpers$1.valueOrDefault;

var PI$1 = Math.PI;
var DOUBLE_PI$1 = PI$1 * 2;
var HALF_PI$1 = PI$1 / 2;

core_defaults._set('doughnut', {
	animation: {
		// Boolean - Whether we animate the rotation of the Doughnut
		animateRotate: true,
		// Boolean - Whether we animate scaling the Doughnut from the centre
		animateScale: false
	},
	hover: {
		mode: 'single'
	},
	legendCallback: function(chart) {
		var list = document.createElement('ul');
		var data = chart.data;
		var datasets = data.datasets;
		var labels = data.labels;
		var i, ilen, listItem, listItemSpan;

		list.setAttribute('class', chart.id + '-legend');
		if (datasets.length) {
			for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
				listItem = list.appendChild(document.createElement('li'));
				listItemSpan = listItem.appendChild(document.createElement('span'));
				listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
				if (labels[i]) {
					listItem.appendChild(document.createTextNode(labels[i]));
				}
			}
		}

		return list.outerHTML;
	},
	legend: {
		labels: {
			generateLabels: function(chart) {
				var data = chart.data;
				if (data.labels.length && data.datasets.length) {
					return data.labels.map(function(label, i) {
						var meta = chart.getDatasetMeta(0);
						var style = meta.controller.getStyle(i);

						return {
							text: label,
							fillStyle: style.backgroundColor,
							strokeStyle: style.borderColor,
							lineWidth: style.borderWidth,
							hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,

							// Extra data used for toggling the correct item
							index: i
						};
					});
				}
				return [];
			}
		},

		onClick: function(e, legendItem) {
			var index = legendItem.index;
			var chart = this.chart;
			var i, ilen, meta;

			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
				meta = chart.getDatasetMeta(i);
				// toggle visibility of index if exists
				if (meta.data[index]) {
					meta.data[index].hidden = !meta.data[index].hidden;
				}
			}

			chart.update();
		}
	},

	// The percentage of the chart that we cut out of the middle.
	cutoutPercentage: 50,

	// The rotation of the chart, where the first data arc begins.
	rotation: -HALF_PI$1,

	// The total circumference of the chart.
	circumference: DOUBLE_PI$1,

	// Need to override these to give a nice default
	tooltips: {
		callbacks: {
			title: function() {
				return '';
			},
			label: function(tooltipItem, data) {
				var dataLabel = data.labels[tooltipItem.index];
				var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];

				if (helpers$1.isArray(dataLabel)) {
					// show value on first line of multiline label
					// need to clone because we are changing the value
					dataLabel = dataLabel.slice();
					dataLabel[0] += value;
				} else {
					dataLabel += value;
				}

				return dataLabel;
			}
		}
	}
});

var controller_doughnut = core_datasetController.extend({

	dataElementType: elements.Arc,

	linkScales: helpers$1.noop,

	/**
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderWidth',
		'borderAlign',
		'hoverBackgroundColor',
		'hoverBorderColor',
		'hoverBorderWidth',
	],

	// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
	getRingIndex: function(datasetIndex) {
		var ringIndex = 0;

		for (var j = 0; j < datasetIndex; ++j) {
			if (this.chart.isDatasetVisible(j)) {
				++ringIndex;
			}
		}

		return ringIndex;
	},

	update: function(reset) {
		var me = this;
		var chart = me.chart;
		var chartArea = chart.chartArea;
		var opts = chart.options;
		var ratioX = 1;
		var ratioY = 1;
		var offsetX = 0;
		var offsetY = 0;
		var meta = me.getMeta();
		var arcs = meta.data;
		var cutout = opts.cutoutPercentage / 100 || 0;
		var circumference = opts.circumference;
		var chartWeight = me._getRingWeight(me.index);
		var maxWidth, maxHeight, i, ilen;

		// If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc
		if (circumference < DOUBLE_PI$1) {
			var startAngle = opts.rotation % DOUBLE_PI$1;
			startAngle += startAngle >= PI$1 ? -DOUBLE_PI$1 : startAngle < -PI$1 ? DOUBLE_PI$1 : 0;
			var endAngle = startAngle + circumference;
			var startX = Math.cos(startAngle);
			var startY = Math.sin(startAngle);
			var endX = Math.cos(endAngle);
			var endY = Math.sin(endAngle);
			var contains0 = (startAngle <= 0 && endAngle >= 0) || endAngle >= DOUBLE_PI$1;
			var contains90 = (startAngle <= HALF_PI$1 && endAngle >= HALF_PI$1) || endAngle >= DOUBLE_PI$1 + HALF_PI$1;
			var contains180 = startAngle === -PI$1 || endAngle >= PI$1;
			var contains270 = (startAngle <= -HALF_PI$1 && endAngle >= -HALF_PI$1) || endAngle >= PI$1 + HALF_PI$1;
			var minX = contains180 ? -1 : Math.min(startX, startX * cutout, endX, endX * cutout);
			var minY = contains270 ? -1 : Math.min(startY, startY * cutout, endY, endY * cutout);
			var maxX = contains0 ? 1 : Math.max(startX, startX * cutout, endX, endX * cutout);
			var maxY = contains90 ? 1 : Math.max(startY, startY * cutout, endY, endY * cutout);
			ratioX = (maxX - minX) / 2;
			ratioY = (maxY - minY) / 2;
			offsetX = -(maxX + minX) / 2;
			offsetY = -(maxY + minY) / 2;
		}

		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
			arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
		}

		chart.borderWidth = me.getMaxBorderWidth();
		maxWidth = (chartArea.right - chartArea.left - chart.borderWidth) / ratioX;
		maxHeight = (chartArea.bottom - chartArea.top - chart.borderWidth) / ratioY;
		chart.outerRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
		chart.innerRadius = Math.max(chart.outerRadius * cutout, 0);
		chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);
		chart.offsetX = offsetX * chart.outerRadius;
		chart.offsetY = offsetY * chart.outerRadius;

		meta.total = me.calculateTotal();

		me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);
		me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);

		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
			me.updateElement(arcs[i], i, reset);
		}
	},

	updateElement: function(arc, index, reset) {
		var me = this;
		var chart = me.chart;
		var chartArea = chart.chartArea;
		var opts = chart.options;
		var animationOpts = opts.animation;
		var centerX = (chartArea.left + chartArea.right) / 2;
		var centerY = (chartArea.top + chartArea.bottom) / 2;
		var startAngle = opts.rotation; // non reset case handled later
		var endAngle = opts.rotation; // non reset case handled later
		var dataset = me.getDataset();
		var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / DOUBLE_PI$1);
		var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
		var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
		var options = arc._options || {};

		helpers$1.extend(arc, {
			// Utility
			_datasetIndex: me.index,
			_index: index,

			// Desired view properties
			_model: {
				backgroundColor: options.backgroundColor,
				borderColor: options.borderColor,
				borderWidth: options.borderWidth,
				borderAlign: options.borderAlign,
				x: centerX + chart.offsetX,
				y: centerY + chart.offsetY,
				startAngle: startAngle,
				endAngle: endAngle,
				circumference: circumference,
				outerRadius: outerRadius,
				innerRadius: innerRadius,
				label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
			}
		});

		var model = arc._model;

		// Set correct angles if not resetting
		if (!reset || !animationOpts.animateRotate) {
			if (index === 0) {
				model.startAngle = opts.rotation;
			} else {
				model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
			}

			model.endAngle = model.startAngle + model.circumference;
		}

		arc.pivot();
	},

	calculateTotal: function() {
		var dataset = this.getDataset();
		var meta = this.getMeta();
		var total = 0;
		var value;

		helpers$1.each(meta.data, function(element, index) {
			value = dataset.data[index];
			if (!isNaN(value) && !element.hidden) {
				total += Math.abs(value);
			}
		});

		/* if (total === 0) {
			total = NaN;
		}*/

		return total;
	},

	calculateCircumference: function(value) {
		var total = this.getMeta().total;
		if (total > 0 && !isNaN(value)) {
			return DOUBLE_PI$1 * (Math.abs(value) / total);
		}
		return 0;
	},

	// gets the max border or hover width to properly scale pie charts
	getMaxBorderWidth: function(arcs) {
		var me = this;
		var max = 0;
		var chart = me.chart;
		var i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;

		if (!arcs) {
			// Find the outmost visible dataset
			for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
				if (chart.isDatasetVisible(i)) {
					meta = chart.getDatasetMeta(i);
					arcs = meta.data;
					if (i !== me.index) {
						controller = meta.controller;
					}
					break;
				}
			}
		}

		if (!arcs) {
			return 0;
		}

		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
			arc = arcs[i];
			if (controller) {
				controller._configure();
				options = controller._resolveDataElementOptions(arc, i);
			} else {
				options = arc._options;
			}
			if (options.borderAlign !== 'inner') {
				borderWidth = options.borderWidth;
				hoverWidth = options.hoverBorderWidth;

				max = borderWidth > max ? borderWidth : max;
				max = hoverWidth > max ? hoverWidth : max;
			}
		}
		return max;
	},

	/**
	 * @protected
	 */
	setHoverStyle: function(arc) {
		var model = arc._model;
		var options = arc._options;
		var getHoverColor = helpers$1.getHoverColor;

		arc.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
		};

		model.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);
	},

	/**
	 * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly
	 * @private
	 */
	_getRingWeightOffset: function(datasetIndex) {
		var ringWeightOffset = 0;

		for (var i = 0; i < datasetIndex; ++i) {
			if (this.chart.isDatasetVisible(i)) {
				ringWeightOffset += this._getRingWeight(i);
			}
		}

		return ringWeightOffset;
	},

	/**
	 * @private
	 */
	_getRingWeight: function(dataSetIndex) {
		return Math.max(valueOrDefault$5(this.chart.data.datasets[dataSetIndex].weight, 1), 0);
	},

	/**
	 * Returns the sum of all visibile data set weights.  This value can be 0.
	 * @private
	 */
	_getVisibleDatasetWeightTotal: function() {
		return this._getRingWeightOffset(this.chart.data.datasets.length);
	}
});

core_defaults._set('horizontalBar', {
	hover: {
		mode: 'index',
		axis: 'y'
	},

	scales: {
		xAxes: [{
			type: 'linear',
			position: 'bottom'
		}],

		yAxes: [{
			type: 'category',
			position: 'left',
			offset: true,
			gridLines: {
				offsetGridLines: true
			}
		}]
	},

	elements: {
		rectangle: {
			borderSkipped: 'left'
		}
	},

	tooltips: {
		mode: 'index',
		axis: 'y'
	}
});

core_defaults._set('global', {
	datasets: {
		horizontalBar: {
			categoryPercentage: 0.8,
			barPercentage: 0.9
		}
	}
});

var controller_horizontalBar = controller_bar.extend({
	/**
	 * @private
	 */
	_getValueScaleId: function() {
		return this.getMeta().xAxisID;
	},

	/**
	 * @private
	 */
	_getIndexScaleId: function() {
		return this.getMeta().yAxisID;
	}
});

var valueOrDefault$6 = helpers$1.valueOrDefault;
var resolve$2 = helpers$1.options.resolve;
var isPointInArea = helpers$1.canvas._isPointInArea;

core_defaults._set('line', {
	showLines: true,
	spanGaps: false,

	hover: {
		mode: 'label'
	},

	scales: {
		xAxes: [{
			type: 'category',
			id: 'x-axis-0'
		}],
		yAxes: [{
			type: 'linear',
			id: 'y-axis-0'
		}]
	}
});

function scaleClip(scale, halfBorderWidth) {
	var tickOpts = scale && scale.options.ticks || {};
	var reverse = tickOpts.reverse;
	var min = tickOpts.min === undefined ? halfBorderWidth : 0;
	var max = tickOpts.max === undefined ? halfBorderWidth : 0;
	return {
		start: reverse ? max : min,
		end: reverse ? min : max
	};
}

function defaultClip(xScale, yScale, borderWidth) {
	var halfBorderWidth = borderWidth / 2;
	var x = scaleClip(xScale, halfBorderWidth);
	var y = scaleClip(yScale, halfBorderWidth);

	return {
		top: y.end,
		right: x.end,
		bottom: y.start,
		left: x.start
	};
}

function toClip(value) {
	var t, r, b, l;

	if (helpers$1.isObject(value)) {
		t = value.top;
		r = value.right;
		b = value.bottom;
		l = value.left;
	} else {
		t = r = b = l = value;
	}

	return {
		top: t,
		right: r,
		bottom: b,
		left: l
	};
}


var controller_line = core_datasetController.extend({

	datasetElementType: elements.Line,

	dataElementType: elements.Point,

	/**
	 * @private
	 */
	_datasetElementOptions: [
		'backgroundColor',
		'borderCapStyle',
		'borderColor',
		'borderDash',
		'borderDashOffset',
		'borderJoinStyle',
		'borderWidth',
		'cubicInterpolationMode',
		'fill'
	],

	/**
	 * @private
	 */
	_dataElementOptions: {
		backgroundColor: 'pointBackgroundColor',
		borderColor: 'pointBorderColor',
		borderWidth: 'pointBorderWidth',
		hitRadius: 'pointHitRadius',
		hoverBackgroundColor: 'pointHoverBackgroundColor',
		hoverBorderColor: 'pointHoverBorderColor',
		hoverBorderWidth: 'pointHoverBorderWidth',
		hoverRadius: 'pointHoverRadius',
		pointStyle: 'pointStyle',
		radius: 'pointRadius',
		rotation: 'pointRotation'
	},

	update: function(reset) {
		var me = this;
		var meta = me.getMeta();
		var line = meta.dataset;
		var points = meta.data || [];
		var options = me.chart.options;
		var config = me._config;
		var showLine = me._showLine = valueOrDefault$6(config.showLine, options.showLines);
		var i, ilen;

		me._xScale = me.getScaleForId(meta.xAxisID);
		me._yScale = me.getScaleForId(meta.yAxisID);

		// Update Line
		if (showLine) {
			// Compatibility: If the properties are defined with only the old name, use those values
			if (config.tension !== undefined && config.lineTension === undefined) {
				config.lineTension = config.tension;
			}

			// Utility
			line._scale = me._yScale;
			line._datasetIndex = me.index;
			// Data
			line._children = points;
			// Model
			line._model = me._resolveDatasetElementOptions(line);

			line.pivot();
		}

		// Update Points
		for (i = 0, ilen = points.length; i < ilen; ++i) {
			me.updateElement(points[i], i, reset);
		}

		if (showLine && line._model.tension !== 0) {
			me.updateBezierControlPoints();
		}

		// Now pivot the point for animation
		for (i = 0, ilen = points.length; i < ilen; ++i) {
			points[i].pivot();
		}
	},

	updateElement: function(point, index, reset) {
		var me = this;
		var meta = me.getMeta();
		var custom = point.custom || {};
		var dataset = me.getDataset();
		var datasetIndex = me.index;
		var value = dataset.data[index];
		var xScale = me._xScale;
		var yScale = me._yScale;
		var lineModel = meta.dataset._model;
		var x, y;

		var options = me._resolveDataElementOptions(point, index);

		x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);
		y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);

		// Utility
		point._xScale = xScale;
		point._yScale = yScale;
		point._options = options;
		point._datasetIndex = datasetIndex;
		point._index = index;

		// Desired view properties
		point._model = {
			x: x,
			y: y,
			skip: custom.skip || isNaN(x) || isNaN(y),
			// Appearance
			radius: options.radius,
			pointStyle: options.pointStyle,
			rotation: options.rotation,
			backgroundColor: options.backgroundColor,
			borderColor: options.borderColor,
			borderWidth: options.borderWidth,
			tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),
			steppedLine: lineModel ? lineModel.steppedLine : false,
			// Tooltip
			hitRadius: options.hitRadius
		};
	},

	/**
	 * @private
	 */
	_resolveDatasetElementOptions: function(element) {
		var me = this;
		var config = me._config;
		var custom = element.custom || {};
		var options = me.chart.options;
		var lineOptions = options.elements.line;
		var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);

		// The default behavior of lines is to break at null values, according
		// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
		// This option gives lines the ability to span gaps
		values.spanGaps = valueOrDefault$6(config.spanGaps, options.spanGaps);
		values.tension = valueOrDefault$6(config.lineTension, lineOptions.tension);
		values.steppedLine = resolve$2([custom.steppedLine, config.steppedLine, lineOptions.stepped]);
		values.clip = toClip(valueOrDefault$6(config.clip, defaultClip(me._xScale, me._yScale, values.borderWidth)));

		return values;
	},

	calculatePointY: function(value, index, datasetIndex) {
		var me = this;
		var chart = me.chart;
		var yScale = me._yScale;
		var sumPos = 0;
		var sumNeg = 0;
		var i, ds, dsMeta, stackedRightValue, rightValue, metasets, ilen;

		if (yScale.options.stacked) {
			rightValue = +yScale.getRightValue(value);
			metasets = chart._getSortedVisibleDatasetMetas();
			ilen = metasets.length;

			for (i = 0; i < ilen; ++i) {
				dsMeta = metasets[i];
				if (dsMeta.index === datasetIndex) {
					break;
				}

				ds = chart.data.datasets[dsMeta.index];
				if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id) {
					stackedRightValue = +yScale.getRightValue(ds.data[index]);
					if (stackedRightValue < 0) {
						sumNeg += stackedRightValue || 0;
					} else {
						sumPos += stackedRightValue || 0;
					}
				}
			}

			if (rightValue < 0) {
				return yScale.getPixelForValue(sumNeg + rightValue);
			}
			return yScale.getPixelForValue(sumPos + rightValue);
		}
		return yScale.getPixelForValue(value);
	},

	updateBezierControlPoints: function() {
		var me = this;
		var chart = me.chart;
		var meta = me.getMeta();
		var lineModel = meta.dataset._model;
		var area = chart.chartArea;
		var points = meta.data || [];
		var i, ilen, model, controlPoints;

		// Only consider points that are drawn in case the spanGaps option is used
		if (lineModel.spanGaps) {
			points = points.filter(function(pt) {
				return !pt._model.skip;
			});
		}

		function capControlPoint(pt, min, max) {
			return Math.max(Math.min(pt, max), min);
		}

		if (lineModel.cubicInterpolationMode === 'monotone') {
			helpers$1.splineCurveMonotone(points);
		} else {
			for (i = 0, ilen = points.length; i < ilen; ++i) {
				model = points[i]._model;
				controlPoints = helpers$1.splineCurve(
					helpers$1.previousItem(points, i)._model,
					model,
					helpers$1.nextItem(points, i)._model,
					lineModel.tension
				);
				model.controlPointPreviousX = controlPoints.previous.x;
				model.controlPointPreviousY = controlPoints.previous.y;
				model.controlPointNextX = controlPoints.next.x;
				model.controlPointNextY = controlPoints.next.y;
			}
		}

		if (chart.options.elements.line.capBezierPoints) {
			for (i = 0, ilen = points.length; i < ilen; ++i) {
				model = points[i]._model;
				if (isPointInArea(model, area)) {
					if (i > 0 && isPointInArea(points[i - 1]._model, area)) {
						model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
						model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
					}
					if (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {
						model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
						model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
					}
				}
			}
		}
	},

	draw: function() {
		var me = this;
		var chart = me.chart;
		var meta = me.getMeta();
		var points = meta.data || [];
		var area = chart.chartArea;
		var canvas = chart.canvas;
		var i = 0;
		var ilen = points.length;
		var clip;

		if (me._showLine) {
			clip = meta.dataset._model.clip;

			helpers$1.canvas.clipArea(chart.ctx, {
				left: clip.left === false ? 0 : area.left - clip.left,
				right: clip.right === false ? canvas.width : area.right + clip.right,
				top: clip.top === false ? 0 : area.top - clip.top,
				bottom: clip.bottom === false ? canvas.height : area.bottom + clip.bottom
			});

			meta.dataset.draw();

			helpers$1.canvas.unclipArea(chart.ctx);
		}

		// Draw the points
		for (; i < ilen; ++i) {
			points[i].draw(area);
		}
	},

	/**
	 * @protected
	 */
	setHoverStyle: function(point) {
		var model = point._model;
		var options = point._options;
		var getHoverColor = helpers$1.getHoverColor;

		point.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
			radius: model.radius
		};

		model.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);
		model.radius = valueOrDefault$6(options.hoverRadius, options.radius);
	},
});

var resolve$3 = helpers$1.options.resolve;

core_defaults._set('polarArea', {
	scale: {
		type: 'radialLinear',
		angleLines: {
			display: false
		},
		gridLines: {
			circular: true
		},
		pointLabels: {
			display: false
		},
		ticks: {
			beginAtZero: true
		}
	},

	// Boolean - Whether to animate the rotation of the chart
	animation: {
		animateRotate: true,
		animateScale: true
	},

	startAngle: -0.5 * Math.PI,
	legendCallback: function(chart) {
		var list = document.createElement('ul');
		var data = chart.data;
		var datasets = data.datasets;
		var labels = data.labels;
		var i, ilen, listItem, listItemSpan;

		list.setAttribute('class', chart.id + '-legend');
		if (datasets.length) {
			for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
				listItem = list.appendChild(document.createElement('li'));
				listItemSpan = listItem.appendChild(document.createElement('span'));
				listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
				if (labels[i]) {
					listItem.appendChild(document.createTextNode(labels[i]));
				}
			}
		}

		return list.outerHTML;
	},
	legend: {
		labels: {
			generateLabels: function(chart) {
				var data = chart.data;
				if (data.labels.length && data.datasets.length) {
					return data.labels.map(function(label, i) {
						var meta = chart.getDatasetMeta(0);
						var style = meta.controller.getStyle(i);

						return {
							text: label,
							fillStyle: style.backgroundColor,
							strokeStyle: style.borderColor,
							lineWidth: style.borderWidth,
							hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,

							// Extra data used for toggling the correct item
							index: i
						};
					});
				}
				return [];
			}
		},

		onClick: function(e, legendItem) {
			var index = legendItem.index;
			var chart = this.chart;
			var i, ilen, meta;

			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
				meta = chart.getDatasetMeta(i);
				meta.data[index].hidden = !meta.data[index].hidden;
			}

			chart.update();
		}
	},

	// Need to override these to give a nice default
	tooltips: {
		callbacks: {
			title: function() {
				return '';
			},
			label: function(item, data) {
				return data.labels[item.index] + ': ' + item.yLabel;
			}
		}
	}
});

var controller_polarArea = core_datasetController.extend({

	dataElementType: elements.Arc,

	linkScales: helpers$1.noop,

	/**
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderWidth',
		'borderAlign',
		'hoverBackgroundColor',
		'hoverBorderColor',
		'hoverBorderWidth',
	],

	/**
	 * @private
	 */
	_getIndexScaleId: function() {
		return this.chart.scale.id;
	},

	/**
	 * @private
	 */
	_getValueScaleId: function() {
		return this.chart.scale.id;
	},

	update: function(reset) {
		var me = this;
		var dataset = me.getDataset();
		var meta = me.getMeta();
		var start = me.chart.options.startAngle || 0;
		var starts = me._starts = [];
		var angles = me._angles = [];
		var arcs = meta.data;
		var i, ilen, angle;

		me._updateRadius();

		meta.count = me.countVisibleElements();

		for (i = 0, ilen = dataset.data.length; i < ilen; i++) {
			starts[i] = start;
			angle = me._computeAngle(i);
			angles[i] = angle;
			start += angle;
		}

		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
			arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
			me.updateElement(arcs[i], i, reset);
		}
	},

	/**
	 * @private
	 */
	_updateRadius: function() {
		var me = this;
		var chart = me.chart;
		var chartArea = chart.chartArea;
		var opts = chart.options;
		var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);

		chart.outerRadius = Math.max(minSize / 2, 0);
		chart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
		chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();

		me.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);
		me.innerRadius = me.outerRadius - chart.radiusLength;
	},

	updateElement: function(arc, index, reset) {
		var me = this;
		var chart = me.chart;
		var dataset = me.getDataset();
		var opts = chart.options;
		var animationOpts = opts.animation;
		var scale = chart.scale;
		var labels = chart.data.labels;

		var centerX = scale.xCenter;
		var centerY = scale.yCenter;

		// var negHalfPI = -0.5 * Math.PI;
		var datasetStartAngle = opts.startAngle;
		var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
		var startAngle = me._starts[index];
		var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);

		var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
		var options = arc._options || {};

		helpers$1.extend(arc, {
			// Utility
			_datasetIndex: me.index,
			_index: index,
			_scale: scale,

			// Desired view properties
			_model: {
				backgroundColor: options.backgroundColor,
				borderColor: options.borderColor,
				borderWidth: options.borderWidth,
				borderAlign: options.borderAlign,
				x: centerX,
				y: centerY,
				innerRadius: 0,
				outerRadius: reset ? resetRadius : distance,
				startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
				endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
				label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])
			}
		});

		arc.pivot();
	},

	countVisibleElements: function() {
		var dataset = this.getDataset();
		var meta = this.getMeta();
		var count = 0;

		helpers$1.each(meta.data, function(element, index) {
			if (!isNaN(dataset.data[index]) && !element.hidden) {
				count++;
			}
		});

		return count;
	},

	/**
	 * @protected
	 */
	setHoverStyle: function(arc) {
		var model = arc._model;
		var options = arc._options;
		var getHoverColor = helpers$1.getHoverColor;
		var valueOrDefault = helpers$1.valueOrDefault;

		arc.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
		};

		model.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);
	},

	/**
	 * @private
	 */
	_computeAngle: function(index) {
		var me = this;
		var count = this.getMeta().count;
		var dataset = me.getDataset();
		var meta = me.getMeta();

		if (isNaN(dataset.data[index]) || meta.data[index].hidden) {
			return 0;
		}

		// Scriptable options
		var context = {
			chart: me.chart,
			dataIndex: index,
			dataset: dataset,
			datasetIndex: me.index
		};

		return resolve$3([
			me.chart.options.elements.arc.angle,
			(2 * Math.PI) / count
		], context, index);
	}
});

core_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));
core_defaults._set('pie', {
	cutoutPercentage: 0
});

// Pie charts are Doughnut chart with different defaults
var controller_pie = controller_doughnut;

var valueOrDefault$7 = helpers$1.valueOrDefault;

core_defaults._set('radar', {
	spanGaps: false,
	scale: {
		type: 'radialLinear'
	},
	elements: {
		line: {
			fill: 'start',
			tension: 0 // no bezier in radar
		}
	}
});

var controller_radar = core_datasetController.extend({
	datasetElementType: elements.Line,

	dataElementType: elements.Point,

	linkScales: helpers$1.noop,

	/**
	 * @private
	 */
	_datasetElementOptions: [
		'backgroundColor',
		'borderWidth',
		'borderColor',
		'borderCapStyle',
		'borderDash',
		'borderDashOffset',
		'borderJoinStyle',
		'fill'
	],

	/**
	 * @private
	 */
	_dataElementOptions: {
		backgroundColor: 'pointBackgroundColor',
		borderColor: 'pointBorderColor',
		borderWidth: 'pointBorderWidth',
		hitRadius: 'pointHitRadius',
		hoverBackgroundColor: 'pointHoverBackgroundColor',
		hoverBorderColor: 'pointHoverBorderColor',
		hoverBorderWidth: 'pointHoverBorderWidth',
		hoverRadius: 'pointHoverRadius',
		pointStyle: 'pointStyle',
		radius: 'pointRadius',
		rotation: 'pointRotation'
	},

	/**
	 * @private
	 */
	_getIndexScaleId: function() {
		return this.chart.scale.id;
	},

	/**
	 * @private
	 */
	_getValueScaleId: function() {
		return this.chart.scale.id;
	},

	update: function(reset) {
		var me = this;
		var meta = me.getMeta();
		var line = meta.dataset;
		var points = meta.data || [];
		var scale = me.chart.scale;
		var config = me._config;
		var i, ilen;

		// Compatibility: If the properties are defined with only the old name, use those values
		if (config.tension !== undefined && config.lineTension === undefined) {
			config.lineTension = config.tension;
		}

		// Utility
		line._scale = scale;
		line._datasetIndex = me.index;
		// Data
		line._children = points;
		line._loop = true;
		// Model
		line._model = me._resolveDatasetElementOptions(line);

		line.pivot();

		// Update Points
		for (i = 0, ilen = points.length; i < ilen; ++i) {
			me.updateElement(points[i], i, reset);
		}

		// Update bezier control points
		me.updateBezierControlPoints();

		// Now pivot the point for animation
		for (i = 0, ilen = points.length; i < ilen; ++i) {
			points[i].pivot();
		}
	},

	updateElement: function(point, index, reset) {
		var me = this;
		var custom = point.custom || {};
		var dataset = me.getDataset();
		var scale = me.chart.scale;
		var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
		var options = me._resolveDataElementOptions(point, index);
		var lineModel = me.getMeta().dataset._model;
		var x = reset ? scale.xCenter : pointPosition.x;
		var y = reset ? scale.yCenter : pointPosition.y;

		// Utility
		point._scale = scale;
		point._options = options;
		point._datasetIndex = me.index;
		point._index = index;

		// Desired view properties
		point._model = {
			x: x, // value not used in dataset scale, but we want a consistent API between scales
			y: y,
			skip: custom.skip || isNaN(x) || isNaN(y),
			// Appearance
			radius: options.radius,
			pointStyle: options.pointStyle,
			rotation: options.rotation,
			backgroundColor: options.backgroundColor,
			borderColor: options.borderColor,
			borderWidth: options.borderWidth,
			tension: valueOrDefault$7(custom.tension, lineModel ? lineModel.tension : 0),

			// Tooltip
			hitRadius: options.hitRadius
		};
	},

	/**
	 * @private
	 */
	_resolveDatasetElementOptions: function() {
		var me = this;
		var config = me._config;
		var options = me.chart.options;
		var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);

		values.spanGaps = valueOrDefault$7(config.spanGaps, options.spanGaps);
		values.tension = valueOrDefault$7(config.lineTension, options.elements.line.tension);

		return values;
	},

	updateBezierControlPoints: function() {
		var me = this;
		var meta = me.getMeta();
		var area = me.chart.chartArea;
		var points = meta.data || [];
		var i, ilen, model, controlPoints;

		// Only consider points that are drawn in case the spanGaps option is used
		if (meta.dataset._model.spanGaps) {
			points = points.filter(function(pt) {
				return !pt._model.skip;
			});
		}

		function capControlPoint(pt, min, max) {
			return Math.max(Math.min(pt, max), min);
		}

		for (i = 0, ilen = points.length; i < ilen; ++i) {
			model = points[i]._model;
			controlPoints = helpers$1.splineCurve(
				helpers$1.previousItem(points, i, true)._model,
				model,
				helpers$1.nextItem(points, i, true)._model,
				model.tension
			);

			// Prevent the bezier going outside of the bounds of the graph
			model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);
			model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);
			model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);
			model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);
		}
	},

	setHoverStyle: function(point) {
		var model = point._model;
		var options = point._options;
		var getHoverColor = helpers$1.getHoverColor;

		point.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
			radius: model.radius
		};

		model.backgroundColor = valueOrDefault$7(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault$7(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault$7(options.hoverBorderWidth, options.borderWidth);
		model.radius = valueOrDefault$7(options.hoverRadius, options.radius);
	}
});

core_defaults._set('scatter', {
	hover: {
		mode: 'single'
	},

	scales: {
		xAxes: [{
			id: 'x-axis-1',    // need an ID so datasets can reference the scale
			type: 'linear',    // scatter should not use a category axis
			position: 'bottom'
		}],
		yAxes: [{
			id: 'y-axis-1',
			type: 'linear',
			position: 'left'
		}]
	},

	tooltips: {
		callbacks: {
			title: function() {
				return '';     // doesn't make sense for scatter since data are formatted as a point
			},
			label: function(item) {
				return '(' + item.xLabel + ', ' + item.yLabel + ')';
			}
		}
	}
});

core_defaults._set('global', {
	datasets: {
		scatter: {
			showLine: false
		}
	}
});

// Scatter charts use line controllers
var controller_scatter = controller_line;

// NOTE export a map in which the key represents the controller type, not
// the class, and so must be CamelCase in order to be correctly retrieved
// by the controller in core.controller.js (`controllers[meta.type]`).

var controllers = {
	bar: controller_bar,
	bubble: controller_bubble,
	doughnut: controller_doughnut,
	horizontalBar: controller_horizontalBar,
	line: controller_line,
	polarArea: controller_polarArea,
	pie: controller_pie,
	radar: controller_radar,
	scatter: controller_scatter
};

/**
 * Helper function to get relative position for an event
 * @param {Event|IEvent} event - The event to get the position for
 * @param {Chart} chart - The chart
 * @returns {object} the event position
 */
function getRelativePosition(e, chart) {
	if (e.native) {
		return {
			x: e.x,
			y: e.y
		};
	}

	return helpers$1.getRelativePosition(e, chart);
}

/**
 * Helper function to traverse all of the visible elements in the chart
 * @param {Chart} chart - the chart
 * @param {function} handler - the callback to execute for each visible item
 */
function parseVisibleItems(chart, handler) {
	var metasets = chart._getSortedVisibleDatasetMetas();
	var metadata, i, j, ilen, jlen, element;

	for (i = 0, ilen = metasets.length; i < ilen; ++i) {
		metadata = metasets[i].data;
		for (j = 0, jlen = metadata.length; j < jlen; ++j) {
			element = metadata[j];
			if (!element._view.skip) {
				handler(element);
			}
		}
	}
}

/**
 * Helper function to get the items that intersect the event position
 * @param {ChartElement[]} items - elements to filter
 * @param {object} position - the point to be nearest to
 * @return {ChartElement[]} the nearest items
 */
function getIntersectItems(chart, position) {
	var elements = [];

	parseVisibleItems(chart, function(element) {
		if (element.inRange(position.x, position.y)) {
			elements.push(element);
		}
	});

	return elements;
}

/**
 * Helper function to get the items nearest to the event position considering all visible items in teh chart
 * @param {Chart} chart - the chart to look at elements from
 * @param {object} position - the point to be nearest to
 * @param {boolean} intersect - if true, only consider items that intersect the position
 * @param {function} distanceMetric - function to provide the distance between points
 * @return {ChartElement[]} the nearest items
 */
function getNearestItems(chart, position, intersect, distanceMetric) {
	var minDistance = Number.POSITIVE_INFINITY;
	var nearestItems = [];

	parseVisibleItems(chart, function(element) {
		if (intersect && !element.inRange(position.x, position.y)) {
			return;
		}

		var center = element.getCenterPoint();
		var distance = distanceMetric(position, center);
		if (distance < minDistance) {
			nearestItems = [element];
			minDistance = distance;
		} else if (distance === minDistance) {
			// Can have multiple items at the same distance in which case we sort by size
			nearestItems.push(element);
		}
	});

	return nearestItems;
}

/**
 * Get a distance metric function for two points based on the
 * axis mode setting
 * @param {string} axis - the axis mode. x|y|xy
 */
function getDistanceMetricForAxis(axis) {
	var useX = axis.indexOf('x') !== -1;
	var useY = axis.indexOf('y') !== -1;

	return function(pt1, pt2) {
		var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
		var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
		return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
	};
}

function indexMode(chart, e, options) {
	var position = getRelativePosition(e, chart);
	// Default axis for index mode is 'x' to match old behaviour
	options.axis = options.axis || 'x';
	var distanceMetric = getDistanceMetricForAxis(options.axis);
	var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
	var elements = [];

	if (!items.length) {
		return [];
	}

	chart._getSortedVisibleDatasetMetas().forEach(function(meta) {
		var element = meta.data[items[0]._index];

		// don't count items that are skipped (null data)
		if (element && !element._view.skip) {
			elements.push(element);
		}
	});

	return elements;
}

/**
 * @interface IInteractionOptions
 */
/**
 * If true, only consider items that intersect the point
 * @name IInterfaceOptions#boolean
 * @type Boolean
 */

/**
 * Contains interaction related functions
 * @namespace Chart.Interaction
 */
var core_interaction = {
	// Helper function for different modes
	modes: {
		single: function(chart, e) {
			var position = getRelativePosition(e, chart);
			var elements = [];

			parseVisibleItems(chart, function(element) {
				if (element.inRange(position.x, position.y)) {
					elements.push(element);
					return elements;
				}
			});

			return elements.slice(0, 1);
		},

		/**
		 * @function Chart.Interaction.modes.label
		 * @deprecated since version 2.4.0
		 * @todo remove at version 3
		 * @private
		 */
		label: indexMode,

		/**
		 * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
		 * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
		 * @function Chart.Interaction.modes.index
		 * @since v2.4.0
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use during interaction
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		index: indexMode,

		/**
		 * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
		 * If the options.intersect is false, we find the nearest item and return the items in that dataset
		 * @function Chart.Interaction.modes.dataset
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use during interaction
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		dataset: function(chart, e, options) {
			var position = getRelativePosition(e, chart);
			options.axis = options.axis || 'xy';
			var distanceMetric = getDistanceMetricForAxis(options.axis);
			var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);

			if (items.length > 0) {
				items = chart.getDatasetMeta(items[0]._datasetIndex).data;
			}

			return items;
		},

		/**
		 * @function Chart.Interaction.modes.x-axis
		 * @deprecated since version 2.4.0. Use index mode and intersect == true
		 * @todo remove at version 3
		 * @private
		 */
		'x-axis': function(chart, e) {
			return indexMode(chart, e, {intersect: false});
		},

		/**
		 * Point mode returns all elements that hit test based on the event position
		 * of the event
		 * @function Chart.Interaction.modes.intersect
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		point: function(chart, e) {
			var position = getRelativePosition(e, chart);
			return getIntersectItems(chart, position);
		},

		/**
		 * nearest mode returns the element closest to the point
		 * @function Chart.Interaction.modes.intersect
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		nearest: function(chart, e, options) {
			var position = getRelativePosition(e, chart);
			options.axis = options.axis || 'xy';
			var distanceMetric = getDistanceMetricForAxis(options.axis);
			return getNearestItems(chart, position, options.intersect, distanceMetric);
		},

		/**
		 * x mode returns the elements that hit-test at the current x coordinate
		 * @function Chart.Interaction.modes.x
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		x: function(chart, e, options) {
			var position = getRelativePosition(e, chart);
			var items = [];
			var intersectsItem = false;

			parseVisibleItems(chart, function(element) {
				if (element.inXRange(position.x)) {
					items.push(element);
				}

				if (element.inRange(position.x, position.y)) {
					intersectsItem = true;
				}
			});

			// If we want to trigger on an intersect and we don't have any items
			// that intersect the position, return nothing
			if (options.intersect && !intersectsItem) {
				items = [];
			}
			return items;
		},

		/**
		 * y mode returns the elements that hit-test at the current y coordinate
		 * @function Chart.Interaction.modes.y
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		y: function(chart, e, options) {
			var position = getRelativePosition(e, chart);
			var items = [];
			var intersectsItem = false;

			parseVisibleItems(chart, function(element) {
				if (element.inYRange(position.y)) {
					items.push(element);
				}

				if (element.inRange(position.x, position.y)) {
					intersectsItem = true;
				}
			});

			// If we want to trigger on an intersect and we don't have any items
			// that intersect the position, return nothing
			if (options.intersect && !intersectsItem) {
				items = [];
			}
			return items;
		}
	}
};

var extend = helpers$1.extend;

function filterByPosition(array, position) {
	return helpers$1.where(array, function(v) {
		return v.pos === position;
	});
}

function sortByWeight(array, reverse) {
	return array.sort(function(a, b) {
		var v0 = reverse ? b : a;
		var v1 = reverse ? a : b;
		return v0.weight === v1.weight ?
			v0.index - v1.index :
			v0.weight - v1.weight;
	});
}

function wrapBoxes(boxes) {
	var layoutBoxes = [];
	var i, ilen, box;

	for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
		box = boxes[i];
		layoutBoxes.push({
			index: i,
			box: box,
			pos: box.position,
			horizontal: box.isHorizontal(),
			weight: box.weight
		});
	}
	return layoutBoxes;
}

function setLayoutDims(layouts, params) {
	var i, ilen, layout;
	for (i = 0, ilen = layouts.length; i < ilen; ++i) {
		layout = layouts[i];
		// store width used instead of chartArea.w in fitBoxes
		layout.width = layout.horizontal
			? layout.box.fullWidth && params.availableWidth
			: params.vBoxMaxWidth;
		// store height used instead of chartArea.h in fitBoxes
		layout.height = layout.horizontal && params.hBoxMaxHeight;
	}
}

function buildLayoutBoxes(boxes) {
	var layoutBoxes = wrapBoxes(boxes);
	var left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
	var right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
	var top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
	var bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));

	return {
		leftAndTop: left.concat(top),
		rightAndBottom: right.concat(bottom),
		chartArea: filterByPosition(layoutBoxes, 'chartArea'),
		vertical: left.concat(right),
		horizontal: top.concat(bottom)
	};
}

function getCombinedMax(maxPadding, chartArea, a, b) {
	return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
}

function updateDims(chartArea, params, layout) {
	var box = layout.box;
	var maxPadding = chartArea.maxPadding;
	var newWidth, newHeight;

	if (layout.size) {
		// this layout was already counted for, lets first reduce old size
		chartArea[layout.pos] -= layout.size;
	}
	layout.size = layout.horizontal ? box.height : box.width;
	chartArea[layout.pos] += layout.size;

	if (box.getPadding) {
		var boxPadding = box.getPadding();
		maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
		maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
		maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
		maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
	}

	newWidth = params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right');
	newHeight = params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom');

	if (newWidth !== chartArea.w || newHeight !== chartArea.h) {
		chartArea.w = newWidth;
		chartArea.h = newHeight;

		// return true if chart area changed in layout's direction
		var sizes = layout.horizontal ? [newWidth, chartArea.w] : [newHeight, chartArea.h];
		return sizes[0] !== sizes[1] && (!isNaN(sizes[0]) || !isNaN(sizes[1]));
	}
}

function handleMaxPadding(chartArea) {
	var maxPadding = chartArea.maxPadding;

	function updatePos(pos) {
		var change = Math.max(maxPadding[pos] - chartArea[pos], 0);
		chartArea[pos] += change;
		return change;
	}
	chartArea.y += updatePos('top');
	chartArea.x += updatePos('left');
	updatePos('right');
	updatePos('bottom');
}

function getMargins(horizontal, chartArea) {
	var maxPadding = chartArea.maxPadding;

	function marginForPositions(positions) {
		var margin = {left: 0, top: 0, right: 0, bottom: 0};
		positions.forEach(function(pos) {
			margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
		});
		return margin;
	}

	return horizontal
		? marginForPositions(['left', 'right'])
		: marginForPositions(['top', 'bottom']);
}

function fitBoxes(boxes, chartArea, params) {
	var refitBoxes = [];
	var i, ilen, layout, box, refit, changed;

	for (i = 0, ilen = boxes.length; i < ilen; ++i) {
		layout = boxes[i];
		box = layout.box;

		box.update(
			layout.width || chartArea.w,
			layout.height || chartArea.h,
			getMargins(layout.horizontal, chartArea)
		);
		if (updateDims(chartArea, params, layout)) {
			changed = true;
			if (refitBoxes.length) {
				// Dimensions changed and there were non full width boxes before this
				// -> we have to refit those
				refit = true;
			}
		}
		if (!box.fullWidth) { // fullWidth boxes don't need to be re-fitted in any case
			refitBoxes.push(layout);
		}
	}

	return refit ? fitBoxes(refitBoxes, chartArea, params) || changed : changed;
}

function placeBoxes(boxes, chartArea, params) {
	var userPadding = params.padding;
	var x = chartArea.x;
	var y = chartArea.y;
	var i, ilen, layout, box;

	for (i = 0, ilen = boxes.length; i < ilen; ++i) {
		layout = boxes[i];
		box = layout.box;
		if (layout.horizontal) {
			box.left = box.fullWidth ? userPadding.left : chartArea.left;
			box.right = box.fullWidth ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;
			box.top = y;
			box.bottom = y + box.height;
			box.width = box.right - box.left;
			y = box.bottom;
		} else {
			box.left = x;
			box.right = x + box.width;
			box.top = chartArea.top;
			box.bottom = chartArea.top + chartArea.h;
			box.height = box.bottom - box.top;
			x = box.right;
		}
	}

	chartArea.x = x;
	chartArea.y = y;
}

core_defaults._set('global', {
	layout: {
		padding: {
			top: 0,
			right: 0,
			bottom: 0,
			left: 0
		}
	}
});

/**
 * @interface ILayoutItem
 * @prop {string} position - The position of the item in the chart layout. Possible values are
 * 'left', 'top', 'right', 'bottom', and 'chartArea'
 * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area
 * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down
 * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)
 * @prop {function} update - Takes two parameters: width and height. Returns size of item
 * @prop {function} getPadding -  Returns an object with padding on the edges
 * @prop {number} width - Width of item. Must be valid after update()
 * @prop {number} height - Height of item. Must be valid after update()
 * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update
 * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update
 * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update
 * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update
 */

// The layout service is very self explanatory.  It's responsible for the layout within a chart.
// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
// It is this service's responsibility of carrying out that layout.
var core_layouts = {
	defaults: {},

	/**
	 * Register a box to a chart.
	 * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.
	 * @param {Chart} chart - the chart to use
	 * @param {ILayoutItem} item - the item to add to be layed out
	 */
	addBox: function(chart, item) {
		if (!chart.boxes) {
			chart.boxes = [];
		}

		// initialize item with default values
		item.fullWidth = item.fullWidth || false;
		item.position = item.position || 'top';
		item.weight = item.weight || 0;
		item._layers = item._layers || function() {
			return [{
				z: 0,
				draw: function() {
					item.draw.apply(item, arguments);
				}
			}];
		};

		chart.boxes.push(item);
	},

	/**
	 * Remove a layoutItem from a chart
	 * @param {Chart} chart - the chart to remove the box from
	 * @param {ILayoutItem} layoutItem - the item to remove from the layout
	 */
	removeBox: function(chart, layoutItem) {
		var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
		if (index !== -1) {
			chart.boxes.splice(index, 1);
		}
	},

	/**
	 * Sets (or updates) options on the given `item`.
	 * @param {Chart} chart - the chart in which the item lives (or will be added to)
	 * @param {ILayoutItem} item - the item to configure with the given options
	 * @param {object} options - the new item options.
	 */
	configure: function(chart, item, options) {
		var props = ['fullWidth', 'position', 'weight'];
		var ilen = props.length;
		var i = 0;
		var prop;

		for (; i < ilen; ++i) {
			prop = props[i];
			if (options.hasOwnProperty(prop)) {
				item[prop] = options[prop];
			}
		}
	},

	/**
	 * Fits boxes of the given chart into the given size by having each box measure itself
	 * then running a fitting algorithm
	 * @param {Chart} chart - the chart
	 * @param {number} width - the width to fit into
	 * @param {number} height - the height to fit into
	 */
	update: function(chart, width, height) {
		if (!chart) {
			return;
		}

		var layoutOptions = chart.options.layout || {};
		var padding = helpers$1.options.toPadding(layoutOptions.padding);

		var availableWidth = width - padding.width;
		var availableHeight = height - padding.height;
		var boxes = buildLayoutBoxes(chart.boxes);
		var verticalBoxes = boxes.vertical;
		var horizontalBoxes = boxes.horizontal;

		// Essentially we now have any number of boxes on each of the 4 sides.
		// Our canvas looks like the following.
		// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
		// B1 is the bottom axis
		// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
		// These locations are single-box locations only, when trying to register a chartArea location that is already taken,
		// an error will be thrown.
		//
		// |----------------------------------------------------|
		// |                  T1 (Full Width)                   |
		// |----------------------------------------------------|
		// |    |    |                 T2                  |    |
		// |    |----|-------------------------------------|----|
		// |    |    | C1 |                           | C2 |    |
		// |    |    |----|                           |----|    |
		// |    |    |                                     |    |
		// | L1 | L2 |           ChartArea (C0)            | R1 |
		// |    |    |                                     |    |
		// |    |    |----|                           |----|    |
		// |    |    | C3 |                           | C4 |    |
		// |    |----|-------------------------------------|----|
		// |    |    |                 B1                  |    |
		// |----------------------------------------------------|
		// |                  B2 (Full Width)                   |
		// |----------------------------------------------------|
		//

		var params = Object.freeze({
			outerWidth: width,
			outerHeight: height,
			padding: padding,
			availableWidth: availableWidth,
			vBoxMaxWidth: availableWidth / 2 / verticalBoxes.length,
			hBoxMaxHeight: availableHeight / 2
		});
		var chartArea = extend({
			maxPadding: extend({}, padding),
			w: availableWidth,
			h: availableHeight,
			x: padding.left,
			y: padding.top
		}, padding);

		setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);

		// First fit vertical boxes
		fitBoxes(verticalBoxes, chartArea, params);

		// Then fit horizontal boxes
		if (fitBoxes(horizontalBoxes, chartArea, params)) {
			// if the area changed, re-fit vertical boxes
			fitBoxes(verticalBoxes, chartArea, params);
		}

		handleMaxPadding(chartArea);

		// Finally place the boxes to correct coordinates
		placeBoxes(boxes.leftAndTop, chartArea, params);

		// Move to opposite side of chart
		chartArea.x += chartArea.w;
		chartArea.y += chartArea.h;

		placeBoxes(boxes.rightAndBottom, chartArea, params);

		chart.chartArea = {
			left: chartArea.left,
			top: chartArea.top,
			right: chartArea.left + chartArea.w,
			bottom: chartArea.top + chartArea.h
		};

		// Finally update boxes in chartArea (radial scale for example)
		helpers$1.each(boxes.chartArea, function(layout) {
			var box = layout.box;
			extend(box, chart.chartArea);
			box.update(chartArea.w, chartArea.h);
		});
	}
};

/**
 * Platform fallback implementation (minimal).
 * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939
 */

var platform_basic = {
	acquireContext: function(item) {
		if (item && item.canvas) {
			// Support for any object associated to a canvas (including a context2d)
			item = item.canvas;
		}

		return item && item.getContext('2d') || null;
	}
};

var platform_dom = "/*\r\n * DOM element rendering detection\r\n * https://davidwalsh.name/detect-node-insertion\r\n */\r\n@keyframes chartjs-render-animation {\r\n\tfrom { opacity: 0.99; }\r\n\tto { opacity: 1; }\r\n}\r\n\r\n.chartjs-render-monitor {\r\n\tanimation: chartjs-render-animation 0.001s;\r\n}\r\n\r\n/*\r\n * DOM element resizing detection\r\n * https://github.com/marcj/css-element-queries\r\n */\r\n.chartjs-size-monitor,\r\n.chartjs-size-monitor-expand,\r\n.chartjs-size-monitor-shrink {\r\n\tposition: absolute;\r\n\tdirection: ltr;\r\n\tleft: 0;\r\n\ttop: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\toverflow: hidden;\r\n\tpointer-events: none;\r\n\tvisibility: hidden;\r\n\tz-index: -1;\r\n}\r\n\r\n.chartjs-size-monitor-expand > div {\r\n\tposition: absolute;\r\n\twidth: 1000000px;\r\n\theight: 1000000px;\r\n\tleft: 0;\r\n\ttop: 0;\r\n}\r\n\r\n.chartjs-size-monitor-shrink > div {\r\n\tposition: absolute;\r\n\twidth: 200%;\r\n\theight: 200%;\r\n\tleft: 0;\r\n\ttop: 0;\r\n}\r\n";

var platform_dom$1 = /*#__PURE__*/Object.freeze({
__proto__: null,
'default': platform_dom
});

var stylesheet = getCjsExportFromNamespace(platform_dom$1);

var EXPANDO_KEY = '$chartjs';
var CSS_PREFIX = 'chartjs-';
var CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';
var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';
var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';
var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];

/**
 * DOM event types -> Chart.js event types.
 * Note: only events with different types are mapped.
 * @see https://developer.mozilla.org/en-US/docs/Web/Events
 */
var EVENT_TYPES = {
	touchstart: 'mousedown',
	touchmove: 'mousemove',
	touchend: 'mouseup',
	pointerenter: 'mouseenter',
	pointerdown: 'mousedown',
	pointermove: 'mousemove',
	pointerup: 'mouseup',
	pointerleave: 'mouseout',
	pointerout: 'mouseout'
};

/**
 * The "used" size is the final value of a dimension property after all calculations have
 * been performed. This method uses the computed style of `element` but returns undefined
 * if the computed style is not expressed in pixels. That can happen in some cases where
 * `element` has a size relative to its parent and this last one is not yet displayed,
 * for example because of `display: none` on a parent node.
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
 * @returns {number} Size in pixels or undefined if unknown.
 */
function readUsedSize(element, property) {
	var value = helpers$1.getStyle(element, property);
	var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
	return matches ? Number(matches[1]) : undefined;
}

/**
 * Initializes the canvas style and render size without modifying the canvas display size,
 * since responsiveness is handled by the controller.resize() method. The config is used
 * to determine the aspect ratio to apply in case no explicit height has been specified.
 */
function initCanvas(canvas, config) {
	var style = canvas.style;

	// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it
	// returns null or '' if no explicit value has been set to the canvas attribute.
	var renderHeight = canvas.getAttribute('height');
	var renderWidth = canvas.getAttribute('width');

	// Chart.js modifies some canvas values that we want to restore on destroy
	canvas[EXPANDO_KEY] = {
		initial: {
			height: renderHeight,
			width: renderWidth,
			style: {
				display: style.display,
				height: style.height,
				width: style.width
			}
		}
	};

	// Force canvas to display as block to avoid extra space caused by inline
	// elements, which would interfere with the responsive resize process.
	// https://github.com/chartjs/Chart.js/issues/2538
	style.display = style.display || 'block';

	if (renderWidth === null || renderWidth === '') {
		var displayWidth = readUsedSize(canvas, 'width');
		if (displayWidth !== undefined) {
			canvas.width = displayWidth;
		}
	}

	if (renderHeight === null || renderHeight === '') {
		if (canvas.style.height === '') {
			// If no explicit render height and style height, let's apply the aspect ratio,
			// which one can be specified by the user but also by charts as default option
			// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.
			canvas.height = canvas.width / (config.options.aspectRatio || 2);
		} else {
			var displayHeight = readUsedSize(canvas, 'height');
			if (displayWidth !== undefined) {
				canvas.height = displayHeight;
			}
		}
	}

	return canvas;
}

/**
 * Detects support for options object argument in addEventListener.
 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
 * @private
 */
var supportsEventListenerOptions = (function() {
	var supports = false;
	try {
		var options = Object.defineProperty({}, 'passive', {
			// eslint-disable-next-line getter-return
			get: function() {
				supports = true;
			}
		});
		window.addEventListener('e', null, options);
	} catch (e) {
		// continue regardless of error
	}
	return supports;
}());

// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.
// https://github.com/chartjs/Chart.js/issues/4287
var eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;

function addListener(node, type, listener) {
	node.addEventListener(type, listener, eventListenerOptions);
}

function removeListener(node, type, listener) {
	node.removeEventListener(type, listener, eventListenerOptions);
}

function createEvent(type, chart, x, y, nativeEvent) {
	return {
		type: type,
		chart: chart,
		native: nativeEvent || null,
		x: x !== undefined ? x : null,
		y: y !== undefined ? y : null,
	};
}

function fromNativeEvent(event, chart) {
	var type = EVENT_TYPES[event.type] || event.type;
	var pos = helpers$1.getRelativePosition(event, chart);
	return createEvent(type, chart, pos.x, pos.y, event);
}

function throttled(fn, thisArg) {
	var ticking = false;
	var args = [];

	return function() {
		args = Array.prototype.slice.call(arguments);
		thisArg = thisArg || this;

		if (!ticking) {
			ticking = true;
			helpers$1.requestAnimFrame.call(window, function() {
				ticking = false;
				fn.apply(thisArg, args);
			});
		}
	};
}

function createDiv(cls) {
	var el = document.createElement('div');
	el.className = cls || '';
	return el;
}

// Implementation based on https://github.com/marcj/css-element-queries
function createResizer(handler) {
	var maxSize = 1000000;

	// NOTE(SB) Don't use innerHTML because it could be considered unsafe.
	// https://github.com/chartjs/Chart.js/issues/5902
	var resizer = createDiv(CSS_SIZE_MONITOR);
	var expand = createDiv(CSS_SIZE_MONITOR + '-expand');
	var shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');

	expand.appendChild(createDiv());
	shrink.appendChild(createDiv());

	resizer.appendChild(expand);
	resizer.appendChild(shrink);
	resizer._reset = function() {
		expand.scrollLeft = maxSize;
		expand.scrollTop = maxSize;
		shrink.scrollLeft = maxSize;
		shrink.scrollTop = maxSize;
	};

	var onScroll = function() {
		resizer._reset();
		handler();
	};

	addListener(expand, 'scroll', onScroll.bind(expand, 'expand'));
	addListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));

	return resizer;
}

// https://davidwalsh.name/detect-node-insertion
function watchForRender(node, handler) {
	var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
	var proxy = expando.renderProxy = function(e) {
		if (e.animationName === CSS_RENDER_ANIMATION) {
			handler();
		}
	};

	helpers$1.each(ANIMATION_START_EVENTS, function(type) {
		addListener(node, type, proxy);
	});

	// #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class
	// is removed then added back immediately (same animation frame?). Accessing the
	// `offsetParent` property will force a reflow and re-evaluate the CSS animation.
	// https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics
	// https://github.com/chartjs/Chart.js/issues/4737
	expando.reflow = !!node.offsetParent;

	node.classList.add(CSS_RENDER_MONITOR);
}

function unwatchForRender(node) {
	var expando = node[EXPANDO_KEY] || {};
	var proxy = expando.renderProxy;

	if (proxy) {
		helpers$1.each(ANIMATION_START_EVENTS, function(type) {
			removeListener(node, type, proxy);
		});

		delete expando.renderProxy;
	}

	node.classList.remove(CSS_RENDER_MONITOR);
}

function addResizeListener(node, listener, chart) {
	var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});

	// Let's keep track of this added resizer and thus avoid DOM query when removing it.
	var resizer = expando.resizer = createResizer(throttled(function() {
		if (expando.resizer) {
			var container = chart.options.maintainAspectRatio && node.parentNode;
			var w = container ? container.clientWidth : 0;
			listener(createEvent('resize', chart));
			if (container && container.clientWidth < w && chart.canvas) {
				// If the container size shrank during chart resize, let's assume
				// scrollbar appeared. So we resize again with the scrollbar visible -
				// effectively making chart smaller and the scrollbar hidden again.
				// Because we are inside `throttled`, and currently `ticking`, scroll
				// events are ignored during this whole 2 resize process.
				// If we assumed wrong and something else happened, we are resizing
				// twice in a frame (potential performance issue)
				listener(createEvent('resize', chart));
			}
		}
	}));

	// The resizer needs to be attached to the node parent, so we first need to be
	// sure that `node` is attached to the DOM before injecting the resizer element.
	watchForRender(node, function() {
		if (expando.resizer) {
			var container = node.parentNode;
			if (container && container !== resizer.parentNode) {
				container.insertBefore(resizer, container.firstChild);
			}

			// The container size might have changed, let's reset the resizer state.
			resizer._reset();
		}
	});
}

function removeResizeListener(node) {
	var expando = node[EXPANDO_KEY] || {};
	var resizer = expando.resizer;

	delete expando.resizer;
	unwatchForRender(node);

	if (resizer && resizer.parentNode) {
		resizer.parentNode.removeChild(resizer);
	}
}

/**
 * Injects CSS styles inline if the styles are not already present.
 * @param {HTMLDocument|ShadowRoot} rootNode - the node to contain the <style>.
 * @param {string} css - the CSS to be injected.
 */
function injectCSS(rootNode, css) {
	// https://stackoverflow.com/q/3922139
	var expando = rootNode[EXPANDO_KEY] || (rootNode[EXPANDO_KEY] = {});
	if (!expando.containsStyles) {
		expando.containsStyles = true;
		css = '/* Chart.js */\n' + css;
		var style = document.createElement('style');
		style.setAttribute('type', 'text/css');
		style.appendChild(document.createTextNode(css));
		rootNode.appendChild(style);
	}
}

var platform_dom$2 = {
	/**
	 * When `true`, prevents the automatic injection of the stylesheet required to
	 * correctly detect when the chart is added to the DOM and then resized. This
	 * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)
	 * to be manually imported to make this library compatible with any CSP.
	 * See https://github.com/chartjs/Chart.js/issues/5208
	 */
	disableCSSInjection: false,

	/**
	 * This property holds whether this platform is enabled for the current environment.
	 * Currently used by platform.js to select the proper implementation.
	 * @private
	 */
	_enabled: typeof window !== 'undefined' && typeof document !== 'undefined',

	/**
	 * Initializes resources that depend on platform options.
	 * @param {HTMLCanvasElement} canvas - The Canvas element.
	 * @private
	 */
	_ensureLoaded: function(canvas) {
		if (!this.disableCSSInjection) {
			// If the canvas is in a shadow DOM, then the styles must also be inserted
			// into the same shadow DOM.
			// https://github.com/chartjs/Chart.js/issues/5763
			var root = canvas.getRootNode ? canvas.getRootNode() : document;
			var targetNode = root.host ? root : document.head;
			injectCSS(targetNode, stylesheet);
		}
	},

	acquireContext: function(item, config) {
		if (typeof item === 'string') {
			item = document.getElementById(item);
		} else if (item.length) {
			// Support for array based queries (such as jQuery)
			item = item[0];
		}

		if (item && item.canvas) {
			// Support for any object associated to a canvas (including a context2d)
			item = item.canvas;
		}

		// To prevent canvas fingerprinting, some add-ons undefine the getContext
		// method, for example: https://github.com/kkapsner/CanvasBlocker
		// https://github.com/chartjs/Chart.js/issues/2807
		var context = item && item.getContext && item.getContext('2d');

		// `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is
		// inside an iframe or when running in a protected environment. We could guess the
		// types from their toString() value but let's keep things flexible and assume it's
		// a sufficient condition if the item has a context2D which has item as `canvas`.
		// https://github.com/chartjs/Chart.js/issues/3887
		// https://github.com/chartjs/Chart.js/issues/4102
		// https://github.com/chartjs/Chart.js/issues/4152
		if (context && context.canvas === item) {
			// Load platform resources on first chart creation, to make it possible to
			// import the library before setting platform options.
			this._ensureLoaded(item);
			initCanvas(item, config);
			return context;
		}

		return null;
	},

	releaseContext: function(context) {
		var canvas = context.canvas;
		if (!canvas[EXPANDO_KEY]) {
			return;
		}

		var initial = canvas[EXPANDO_KEY].initial;
		['height', 'width'].forEach(function(prop) {
			var value = initial[prop];
			if (helpers$1.isNullOrUndef(value)) {
				canvas.removeAttribute(prop);
			} else {
				canvas.setAttribute(prop, value);
			}
		});

		helpers$1.each(initial.style || {}, function(value, key) {
			canvas.style[key] = value;
		});

		// The canvas render size might have been changed (and thus the state stack discarded),
		// we can't use save() and restore() to restore the initial state. So make sure that at
		// least the canvas context is reset to the default state by setting the canvas width.
		// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html
		// eslint-disable-next-line no-self-assign
		canvas.width = canvas.width;

		delete canvas[EXPANDO_KEY];
	},

	addEventListener: function(chart, type, listener) {
		var canvas = chart.canvas;
		if (type === 'resize') {
			// Note: the resize event is not supported on all browsers.
			addResizeListener(canvas, listener, chart);
			return;
		}

		var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});
		var proxies = expando.proxies || (expando.proxies = {});
		var proxy = proxies[chart.id + '_' + type] = function(event) {
			listener(fromNativeEvent(event, chart));
		};

		addListener(canvas, type, proxy);
	},

	removeEventListener: function(chart, type, listener) {
		var canvas = chart.canvas;
		if (type === 'resize') {
			// Note: the resize event is not supported on all browsers.
			removeResizeListener(canvas);
			return;
		}

		var expando = listener[EXPANDO_KEY] || {};
		var proxies = expando.proxies || {};
		var proxy = proxies[chart.id + '_' + type];
		if (!proxy) {
			return;
		}

		removeListener(canvas, type, proxy);
	}
};

// DEPRECATIONS

/**
 * Provided for backward compatibility, use EventTarget.addEventListener instead.
 * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
 * @function Chart.helpers.addEvent
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers$1.addEvent = addListener;

/**
 * Provided for backward compatibility, use EventTarget.removeEventListener instead.
 * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener
 * @function Chart.helpers.removeEvent
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers$1.removeEvent = removeListener;

// @TODO Make possible to select another platform at build time.
var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;

/**
 * @namespace Chart.platform
 * @see https://chartjs.gitbooks.io/proposals/content/Platform.html
 * @since 2.4.0
 */
var platform = helpers$1.extend({
	/**
	 * @since 2.7.0
	 */
	initialize: function() {},

	/**
	 * Called at chart construction time, returns a context2d instance implementing
	 * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
	 * @param {*} item - The native item from which to acquire context (platform specific)
	 * @param {object} options - The chart options
	 * @returns {CanvasRenderingContext2D} context2d instance
	 */
	acquireContext: function() {},

	/**
	 * Called at chart destruction time, releases any resources associated to the context
	 * previously returned by the acquireContext() method.
	 * @param {CanvasRenderingContext2D} context - The context2d instance
	 * @returns {boolean} true if the method succeeded, else false
	 */
	releaseContext: function() {},

	/**
	 * Registers the specified listener on the given chart.
	 * @param {Chart} chart - Chart from which to listen for event
	 * @param {string} type - The ({@link IEvent}) type to listen for
	 * @param {function} listener - Receives a notification (an object that implements
	 * the {@link IEvent} interface) when an event of the specified type occurs.
	 */
	addEventListener: function() {},

	/**
	 * Removes the specified listener previously registered with addEventListener.
	 * @param {Chart} chart - Chart from which to remove the listener
	 * @param {string} type - The ({@link IEvent}) type to remove
	 * @param {function} listener - The listener function to remove from the event target.
	 */
	removeEventListener: function() {}

}, implementation);

core_defaults._set('global', {
	plugins: {}
});

/**
 * The plugin service singleton
 * @namespace Chart.plugins
 * @since 2.1.0
 */
var core_plugins = {
	/**
	 * Globally registered plugins.
	 * @private
	 */
	_plugins: [],

	/**
	 * This identifier is used to invalidate the descriptors cache attached to each chart
	 * when a global plugin is registered or unregistered. In this case, the cache ID is
	 * incremented and descriptors are regenerated during following API calls.
	 * @private
	 */
	_cacheId: 0,

	/**
	 * Registers the given plugin(s) if not already registered.
	 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
	 */
	register: function(plugins) {
		var p = this._plugins;
		([]).concat(plugins).forEach(function(plugin) {
			if (p.indexOf(plugin) === -1) {
				p.push(plugin);
			}
		});

		this._cacheId++;
	},

	/**
	 * Unregisters the given plugin(s) only if registered.
	 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
	 */
	unregister: function(plugins) {
		var p = this._plugins;
		([]).concat(plugins).forEach(function(plugin) {
			var idx = p.indexOf(plugin);
			if (idx !== -1) {
				p.splice(idx, 1);
			}
		});

		this._cacheId++;
	},

	/**
	 * Remove all registered plugins.
	 * @since 2.1.5
	 */
	clear: function() {
		this._plugins = [];
		this._cacheId++;
	},

	/**
	 * Returns the number of registered plugins?
	 * @returns {number}
	 * @since 2.1.5
	 */
	count: function() {
		return this._plugins.length;
	},

	/**
	 * Returns all registered plugin instances.
	 * @returns {IPlugin[]} array of plugin objects.
	 * @since 2.1.5
	 */
	getAll: function() {
		return this._plugins;
	},

	/**
	 * Calls enabled plugins for `chart` on the specified hook and with the given args.
	 * This method immediately returns as soon as a plugin explicitly returns false. The
	 * returned value can be used, for instance, to interrupt the current action.
	 * @param {Chart} chart - The chart instance for which plugins should be called.
	 * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
	 * @param {Array} [args] - Extra arguments to apply to the hook call.
	 * @returns {boolean} false if any of the plugins return false, else returns true.
	 */
	notify: function(chart, hook, args) {
		var descriptors = this.descriptors(chart);
		var ilen = descriptors.length;
		var i, descriptor, plugin, params, method;

		for (i = 0; i < ilen; ++i) {
			descriptor = descriptors[i];
			plugin = descriptor.plugin;
			method = plugin[hook];
			if (typeof method === 'function') {
				params = [chart].concat(args || []);
				params.push(descriptor.options);
				if (method.apply(plugin, params) === false) {
					return false;
				}
			}
		}

		return true;
	},

	/**
	 * Returns descriptors of enabled plugins for the given chart.
	 * @returns {object[]} [{ plugin, options }]
	 * @private
	 */
	descriptors: function(chart) {
		var cache = chart.$plugins || (chart.$plugins = {});
		if (cache.id === this._cacheId) {
			return cache.descriptors;
		}

		var plugins = [];
		var descriptors = [];
		var config = (chart && chart.config) || {};
		var options = (config.options && config.options.plugins) || {};

		this._plugins.concat(config.plugins || []).forEach(function(plugin) {
			var idx = plugins.indexOf(plugin);
			if (idx !== -1) {
				return;
			}

			var id = plugin.id;
			var opts = options[id];
			if (opts === false) {
				return;
			}

			if (opts === true) {
				opts = helpers$1.clone(core_defaults.global.plugins[id]);
			}

			plugins.push(plugin);
			descriptors.push({
				plugin: plugin,
				options: opts || {}
			});
		});

		cache.descriptors = descriptors;
		cache.id = this._cacheId;
		return descriptors;
	},

	/**
	 * Invalidates cache for the given chart: descriptors hold a reference on plugin option,
	 * but in some cases, this reference can be changed by the user when updating options.
	 * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
	 * @private
	 */
	_invalidate: function(chart) {
		delete chart.$plugins;
	}
};

var core_scaleService = {
	// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
	// use the new chart options to grab the correct scale
	constructors: {},
	// Use a registration function so that we can move to an ES6 map when we no longer need to support
	// old browsers

	// Scale config defaults
	defaults: {},
	registerScaleType: function(type, scaleConstructor, scaleDefaults) {
		this.constructors[type] = scaleConstructor;
		this.defaults[type] = helpers$1.clone(scaleDefaults);
	},
	getScaleConstructor: function(type) {
		return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
	},
	getScaleDefaults: function(type) {
		// Return the scale defaults merged with the global settings so that we always use the latest ones
		return this.defaults.hasOwnProperty(type) ? helpers$1.merge(Object.create(null), [core_defaults.scale, this.defaults[type]]) : {};
	},
	updateScaleDefaults: function(type, additions) {
		var me = this;
		if (me.defaults.hasOwnProperty(type)) {
			me.defaults[type] = helpers$1.extend(me.defaults[type], additions);
		}
	},
	addScalesToLayout: function(chart) {
		// Adds each scale to the chart.boxes array to be sized accordingly
		helpers$1.each(chart.scales, function(scale) {
			// Set ILayoutItem parameters for backwards compatibility
			scale.fullWidth = scale.options.fullWidth;
			scale.position = scale.options.position;
			scale.weight = scale.options.weight;
			core_layouts.addBox(chart, scale);
		});
	}
};

var valueOrDefault$8 = helpers$1.valueOrDefault;
var getRtlHelper = helpers$1.rtl.getRtlAdapter;

core_defaults._set('global', {
	tooltips: {
		enabled: true,
		custom: null,
		mode: 'nearest',
		position: 'average',
		intersect: true,
		backgroundColor: 'rgba(0,0,0,0.8)',
		titleFontStyle: 'bold',
		titleSpacing: 2,
		titleMarginBottom: 6,
		titleFontColor: '#fff',
		titleAlign: 'left',
		bodySpacing: 2,
		bodyFontColor: '#fff',
		bodyAlign: 'left',
		footerFontStyle: 'bold',
		footerSpacing: 2,
		footerMarginTop: 6,
		footerFontColor: '#fff',
		footerAlign: 'left',
		yPadding: 6,
		xPadding: 6,
		caretPadding: 2,
		caretSize: 5,
		cornerRadius: 6,
		multiKeyBackground: '#fff',
		displayColors: true,
		borderColor: 'rgba(0,0,0,0)',
		borderWidth: 0,
		callbacks: {
			// Args are: (tooltipItems, data)
			beforeTitle: helpers$1.noop,
			title: function(tooltipItems, data) {
				var title = '';
				var labels = data.labels;
				var labelCount = labels ? labels.length : 0;

				if (tooltipItems.length > 0) {
					var item = tooltipItems[0];
					if (item.label) {
						title = item.label;
					} else if (item.xLabel) {
						title = item.xLabel;
					} else if (labelCount > 0 && item.index < labelCount) {
						title = labels[item.index];
					}
				}

				return title;
			},
			afterTitle: helpers$1.noop,

			// Args are: (tooltipItems, data)
			beforeBody: helpers$1.noop,

			// Args are: (tooltipItem, data)
			beforeLabel: helpers$1.noop,
			label: function(tooltipItem, data) {
				var label = data.datasets[tooltipItem.datasetIndex].label || '';

				if (label) {
					label += ': ';
				}
				if (!helpers$1.isNullOrUndef(tooltipItem.value)) {
					label += tooltipItem.value;
				} else {
					label += tooltipItem.yLabel;
				}
				return label;
			},
			labelColor: function(tooltipItem, chart) {
				var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
				var activeElement = meta.data[tooltipItem.index];
				var view = activeElement._view;
				return {
					borderColor: view.borderColor,
					backgroundColor: view.backgroundColor
				};
			},
			labelTextColor: function() {
				return this._options.bodyFontColor;
			},
			afterLabel: helpers$1.noop,

			// Args are: (tooltipItems, data)
			afterBody: helpers$1.noop,

			// Args are: (tooltipItems, data)
			beforeFooter: helpers$1.noop,
			footer: helpers$1.noop,
			afterFooter: helpers$1.noop
		}
	}
});

var positioners = {
	/**
	 * Average mode places the tooltip at the average position of the elements shown
	 * @function Chart.Tooltip.positioners.average
	 * @param elements {ChartElement[]} the elements being displayed in the tooltip
	 * @returns {object} tooltip position
	 */
	average: function(elements) {
		if (!elements.length) {
			return false;
		}

		var i, len;
		var x = 0;
		var y = 0;
		var count = 0;

		for (i = 0, len = elements.length; i < len; ++i) {
			var el = elements[i];
			if (el && el.hasValue()) {
				var pos = el.tooltipPosition();
				x += pos.x;
				y += pos.y;
				++count;
			}
		}

		return {
			x: x / count,
			y: y / count
		};
	},

	/**
	 * Gets the tooltip position nearest of the item nearest to the event position
	 * @function Chart.Tooltip.positioners.nearest
	 * @param elements {Chart.Element[]} the tooltip elements
	 * @param eventPosition {object} the position of the event in canvas coordinates
	 * @returns {object} the tooltip position
	 */
	nearest: function(elements, eventPosition) {
		var x = eventPosition.x;
		var y = eventPosition.y;
		var minDistance = Number.POSITIVE_INFINITY;
		var i, len, nearestElement;

		for (i = 0, len = elements.length; i < len; ++i) {
			var el = elements[i];
			if (el && el.hasValue()) {
				var center = el.getCenterPoint();
				var d = helpers$1.distanceBetweenPoints(eventPosition, center);

				if (d < minDistance) {
					minDistance = d;
					nearestElement = el;
				}
			}
		}

		if (nearestElement) {
			var tp = nearestElement.tooltipPosition();
			x = tp.x;
			y = tp.y;
		}

		return {
			x: x,
			y: y
		};
	}
};

// Helper to push or concat based on if the 2nd parameter is an array or not
function pushOrConcat(base, toPush) {
	if (toPush) {
		if (helpers$1.isArray(toPush)) {
			// base = base.concat(toPush);
			Array.prototype.push.apply(base, toPush);
		} else {
			base.push(toPush);
		}
	}

	return base;
}

/**
 * Returns array of strings split by newline
 * @param {string} value - The value to split by newline.
 * @returns {string[]} value if newline present - Returned from String split() method
 * @function
 */
function splitNewlines(str) {
	if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
		return str.split('\n');
	}
	return str;
}


/**
 * Private helper to create a tooltip item model
 * @param element - the chart element (point, arc, bar) to create the tooltip item for
 * @return new tooltip item
 */
function createTooltipItem(element) {
	var xScale = element._xScale;
	var yScale = element._yScale || element._scale; // handle radar || polarArea charts
	var index = element._index;
	var datasetIndex = element._datasetIndex;
	var controller = element._chart.getDatasetMeta(datasetIndex).controller;
	var indexScale = controller._getIndexScale();
	var valueScale = controller._getValueScale();

	return {
		xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
		yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
		label: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',
		value: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',
		index: index,
		datasetIndex: datasetIndex,
		x: element._model.x,
		y: element._model.y
	};
}

/**
 * Helper to get the reset model for the tooltip
 * @param tooltipOpts {object} the tooltip options
 */
function getBaseModel(tooltipOpts) {
	var globalDefaults = core_defaults.global;

	return {
		// Positioning
		xPadding: tooltipOpts.xPadding,
		yPadding: tooltipOpts.yPadding,
		xAlign: tooltipOpts.xAlign,
		yAlign: tooltipOpts.yAlign,

		// Drawing direction and text direction
		rtl: tooltipOpts.rtl,
		textDirection: tooltipOpts.textDirection,

		// Body
		bodyFontColor: tooltipOpts.bodyFontColor,
		_bodyFontFamily: valueOrDefault$8(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
		_bodyFontStyle: valueOrDefault$8(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
		_bodyAlign: tooltipOpts.bodyAlign,
		bodyFontSize: valueOrDefault$8(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
		bodySpacing: tooltipOpts.bodySpacing,

		// Title
		titleFontColor: tooltipOpts.titleFontColor,
		_titleFontFamily: valueOrDefault$8(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
		_titleFontStyle: valueOrDefault$8(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
		titleFontSize: valueOrDefault$8(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
		_titleAlign: tooltipOpts.titleAlign,
		titleSpacing: tooltipOpts.titleSpacing,
		titleMarginBottom: tooltipOpts.titleMarginBottom,

		// Footer
		footerFontColor: tooltipOpts.footerFontColor,
		_footerFontFamily: valueOrDefault$8(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
		_footerFontStyle: valueOrDefault$8(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
		footerFontSize: valueOrDefault$8(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
		_footerAlign: tooltipOpts.footerAlign,
		footerSpacing: tooltipOpts.footerSpacing,
		footerMarginTop: tooltipOpts.footerMarginTop,

		// Appearance
		caretSize: tooltipOpts.caretSize,
		cornerRadius: tooltipOpts.cornerRadius,
		backgroundColor: tooltipOpts.backgroundColor,
		opacity: 0,
		legendColorBackground: tooltipOpts.multiKeyBackground,
		displayColors: tooltipOpts.displayColors,
		borderColor: tooltipOpts.borderColor,
		borderWidth: tooltipOpts.borderWidth
	};
}

/**
 * Get the size of the tooltip
 */
function getTooltipSize(tooltip, model) {
	var ctx = tooltip._chart.ctx;

	var height = model.yPadding * 2; // Tooltip Padding
	var width = 0;

	// Count of all lines in the body
	var body = model.body;
	var combinedBodyLength = body.reduce(function(count, bodyItem) {
		return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
	}, 0);
	combinedBodyLength += model.beforeBody.length + model.afterBody.length;

	var titleLineCount = model.title.length;
	var footerLineCount = model.footer.length;
	var titleFontSize = model.titleFontSize;
	var bodyFontSize = model.bodyFontSize;
	var footerFontSize = model.footerFontSize;

	height += titleLineCount * titleFontSize; // Title Lines
	height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing
	height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin
	height += combinedBodyLength * bodyFontSize; // Body Lines
	height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing
	height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin
	height += footerLineCount * (footerFontSize); // Footer Lines
	height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing

	// Title width
	var widthPadding = 0;
	var maxLineWidth = function(line) {
		width = Math.max(width, ctx.measureText(line).width + widthPadding);
	};

	ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
	helpers$1.each(model.title, maxLineWidth);

	// Body width
	ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
	helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth);

	// Body lines may include some extra width due to the color box
	widthPadding = model.displayColors ? (bodyFontSize + 2) : 0;
	helpers$1.each(body, function(bodyItem) {
		helpers$1.each(bodyItem.before, maxLineWidth);
		helpers$1.each(bodyItem.lines, maxLineWidth);
		helpers$1.each(bodyItem.after, maxLineWidth);
	});

	// Reset back to 0
	widthPadding = 0;

	// Footer width
	ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
	helpers$1.each(model.footer, maxLineWidth);

	// Add padding
	width += 2 * model.xPadding;

	return {
		width: width,
		height: height
	};
}

/**
 * Helper to get the alignment of a tooltip given the size
 */
function determineAlignment(tooltip, size) {
	var model = tooltip._model;
	var chart = tooltip._chart;
	var chartArea = tooltip._chart.chartArea;
	var xAlign = 'center';
	var yAlign = 'center';

	if (model.y < size.height) {
		yAlign = 'top';
	} else if (model.y > (chart.height - size.height)) {
		yAlign = 'bottom';
	}

	var lf, rf; // functions to determine left, right alignment
	var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart
	var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges
	var midX = (chartArea.left + chartArea.right) / 2;
	var midY = (chartArea.top + chartArea.bottom) / 2;

	if (yAlign === 'center') {
		lf = function(x) {
			return x <= midX;
		};
		rf = function(x) {
			return x > midX;
		};
	} else {
		lf = function(x) {
			return x <= (size.width / 2);
		};
		rf = function(x) {
			return x >= (chart.width - (size.width / 2));
		};
	}

	olf = function(x) {
		return x + size.width + model.caretSize + model.caretPadding > chart.width;
	};
	orf = function(x) {
		return x - size.width - model.caretSize - model.caretPadding < 0;
	};
	yf = function(y) {
		return y <= midY ? 'top' : 'bottom';
	};

	if (lf(model.x)) {
		xAlign = 'left';

		// Is tooltip too wide and goes over the right side of the chart.?
		if (olf(model.x)) {
			xAlign = 'center';
			yAlign = yf(model.y);
		}
	} else if (rf(model.x)) {
		xAlign = 'right';

		// Is tooltip too wide and goes outside left edge of canvas?
		if (orf(model.x)) {
			xAlign = 'center';
			yAlign = yf(model.y);
		}
	}

	var opts = tooltip._options;
	return {
		xAlign: opts.xAlign ? opts.xAlign : xAlign,
		yAlign: opts.yAlign ? opts.yAlign : yAlign
	};
}

/**
 * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment
 */
function getBackgroundPoint(vm, size, alignment, chart) {
	// Background Position
	var x = vm.x;
	var y = vm.y;

	var caretSize = vm.caretSize;
	var caretPadding = vm.caretPadding;
	var cornerRadius = vm.cornerRadius;
	var xAlign = alignment.xAlign;
	var yAlign = alignment.yAlign;
	var paddingAndSize = caretSize + caretPadding;
	var radiusAndPadding = cornerRadius + caretPadding;

	if (xAlign === 'right') {
		x -= size.width;
	} else if (xAlign === 'center') {
		x -= (size.width / 2);
		if (x + size.width > chart.width) {
			x = chart.width - size.width;
		}
		if (x < 0) {
			x = 0;
		}
	}

	if (yAlign === 'top') {
		y += paddingAndSize;
	} else if (yAlign === 'bottom') {
		y -= size.height + paddingAndSize;
	} else {
		y -= (size.height / 2);
	}

	if (yAlign === 'center') {
		if (xAlign === 'left') {
			x += paddingAndSize;
		} else if (xAlign === 'right') {
			x -= paddingAndSize;
		}
	} else if (xAlign === 'left') {
		x -= radiusAndPadding;
	} else if (xAlign === 'right') {
		x += radiusAndPadding;
	}

	return {
		x: x,
		y: y
	};
}

function getAlignedX(vm, align) {
	return align === 'center'
		? vm.x + vm.width / 2
		: align === 'right'
			? vm.x + vm.width - vm.xPadding
			: vm.x + vm.xPadding;
}

/**
 * Helper to build before and after body lines
 */
function getBeforeAfterBodyLines(callback) {
	return pushOrConcat([], splitNewlines(callback));
}

var exports$4 = core_element.extend({
	initialize: function() {
		this._model = getBaseModel(this._options);
		this._lastActive = [];
	},

	// Get the title
	// Args are: (tooltipItem, data)
	getTitle: function() {
		var me = this;
		var opts = me._options;
		var callbacks = opts.callbacks;

		var beforeTitle = callbacks.beforeTitle.apply(me, arguments);
		var title = callbacks.title.apply(me, arguments);
		var afterTitle = callbacks.afterTitle.apply(me, arguments);

		var lines = [];
		lines = pushOrConcat(lines, splitNewlines(beforeTitle));
		lines = pushOrConcat(lines, splitNewlines(title));
		lines = pushOrConcat(lines, splitNewlines(afterTitle));

		return lines;
	},

	// Args are: (tooltipItem, data)
	getBeforeBody: function() {
		return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));
	},

	// Args are: (tooltipItem, data)
	getBody: function(tooltipItems, data) {
		var me = this;
		var callbacks = me._options.callbacks;
		var bodyItems = [];

		helpers$1.each(tooltipItems, function(tooltipItem) {
			var bodyItem = {
				before: [],
				lines: [],
				after: []
			};
			pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));
			pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
			pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));

			bodyItems.push(bodyItem);
		});

		return bodyItems;
	},

	// Args are: (tooltipItem, data)
	getAfterBody: function() {
		return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));
	},

	// Get the footer and beforeFooter and afterFooter lines
	// Args are: (tooltipItem, data)
	getFooter: function() {
		var me = this;
		var callbacks = me._options.callbacks;

		var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
		var footer = callbacks.footer.apply(me, arguments);
		var afterFooter = callbacks.afterFooter.apply(me, arguments);

		var lines = [];
		lines = pushOrConcat(lines, splitNewlines(beforeFooter));
		lines = pushOrConcat(lines, splitNewlines(footer));
		lines = pushOrConcat(lines, splitNewlines(afterFooter));

		return lines;
	},

	update: function(changed) {
		var me = this;
		var opts = me._options;

		// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition
		// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time
		// which breaks any animations.
		var existingModel = me._model;
		var model = me._model = getBaseModel(opts);
		var active = me._active;

		var data = me._data;

		// In the case where active.length === 0 we need to keep these at existing values for good animations
		var alignment = {
			xAlign: existingModel.xAlign,
			yAlign: existingModel.yAlign
		};
		var backgroundPoint = {
			x: existingModel.x,
			y: existingModel.y
		};
		var tooltipSize = {
			width: existingModel.width,
			height: existingModel.height
		};
		var tooltipPosition = {
			x: existingModel.caretX,
			y: existingModel.caretY
		};

		var i, len;

		if (active.length) {
			model.opacity = 1;

			var labelColors = [];
			var labelTextColors = [];
			tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);

			var tooltipItems = [];
			for (i = 0, len = active.length; i < len; ++i) {
				tooltipItems.push(createTooltipItem(active[i]));
			}

			// If the user provided a filter function, use it to modify the tooltip items
			if (opts.filter) {
				tooltipItems = tooltipItems.filter(function(a) {
					return opts.filter(a, data);
				});
			}

			// If the user provided a sorting function, use it to modify the tooltip items
			if (opts.itemSort) {
				tooltipItems = tooltipItems.sort(function(a, b) {
					return opts.itemSort(a, b, data);
				});
			}

			// Determine colors for boxes
			helpers$1.each(tooltipItems, function(tooltipItem) {
				labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));
				labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
			});


			// Build the Text Lines
			model.title = me.getTitle(tooltipItems, data);
			model.beforeBody = me.getBeforeBody(tooltipItems, data);
			model.body = me.getBody(tooltipItems, data);
			model.afterBody = me.getAfterBody(tooltipItems, data);
			model.footer = me.getFooter(tooltipItems, data);

			// Initial positioning and colors
			model.x = tooltipPosition.x;
			model.y = tooltipPosition.y;
			model.caretPadding = opts.caretPadding;
			model.labelColors = labelColors;
			model.labelTextColors = labelTextColors;

			// data points
			model.dataPoints = tooltipItems;

			// We need to determine alignment of the tooltip
			tooltipSize = getTooltipSize(this, model);
			alignment = determineAlignment(this, tooltipSize);
			// Final Size and Position
			backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);
		} else {
			model.opacity = 0;
		}

		model.xAlign = alignment.xAlign;
		model.yAlign = alignment.yAlign;
		model.x = backgroundPoint.x;
		model.y = backgroundPoint.y;
		model.width = tooltipSize.width;
		model.height = tooltipSize.height;

		// Point where the caret on the tooltip points to
		model.caretX = tooltipPosition.x;
		model.caretY = tooltipPosition.y;

		me._model = model;

		if (changed && opts.custom) {
			opts.custom.call(me, model);
		}

		return me;
	},

	drawCaret: function(tooltipPoint, size) {
		var ctx = this._chart.ctx;
		var vm = this._view;
		var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);

		ctx.lineTo(caretPosition.x1, caretPosition.y1);
		ctx.lineTo(caretPosition.x2, caretPosition.y2);
		ctx.lineTo(caretPosition.x3, caretPosition.y3);
	},
	getCaretPosition: function(tooltipPoint, size, vm) {
		var x1, x2, x3, y1, y2, y3;
		var caretSize = vm.caretSize;
		var cornerRadius = vm.cornerRadius;
		var xAlign = vm.xAlign;
		var yAlign = vm.yAlign;
		var ptX = tooltipPoint.x;
		var ptY = tooltipPoint.y;
		var width = size.width;
		var height = size.height;

		if (yAlign === 'center') {
			y2 = ptY + (height / 2);

			if (xAlign === 'left') {
				x1 = ptX;
				x2 = x1 - caretSize;
				x3 = x1;

				y1 = y2 + caretSize;
				y3 = y2 - caretSize;
			} else {
				x1 = ptX + width;
				x2 = x1 + caretSize;
				x3 = x1;

				y1 = y2 - caretSize;
				y3 = y2 + caretSize;
			}
		} else {
			if (xAlign === 'left') {
				x2 = ptX + cornerRadius + (caretSize);
				x1 = x2 - caretSize;
				x3 = x2 + caretSize;
			} else if (xAlign === 'right') {
				x2 = ptX + width - cornerRadius - caretSize;
				x1 = x2 - caretSize;
				x3 = x2 + caretSize;
			} else {
				x2 = vm.caretX;
				x1 = x2 - caretSize;
				x3 = x2 + caretSize;
			}
			if (yAlign === 'top') {
				y1 = ptY;
				y2 = y1 - caretSize;
				y3 = y1;
			} else {
				y1 = ptY + height;
				y2 = y1 + caretSize;
				y3 = y1;
				// invert drawing order
				var tmp = x3;
				x3 = x1;
				x1 = tmp;
			}
		}
		return {x1: x1, x2: x2, x3: x3, y1: y1, y2: y2, y3: y3};
	},

	drawTitle: function(pt, vm, ctx) {
		var title = vm.title;
		var length = title.length;
		var titleFontSize, titleSpacing, i;

		if (length) {
			var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

			pt.x = getAlignedX(vm, vm._titleAlign);

			ctx.textAlign = rtlHelper.textAlign(vm._titleAlign);
			ctx.textBaseline = 'middle';

			titleFontSize = vm.titleFontSize;
			titleSpacing = vm.titleSpacing;

			ctx.fillStyle = vm.titleFontColor;
			ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);

			for (i = 0; i < length; ++i) {
				ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFontSize / 2);
				pt.y += titleFontSize + titleSpacing; // Line Height and spacing

				if (i + 1 === length) {
					pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
				}
			}
		}
	},

	drawBody: function(pt, vm, ctx) {
		var bodyFontSize = vm.bodyFontSize;
		var bodySpacing = vm.bodySpacing;
		var bodyAlign = vm._bodyAlign;
		var body = vm.body;
		var drawColorBoxes = vm.displayColors;
		var xLinePadding = 0;
		var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;

		var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

		var fillLineOfText = function(line) {
			ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyFontSize / 2);
			pt.y += bodyFontSize + bodySpacing;
		};

		var bodyItem, textColor, labelColors, lines, i, j, ilen, jlen;
		var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);

		ctx.textAlign = bodyAlign;
		ctx.textBaseline = 'middle';
		ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);

		pt.x = getAlignedX(vm, bodyAlignForCalculation);

		// Before body lines
		ctx.fillStyle = vm.bodyFontColor;
		helpers$1.each(vm.beforeBody, fillLineOfText);

		xLinePadding = drawColorBoxes && bodyAlignForCalculation !== 'right'
			? bodyAlign === 'center' ? (bodyFontSize / 2 + 1) : (bodyFontSize + 2)
			: 0;

		// Draw body lines now
		for (i = 0, ilen = body.length; i < ilen; ++i) {
			bodyItem = body[i];
			textColor = vm.labelTextColors[i];
			labelColors = vm.labelColors[i];

			ctx.fillStyle = textColor;
			helpers$1.each(bodyItem.before, fillLineOfText);

			lines = bodyItem.lines;
			for (j = 0, jlen = lines.length; j < jlen; ++j) {
				// Draw Legend-like boxes if needed
				if (drawColorBoxes) {
					var rtlColorX = rtlHelper.x(colorX);

					// Fill a white rect so that colours merge nicely if the opacity is < 1
					ctx.fillStyle = vm.legendColorBackground;
					ctx.fillRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);

					// Border
					ctx.lineWidth = 1;
					ctx.strokeStyle = labelColors.borderColor;
					ctx.strokeRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);

					// Inner square
					ctx.fillStyle = labelColors.backgroundColor;
					ctx.fillRect(rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), bodyFontSize - 2), pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
					ctx.fillStyle = textColor;
				}

				fillLineOfText(lines[j]);
			}

			helpers$1.each(bodyItem.after, fillLineOfText);
		}

		// Reset back to 0 for after body
		xLinePadding = 0;

		// After body lines
		helpers$1.each(vm.afterBody, fillLineOfText);
		pt.y -= bodySpacing; // Remove last body spacing
	},

	drawFooter: function(pt, vm, ctx) {
		var footer = vm.footer;
		var length = footer.length;
		var footerFontSize, i;

		if (length) {
			var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

			pt.x = getAlignedX(vm, vm._footerAlign);
			pt.y += vm.footerMarginTop;

			ctx.textAlign = rtlHelper.textAlign(vm._footerAlign);
			ctx.textBaseline = 'middle';

			footerFontSize = vm.footerFontSize;

			ctx.fillStyle = vm.footerFontColor;
			ctx.font = helpers$1.fontString(footerFontSize, vm._footerFontStyle, vm._footerFontFamily);

			for (i = 0; i < length; ++i) {
				ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFontSize / 2);
				pt.y += footerFontSize + vm.footerSpacing;
			}
		}
	},

	drawBackground: function(pt, vm, ctx, tooltipSize) {
		ctx.fillStyle = vm.backgroundColor;
		ctx.strokeStyle = vm.borderColor;
		ctx.lineWidth = vm.borderWidth;
		var xAlign = vm.xAlign;
		var yAlign = vm.yAlign;
		var x = pt.x;
		var y = pt.y;
		var width = tooltipSize.width;
		var height = tooltipSize.height;
		var radius = vm.cornerRadius;

		ctx.beginPath();
		ctx.moveTo(x + radius, y);
		if (yAlign === 'top') {
			this.drawCaret(pt, tooltipSize);
		}
		ctx.lineTo(x + width - radius, y);
		ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
		if (yAlign === 'center' && xAlign === 'right') {
			this.drawCaret(pt, tooltipSize);
		}
		ctx.lineTo(x + width, y + height - radius);
		ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
		if (yAlign === 'bottom') {
			this.drawCaret(pt, tooltipSize);
		}
		ctx.lineTo(x + radius, y + height);
		ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
		if (yAlign === 'center' && xAlign === 'left') {
			this.drawCaret(pt, tooltipSize);
		}
		ctx.lineTo(x, y + radius);
		ctx.quadraticCurveTo(x, y, x + radius, y);
		ctx.closePath();

		ctx.fill();

		if (vm.borderWidth > 0) {
			ctx.stroke();
		}
	},

	draw: function() {
		var ctx = this._chart.ctx;
		var vm = this._view;

		if (vm.opacity === 0) {
			return;
		}

		var tooltipSize = {
			width: vm.width,
			height: vm.height
		};
		var pt = {
			x: vm.x,
			y: vm.y
		};

		// IE11/Edge does not like very small opacities, so snap to 0
		var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;

		// Truthy/falsey value for empty tooltip
		var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;

		if (this._options.enabled && hasTooltipContent) {
			ctx.save();
			ctx.globalAlpha = opacity;

			// Draw Background
			this.drawBackground(pt, vm, ctx, tooltipSize);

			// Draw Title, Body, and Footer
			pt.y += vm.yPadding;

			helpers$1.rtl.overrideTextDirection(ctx, vm.textDirection);

			// Titles
			this.drawTitle(pt, vm, ctx);

			// Body
			this.drawBody(pt, vm, ctx);

			// Footer
			this.drawFooter(pt, vm, ctx);

			helpers$1.rtl.restoreTextDirection(ctx, vm.textDirection);

			ctx.restore();
		}
	},

	/**
	 * Handle an event
	 * @private
	 * @param {IEvent} event - The event to handle
	 * @returns {boolean} true if the tooltip changed
	 */
	handleEvent: function(e) {
		var me = this;
		var options = me._options;
		var changed = false;

		me._lastActive = me._lastActive || [];

		// Find Active Elements for tooltips
		if (e.type === 'mouseout') {
			me._active = [];
		} else {
			me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);
			if (options.reverse) {
				me._active.reverse();
			}
		}

		// Remember Last Actives
		changed = !helpers$1.arrayEquals(me._active, me._lastActive);

		// Only handle target event on tooltip change
		if (changed) {
			me._lastActive = me._active;

			if (options.enabled || options.custom) {
				me._eventPosition = {
					x: e.x,
					y: e.y
				};

				me.update(true);
				me.pivot();
			}
		}

		return changed;
	}
});

/**
 * @namespace Chart.Tooltip.positioners
 */
var positioners_1 = positioners;

var core_tooltip = exports$4;
core_tooltip.positioners = positioners_1;

var valueOrDefault$9 = helpers$1.valueOrDefault;

core_defaults._set('global', {
	elements: {},
	events: [
		'mousemove',
		'mouseout',
		'click',
		'touchstart',
		'touchmove'
	],
	hover: {
		onHover: null,
		mode: 'nearest',
		intersect: true,
		animationDuration: 400
	},
	onClick: null,
	maintainAspectRatio: true,
	responsive: true,
	responsiveAnimationDuration: 0
});

/**
 * Recursively merge the given config objects representing the `scales` option
 * by incorporating scale defaults in `xAxes` and `yAxes` array items, then
 * returns a deep copy of the result, thus doesn't alter inputs.
 */
function mergeScaleConfig(/* config objects ... */) {
	return helpers$1.merge(Object.create(null), [].slice.call(arguments), {
		merger: function(key, target, source, options) {
			if (key === 'xAxes' || key === 'yAxes') {
				var slen = source[key].length;
				var i, type, scale;

				if (!target[key]) {
					target[key] = [];
				}

				for (i = 0; i < slen; ++i) {
					scale = source[key][i];
					type = valueOrDefault$9(scale.type, key === 'xAxes' ? 'category' : 'linear');

					if (i >= target[key].length) {
						target[key].push({});
					}

					if (!target[key][i].type || (scale.type && scale.type !== target[key][i].type)) {
						// new/untyped scale or type changed: let's apply the new defaults
						// then merge source scale to correctly overwrite the defaults.
						helpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);
					} else {
						// scales type are the same
						helpers$1.merge(target[key][i], scale);
					}
				}
			} else {
				helpers$1._merger(key, target, source, options);
			}
		}
	});
}

/**
 * Recursively merge the given config objects as the root options by handling
 * default scale options for the `scales` and `scale` properties, then returns
 * a deep copy of the result, thus doesn't alter inputs.
 */
function mergeConfig(/* config objects ... */) {
	return helpers$1.merge(Object.create(null), [].slice.call(arguments), {
		merger: function(key, target, source, options) {
			var tval = target[key] || Object.create(null);
			var sval = source[key];

			if (key === 'scales') {
				// scale config merging is complex. Add our own function here for that
				target[key] = mergeScaleConfig(tval, sval);
			} else if (key === 'scale') {
				// used in polar area & radar charts since there is only one scale
				target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);
			} else {
				helpers$1._merger(key, target, source, options);
			}
		}
	});
}

function initConfig(config) {
	config = config || Object.create(null);

	// Do NOT use mergeConfig for the data object because this method merges arrays
	// and so would change references to labels and datasets, preventing data updates.
	var data = config.data = config.data || {};
	data.datasets = data.datasets || [];
	data.labels = data.labels || [];

	config.options = mergeConfig(
		core_defaults.global,
		core_defaults[config.type],
		config.options || {});

	return config;
}

function updateConfig(chart) {
	var newOptions = chart.options;

	helpers$1.each(chart.scales, function(scale) {
		core_layouts.removeBox(chart, scale);
	});

	newOptions = mergeConfig(
		core_defaults.global,
		core_defaults[chart.config.type],
		newOptions);

	chart.options = chart.config.options = newOptions;
	chart.ensureScalesHaveIDs();
	chart.buildOrUpdateScales();

	// Tooltip
	chart.tooltip._options = newOptions.tooltips;
	chart.tooltip.initialize();
}

function nextAvailableScaleId(axesOpts, prefix, index) {
	var id;
	var hasId = function(obj) {
		return obj.id === id;
	};

	do {
		id = prefix + index++;
	} while (helpers$1.findIndex(axesOpts, hasId) >= 0);

	return id;
}

function positionIsHorizontal(position) {
	return position === 'top' || position === 'bottom';
}

function compare2Level(l1, l2) {
	return function(a, b) {
		return a[l1] === b[l1]
			? a[l2] - b[l2]
			: a[l1] - b[l1];
	};
}

var Chart = function(item, config) {
	this.construct(item, config);
	return this;
};

helpers$1.extend(Chart.prototype, /** @lends Chart */ {
	/**
	 * @private
	 */
	construct: function(item, config) {
		var me = this;

		config = initConfig(config);

		var context = platform.acquireContext(item, config);
		var canvas = context && context.canvas;
		var height = canvas && canvas.height;
		var width = canvas && canvas.width;

		me.id = helpers$1.uid();
		me.ctx = context;
		me.canvas = canvas;
		me.config = config;
		me.width = width;
		me.height = height;
		me.aspectRatio = height ? width / height : null;
		me.options = config.options;
		me._bufferedRender = false;
		me._layers = [];

		/**
		 * Provided for backward compatibility, Chart and Chart.Controller have been merged,
		 * the "instance" still need to be defined since it might be called from plugins.
		 * @prop Chart#chart
		 * @deprecated since version 2.6.0
		 * @todo remove at version 3
		 * @private
		 */
		me.chart = me;
		me.controller = me; // chart.chart.controller #inception

		// Add the chart instance to the global namespace
		Chart.instances[me.id] = me;

		// Define alias to the config data: `chart.data === chart.config.data`
		Object.defineProperty(me, 'data', {
			get: function() {
				return me.config.data;
			},
			set: function(value) {
				me.config.data = value;
			}
		});

		if (!context || !canvas) {
			// The given item is not a compatible context2d element, let's return before finalizing
			// the chart initialization but after setting basic chart / controller properties that
			// can help to figure out that the chart is not valid (e.g chart.canvas !== null);
			// https://github.com/chartjs/Chart.js/issues/2807
			console.error("Failed to create chart: can't acquire context from the given item");
			return;
		}

		me.initialize();
		me.update();
	},

	/**
	 * @private
	 */
	initialize: function() {
		var me = this;

		// Before init plugin notification
		core_plugins.notify(me, 'beforeInit');

		helpers$1.retinaScale(me, me.options.devicePixelRatio);

		me.bindEvents();

		if (me.options.responsive) {
			// Initial resize before chart draws (must be silent to preserve initial animations).
			me.resize(true);
		}

		me.initToolTip();

		// After init plugin notification
		core_plugins.notify(me, 'afterInit');

		return me;
	},

	clear: function() {
		helpers$1.canvas.clear(this);
		return this;
	},

	stop: function() {
		// Stops any current animation loop occurring
		core_animations.cancelAnimation(this);
		return this;
	},

	resize: function(silent) {
		var me = this;
		var options = me.options;
		var canvas = me.canvas;
		var aspectRatio = (options.maintainAspectRatio && me.aspectRatio) || null;

		// the canvas render width and height will be casted to integers so make sure that
		// the canvas display style uses the same integer values to avoid blurring effect.

		// Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed
		var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));
		var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));

		if (me.width === newWidth && me.height === newHeight) {
			return;
		}

		canvas.width = me.width = newWidth;
		canvas.height = me.height = newHeight;
		canvas.style.width = newWidth + 'px';
		canvas.style.height = newHeight + 'px';

		helpers$1.retinaScale(me, options.devicePixelRatio);

		if (!silent) {
			// Notify any plugins about the resize
			var newSize = {width: newWidth, height: newHeight};
			core_plugins.notify(me, 'resize', [newSize]);

			// Notify of resize
			if (options.onResize) {
				options.onResize(me, newSize);
			}

			me.stop();
			me.update({
				duration: options.responsiveAnimationDuration
			});
		}
	},

	ensureScalesHaveIDs: function() {
		var options = this.options;
		var scalesOptions = options.scales || {};
		var scaleOptions = options.scale;

		helpers$1.each(scalesOptions.xAxes, function(xAxisOptions, index) {
			if (!xAxisOptions.id) {
				xAxisOptions.id = nextAvailableScaleId(scalesOptions.xAxes, 'x-axis-', index);
			}
		});

		helpers$1.each(scalesOptions.yAxes, function(yAxisOptions, index) {
			if (!yAxisOptions.id) {
				yAxisOptions.id = nextAvailableScaleId(scalesOptions.yAxes, 'y-axis-', index);
			}
		});

		if (scaleOptions) {
			scaleOptions.id = scaleOptions.id || 'scale';
		}
	},

	/**
	 * Builds a map of scale ID to scale object for future lookup.
	 */
	buildOrUpdateScales: function() {
		var me = this;
		var options = me.options;
		var scales = me.scales || {};
		var items = [];
		var updated = Object.keys(scales).reduce(function(obj, id) {
			obj[id] = false;
			return obj;
		}, {});

		if (options.scales) {
			items = items.concat(
				(options.scales.xAxes || []).map(function(xAxisOptions) {
					return {options: xAxisOptions, dtype: 'category', dposition: 'bottom'};
				}),
				(options.scales.yAxes || []).map(function(yAxisOptions) {
					return {options: yAxisOptions, dtype: 'linear', dposition: 'left'};
				})
			);
		}

		if (options.scale) {
			items.push({
				options: options.scale,
				dtype: 'radialLinear',
				isDefault: true,
				dposition: 'chartArea'
			});
		}

		helpers$1.each(items, function(item) {
			var scaleOptions = item.options;
			var id = scaleOptions.id;
			var scaleType = valueOrDefault$9(scaleOptions.type, item.dtype);

			if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {
				scaleOptions.position = item.dposition;
			}

			updated[id] = true;
			var scale = null;
			if (id in scales && scales[id].type === scaleType) {
				scale = scales[id];
				scale.options = scaleOptions;
				scale.ctx = me.ctx;
				scale.chart = me;
			} else {
				var scaleClass = core_scaleService.getScaleConstructor(scaleType);
				if (!scaleClass) {
					return;
				}
				scale = new scaleClass({
					id: id,
					type: scaleType,
					options: scaleOptions,
					ctx: me.ctx,
					chart: me
				});
				scales[scale.id] = scale;
			}

			scale.mergeTicksOptions();

			// TODO(SB): I think we should be able to remove this custom case (options.scale)
			// and consider it as a regular scale part of the "scales"" map only! This would
			// make the logic easier and remove some useless? custom code.
			if (item.isDefault) {
				me.scale = scale;
			}
		});
		// clear up discarded scales
		helpers$1.each(updated, function(hasUpdated, id) {
			if (!hasUpdated) {
				delete scales[id];
			}
		});

		me.scales = scales;

		core_scaleService.addScalesToLayout(this);
	},

	buildOrUpdateControllers: function() {
		var me = this;
		var newControllers = [];
		var datasets = me.data.datasets;
		var i, ilen;

		for (i = 0, ilen = datasets.length; i < ilen; i++) {
			var dataset = datasets[i];
			var meta = me.getDatasetMeta(i);
			var type = dataset.type || me.config.type;

			if (meta.type && meta.type !== type) {
				me.destroyDatasetMeta(i);
				meta = me.getDatasetMeta(i);
			}
			meta.type = type;
			meta.order = dataset.order || 0;
			meta.index = i;

			if (meta.controller) {
				meta.controller.updateIndex(i);
				meta.controller.linkScales();
			} else {
				var ControllerClass = controllers[meta.type];
				if (ControllerClass === undefined) {
					throw new Error('"' + meta.type + '" is not a chart type.');
				}

				meta.controller = new ControllerClass(me, i);
				newControllers.push(meta.controller);
			}
		}

		return newControllers;
	},

	/**
	 * Reset the elements of all datasets
	 * @private
	 */
	resetElements: function() {
		var me = this;
		helpers$1.each(me.data.datasets, function(dataset, datasetIndex) {
			me.getDatasetMeta(datasetIndex).controller.reset();
		}, me);
	},

	/**
	* Resets the chart back to it's state before the initial animation
	*/
	reset: function() {
		this.resetElements();
		this.tooltip.initialize();
	},

	update: function(config) {
		var me = this;
		var i, ilen;

		if (!config || typeof config !== 'object') {
			// backwards compatibility
			config = {
				duration: config,
				lazy: arguments[1]
			};
		}

		updateConfig(me);

		// plugins options references might have change, let's invalidate the cache
		// https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
		core_plugins._invalidate(me);

		if (core_plugins.notify(me, 'beforeUpdate') === false) {
			return;
		}

		// In case the entire data object changed
		me.tooltip._data = me.data;

		// Make sure dataset controllers are updated and new controllers are reset
		var newControllers = me.buildOrUpdateControllers();

		// Make sure all dataset controllers have correct meta data counts
		for (i = 0, ilen = me.data.datasets.length; i < ilen; i++) {
			me.getDatasetMeta(i).controller.buildOrUpdateElements();
		}

		me.updateLayout();

		// Can only reset the new controllers after the scales have been updated
		if (me.options.animation && me.options.animation.duration) {
			helpers$1.each(newControllers, function(controller) {
				controller.reset();
			});
		}

		me.updateDatasets();

		// Need to reset tooltip in case it is displayed with elements that are removed
		// after update.
		me.tooltip.initialize();

		// Last active contains items that were previously in the tooltip.
		// When we reset the tooltip, we need to clear it
		me.lastActive = [];

		// Do this before render so that any plugins that need final scale updates can use it
		core_plugins.notify(me, 'afterUpdate');

		me._layers.sort(compare2Level('z', '_idx'));

		if (me._bufferedRender) {
			me._bufferedRequest = {
				duration: config.duration,
				easing: config.easing,
				lazy: config.lazy
			};
		} else {
			me.render(config);
		}
	},

	/**
	 * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
	 * hook, in which case, plugins will not be called on `afterLayout`.
	 * @private
	 */
	updateLayout: function() {
		var me = this;

		if (core_plugins.notify(me, 'beforeLayout') === false) {
			return;
		}

		core_layouts.update(this, this.width, this.height);

		me._layers = [];
		helpers$1.each(me.boxes, function(box) {
			// _configure is called twice, once in core.scale.update and once here.
			// Here the boxes are fully updated and at their final positions.
			if (box._configure) {
				box._configure();
			}
			me._layers.push.apply(me._layers, box._layers());
		}, me);

		me._layers.forEach(function(item, index) {
			item._idx = index;
		});

		/**
		 * Provided for backward compatibility, use `afterLayout` instead.
		 * @method IPlugin#afterScaleUpdate
		 * @deprecated since version 2.5.0
		 * @todo remove at version 3
		 * @private
		 */
		core_plugins.notify(me, 'afterScaleUpdate');
		core_plugins.notify(me, 'afterLayout');
	},

	/**
	 * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
	 * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
	 * @private
	 */
	updateDatasets: function() {
		var me = this;

		if (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {
			return;
		}

		for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
			me.updateDataset(i);
		}

		core_plugins.notify(me, 'afterDatasetsUpdate');
	},

	/**
	 * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`
	 * hook, in which case, plugins will not be called on `afterDatasetUpdate`.
	 * @private
	 */
	updateDataset: function(index) {
		var me = this;
		var meta = me.getDatasetMeta(index);
		var args = {
			meta: meta,
			index: index
		};

		if (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {
			return;
		}

		meta.controller._update();

		core_plugins.notify(me, 'afterDatasetUpdate', [args]);
	},

	render: function(config) {
		var me = this;

		if (!config || typeof config !== 'object') {
			// backwards compatibility
			config = {
				duration: config,
				lazy: arguments[1]
			};
		}

		var animationOptions = me.options.animation;
		var duration = valueOrDefault$9(config.duration, animationOptions && animationOptions.duration);
		var lazy = config.lazy;

		if (core_plugins.notify(me, 'beforeRender') === false) {
			return;
		}

		var onComplete = function(animation) {
			core_plugins.notify(me, 'afterRender');
			helpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);
		};

		if (animationOptions && duration) {
			var animation = new core_animation({
				numSteps: duration / 16.66, // 60 fps
				easing: config.easing || animationOptions.easing,

				render: function(chart, animationObject) {
					var easingFunction = helpers$1.easing.effects[animationObject.easing];
					var currentStep = animationObject.currentStep;
					var stepDecimal = currentStep / animationObject.numSteps;

					chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);
				},

				onAnimationProgress: animationOptions.onProgress,
				onAnimationComplete: onComplete
			});

			core_animations.addAnimation(me, animation, duration, lazy);
		} else {
			me.draw();

			// See https://github.com/chartjs/Chart.js/issues/3781
			onComplete(new core_animation({numSteps: 0, chart: me}));
		}

		return me;
	},

	draw: function(easingValue) {
		var me = this;
		var i, layers;

		me.clear();

		if (helpers$1.isNullOrUndef(easingValue)) {
			easingValue = 1;
		}

		me.transition(easingValue);

		if (me.width <= 0 || me.height <= 0) {
			return;
		}

		if (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
			return;
		}

		// Because of plugin hooks (before/afterDatasetsDraw), datasets can't
		// currently be part of layers. Instead, we draw
		// layers <= 0 before(default, backward compat), and the rest after
		layers = me._layers;
		for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
			layers[i].draw(me.chartArea);
		}

		me.drawDatasets(easingValue);

		// Rest of layers
		for (; i < layers.length; ++i) {
			layers[i].draw(me.chartArea);
		}

		me._drawTooltip(easingValue);

		core_plugins.notify(me, 'afterDraw', [easingValue]);
	},

	/**
	 * @private
	 */
	transition: function(easingValue) {
		var me = this;

		for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {
			if (me.isDatasetVisible(i)) {
				me.getDatasetMeta(i).controller.transition(easingValue);
			}
		}

		me.tooltip.transition(easingValue);
	},

	/**
	 * @private
	 */
	_getSortedDatasetMetas: function(filterVisible) {
		var me = this;
		var datasets = me.data.datasets || [];
		var result = [];
		var i, ilen;

		for (i = 0, ilen = datasets.length; i < ilen; ++i) {
			if (!filterVisible || me.isDatasetVisible(i)) {
				result.push(me.getDatasetMeta(i));
			}
		}

		result.sort(compare2Level('order', 'index'));

		return result;
	},

	/**
	 * @private
	 */
	_getSortedVisibleDatasetMetas: function() {
		return this._getSortedDatasetMetas(true);
	},

	/**
	 * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
	 * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
	 * @private
	 */
	drawDatasets: function(easingValue) {
		var me = this;
		var metasets, i;

		if (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
			return;
		}

		metasets = me._getSortedVisibleDatasetMetas();
		for (i = metasets.length - 1; i >= 0; --i) {
			me.drawDataset(metasets[i], easingValue);
		}

		core_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
	},

	/**
	 * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`
	 * hook, in which case, plugins will not be called on `afterDatasetDraw`.
	 * @private
	 */
	drawDataset: function(meta, easingValue) {
		var me = this;
		var args = {
			meta: meta,
			index: meta.index,
			easingValue: easingValue
		};

		if (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {
			return;
		}

		meta.controller.draw(easingValue);

		core_plugins.notify(me, 'afterDatasetDraw', [args]);
	},

	/**
	 * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`
	 * hook, in which case, plugins will not be called on `afterTooltipDraw`.
	 * @private
	 */
	_drawTooltip: function(easingValue) {
		var me = this;
		var tooltip = me.tooltip;
		var args = {
			tooltip: tooltip,
			easingValue: easingValue
		};

		if (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {
			return;
		}

		tooltip.draw();

		core_plugins.notify(me, 'afterTooltipDraw', [args]);
	},

	/**
	 * Get the single element that was clicked on
	 * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
	 */
	getElementAtEvent: function(e) {
		return core_interaction.modes.single(this, e);
	},

	getElementsAtEvent: function(e) {
		return core_interaction.modes.label(this, e, {intersect: true});
	},

	getElementsAtXAxis: function(e) {
		return core_interaction.modes['x-axis'](this, e, {intersect: true});
	},

	getElementsAtEventForMode: function(e, mode, options) {
		var method = core_interaction.modes[mode];
		if (typeof method === 'function') {
			return method(this, e, options);
		}

		return [];
	},

	getDatasetAtEvent: function(e) {
		return core_interaction.modes.dataset(this, e, {intersect: true});
	},

	getDatasetMeta: function(datasetIndex) {
		var me = this;
		var dataset = me.data.datasets[datasetIndex];
		if (!dataset._meta) {
			dataset._meta = {};
		}

		var meta = dataset._meta[me.id];
		if (!meta) {
			meta = dataset._meta[me.id] = {
				type: null,
				data: [],
				dataset: null,
				controller: null,
				hidden: null,			// See isDatasetVisible() comment
				xAxisID: null,
				yAxisID: null,
				order: dataset.order || 0,
				index: datasetIndex
			};
		}

		return meta;
	},

	getVisibleDatasetCount: function() {
		var count = 0;
		for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
			if (this.isDatasetVisible(i)) {
				count++;
			}
		}
		return count;
	},

	isDatasetVisible: function(datasetIndex) {
		var meta = this.getDatasetMeta(datasetIndex);

		// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
		// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.
		return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
	},

	generateLegend: function() {
		return this.options.legendCallback(this);
	},

	/**
	 * @private
	 */
	destroyDatasetMeta: function(datasetIndex) {
		var id = this.id;
		var dataset = this.data.datasets[datasetIndex];
		var meta = dataset._meta && dataset._meta[id];

		if (meta) {
			meta.controller.destroy();
			delete dataset._meta[id];
		}
	},

	destroy: function() {
		var me = this;
		var canvas = me.canvas;
		var i, ilen;

		me.stop();

		// dataset controllers need to cleanup associated data
		for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
			me.destroyDatasetMeta(i);
		}

		if (canvas) {
			me.unbindEvents();
			helpers$1.canvas.clear(me);
			platform.releaseContext(me.ctx);
			me.canvas = null;
			me.ctx = null;
		}

		core_plugins.notify(me, 'destroy');

		delete Chart.instances[me.id];
	},

	toBase64Image: function() {
		return this.canvas.toDataURL.apply(this.canvas, arguments);
	},

	initToolTip: function() {
		var me = this;
		me.tooltip = new core_tooltip({
			_chart: me,
			_chartInstance: me, // deprecated, backward compatibility
			_data: me.data,
			_options: me.options.tooltips
		}, me);
	},

	/**
	 * @private
	 */
	bindEvents: function() {
		var me = this;
		var listeners = me._listeners = {};
		var listener = function() {
			me.eventHandler.apply(me, arguments);
		};

		helpers$1.each(me.options.events, function(type) {
			platform.addEventListener(me, type, listener);
			listeners[type] = listener;
		});

		// Elements used to detect size change should not be injected for non responsive charts.
		// See https://github.com/chartjs/Chart.js/issues/2210
		if (me.options.responsive) {
			listener = function() {
				me.resize();
			};

			platform.addEventListener(me, 'resize', listener);
			listeners.resize = listener;
		}
	},

	/**
	 * @private
	 */
	unbindEvents: function() {
		var me = this;
		var listeners = me._listeners;
		if (!listeners) {
			return;
		}

		delete me._listeners;
		helpers$1.each(listeners, function(listener, type) {
			platform.removeEventListener(me, type, listener);
		});
	},

	updateHoverStyle: function(elements, mode, enabled) {
		var prefix = enabled ? 'set' : 'remove';
		var element, i, ilen;

		for (i = 0, ilen = elements.length; i < ilen; ++i) {
			element = elements[i];
			if (element) {
				this.getDatasetMeta(element._datasetIndex).controller[prefix + 'HoverStyle'](element);
			}
		}

		if (mode === 'dataset') {
			this.getDatasetMeta(elements[0]._datasetIndex).controller['_' + prefix + 'DatasetHoverStyle']();
		}
	},

	/**
	 * @private
	 */
	eventHandler: function(e) {
		var me = this;
		var tooltip = me.tooltip;

		if (core_plugins.notify(me, 'beforeEvent', [e]) === false) {
			return;
		}

		// Buffer any update calls so that renders do not occur
		me._bufferedRender = true;
		me._bufferedRequest = null;

		var changed = me.handleEvent(e);
		// for smooth tooltip animations issue #4989
		// the tooltip should be the source of change
		// Animation check workaround:
		// tooltip._start will be null when tooltip isn't animating
		if (tooltip) {
			changed = tooltip._start
				? tooltip.handleEvent(e)
				: changed | tooltip.handleEvent(e);
		}

		core_plugins.notify(me, 'afterEvent', [e]);

		var bufferedRequest = me._bufferedRequest;
		if (bufferedRequest) {
			// If we have an update that was triggered, we need to do a normal render
			me.render(bufferedRequest);
		} else if (changed && !me.animating) {
			// If entering, leaving, or changing elements, animate the change via pivot
			me.stop();

			// We only need to render at this point. Updating will cause scales to be
			// recomputed generating flicker & using more memory than necessary.
			me.render({
				duration: me.options.hover.animationDuration,
				lazy: true
			});
		}

		me._bufferedRender = false;
		me._bufferedRequest = null;

		return me;
	},

	/**
	 * Handle an event
	 * @private
	 * @param {IEvent} event the event to handle
	 * @return {boolean} true if the chart needs to re-render
	 */
	handleEvent: function(e) {
		var me = this;
		var options = me.options || {};
		var hoverOptions = options.hover;
		var changed = false;

		me.lastActive = me.lastActive || [];

		// Find Active Elements for hover and tooltips
		if (e.type === 'mouseout') {
			me.active = [];
		} else {
			me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
		}

		// Invoke onHover hook
		// Need to call with native event here to not break backwards compatibility
		helpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);

		if (e.type === 'mouseup' || e.type === 'click') {
			if (options.onClick) {
				// Use e.native here for backwards compatibility
				options.onClick.call(me, e.native, me.active);
			}
		}

		// Remove styling for last active (even if it may still be active)
		if (me.lastActive.length) {
			me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
		}

		// Built in hover styling
		if (me.active.length && hoverOptions.mode) {
			me.updateHoverStyle(me.active, hoverOptions.mode, true);
		}

		changed = !helpers$1.arrayEquals(me.active, me.lastActive);

		// Remember Last Actives
		me.lastActive = me.active;

		return changed;
	}
});

/**
 * NOTE(SB) We actually don't use this container anymore but we need to keep it
 * for backward compatibility. Though, it can still be useful for plugins that
 * would need to work on multiple charts?!
 */
Chart.instances = {};

var core_controller = Chart;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart instead.
 * @class Chart.Controller
 * @deprecated since version 2.6
 * @todo remove at version 3
 * @private
 */
Chart.Controller = Chart;

/**
 * Provided for backward compatibility, not available anymore.
 * @namespace Chart
 * @deprecated since version 2.8
 * @todo remove at version 3
 * @private
 */
Chart.types = {};

/**
 * Provided for backward compatibility, not available anymore.
 * @namespace Chart.helpers.configMerge
 * @deprecated since version 2.8.0
 * @todo remove at version 3
 * @private
 */
helpers$1.configMerge = mergeConfig;

/**
 * Provided for backward compatibility, not available anymore.
 * @namespace Chart.helpers.scaleMerge
 * @deprecated since version 2.8.0
 * @todo remove at version 3
 * @private
 */
helpers$1.scaleMerge = mergeScaleConfig;

var core_helpers = function() {

	// -- Basic js utility methods

	helpers$1.where = function(collection, filterCallback) {
		if (helpers$1.isArray(collection) && Array.prototype.filter) {
			return collection.filter(filterCallback);
		}
		var filtered = [];

		helpers$1.each(collection, function(item) {
			if (filterCallback(item)) {
				filtered.push(item);
			}
		});

		return filtered;
	};
	helpers$1.findIndex = Array.prototype.findIndex ?
		function(array, callback, scope) {
			return array.findIndex(callback, scope);
		} :
		function(array, callback, scope) {
			scope = scope === undefined ? array : scope;
			for (var i = 0, ilen = array.length; i < ilen; ++i) {
				if (callback.call(scope, array[i], i, array)) {
					return i;
				}
			}
			return -1;
		};
	helpers$1.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
		// Default to start of the array
		if (helpers$1.isNullOrUndef(startIndex)) {
			startIndex = -1;
		}
		for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
			var currentItem = arrayToSearch[i];
			if (filterCallback(currentItem)) {
				return currentItem;
			}
		}
	};
	helpers$1.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
		// Default to end of the array
		if (helpers$1.isNullOrUndef(startIndex)) {
			startIndex = arrayToSearch.length;
		}
		for (var i = startIndex - 1; i >= 0; i--) {
			var currentItem = arrayToSearch[i];
			if (filterCallback(currentItem)) {
				return currentItem;
			}
		}
	};

	// -- Math methods
	helpers$1.isNumber = function(n) {
		return !isNaN(parseFloat(n)) && isFinite(n);
	};
	helpers$1.almostEquals = function(x, y, epsilon) {
		return Math.abs(x - y) < epsilon;
	};
	helpers$1.almostWhole = function(x, epsilon) {
		var rounded = Math.round(x);
		return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);
	};
	helpers$1.max = function(array) {
		return array.reduce(function(max, value) {
			if (!isNaN(value)) {
				return Math.max(max, value);
			}
			return max;
		}, Number.NEGATIVE_INFINITY);
	};
	helpers$1.min = function(array) {
		return array.reduce(function(min, value) {
			if (!isNaN(value)) {
				return Math.min(min, value);
			}
			return min;
		}, Number.POSITIVE_INFINITY);
	};
	helpers$1.sign = Math.sign ?
		function(x) {
			return Math.sign(x);
		} :
		function(x) {
			x = +x; // convert to a number
			if (x === 0 || isNaN(x)) {
				return x;
			}
			return x > 0 ? 1 : -1;
		};
	helpers$1.toRadians = function(degrees) {
		return degrees * (Math.PI / 180);
	};
	helpers$1.toDegrees = function(radians) {
		return radians * (180 / Math.PI);
	};

	/**
	 * Returns the number of decimal places
	 * i.e. the number of digits after the decimal point, of the value of this Number.
	 * @param {number} x - A number.
	 * @returns {number} The number of decimal places.
	 * @private
	 */
	helpers$1._decimalPlaces = function(x) {
		if (!helpers$1.isFinite(x)) {
			return;
		}
		var e = 1;
		var p = 0;
		while (Math.round(x * e) / e !== x) {
			e *= 10;
			p++;
		}
		return p;
	};

	// Gets the angle from vertical upright to the point about a centre.
	helpers$1.getAngleFromPoint = function(centrePoint, anglePoint) {
		var distanceFromXCenter = anglePoint.x - centrePoint.x;
		var distanceFromYCenter = anglePoint.y - centrePoint.y;
		var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);

		var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);

		if (angle < (-0.5 * Math.PI)) {
			angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
		}

		return {
			angle: angle,
			distance: radialDistanceFromCenter
		};
	};
	helpers$1.distanceBetweenPoints = function(pt1, pt2) {
		return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
	};

	/**
	 * Provided for backward compatibility, not available anymore
	 * @function Chart.helpers.aliasPixel
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 */
	helpers$1.aliasPixel = function(pixelWidth) {
		return (pixelWidth % 2 === 0) ? 0 : 0.5;
	};

	/**
	 * Returns the aligned pixel value to avoid anti-aliasing blur
	 * @param {Chart} chart - The chart instance.
	 * @param {number} pixel - A pixel value.
	 * @param {number} width - The width of the element.
	 * @returns {number} The aligned pixel value.
	 * @private
	 */
	helpers$1._alignPixel = function(chart, pixel, width) {
		var devicePixelRatio = chart.currentDevicePixelRatio;
		var halfWidth = width / 2;
		return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
	};

	helpers$1.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
		// Props to Rob Spencer at scaled innovation for his post on splining between points
		// http://scaledinnovation.com/analytics/splines/aboutSplines.html

		// This function must also respect "skipped" points

		var previous = firstPoint.skip ? middlePoint : firstPoint;
		var current = middlePoint;
		var next = afterPoint.skip ? middlePoint : afterPoint;

		var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
		var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));

		var s01 = d01 / (d01 + d12);
		var s12 = d12 / (d01 + d12);

		// If all points are the same, s01 & s02 will be inf
		s01 = isNaN(s01) ? 0 : s01;
		s12 = isNaN(s12) ? 0 : s12;

		var fa = t * s01; // scaling factor for triangle Ta
		var fb = t * s12;

		return {
			previous: {
				x: current.x - fa * (next.x - previous.x),
				y: current.y - fa * (next.y - previous.y)
			},
			next: {
				x: current.x + fb * (next.x - previous.x),
				y: current.y + fb * (next.y - previous.y)
			}
		};
	};
	helpers$1.EPSILON = Number.EPSILON || 1e-14;
	helpers$1.splineCurveMonotone = function(points) {
		// This function calculates Bézier control points in a similar way than |splineCurve|,
		// but preserves monotonicity of the provided data and ensures no local extremums are added
		// between the dataset discrete points due to the interpolation.
		// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation

		var pointsWithTangents = (points || []).map(function(point) {
			return {
				model: point._model,
				deltaK: 0,
				mK: 0
			};
		});

		// Calculate slopes (deltaK) and initialize tangents (mK)
		var pointsLen = pointsWithTangents.length;
		var i, pointBefore, pointCurrent, pointAfter;
		for (i = 0; i < pointsLen; ++i) {
			pointCurrent = pointsWithTangents[i];
			if (pointCurrent.model.skip) {
				continue;
			}

			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
			if (pointAfter && !pointAfter.model.skip) {
				var slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);

				// In the case of two points that appear at the same x pixel, slopeDeltaX is 0
				pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
			}

			if (!pointBefore || pointBefore.model.skip) {
				pointCurrent.mK = pointCurrent.deltaK;
			} else if (!pointAfter || pointAfter.model.skip) {
				pointCurrent.mK = pointBefore.deltaK;
			} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
				pointCurrent.mK = 0;
			} else {
				pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
			}
		}

		// Adjust tangents to ensure monotonic properties
		var alphaK, betaK, tauK, squaredMagnitude;
		for (i = 0; i < pointsLen - 1; ++i) {
			pointCurrent = pointsWithTangents[i];
			pointAfter = pointsWithTangents[i + 1];
			if (pointCurrent.model.skip || pointAfter.model.skip) {
				continue;
			}

			if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
				pointCurrent.mK = pointAfter.mK = 0;
				continue;
			}

			alphaK = pointCurrent.mK / pointCurrent.deltaK;
			betaK = pointAfter.mK / pointCurrent.deltaK;
			squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
			if (squaredMagnitude <= 9) {
				continue;
			}

			tauK = 3 / Math.sqrt(squaredMagnitude);
			pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
			pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
		}

		// Compute control points
		var deltaX;
		for (i = 0; i < pointsLen; ++i) {
			pointCurrent = pointsWithTangents[i];
			if (pointCurrent.model.skip) {
				continue;
			}

			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
			if (pointBefore && !pointBefore.model.skip) {
				deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
				pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
				pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
			}
			if (pointAfter && !pointAfter.model.skip) {
				deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
				pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
				pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
			}
		}
	};
	helpers$1.nextItem = function(collection, index, loop) {
		if (loop) {
			return index >= collection.length - 1 ? collection[0] : collection[index + 1];
		}
		return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
	};
	helpers$1.previousItem = function(collection, index, loop) {
		if (loop) {
			return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
		}
		return index <= 0 ? collection[0] : collection[index - 1];
	};
	// Implementation of the nice number algorithm used in determining where axis labels will go
	helpers$1.niceNum = function(range, round) {
		var exponent = Math.floor(helpers$1.log10(range));
		var fraction = range / Math.pow(10, exponent);
		var niceFraction;

		if (round) {
			if (fraction < 1.5) {
				niceFraction = 1;
			} else if (fraction < 3) {
				niceFraction = 2;
			} else if (fraction < 7) {
				niceFraction = 5;
			} else {
				niceFraction = 10;
			}
		} else if (fraction <= 1.0) {
			niceFraction = 1;
		} else if (fraction <= 2) {
			niceFraction = 2;
		} else if (fraction <= 5) {
			niceFraction = 5;
		} else {
			niceFraction = 10;
		}

		return niceFraction * Math.pow(10, exponent);
	};
	// Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
	helpers$1.requestAnimFrame = (function() {
		if (typeof window === 'undefined') {
			return function(callback) {
				callback();
			};
		}
		return window.requestAnimationFrame ||
			window.webkitRequestAnimationFrame ||
			window.mozRequestAnimationFrame ||
			window.oRequestAnimationFrame ||
			window.msRequestAnimationFrame ||
			function(callback) {
				return window.setTimeout(callback, 1000 / 60);
			};
	}());
	// -- DOM methods
	helpers$1.getRelativePosition = function(evt, chart) {
		var mouseX, mouseY;
		var e = evt.originalEvent || evt;
		var canvas = evt.target || evt.srcElement;
		var boundingRect = canvas.getBoundingClientRect();

		var touches = e.touches;
		if (touches && touches.length > 0) {
			mouseX = touches[0].clientX;
			mouseY = touches[0].clientY;

		} else {
			mouseX = e.clientX;
			mouseY = e.clientY;
		}

		// Scale mouse coordinates into canvas coordinates
		// by following the pattern laid out by 'jerryj' in the comments of
		// https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
		var paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));
		var paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));
		var paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));
		var paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));
		var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
		var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;

		// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
		// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
		mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);
		mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);

		return {
			x: mouseX,
			y: mouseY
		};

	};

	// Private helper function to convert max-width/max-height values that may be percentages into a number
	function parseMaxStyle(styleValue, node, parentProperty) {
		var valueInPixels;
		if (typeof styleValue === 'string') {
			valueInPixels = parseInt(styleValue, 10);

			if (styleValue.indexOf('%') !== -1) {
				// percentage * size in dimension
				valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
			}
		} else {
			valueInPixels = styleValue;
		}

		return valueInPixels;
	}

	/**
	 * Returns if the given value contains an effective constraint.
	 * @private
	 */
	function isConstrainedValue(value) {
		return value !== undefined && value !== null && value !== 'none';
	}

	/**
	 * Returns the max width or height of the given DOM node in a cross-browser compatible fashion
	 * @param {HTMLElement} domNode - the node to check the constraint on
	 * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')
	 * @param {string} percentageProperty - property of parent to use when calculating width as a percentage
	 * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}
	 */
	function getConstraintDimension(domNode, maxStyle, percentageProperty) {
		var view = document.defaultView;
		var parentNode = helpers$1._getParentNode(domNode);
		var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
		var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
		var hasCNode = isConstrainedValue(constrainedNode);
		var hasCContainer = isConstrainedValue(constrainedContainer);
		var infinity = Number.POSITIVE_INFINITY;

		if (hasCNode || hasCContainer) {
			return Math.min(
				hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
				hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
		}

		return 'none';
	}
	// returns Number or undefined if no constraint
	helpers$1.getConstraintWidth = function(domNode) {
		return getConstraintDimension(domNode, 'max-width', 'clientWidth');
	};
	// returns Number or undefined if no constraint
	helpers$1.getConstraintHeight = function(domNode) {
		return getConstraintDimension(domNode, 'max-height', 'clientHeight');
	};
	/**
	 * @private
 	 */
	helpers$1._calculatePadding = function(container, padding, parentDimension) {
		padding = helpers$1.getStyle(container, padding);

		return padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);
	};
	/**
	 * @private
	 */
	helpers$1._getParentNode = function(domNode) {
		var parent = domNode.parentNode;
		if (parent && parent.toString() === '[object ShadowRoot]') {
			parent = parent.host;
		}
		return parent;
	};
	helpers$1.getMaximumWidth = function(domNode) {
		var container = helpers$1._getParentNode(domNode);
		if (!container) {
			return domNode.clientWidth;
		}

		var clientWidth = container.clientWidth;
		var paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);
		var paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);

		var w = clientWidth - paddingLeft - paddingRight;
		var cw = helpers$1.getConstraintWidth(domNode);
		return isNaN(cw) ? w : Math.min(w, cw);
	};
	helpers$1.getMaximumHeight = function(domNode) {
		var container = helpers$1._getParentNode(domNode);
		if (!container) {
			return domNode.clientHeight;
		}

		var clientHeight = container.clientHeight;
		var paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);
		var paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);

		var h = clientHeight - paddingTop - paddingBottom;
		var ch = helpers$1.getConstraintHeight(domNode);
		return isNaN(ch) ? h : Math.min(h, ch);
	};
	helpers$1.getStyle = function(el, property) {
		return el.currentStyle ?
			el.currentStyle[property] :
			document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
	};
	helpers$1.retinaScale = function(chart, forceRatio) {
		var pixelRatio = chart.currentDevicePixelRatio = forceRatio || (typeof window !== 'undefined' && window.devicePixelRatio) || 1;
		if (pixelRatio === 1) {
			return;
		}

		var canvas = chart.canvas;
		var height = chart.height;
		var width = chart.width;

		canvas.height = height * pixelRatio;
		canvas.width = width * pixelRatio;
		chart.ctx.scale(pixelRatio, pixelRatio);

		// If no style has been set on the canvas, the render size is used as display size,
		// making the chart visually bigger, so let's enforce it to the "correct" values.
		// See https://github.com/chartjs/Chart.js/issues/3575
		if (!canvas.style.height && !canvas.style.width) {
			canvas.style.height = height + 'px';
			canvas.style.width = width + 'px';
		}
	};
	// -- Canvas methods
	helpers$1.fontString = function(pixelSize, fontStyle, fontFamily) {
		return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
	};
	helpers$1.longestText = function(ctx, font, arrayOfThings, cache) {
		cache = cache || {};
		var data = cache.data = cache.data || {};
		var gc = cache.garbageCollect = cache.garbageCollect || [];

		if (cache.font !== font) {
			data = cache.data = {};
			gc = cache.garbageCollect = [];
			cache.font = font;
		}

		ctx.font = font;
		var longest = 0;
		var ilen = arrayOfThings.length;
		var i, j, jlen, thing, nestedThing;
		for (i = 0; i < ilen; i++) {
			thing = arrayOfThings[i];

			// Undefined strings and arrays should not be measured
			if (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {
				longest = helpers$1.measureText(ctx, data, gc, longest, thing);
			} else if (helpers$1.isArray(thing)) {
				// if it is an array lets measure each element
				// to do maybe simplify this function a bit so we can do this more recursively?
				for (j = 0, jlen = thing.length; j < jlen; j++) {
					nestedThing = thing[j];
					// Undefined strings and arrays should not be measured
					if (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {
						longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);
					}
				}
			}
		}

		var gcLen = gc.length / 2;
		if (gcLen > arrayOfThings.length) {
			for (i = 0; i < gcLen; i++) {
				delete data[gc[i]];
			}
			gc.splice(0, gcLen);
		}
		return longest;
	};
	helpers$1.measureText = function(ctx, data, gc, longest, string) {
		var textWidth = data[string];
		if (!textWidth) {
			textWidth = data[string] = ctx.measureText(string).width;
			gc.push(string);
		}
		if (textWidth > longest) {
			longest = textWidth;
		}
		return longest;
	};

	/**
	 * @deprecated
	 */
	helpers$1.numberOfLabelLines = function(arrayOfThings) {
		var numberOfLines = 1;
		helpers$1.each(arrayOfThings, function(thing) {
			if (helpers$1.isArray(thing)) {
				if (thing.length > numberOfLines) {
					numberOfLines = thing.length;
				}
			}
		});
		return numberOfLines;
	};

	helpers$1.color = !chartjsColor ?
		function(value) {
			console.error('Color.js not found!');
			return value;
		} :
		function(value) {
			/* global CanvasGradient */
			if (value instanceof CanvasGradient) {
				value = core_defaults.global.defaultColor;
			}

			return chartjsColor(value);
		};

	helpers$1.getHoverColor = function(colorValue) {
		/* global CanvasPattern */
		return (colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient) ?
			colorValue :
			helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();
	};
};

function abstract() {
	throw new Error(
		'This method is not implemented: either no adapter can ' +
		'be found or an incomplete integration was provided.'
	);
}

/**
 * Date adapter (current used by the time scale)
 * @namespace Chart._adapters._date
 * @memberof Chart._adapters
 * @private
 */

/**
 * Currently supported unit string values.
 * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}
 * @memberof Chart._adapters._date
 * @name Unit
 */

/**
 * @class
 */
function DateAdapter(options) {
	this.options = options || {};
}

helpers$1.extend(DateAdapter.prototype, /** @lends DateAdapter */ {
	/**
	 * Returns a map of time formats for the supported formatting units defined
	 * in Unit as well as 'datetime' representing a detailed date/time string.
	 * @returns {{string: string}}
	 */
	formats: abstract,

	/**
	 * Parses the given `value` and return the associated timestamp.
	 * @param {any} value - the value to parse (usually comes from the data)
	 * @param {string} [format] - the expected data format
	 * @returns {(number|null)}
	 * @function
	 */
	parse: abstract,

	/**
	 * Returns the formatted date in the specified `format` for a given `timestamp`.
	 * @param {number} timestamp - the timestamp to format
	 * @param {string} format - the date/time token
	 * @return {string}
	 * @function
	 */
	format: abstract,

	/**
	 * Adds the specified `amount` of `unit` to the given `timestamp`.
	 * @param {number} timestamp - the input timestamp
	 * @param {number} amount - the amount to add
	 * @param {Unit} unit - the unit as string
	 * @return {number}
	 * @function
	 */
	add: abstract,

	/**
	 * Returns the number of `unit` between the given timestamps.
	 * @param {number} max - the input timestamp (reference)
	 * @param {number} min - the timestamp to substract
	 * @param {Unit} unit - the unit as string
	 * @return {number}
	 * @function
	 */
	diff: abstract,

	/**
	 * Returns start of `unit` for the given `timestamp`.
	 * @param {number} timestamp - the input timestamp
	 * @param {Unit} unit - the unit as string
	 * @param {number} [weekday] - the ISO day of the week with 1 being Monday
	 * and 7 being Sunday (only needed if param *unit* is `isoWeek`).
	 * @function
	 */
	startOf: abstract,

	/**
	 * Returns end of `unit` for the given `timestamp`.
	 * @param {number} timestamp - the input timestamp
	 * @param {Unit} unit - the unit as string
	 * @function
	 */
	endOf: abstract,

	// DEPRECATIONS

	/**
	 * Provided for backward compatibility for scale.getValueForPixel(),
	 * this method should be overridden only by the moment adapter.
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 * @private
	 */
	_create: function(value) {
		return value;
	}
});

DateAdapter.override = function(members) {
	helpers$1.extend(DateAdapter.prototype, members);
};

var _date = DateAdapter;

var core_adapters = {
	_date: _date
};

/**
 * Namespace to hold static tick generation functions
 * @namespace Chart.Ticks
 */
var core_ticks = {
	/**
	 * Namespace to hold formatters for different types of ticks
	 * @namespace Chart.Ticks.formatters
	 */
	formatters: {
		/**
		 * Formatter for value labels
		 * @method Chart.Ticks.formatters.values
		 * @param value the value to display
		 * @return {string|string[]} the label to display
		 */
		values: function(value) {
			return helpers$1.isArray(value) ? value : '' + value;
		},

		/**
		 * Formatter for linear numeric ticks
		 * @method Chart.Ticks.formatters.linear
		 * @param tickValue {number} the value to be formatted
		 * @param index {number} the position of the tickValue parameter in the ticks array
		 * @param ticks {number[]} the list of ticks being converted
		 * @return {string} string representation of the tickValue parameter
		 */
		linear: function(tickValue, index, ticks) {
			// If we have lots of ticks, don't use the ones
			var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];

			// If we have a number like 2.5 as the delta, figure out how many decimal places we need
			if (Math.abs(delta) > 1) {
				if (tickValue !== Math.floor(tickValue)) {
					// not an integer
					delta = tickValue - Math.floor(tickValue);
				}
			}

			var logDelta = helpers$1.log10(Math.abs(delta));
			var tickString = '';

			if (tickValue !== 0) {
				var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));
				if (maxTick < 1e-4) { // all ticks are small numbers; use scientific notation
					var logTick = helpers$1.log10(Math.abs(tickValue));
					var numExponential = Math.floor(logTick) - Math.floor(logDelta);
					numExponential = Math.max(Math.min(numExponential, 20), 0);
					tickString = tickValue.toExponential(numExponential);
				} else {
					var numDecimal = -1 * Math.floor(logDelta);
					numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places
					tickString = tickValue.toFixed(numDecimal);
				}
			} else {
				tickString = '0'; // never show decimal places for 0
			}

			return tickString;
		},

		logarithmic: function(tickValue, index, ticks) {
			var remain = tickValue / (Math.pow(10, Math.floor(helpers$1.log10(tickValue))));

			if (tickValue === 0) {
				return '0';
			} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
				return tickValue.toExponential();
			}
			return '';
		}
	}
};

var isArray = helpers$1.isArray;
var isNullOrUndef = helpers$1.isNullOrUndef;
var valueOrDefault$a = helpers$1.valueOrDefault;
var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;

core_defaults._set('scale', {
	display: true,
	position: 'left',
	offset: false,

	// grid line settings
	gridLines: {
		display: true,
		color: 'rgba(0,0,0,0.1)',
		lineWidth: 1,
		drawBorder: true,
		drawOnChartArea: true,
		drawTicks: true,
		tickMarkLength: 10,
		zeroLineWidth: 1,
		zeroLineColor: 'rgba(0,0,0,0.25)',
		zeroLineBorderDash: [],
		zeroLineBorderDashOffset: 0.0,
		offsetGridLines: false,
		borderDash: [],
		borderDashOffset: 0.0
	},

	// scale label
	scaleLabel: {
		// display property
		display: false,

		// actual label
		labelString: '',

		// top/bottom padding
		padding: {
			top: 4,
			bottom: 4
		}
	},

	// label settings
	ticks: {
		beginAtZero: false,
		minRotation: 0,
		maxRotation: 50,
		mirror: false,
		padding: 0,
		reverse: false,
		display: true,
		autoSkip: true,
		autoSkipPadding: 0,
		labelOffset: 0,
		// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
		callback: core_ticks.formatters.values,
		minor: {},
		major: {}
	}
});

/** Returns a new array containing numItems from arr */
function sample(arr, numItems) {
	var result = [];
	var increment = arr.length / numItems;
	var i = 0;
	var len = arr.length;

	for (; i < len; i += increment) {
		result.push(arr[Math.floor(i)]);
	}
	return result;
}

function getPixelForGridLine(scale, index, offsetGridLines) {
	var length = scale.getTicks().length;
	var validIndex = Math.min(index, length - 1);
	var lineValue = scale.getPixelForTick(validIndex);
	var start = scale._startPixel;
	var end = scale._endPixel;
	var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.
	var offset;

	if (offsetGridLines) {
		if (length === 1) {
			offset = Math.max(lineValue - start, end - lineValue);
		} else if (index === 0) {
			offset = (scale.getPixelForTick(1) - lineValue) / 2;
		} else {
			offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
		}
		lineValue += validIndex < index ? offset : -offset;

		// Return undefined if the pixel is out of the range
		if (lineValue < start - epsilon || lineValue > end + epsilon) {
			return;
		}
	}
	return lineValue;
}

function garbageCollect(caches, length) {
	helpers$1.each(caches, function(cache) {
		var gc = cache.gc;
		var gcLen = gc.length / 2;
		var i;
		if (gcLen > length) {
			for (i = 0; i < gcLen; ++i) {
				delete cache.data[gc[i]];
			}
			gc.splice(0, gcLen);
		}
	});
}

/**
 * Returns {width, height, offset} objects for the first, last, widest, highest tick
 * labels where offset indicates the anchor point offset from the top in pixels.
 */
function computeLabelSizes(ctx, tickFonts, ticks, caches) {
	var length = ticks.length;
	var widths = [];
	var heights = [];
	var offsets = [];
	var widestLabelSize = 0;
	var highestLabelSize = 0;
	var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel, widest, highest;

	for (i = 0; i < length; ++i) {
		label = ticks[i].label;
		tickFont = ticks[i].major ? tickFonts.major : tickFonts.minor;
		ctx.font = fontString = tickFont.string;
		cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};
		lineHeight = tickFont.lineHeight;
		width = height = 0;
		// Undefined labels and arrays should not be measured
		if (!isNullOrUndef(label) && !isArray(label)) {
			width = helpers$1.measureText(ctx, cache.data, cache.gc, width, label);
			height = lineHeight;
		} else if (isArray(label)) {
			// if it is an array let's measure each element
			for (j = 0, jlen = label.length; j < jlen; ++j) {
				nestedLabel = label[j];
				// Undefined labels and arrays should not be measured
				if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
					width = helpers$1.measureText(ctx, cache.data, cache.gc, width, nestedLabel);
					height += lineHeight;
				}
			}
		}
		widths.push(width);
		heights.push(height);
		offsets.push(lineHeight / 2);
		widestLabelSize = Math.max(width, widestLabelSize);
		highestLabelSize = Math.max(height, highestLabelSize);
	}
	garbageCollect(caches, length);

	widest = widths.indexOf(widestLabelSize);
	highest = heights.indexOf(highestLabelSize);

	function valueAt(idx) {
		return {
			width: widths[idx] || 0,
			height: heights[idx] || 0,
			offset: offsets[idx] || 0
		};
	}

	return {
		first: valueAt(0),
		last: valueAt(length - 1),
		widest: valueAt(widest),
		highest: valueAt(highest)
	};
}

function getTickMarkLength(options) {
	return options.drawTicks ? options.tickMarkLength : 0;
}

function getScaleLabelHeight(options) {
	var font, padding;

	if (!options.display) {
		return 0;
	}

	font = helpers$1.options._parseFont(options);
	padding = helpers$1.options.toPadding(options.padding);

	return font.lineHeight + padding.height;
}

function parseFontOptions(options, nestedOpts) {
	return helpers$1.extend(helpers$1.options._parseFont({
		fontFamily: valueOrDefault$a(nestedOpts.fontFamily, options.fontFamily),
		fontSize: valueOrDefault$a(nestedOpts.fontSize, options.fontSize),
		fontStyle: valueOrDefault$a(nestedOpts.fontStyle, options.fontStyle),
		lineHeight: valueOrDefault$a(nestedOpts.lineHeight, options.lineHeight)
	}), {
		color: helpers$1.options.resolve([nestedOpts.fontColor, options.fontColor, core_defaults.global.defaultFontColor])
	});
}

function parseTickFontOptions(options) {
	var minor = parseFontOptions(options, options.minor);
	var major = options.major.enabled ? parseFontOptions(options, options.major) : minor;

	return {minor: minor, major: major};
}

function nonSkipped(ticksToFilter) {
	var filtered = [];
	var item, index, len;
	for (index = 0, len = ticksToFilter.length; index < len; ++index) {
		item = ticksToFilter[index];
		if (typeof item._index !== 'undefined') {
			filtered.push(item);
		}
	}
	return filtered;
}

function getEvenSpacing(arr) {
	var len = arr.length;
	var i, diff;

	if (len < 2) {
		return false;
	}

	for (diff = arr[0], i = 1; i < len; ++i) {
		if (arr[i] - arr[i - 1] !== diff) {
			return false;
		}
	}
	return diff;
}

function calculateSpacing(majorIndices, ticks, axisLength, ticksLimit) {
	var evenMajorSpacing = getEvenSpacing(majorIndices);
	var spacing = (ticks.length - 1) / ticksLimit;
	var factors, factor, i, ilen;

	// If the major ticks are evenly spaced apart, place the minor ticks
	// so that they divide the major ticks into even chunks
	if (!evenMajorSpacing) {
		return Math.max(spacing, 1);
	}

	factors = helpers$1.math._factorize(evenMajorSpacing);
	for (i = 0, ilen = factors.length - 1; i < ilen; i++) {
		factor = factors[i];
		if (factor > spacing) {
			return factor;
		}
	}
	return Math.max(spacing, 1);
}

function getMajorIndices(ticks) {
	var result = [];
	var i, ilen;
	for (i = 0, ilen = ticks.length; i < ilen; i++) {
		if (ticks[i].major) {
			result.push(i);
		}
	}
	return result;
}

function skipMajors(ticks, majorIndices, spacing) {
	var count = 0;
	var next = majorIndices[0];
	var i, tick;

	spacing = Math.ceil(spacing);
	for (i = 0; i < ticks.length; i++) {
		tick = ticks[i];
		if (i === next) {
			tick._index = i;
			count++;
			next = majorIndices[count * spacing];
		} else {
			delete tick.label;
		}
	}
}

function skip(ticks, spacing, majorStart, majorEnd) {
	var start = valueOrDefault$a(majorStart, 0);
	var end = Math.min(valueOrDefault$a(majorEnd, ticks.length), ticks.length);
	var count = 0;
	var length, i, tick, next;

	spacing = Math.ceil(spacing);
	if (majorEnd) {
		length = majorEnd - majorStart;
		spacing = length / Math.floor(length / spacing);
	}

	next = start;

	while (next < 0) {
		count++;
		next = Math.round(start + count * spacing);
	}

	for (i = Math.max(start, 0); i < end; i++) {
		tick = ticks[i];
		if (i === next) {
			tick._index = i;
			count++;
			next = Math.round(start + count * spacing);
		} else {
			delete tick.label;
		}
	}
}

var Scale = core_element.extend({

	zeroLineIndex: 0,

	/**
	 * Get the padding needed for the scale
	 * @method getPadding
	 * @private
	 * @returns {Padding} the necessary padding
	 */
	getPadding: function() {
		var me = this;
		return {
			left: me.paddingLeft || 0,
			top: me.paddingTop || 0,
			right: me.paddingRight || 0,
			bottom: me.paddingBottom || 0
		};
	},

	/**
	 * Returns the scale tick objects ({label, major})
	 * @since 2.7
	 */
	getTicks: function() {
		return this._ticks;
	},

	/**
	* @private
	*/
	_getLabels: function() {
		var data = this.chart.data;
		return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
	},

	// These methods are ordered by lifecyle. Utilities then follow.
	// Any function defined here is inherited by all scale types.
	// Any function can be extended by the scale type

	/**
	 * Provided for backward compatibility, not available anymore
	 * @function Chart.Scale.mergeTicksOptions
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 */
	mergeTicksOptions: function() {
		// noop
	},

	beforeUpdate: function() {
		helpers$1.callback(this.options.beforeUpdate, [this]);
	},

	/**
	 * @param {number} maxWidth - the max width in pixels
	 * @param {number} maxHeight - the max height in pixels
	 * @param {object} margins - the space between the edge of the other scales and edge of the chart
	 *   This space comes from two sources:
	 *     - padding - space that's required to show the labels at the edges of the scale
	 *     - thickness of scales or legends in another orientation
	 */
	update: function(maxWidth, maxHeight, margins) {
		var me = this;
		var tickOpts = me.options.ticks;
		var sampleSize = tickOpts.sampleSize;
		var i, ilen, labels, ticks, samplingEnabled;

		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
		me.beforeUpdate();

		// Absorb the master measurements
		me.maxWidth = maxWidth;
		me.maxHeight = maxHeight;
		me.margins = helpers$1.extend({
			left: 0,
			right: 0,
			top: 0,
			bottom: 0
		}, margins);

		me._ticks = null;
		me.ticks = null;
		me._labelSizes = null;
		me._maxLabelLines = 0;
		me.longestLabelWidth = 0;
		me.longestTextCache = me.longestTextCache || {};
		me._gridLineItems = null;
		me._labelItems = null;

		// Dimensions
		me.beforeSetDimensions();
		me.setDimensions();
		me.afterSetDimensions();

		// Data min/max
		me.beforeDataLimits();
		me.determineDataLimits();
		me.afterDataLimits();

		// Ticks - `this.ticks` is now DEPRECATED!
		// Internal ticks are now stored as objects in the PRIVATE `this._ticks` member
		// and must not be accessed directly from outside this class. `this.ticks` being
		// around for long time and not marked as private, we can't change its structure
		// without unexpected breaking changes. If you need to access the scale ticks,
		// use scale.getTicks() instead.

		me.beforeBuildTicks();

		// New implementations should return an array of objects but for BACKWARD COMPAT,
		// we still support no return (`this.ticks` internally set by calling this method).
		ticks = me.buildTicks() || [];

		// Allow modification of ticks in callback.
		ticks = me.afterBuildTicks(ticks) || ticks;

		// Ensure ticks contains ticks in new tick format
		if ((!ticks || !ticks.length) && me.ticks) {
			ticks = [];
			for (i = 0, ilen = me.ticks.length; i < ilen; ++i) {
				ticks.push({
					value: me.ticks[i],
					major: false
				});
			}
		}

		me._ticks = ticks;

		// Compute tick rotation and fit using a sampled subset of labels
		// We generally don't need to compute the size of every single label for determining scale size
		samplingEnabled = sampleSize < ticks.length;
		labels = me._convertTicksToLabels(samplingEnabled ? sample(ticks, sampleSize) : ticks);

		// _configure is called twice, once here, once from core.controller.updateLayout.
		// Here we haven't been positioned yet, but dimensions are correct.
		// Variables set in _configure are needed for calculateTickRotation, and
		// it's ok that coordinates are not correct there, only dimensions matter.
		me._configure();

		// Tick Rotation
		me.beforeCalculateTickRotation();
		me.calculateTickRotation();
		me.afterCalculateTickRotation();

		me.beforeFit();
		me.fit();
		me.afterFit();

		// Auto-skip
		me._ticksToDraw = tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto') ? me._autoSkip(ticks) : ticks;

		if (samplingEnabled) {
			// Generate labels using all non-skipped ticks
			labels = me._convertTicksToLabels(me._ticksToDraw);
		}

		me.ticks = labels;   // BACKWARD COMPATIBILITY

		// IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!

		me.afterUpdate();

		// TODO(v3): remove minSize as a public property and return value from all layout boxes. It is unused
		// make maxWidth and maxHeight private
		return me.minSize;
	},

	/**
	 * @private
	 */
	_configure: function() {
		var me = this;
		var reversePixels = me.options.ticks.reverse;
		var startPixel, endPixel;

		if (me.isHorizontal()) {
			startPixel = me.left;
			endPixel = me.right;
		} else {
			startPixel = me.top;
			endPixel = me.bottom;
			// by default vertical scales are from bottom to top, so pixels are reversed
			reversePixels = !reversePixels;
		}
		me._startPixel = startPixel;
		me._endPixel = endPixel;
		me._reversePixels = reversePixels;
		me._length = endPixel - startPixel;
	},

	afterUpdate: function() {
		helpers$1.callback(this.options.afterUpdate, [this]);
	},

	//

	beforeSetDimensions: function() {
		helpers$1.callback(this.options.beforeSetDimensions, [this]);
	},
	setDimensions: function() {
		var me = this;
		// Set the unconstrained dimension before label rotation
		if (me.isHorizontal()) {
			// Reset position before calculating rotation
			me.width = me.maxWidth;
			me.left = 0;
			me.right = me.width;
		} else {
			me.height = me.maxHeight;

			// Reset position before calculating rotation
			me.top = 0;
			me.bottom = me.height;
		}

		// Reset padding
		me.paddingLeft = 0;
		me.paddingTop = 0;
		me.paddingRight = 0;
		me.paddingBottom = 0;
	},
	afterSetDimensions: function() {
		helpers$1.callback(this.options.afterSetDimensions, [this]);
	},

	// Data limits
	beforeDataLimits: function() {
		helpers$1.callback(this.options.beforeDataLimits, [this]);
	},
	determineDataLimits: helpers$1.noop,
	afterDataLimits: function() {
		helpers$1.callback(this.options.afterDataLimits, [this]);
	},

	//
	beforeBuildTicks: function() {
		helpers$1.callback(this.options.beforeBuildTicks, [this]);
	},
	buildTicks: helpers$1.noop,
	afterBuildTicks: function(ticks) {
		var me = this;
		// ticks is empty for old axis implementations here
		if (isArray(ticks) && ticks.length) {
			return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);
		}
		// Support old implementations (that modified `this.ticks` directly in buildTicks)
		me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;
		return ticks;
	},

	beforeTickToLabelConversion: function() {
		helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);
	},
	convertTicksToLabels: function() {
		var me = this;
		// Convert ticks to strings
		var tickOpts = me.options.ticks;
		me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);
	},
	afterTickToLabelConversion: function() {
		helpers$1.callback(this.options.afterTickToLabelConversion, [this]);
	},

	//

	beforeCalculateTickRotation: function() {
		helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);
	},
	calculateTickRotation: function() {
		var me = this;
		var options = me.options;
		var tickOpts = options.ticks;
		var numTicks = me.getTicks().length;
		var minRotation = tickOpts.minRotation || 0;
		var maxRotation = tickOpts.maxRotation;
		var labelRotation = minRotation;
		var labelSizes, maxLabelWidth, maxLabelHeight, maxWidth, tickWidth, maxHeight, maxLabelDiagonal;

		if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {
			me.labelRotation = minRotation;
			return;
		}

		labelSizes = me._getLabelSizes();
		maxLabelWidth = labelSizes.widest.width;
		maxLabelHeight = labelSizes.highest.height - labelSizes.highest.offset;

		// Estimate the width of each grid based on the canvas width, the maximum
		// label width and the number of tick intervals
		maxWidth = Math.min(me.maxWidth, me.chart.width - maxLabelWidth);
		tickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);

		// Allow 3 pixels x2 padding either side for label readability
		if (maxLabelWidth + 6 > tickWidth) {
			tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
			maxHeight = me.maxHeight - getTickMarkLength(options.gridLines)
				- tickOpts.padding - getScaleLabelHeight(options.scaleLabel);
			maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
			labelRotation = helpers$1.toDegrees(Math.min(
				Math.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)),
				Math.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)
			));
			labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
		}

		me.labelRotation = labelRotation;
	},
	afterCalculateTickRotation: function() {
		helpers$1.callback(this.options.afterCalculateTickRotation, [this]);
	},

	//

	beforeFit: function() {
		helpers$1.callback(this.options.beforeFit, [this]);
	},
	fit: function() {
		var me = this;
		// Reset
		var minSize = me.minSize = {
			width: 0,
			height: 0
		};

		var chart = me.chart;
		var opts = me.options;
		var tickOpts = opts.ticks;
		var scaleLabelOpts = opts.scaleLabel;
		var gridLineOpts = opts.gridLines;
		var display = me._isVisible();
		var isBottom = opts.position === 'bottom';
		var isHorizontal = me.isHorizontal();

		// Width
		if (isHorizontal) {
			minSize.width = me.maxWidth;
		} else if (display) {
			minSize.width = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
		}

		// height
		if (!isHorizontal) {
			minSize.height = me.maxHeight; // fill all the height
		} else if (display) {
			minSize.height = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
		}

		// Don't bother fitting the ticks if we are not showing the labels
		if (tickOpts.display && display) {
			var tickFonts = parseTickFontOptions(tickOpts);
			var labelSizes = me._getLabelSizes();
			var firstLabelSize = labelSizes.first;
			var lastLabelSize = labelSizes.last;
			var widestLabelSize = labelSizes.widest;
			var highestLabelSize = labelSizes.highest;
			var lineSpace = tickFonts.minor.lineHeight * 0.4;
			var tickPadding = tickOpts.padding;

			if (isHorizontal) {
				// A horizontal axis is more constrained by the height.
				var isRotated = me.labelRotation !== 0;
				var angleRadians = helpers$1.toRadians(me.labelRotation);
				var cosRotation = Math.cos(angleRadians);
				var sinRotation = Math.sin(angleRadians);

				var labelHeight = sinRotation * widestLabelSize.width
					+ cosRotation * (highestLabelSize.height - (isRotated ? highestLabelSize.offset : 0))
					+ (isRotated ? 0 : lineSpace); // padding

				minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);

				var offsetLeft = me.getPixelForTick(0) - me.left;
				var offsetRight = me.right - me.getPixelForTick(me.getTicks().length - 1);
				var paddingLeft, paddingRight;

				// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned
				// which means that the right padding is dominated by the font height
				if (isRotated) {
					paddingLeft = isBottom ?
						cosRotation * firstLabelSize.width + sinRotation * firstLabelSize.offset :
						sinRotation * (firstLabelSize.height - firstLabelSize.offset);
					paddingRight = isBottom ?
						sinRotation * (lastLabelSize.height - lastLabelSize.offset) :
						cosRotation * lastLabelSize.width + sinRotation * lastLabelSize.offset;
				} else {
					paddingLeft = firstLabelSize.width / 2;
					paddingRight = lastLabelSize.width / 2;
				}

				// Adjust padding taking into account changes in offsets
				// and add 3 px to move away from canvas edges
				me.paddingLeft = Math.max((paddingLeft - offsetLeft) * me.width / (me.width - offsetLeft), 0) + 3;
				me.paddingRight = Math.max((paddingRight - offsetRight) * me.width / (me.width - offsetRight), 0) + 3;
			} else {
				// A vertical axis is more constrained by the width. Labels are the
				// dominant factor here, so get that length first and account for padding
				var labelWidth = tickOpts.mirror ? 0 :
					// use lineSpace for consistency with horizontal axis
					// tickPadding is not implemented for horizontal
					widestLabelSize.width + tickPadding + lineSpace;

				minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth);

				me.paddingTop = firstLabelSize.height / 2;
				me.paddingBottom = lastLabelSize.height / 2;
			}
		}

		me.handleMargins();

		if (isHorizontal) {
			me.width = me._length = chart.width - me.margins.left - me.margins.right;
			me.height = minSize.height;
		} else {
			me.width = minSize.width;
			me.height = me._length = chart.height - me.margins.top - me.margins.bottom;
		}
	},

	/**
	 * Handle margins and padding interactions
	 * @private
	 */
	handleMargins: function() {
		var me = this;
		if (me.margins) {
			me.margins.left = Math.max(me.paddingLeft, me.margins.left);
			me.margins.top = Math.max(me.paddingTop, me.margins.top);
			me.margins.right = Math.max(me.paddingRight, me.margins.right);
			me.margins.bottom = Math.max(me.paddingBottom, me.margins.bottom);
		}
	},

	afterFit: function() {
		helpers$1.callback(this.options.afterFit, [this]);
	},

	// Shared Methods
	isHorizontal: function() {
		var pos = this.options.position;
		return pos === 'top' || pos === 'bottom';
	},
	isFullWidth: function() {
		return this.options.fullWidth;
	},

	// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
	getRightValue: function(rawValue) {
		// Null and undefined values first
		if (isNullOrUndef(rawValue)) {
			return NaN;
		}
		// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values
		if ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {
			return NaN;
		}

		// If it is in fact an object, dive in one more level
		if (rawValue) {
			if (this.isHorizontal()) {
				if (rawValue.x !== undefined) {
					return this.getRightValue(rawValue.x);
				}
			} else if (rawValue.y !== undefined) {
				return this.getRightValue(rawValue.y);
			}
		}

		// Value is good, return it
		return rawValue;
	},

	_convertTicksToLabels: function(ticks) {
		var me = this;
		var labels, i, ilen;

		me.ticks = ticks.map(function(tick) {
			return tick.value;
		});

		me.beforeTickToLabelConversion();

		// New implementations should return the formatted tick labels but for BACKWARD
		// COMPAT, we still support no return (`this.ticks` internally changed by calling
		// this method and supposed to contain only string values).
		labels = me.convertTicksToLabels(ticks) || me.ticks;

		me.afterTickToLabelConversion();

		// BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)
		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
			ticks[i].label = labels[i];
		}

		return labels;
	},

	/**
	 * @private
	 */
	_getLabelSizes: function() {
		var me = this;
		var labelSizes = me._labelSizes;

		if (!labelSizes) {
			me._labelSizes = labelSizes = computeLabelSizes(me.ctx, parseTickFontOptions(me.options.ticks), me.getTicks(), me.longestTextCache);
			me.longestLabelWidth = labelSizes.widest.width;
		}

		return labelSizes;
	},

	/**
	 * @private
	 */
	_parseValue: function(value) {
		var start, end, min, max;

		if (isArray(value)) {
			start = +this.getRightValue(value[0]);
			end = +this.getRightValue(value[1]);
			min = Math.min(start, end);
			max = Math.max(start, end);
		} else {
			value = +this.getRightValue(value);
			start = undefined;
			end = value;
			min = value;
			max = value;
		}

		return {
			min: min,
			max: max,
			start: start,
			end: end
		};
	},

	/**
	* @private
	*/
	_getScaleLabel: function(rawValue) {
		var v = this._parseValue(rawValue);
		if (v.start !== undefined) {
			return '[' + v.start + ', ' + v.end + ']';
		}

		return +this.getRightValue(rawValue);
	},

	/**
	 * Used to get the value to display in the tooltip for the data at the given index
	 * @param index
	 * @param datasetIndex
	 */
	getLabelForIndex: helpers$1.noop,

	/**
	 * Returns the location of the given data point. Value can either be an index or a numerical value
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 * @param value
	 * @param index
	 * @param datasetIndex
	 */
	getPixelForValue: helpers$1.noop,

	/**
	 * Used to get the data value from a given pixel. This is the inverse of getPixelForValue
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 * @param pixel
	 */
	getValueForPixel: helpers$1.noop,

	/**
	 * Returns the location of the tick at the given index
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 */
	getPixelForTick: function(index) {
		var me = this;
		var offset = me.options.offset;
		var numTicks = me._ticks.length;
		var tickWidth = 1 / Math.max(numTicks - (offset ? 0 : 1), 1);

		return index < 0 || index > numTicks - 1
			? null
			: me.getPixelForDecimal(index * tickWidth + (offset ? tickWidth / 2 : 0));
	},

	/**
	 * Utility for getting the pixel location of a percentage of scale
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 */
	getPixelForDecimal: function(decimal) {
		var me = this;

		if (me._reversePixels) {
			decimal = 1 - decimal;
		}

		return me._startPixel + decimal * me._length;
	},

	getDecimalForPixel: function(pixel) {
		var decimal = (pixel - this._startPixel) / this._length;
		return this._reversePixels ? 1 - decimal : decimal;
	},

	/**
	 * Returns the pixel for the minimum chart value
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 */
	getBasePixel: function() {
		return this.getPixelForValue(this.getBaseValue());
	},

	getBaseValue: function() {
		var me = this;
		var min = me.min;
		var max = me.max;

		return me.beginAtZero ? 0 :
			min < 0 && max < 0 ? max :
			min > 0 && max > 0 ? min :
			0;
	},

	/**
	 * Returns a subset of ticks to be plotted to avoid overlapping labels.
	 * @private
	 */
	_autoSkip: function(ticks) {
		var me = this;
		var tickOpts = me.options.ticks;
		var axisLength = me._length;
		var ticksLimit = tickOpts.maxTicksLimit || axisLength / me._tickSize() + 1;
		var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
		var numMajorIndices = majorIndices.length;
		var first = majorIndices[0];
		var last = majorIndices[numMajorIndices - 1];
		var i, ilen, spacing, avgMajorSpacing;

		// If there are too many major ticks to display them all
		if (numMajorIndices > ticksLimit) {
			skipMajors(ticks, majorIndices, numMajorIndices / ticksLimit);
			return nonSkipped(ticks);
		}

		spacing = calculateSpacing(majorIndices, ticks, axisLength, ticksLimit);

		if (numMajorIndices > 0) {
			for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
				skip(ticks, spacing, majorIndices[i], majorIndices[i + 1]);
			}
			avgMajorSpacing = numMajorIndices > 1 ? (last - first) / (numMajorIndices - 1) : null;
			skip(ticks, spacing, helpers$1.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
			skip(ticks, spacing, last, helpers$1.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
			return nonSkipped(ticks);
		}
		skip(ticks, spacing);
		return nonSkipped(ticks);
	},

	/**
	 * @private
	 */
	_tickSize: function() {
		var me = this;
		var optionTicks = me.options.ticks;

		// Calculate space needed by label in axis direction.
		var rot = helpers$1.toRadians(me.labelRotation);
		var cos = Math.abs(Math.cos(rot));
		var sin = Math.abs(Math.sin(rot));

		var labelSizes = me._getLabelSizes();
		var padding = optionTicks.autoSkipPadding || 0;
		var w = labelSizes ? labelSizes.widest.width + padding : 0;
		var h = labelSizes ? labelSizes.highest.height + padding : 0;

		// Calculate space needed for 1 tick in axis direction.
		return me.isHorizontal()
			? h * cos > w * sin ? w / cos : h / sin
			: h * sin < w * cos ? h / cos : w / sin;
	},

	/**
	 * @private
	 */
	_isVisible: function() {
		var me = this;
		var chart = me.chart;
		var display = me.options.display;
		var i, ilen, meta;

		if (display !== 'auto') {
			return !!display;
		}

		// When 'auto', the scale is visible if at least one associated dataset is visible.
		for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
			if (chart.isDatasetVisible(i)) {
				meta = chart.getDatasetMeta(i);
				if (meta.xAxisID === me.id || meta.yAxisID === me.id) {
					return true;
				}
			}
		}

		return false;
	},

	/**
	 * @private
	 */
	_computeGridLineItems: function(chartArea) {
		var me = this;
		var chart = me.chart;
		var options = me.options;
		var gridLines = options.gridLines;
		var position = options.position;
		var offsetGridLines = gridLines.offsetGridLines;
		var isHorizontal = me.isHorizontal();
		var ticks = me._ticksToDraw;
		var ticksLength = ticks.length + (offsetGridLines ? 1 : 0);

		var tl = getTickMarkLength(gridLines);
		var items = [];
		var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
		var axisHalfWidth = axisWidth / 2;
		var alignPixel = helpers$1._alignPixel;
		var alignBorderValue = function(pixel) {
			return alignPixel(chart, pixel, axisWidth);
		};
		var borderValue, i, tick, lineValue, alignedLineValue;
		var tx1, ty1, tx2, ty2, x1, y1, x2, y2, lineWidth, lineColor, borderDash, borderDashOffset;

		if (position === 'top') {
			borderValue = alignBorderValue(me.bottom);
			ty1 = me.bottom - tl;
			ty2 = borderValue - axisHalfWidth;
			y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
			y2 = chartArea.bottom;
		} else if (position === 'bottom') {
			borderValue = alignBorderValue(me.top);
			y1 = chartArea.top;
			y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
			ty1 = borderValue + axisHalfWidth;
			ty2 = me.top + tl;
		} else if (position === 'left') {
			borderValue = alignBorderValue(me.right);
			tx1 = me.right - tl;
			tx2 = borderValue - axisHalfWidth;
			x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
			x2 = chartArea.right;
		} else {
			borderValue = alignBorderValue(me.left);
			x1 = chartArea.left;
			x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
			tx1 = borderValue + axisHalfWidth;
			tx2 = me.left + tl;
		}

		for (i = 0; i < ticksLength; ++i) {
			tick = ticks[i] || {};

			// autoskipper skipped this tick (#4635)
			if (isNullOrUndef(tick.label) && i < ticks.length) {
				continue;
			}

			if (i === me.zeroLineIndex && options.offset === offsetGridLines) {
				// Draw the first index specially
				lineWidth = gridLines.zeroLineWidth;
				lineColor = gridLines.zeroLineColor;
				borderDash = gridLines.zeroLineBorderDash || [];
				borderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;
			} else {
				lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, i, 1);
				lineColor = valueAtIndexOrDefault(gridLines.color, i, 'rgba(0,0,0,0.1)');
				borderDash = gridLines.borderDash || [];
				borderDashOffset = gridLines.borderDashOffset || 0.0;
			}

			lineValue = getPixelForGridLine(me, tick._index || i, offsetGridLines);

			// Skip if the pixel is out of the range
			if (lineValue === undefined) {
				continue;
			}

			alignedLineValue = alignPixel(chart, lineValue, lineWidth);

			if (isHorizontal) {
				tx1 = tx2 = x1 = x2 = alignedLineValue;
			} else {
				ty1 = ty2 = y1 = y2 = alignedLineValue;
			}

			items.push({
				tx1: tx1,
				ty1: ty1,
				tx2: tx2,
				ty2: ty2,
				x1: x1,
				y1: y1,
				x2: x2,
				y2: y2,
				width: lineWidth,
				color: lineColor,
				borderDash: borderDash,
				borderDashOffset: borderDashOffset,
			});
		}

		items.ticksLength = ticksLength;
		items.borderValue = borderValue;

		return items;
	},

	/**
	 * @private
	 */
	_computeLabelItems: function() {
		var me = this;
		var options = me.options;
		var optionTicks = options.ticks;
		var position = options.position;
		var isMirrored = optionTicks.mirror;
		var isHorizontal = me.isHorizontal();
		var ticks = me._ticksToDraw;
		var fonts = parseTickFontOptions(optionTicks);
		var tickPadding = optionTicks.padding;
		var tl = getTickMarkLength(options.gridLines);
		var rotation = -helpers$1.toRadians(me.labelRotation);
		var items = [];
		var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;

		if (position === 'top') {
			y = me.bottom - tl - tickPadding;
			textAlign = !rotation ? 'center' : 'left';
		} else if (position === 'bottom') {
			y = me.top + tl + tickPadding;
			textAlign = !rotation ? 'center' : 'right';
		} else if (position === 'left') {
			x = me.right - (isMirrored ? 0 : tl) - tickPadding;
			textAlign = isMirrored ? 'left' : 'right';
		} else {
			x = me.left + (isMirrored ? 0 : tl) + tickPadding;
			textAlign = isMirrored ? 'right' : 'left';
		}

		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
			tick = ticks[i];
			label = tick.label;

			// autoskipper skipped this tick (#4635)
			if (isNullOrUndef(label)) {
				continue;
			}

			pixel = me.getPixelForTick(tick._index || i) + optionTicks.labelOffset;
			font = tick.major ? fonts.major : fonts.minor;
			lineHeight = font.lineHeight;
			lineCount = isArray(label) ? label.length : 1;

			if (isHorizontal) {
				x = pixel;
				textOffset = position === 'top'
					? ((!rotation ? 0.5 : 1) - lineCount) * lineHeight
					: (!rotation ? 0.5 : 0) * lineHeight;
			} else {
				y = pixel;
				textOffset = (1 - lineCount) * lineHeight / 2;
			}

			items.push({
				x: x,
				y: y,
				rotation: rotation,
				label: label,
				font: font,
				textOffset: textOffset,
				textAlign: textAlign
			});
		}

		return items;
	},

	/**
	 * @private
	 */
	_drawGrid: function(chartArea) {
		var me = this;
		var gridLines = me.options.gridLines;

		if (!gridLines.display) {
			return;
		}

		var ctx = me.ctx;
		var chart = me.chart;
		var alignPixel = helpers$1._alignPixel;
		var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
		var items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));
		var width, color, i, ilen, item;

		for (i = 0, ilen = items.length; i < ilen; ++i) {
			item = items[i];
			width = item.width;
			color = item.color;

			if (width && color) {
				ctx.save();
				ctx.lineWidth = width;
				ctx.strokeStyle = color;
				if (ctx.setLineDash) {
					ctx.setLineDash(item.borderDash);
					ctx.lineDashOffset = item.borderDashOffset;
				}

				ctx.beginPath();

				if (gridLines.drawTicks) {
					ctx.moveTo(item.tx1, item.ty1);
					ctx.lineTo(item.tx2, item.ty2);
				}

				if (gridLines.drawOnChartArea) {
					ctx.moveTo(item.x1, item.y1);
					ctx.lineTo(item.x2, item.y2);
				}

				ctx.stroke();
				ctx.restore();
			}
		}

		if (axisWidth) {
			// Draw the line at the edge of the axis
			var firstLineWidth = axisWidth;
			var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, items.ticksLength - 1, 1);
			var borderValue = items.borderValue;
			var x1, x2, y1, y2;

			if (me.isHorizontal()) {
				x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;
				x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;
				y1 = y2 = borderValue;
			} else {
				y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;
				y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;
				x1 = x2 = borderValue;
			}

			ctx.lineWidth = axisWidth;
			ctx.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);
			ctx.beginPath();
			ctx.moveTo(x1, y1);
			ctx.lineTo(x2, y2);
			ctx.stroke();
		}
	},

	/**
	 * @private
	 */
	_drawLabels: function() {
		var me = this;
		var optionTicks = me.options.ticks;

		if (!optionTicks.display) {
			return;
		}

		var ctx = me.ctx;
		var items = me._labelItems || (me._labelItems = me._computeLabelItems());
		var i, j, ilen, jlen, item, tickFont, label, y;

		for (i = 0, ilen = items.length; i < ilen; ++i) {
			item = items[i];
			tickFont = item.font;

			// Make sure we draw text in the correct color and font
			ctx.save();
			ctx.translate(item.x, item.y);
			ctx.rotate(item.rotation);
			ctx.font = tickFont.string;
			ctx.fillStyle = tickFont.color;
			ctx.textBaseline = 'middle';
			ctx.textAlign = item.textAlign;

			label = item.label;
			y = item.textOffset;
			if (isArray(label)) {
				for (j = 0, jlen = label.length; j < jlen; ++j) {
					// We just make sure the multiline element is a string here..
					ctx.fillText('' + label[j], 0, y);
					y += tickFont.lineHeight;
				}
			} else {
				ctx.fillText(label, 0, y);
			}
			ctx.restore();
		}
	},

	/**
	 * @private
	 */
	_drawTitle: function() {
		var me = this;
		var ctx = me.ctx;
		var options = me.options;
		var scaleLabel = options.scaleLabel;

		if (!scaleLabel.display) {
			return;
		}

		var scaleLabelFontColor = valueOrDefault$a(scaleLabel.fontColor, core_defaults.global.defaultFontColor);
		var scaleLabelFont = helpers$1.options._parseFont(scaleLabel);
		var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);
		var halfLineHeight = scaleLabelFont.lineHeight / 2;
		var position = options.position;
		var rotation = 0;
		var scaleLabelX, scaleLabelY;

		if (me.isHorizontal()) {
			scaleLabelX = me.left + me.width / 2; // midpoint of the width
			scaleLabelY = position === 'bottom'
				? me.bottom - halfLineHeight - scaleLabelPadding.bottom
				: me.top + halfLineHeight + scaleLabelPadding.top;
		} else {
			var isLeft = position === 'left';
			scaleLabelX = isLeft
				? me.left + halfLineHeight + scaleLabelPadding.top
				: me.right - halfLineHeight - scaleLabelPadding.top;
			scaleLabelY = me.top + me.height / 2;
			rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
		}

		ctx.save();
		ctx.translate(scaleLabelX, scaleLabelY);
		ctx.rotate(rotation);
		ctx.textAlign = 'center';
		ctx.textBaseline = 'middle';
		ctx.fillStyle = scaleLabelFontColor; // render in correct colour
		ctx.font = scaleLabelFont.string;
		ctx.fillText(scaleLabel.labelString, 0, 0);
		ctx.restore();
	},

	draw: function(chartArea) {
		var me = this;

		if (!me._isVisible()) {
			return;
		}

		me._drawGrid(chartArea);
		me._drawTitle();
		me._drawLabels();
	},

	/**
	 * @private
	 */
	_layers: function() {
		var me = this;
		var opts = me.options;
		var tz = opts.ticks && opts.ticks.z || 0;
		var gz = opts.gridLines && opts.gridLines.z || 0;

		if (!me._isVisible() || tz === gz || me.draw !== me._draw) {
			// backward compatibility: draw has been overridden by custom scale
			return [{
				z: tz,
				draw: function() {
					me.draw.apply(me, arguments);
				}
			}];
		}

		return [{
			z: gz,
			draw: function() {
				me._drawGrid.apply(me, arguments);
				me._drawTitle.apply(me, arguments);
			}
		}, {
			z: tz,
			draw: function() {
				me._drawLabels.apply(me, arguments);
			}
		}];
	},

	/**
	 * @private
	 */
	_getMatchingVisibleMetas: function(type) {
		var me = this;
		var isHorizontal = me.isHorizontal();
		return me.chart._getSortedVisibleDatasetMetas()
			.filter(function(meta) {
				return (!type || meta.type === type)
					&& (isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id);
			});
	}
});

Scale.prototype._draw = Scale.prototype.draw;

var core_scale = Scale;

var isNullOrUndef$1 = helpers$1.isNullOrUndef;

var defaultConfig = {
	position: 'bottom'
};

var scale_category = core_scale.extend({
	determineDataLimits: function() {
		var me = this;
		var labels = me._getLabels();
		var ticksOpts = me.options.ticks;
		var min = ticksOpts.min;
		var max = ticksOpts.max;
		var minIndex = 0;
		var maxIndex = labels.length - 1;
		var findIndex;

		if (min !== undefined) {
			// user specified min value
			findIndex = labels.indexOf(min);
			if (findIndex >= 0) {
				minIndex = findIndex;
			}
		}

		if (max !== undefined) {
			// user specified max value
			findIndex = labels.indexOf(max);
			if (findIndex >= 0) {
				maxIndex = findIndex;
			}
		}

		me.minIndex = minIndex;
		me.maxIndex = maxIndex;
		me.min = labels[minIndex];
		me.max = labels[maxIndex];
	},

	buildTicks: function() {
		var me = this;
		var labels = me._getLabels();
		var minIndex = me.minIndex;
		var maxIndex = me.maxIndex;

		// If we are viewing some subset of labels, slice the original array
		me.ticks = (minIndex === 0 && maxIndex === labels.length - 1) ? labels : labels.slice(minIndex, maxIndex + 1);
	},

	getLabelForIndex: function(index, datasetIndex) {
		var me = this;
		var chart = me.chart;

		if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {
			return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);
		}

		return me._getLabels()[index];
	},

	_configure: function() {
		var me = this;
		var offset = me.options.offset;
		var ticks = me.ticks;

		core_scale.prototype._configure.call(me);

		if (!me.isHorizontal()) {
			// For backward compatibility, vertical category scale reverse is inverted.
			me._reversePixels = !me._reversePixels;
		}

		if (!ticks) {
			return;
		}

		me._startValue = me.minIndex - (offset ? 0.5 : 0);
		me._valueRange = Math.max(ticks.length - (offset ? 0 : 1), 1);
	},

	// Used to get data value locations.  Value can either be an index or a numerical value
	getPixelForValue: function(value, index, datasetIndex) {
		var me = this;
		var valueCategory, labels, idx;

		if (!isNullOrUndef$1(index) && !isNullOrUndef$1(datasetIndex)) {
			value = me.chart.data.datasets[datasetIndex].data[index];
		}

		// If value is a data object, then index is the index in the data array,
		// not the index of the scale. We need to change that.
		if (!isNullOrUndef$1(value)) {
			valueCategory = me.isHorizontal() ? value.x : value.y;
		}
		if (valueCategory !== undefined || (value !== undefined && isNaN(index))) {
			labels = me._getLabels();
			value = helpers$1.valueOrDefault(valueCategory, value);
			idx = labels.indexOf(value);
			index = idx !== -1 ? idx : index;
			if (isNaN(index)) {
				index = value;
			}
		}
		return me.getPixelForDecimal((index - me._startValue) / me._valueRange);
	},

	getPixelForTick: function(index) {
		var ticks = this.ticks;
		return index < 0 || index > ticks.length - 1
			? null
			: this.getPixelForValue(ticks[index], index + this.minIndex);
	},

	getValueForPixel: function(pixel) {
		var me = this;
		var value = Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);
		return Math.min(Math.max(value, 0), me.ticks.length - 1);
	},

	getBasePixel: function() {
		return this.bottom;
	}
});

// INTERNAL: static default options, registered in src/index.js
var _defaults = defaultConfig;
scale_category._defaults = _defaults;

var noop = helpers$1.noop;
var isNullOrUndef$2 = helpers$1.isNullOrUndef;

/**
 * Generate a set of linear ticks
 * @param generationOptions the options used to generate the ticks
 * @param dataRange the range of the data
 * @returns {number[]} array of tick values
 */
function generateTicks(generationOptions, dataRange) {
	var ticks = [];
	// To get a "nice" value for the tick spacing, we will use the appropriately named
	// "nice number" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
	// for details.

	var MIN_SPACING = 1e-14;
	var stepSize = generationOptions.stepSize;
	var unit = stepSize || 1;
	var maxNumSpaces = generationOptions.maxTicks - 1;
	var min = generationOptions.min;
	var max = generationOptions.max;
	var precision = generationOptions.precision;
	var rmin = dataRange.min;
	var rmax = dataRange.max;
	var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;
	var factor, niceMin, niceMax, numSpaces;

	// Beyond MIN_SPACING floating point numbers being to lose precision
	// such that we can't do the math necessary to generate ticks
	if (spacing < MIN_SPACING && isNullOrUndef$2(min) && isNullOrUndef$2(max)) {
		return [rmin, rmax];
	}

	numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
	if (numSpaces > maxNumSpaces) {
		// If the calculated num of spaces exceeds maxNumSpaces, recalculate it
		spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;
	}

	if (stepSize || isNullOrUndef$2(precision)) {
		// If a precision is not specified, calculate factor based on spacing
		factor = Math.pow(10, helpers$1._decimalPlaces(spacing));
	} else {
		// If the user specified a precision, round to that number of decimal places
		factor = Math.pow(10, precision);
		spacing = Math.ceil(spacing * factor) / factor;
	}

	niceMin = Math.floor(rmin / spacing) * spacing;
	niceMax = Math.ceil(rmax / spacing) * spacing;

	// If min, max and stepSize is set and they make an evenly spaced scale use it.
	if (stepSize) {
		// If very close to our whole number, use it.
		if (!isNullOrUndef$2(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {
			niceMin = min;
		}
		if (!isNullOrUndef$2(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {
			niceMax = max;
		}
	}

	numSpaces = (niceMax - niceMin) / spacing;
	// If very close to our rounded value, use it.
	if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
		numSpaces = Math.round(numSpaces);
	} else {
		numSpaces = Math.ceil(numSpaces);
	}

	niceMin = Math.round(niceMin * factor) / factor;
	niceMax = Math.round(niceMax * factor) / factor;
	ticks.push(isNullOrUndef$2(min) ? niceMin : min);
	for (var j = 1; j < numSpaces; ++j) {
		ticks.push(Math.round((niceMin + j * spacing) * factor) / factor);
	}
	ticks.push(isNullOrUndef$2(max) ? niceMax : max);

	return ticks;
}

var scale_linearbase = core_scale.extend({
	getRightValue: function(value) {
		if (typeof value === 'string') {
			return +value;
		}
		return core_scale.prototype.getRightValue.call(this, value);
	},

	handleTickRangeOptions: function() {
		var me = this;
		var opts = me.options;
		var tickOpts = opts.ticks;

		// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
		// do nothing since that would make the chart weird. If the user really wants a weird chart
		// axis, they can manually override it
		if (tickOpts.beginAtZero) {
			var minSign = helpers$1.sign(me.min);
			var maxSign = helpers$1.sign(me.max);

			if (minSign < 0 && maxSign < 0) {
				// move the top up to 0
				me.max = 0;
			} else if (minSign > 0 && maxSign > 0) {
				// move the bottom down to 0
				me.min = 0;
			}
		}

		var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;
		var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;

		if (tickOpts.min !== undefined) {
			me.min = tickOpts.min;
		} else if (tickOpts.suggestedMin !== undefined) {
			if (me.min === null) {
				me.min = tickOpts.suggestedMin;
			} else {
				me.min = Math.min(me.min, tickOpts.suggestedMin);
			}
		}

		if (tickOpts.max !== undefined) {
			me.max = tickOpts.max;
		} else if (tickOpts.suggestedMax !== undefined) {
			if (me.max === null) {
				me.max = tickOpts.suggestedMax;
			} else {
				me.max = Math.max(me.max, tickOpts.suggestedMax);
			}
		}

		if (setMin !== setMax) {
			// We set the min or the max but not both.
			// So ensure that our range is good
			// Inverted or 0 length range can happen when
			// ticks.min is set, and no datasets are visible
			if (me.min >= me.max) {
				if (setMin) {
					me.max = me.min + 1;
				} else {
					me.min = me.max - 1;
				}
			}
		}

		if (me.min === me.max) {
			me.max++;

			if (!tickOpts.beginAtZero) {
				me.min--;
			}
		}
	},

	getTickLimit: function() {
		var me = this;
		var tickOpts = me.options.ticks;
		var stepSize = tickOpts.stepSize;
		var maxTicksLimit = tickOpts.maxTicksLimit;
		var maxTicks;

		if (stepSize) {
			maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;
		} else {
			maxTicks = me._computeTickLimit();
			maxTicksLimit = maxTicksLimit || 11;
		}

		if (maxTicksLimit) {
			maxTicks = Math.min(maxTicksLimit, maxTicks);
		}

		return maxTicks;
	},

	_computeTickLimit: function() {
		return Number.POSITIVE_INFINITY;
	},

	handleDirectionalChanges: noop,

	buildTicks: function() {
		var me = this;
		var opts = me.options;
		var tickOpts = opts.ticks;

		// Figure out what the max number of ticks we can support it is based on the size of
		// the axis area. For now, we say that the minimum tick spacing in pixels must be 40
		// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
		// the graph. Make sure we always have at least 2 ticks
		var maxTicks = me.getTickLimit();
		maxTicks = Math.max(2, maxTicks);

		var numericGeneratorOptions = {
			maxTicks: maxTicks,
			min: tickOpts.min,
			max: tickOpts.max,
			precision: tickOpts.precision,
			stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
		};
		var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);

		me.handleDirectionalChanges();

		// At this point, we need to update our max and min given the tick values since we have expanded the
		// range of the scale
		me.max = helpers$1.max(ticks);
		me.min = helpers$1.min(ticks);

		if (tickOpts.reverse) {
			ticks.reverse();

			me.start = me.max;
			me.end = me.min;
		} else {
			me.start = me.min;
			me.end = me.max;
		}
	},

	convertTicksToLabels: function() {
		var me = this;
		me.ticksAsNumbers = me.ticks.slice();
		me.zeroLineIndex = me.ticks.indexOf(0);

		core_scale.prototype.convertTicksToLabels.call(me);
	},

	_configure: function() {
		var me = this;
		var ticks = me.getTicks();
		var start = me.min;
		var end = me.max;
		var offset;

		core_scale.prototype._configure.call(me);

		if (me.options.offset && ticks.length) {
			offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
			start -= offset;
			end += offset;
		}
		me._startValue = start;
		me._endValue = end;
		me._valueRange = end - start;
	}
});

var defaultConfig$1 = {
	position: 'left',
	ticks: {
		callback: core_ticks.formatters.linear
	}
};

var DEFAULT_MIN = 0;
var DEFAULT_MAX = 1;

function getOrCreateStack(stacks, stacked, meta) {
	var key = [
		meta.type,
		// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
		stacked === undefined && meta.stack === undefined ? meta.index : '',
		meta.stack
	].join('.');

	if (stacks[key] === undefined) {
		stacks[key] = {
			pos: [],
			neg: []
		};
	}

	return stacks[key];
}

function stackData(scale, stacks, meta, data) {
	var opts = scale.options;
	var stacked = opts.stacked;
	var stack = getOrCreateStack(stacks, stacked, meta);
	var pos = stack.pos;
	var neg = stack.neg;
	var ilen = data.length;
	var i, value;

	for (i = 0; i < ilen; ++i) {
		value = scale._parseValue(data[i]);
		if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
			continue;
		}

		pos[i] = pos[i] || 0;
		neg[i] = neg[i] || 0;

		if (opts.relativePoints) {
			pos[i] = 100;
		} else if (value.min < 0 || value.max < 0) {
			neg[i] += value.min;
		} else {
			pos[i] += value.max;
		}
	}
}

function updateMinMax(scale, meta, data) {
	var ilen = data.length;
	var i, value;

	for (i = 0; i < ilen; ++i) {
		value = scale._parseValue(data[i]);
		if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
			continue;
		}

		scale.min = Math.min(scale.min, value.min);
		scale.max = Math.max(scale.max, value.max);
	}
}

var scale_linear = scale_linearbase.extend({
	determineDataLimits: function() {
		var me = this;
		var opts = me.options;
		var chart = me.chart;
		var datasets = chart.data.datasets;
		var metasets = me._getMatchingVisibleMetas();
		var hasStacks = opts.stacked;
		var stacks = {};
		var ilen = metasets.length;
		var i, meta, data, values;

		me.min = Number.POSITIVE_INFINITY;
		me.max = Number.NEGATIVE_INFINITY;

		if (hasStacks === undefined) {
			for (i = 0; !hasStacks && i < ilen; ++i) {
				meta = metasets[i];
				hasStacks = meta.stack !== undefined;
			}
		}

		for (i = 0; i < ilen; ++i) {
			meta = metasets[i];
			data = datasets[meta.index].data;
			if (hasStacks) {
				stackData(me, stacks, meta, data);
			} else {
				updateMinMax(me, meta, data);
			}
		}

		helpers$1.each(stacks, function(stackValues) {
			values = stackValues.pos.concat(stackValues.neg);
			me.min = Math.min(me.min, helpers$1.min(values));
			me.max = Math.max(me.max, helpers$1.max(values));
		});

		me.min = helpers$1.isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;
		me.max = helpers$1.isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;

		// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
		me.handleTickRangeOptions();
	},

	// Returns the maximum number of ticks based on the scale dimension
	_computeTickLimit: function() {
		var me = this;
		var tickFont;

		if (me.isHorizontal()) {
			return Math.ceil(me.width / 40);
		}
		tickFont = helpers$1.options._parseFont(me.options.ticks);
		return Math.ceil(me.height / tickFont.lineHeight);
	},

	// Called after the ticks are built. We need
	handleDirectionalChanges: function() {
		if (!this.isHorizontal()) {
			// We are in a vertical orientation. The top value is the highest. So reverse the array
			this.ticks.reverse();
		}
	},

	getLabelForIndex: function(index, datasetIndex) {
		return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
	},

	// Utils
	getPixelForValue: function(value) {
		var me = this;
		return me.getPixelForDecimal((+me.getRightValue(value) - me._startValue) / me._valueRange);
	},

	getValueForPixel: function(pixel) {
		return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
	},

	getPixelForTick: function(index) {
		var ticks = this.ticksAsNumbers;
		if (index < 0 || index > ticks.length - 1) {
			return null;
		}
		return this.getPixelForValue(ticks[index]);
	}
});

// INTERNAL: static default options, registered in src/index.js
var _defaults$1 = defaultConfig$1;
scale_linear._defaults = _defaults$1;

var valueOrDefault$b = helpers$1.valueOrDefault;
var log10 = helpers$1.math.log10;

/**
 * Generate a set of logarithmic ticks
 * @param generationOptions the options used to generate the ticks
 * @param dataRange the range of the data
 * @returns {number[]} array of tick values
 */
function generateTicks$1(generationOptions, dataRange) {
	var ticks = [];

	var tickVal = valueOrDefault$b(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));

	var endExp = Math.floor(log10(dataRange.max));
	var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
	var exp, significand;

	if (tickVal === 0) {
		exp = Math.floor(log10(dataRange.minNotZero));
		significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));

		ticks.push(tickVal);
		tickVal = significand * Math.pow(10, exp);
	} else {
		exp = Math.floor(log10(tickVal));
		significand = Math.floor(tickVal / Math.pow(10, exp));
	}
	var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;

	do {
		ticks.push(tickVal);

		++significand;
		if (significand === 10) {
			significand = 1;
			++exp;
			precision = exp >= 0 ? 1 : precision;
		}

		tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
	} while (exp < endExp || (exp === endExp && significand < endSignificand));

	var lastTick = valueOrDefault$b(generationOptions.max, tickVal);
	ticks.push(lastTick);

	return ticks;
}

var defaultConfig$2 = {
	position: 'left',

	// label settings
	ticks: {
		callback: core_ticks.formatters.logarithmic
	}
};

// TODO(v3): change this to positiveOrDefault
function nonNegativeOrDefault(value, defaultValue) {
	return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;
}

var scale_logarithmic = core_scale.extend({
	determineDataLimits: function() {
		var me = this;
		var opts = me.options;
		var chart = me.chart;
		var datasets = chart.data.datasets;
		var isHorizontal = me.isHorizontal();
		function IDMatches(meta) {
			return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
		}
		var datasetIndex, meta, value, data, i, ilen;

		// Calculate Range
		me.min = Number.POSITIVE_INFINITY;
		me.max = Number.NEGATIVE_INFINITY;
		me.minNotZero = Number.POSITIVE_INFINITY;

		var hasStacks = opts.stacked;
		if (hasStacks === undefined) {
			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
				meta = chart.getDatasetMeta(datasetIndex);
				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
					meta.stack !== undefined) {
					hasStacks = true;
					break;
				}
			}
		}

		if (opts.stacked || hasStacks) {
			var valuesPerStack = {};

			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
				meta = chart.getDatasetMeta(datasetIndex);
				var key = [
					meta.type,
					// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
					((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
					meta.stack
				].join('.');

				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
					if (valuesPerStack[key] === undefined) {
						valuesPerStack[key] = [];
					}

					data = datasets[datasetIndex].data;
					for (i = 0, ilen = data.length; i < ilen; i++) {
						var values = valuesPerStack[key];
						value = me._parseValue(data[i]);
						// invalid, hidden and negative values are ignored
						if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
							continue;
						}
						values[i] = values[i] || 0;
						values[i] += value.max;
					}
				}
			}

			helpers$1.each(valuesPerStack, function(valuesForType) {
				if (valuesForType.length > 0) {
					var minVal = helpers$1.min(valuesForType);
					var maxVal = helpers$1.max(valuesForType);
					me.min = Math.min(me.min, minVal);
					me.max = Math.max(me.max, maxVal);
				}
			});

		} else {
			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
				meta = chart.getDatasetMeta(datasetIndex);
				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
					data = datasets[datasetIndex].data;
					for (i = 0, ilen = data.length; i < ilen; i++) {
						value = me._parseValue(data[i]);
						// invalid, hidden and negative values are ignored
						if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
							continue;
						}

						me.min = Math.min(value.min, me.min);
						me.max = Math.max(value.max, me.max);

						if (value.min !== 0) {
							me.minNotZero = Math.min(value.min, me.minNotZero);
						}
					}
				}
			}
		}

		me.min = helpers$1.isFinite(me.min) ? me.min : null;
		me.max = helpers$1.isFinite(me.max) ? me.max : null;
		me.minNotZero = helpers$1.isFinite(me.minNotZero) ? me.minNotZero : null;

		// Common base implementation to handle ticks.min, ticks.max
		this.handleTickRangeOptions();
	},

	handleTickRangeOptions: function() {
		var me = this;
		var tickOpts = me.options.ticks;
		var DEFAULT_MIN = 1;
		var DEFAULT_MAX = 10;

		me.min = nonNegativeOrDefault(tickOpts.min, me.min);
		me.max = nonNegativeOrDefault(tickOpts.max, me.max);

		if (me.min === me.max) {
			if (me.min !== 0 && me.min !== null) {
				me.min = Math.pow(10, Math.floor(log10(me.min)) - 1);
				me.max = Math.pow(10, Math.floor(log10(me.max)) + 1);
			} else {
				me.min = DEFAULT_MIN;
				me.max = DEFAULT_MAX;
			}
		}
		if (me.min === null) {
			me.min = Math.pow(10, Math.floor(log10(me.max)) - 1);
		}
		if (me.max === null) {
			me.max = me.min !== 0
				? Math.pow(10, Math.floor(log10(me.min)) + 1)
				: DEFAULT_MAX;
		}
		if (me.minNotZero === null) {
			if (me.min > 0) {
				me.minNotZero = me.min;
			} else if (me.max < 1) {
				me.minNotZero = Math.pow(10, Math.floor(log10(me.max)));
			} else {
				me.minNotZero = DEFAULT_MIN;
			}
		}
	},

	buildTicks: function() {
		var me = this;
		var tickOpts = me.options.ticks;
		var reverse = !me.isHorizontal();

		var generationOptions = {
			min: nonNegativeOrDefault(tickOpts.min),
			max: nonNegativeOrDefault(tickOpts.max)
		};
		var ticks = me.ticks = generateTicks$1(generationOptions, me);

		// At this point, we need to update our max and min given the tick values since we have expanded the
		// range of the scale
		me.max = helpers$1.max(ticks);
		me.min = helpers$1.min(ticks);

		if (tickOpts.reverse) {
			reverse = !reverse;
			me.start = me.max;
			me.end = me.min;
		} else {
			me.start = me.min;
			me.end = me.max;
		}
		if (reverse) {
			ticks.reverse();
		}
	},

	convertTicksToLabels: function() {
		this.tickValues = this.ticks.slice();

		core_scale.prototype.convertTicksToLabels.call(this);
	},

	// Get the correct tooltip label
	getLabelForIndex: function(index, datasetIndex) {
		return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
	},

	getPixelForTick: function(index) {
		var ticks = this.tickValues;
		if (index < 0 || index > ticks.length - 1) {
			return null;
		}
		return this.getPixelForValue(ticks[index]);
	},

	/**
	 * Returns the value of the first tick.
	 * @param {number} value - The minimum not zero value.
	 * @return {number} The first tick value.
	 * @private
	 */
	_getFirstTickValue: function(value) {
		var exp = Math.floor(log10(value));
		var significand = Math.floor(value / Math.pow(10, exp));

		return significand * Math.pow(10, exp);
	},

	_configure: function() {
		var me = this;
		var start = me.min;
		var offset = 0;

		core_scale.prototype._configure.call(me);

		if (start === 0) {
			start = me._getFirstTickValue(me.minNotZero);
			offset = valueOrDefault$b(me.options.ticks.fontSize, core_defaults.global.defaultFontSize) / me._length;
		}

		me._startValue = log10(start);
		me._valueOffset = offset;
		me._valueRange = (log10(me.max) - log10(start)) / (1 - offset);
	},

	getPixelForValue: function(value) {
		var me = this;
		var decimal = 0;

		value = +me.getRightValue(value);

		if (value > me.min && value > 0) {
			decimal = (log10(value) - me._startValue) / me._valueRange + me._valueOffset;
		}
		return me.getPixelForDecimal(decimal);
	},

	getValueForPixel: function(pixel) {
		var me = this;
		var decimal = me.getDecimalForPixel(pixel);
		return decimal === 0 && me.min === 0
			? 0
			: Math.pow(10, me._startValue + (decimal - me._valueOffset) * me._valueRange);
	}
});

// INTERNAL: static default options, registered in src/index.js
var _defaults$2 = defaultConfig$2;
scale_logarithmic._defaults = _defaults$2;

var valueOrDefault$c = helpers$1.valueOrDefault;
var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;
var resolve$4 = helpers$1.options.resolve;

var defaultConfig$3 = {
	display: true,

	// Boolean - Whether to animate scaling the chart from the centre
	animate: true,
	position: 'chartArea',

	angleLines: {
		display: true,
		color: 'rgba(0,0,0,0.1)',
		lineWidth: 1,
		borderDash: [],
		borderDashOffset: 0.0
	},

	gridLines: {
		circular: false
	},

	// label settings
	ticks: {
		// Boolean - Show a backdrop to the scale label
		showLabelBackdrop: true,

		// String - The colour of the label backdrop
		backdropColor: 'rgba(255,255,255,0.75)',

		// Number - The backdrop padding above & below the label in pixels
		backdropPaddingY: 2,

		// Number - The backdrop padding to the side of the label in pixels
		backdropPaddingX: 2,

		callback: core_ticks.formatters.linear
	},

	pointLabels: {
		// Boolean - if true, show point labels
		display: true,

		// Number - Point label font size in pixels
		fontSize: 10,

		// Function - Used to convert point labels
		callback: function(label) {
			return label;
		}
	}
};

function getTickBackdropHeight(opts) {
	var tickOpts = opts.ticks;

	if (tickOpts.display && opts.display) {
		return valueOrDefault$c(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;
	}
	return 0;
}

function measureLabelSize(ctx, lineHeight, label) {
	if (helpers$1.isArray(label)) {
		return {
			w: helpers$1.longestText(ctx, ctx.font, label),
			h: label.length * lineHeight
		};
	}

	return {
		w: ctx.measureText(label).width,
		h: lineHeight
	};
}

function determineLimits(angle, pos, size, min, max) {
	if (angle === min || angle === max) {
		return {
			start: pos - (size / 2),
			end: pos + (size / 2)
		};
	} else if (angle < min || angle > max) {
		return {
			start: pos - size,
			end: pos
		};
	}

	return {
		start: pos,
		end: pos + size
	};
}

/**
 * Helper function to fit a radial linear scale with point labels
 */
function fitWithPointLabels(scale) {

	// Right, this is really confusing and there is a lot of maths going on here
	// The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
	//
	// Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
	//
	// Solution:
	//
	// We assume the radius of the polygon is half the size of the canvas at first
	// at each index we check if the text overlaps.
	//
	// Where it does, we store that angle and that index.
	//
	// After finding the largest index and angle we calculate how much we need to remove
	// from the shape radius to move the point inwards by that x.
	//
	// We average the left and right distances to get the maximum shape radius that can fit in the box
	// along with labels.
	//
	// Once we have that, we can find the centre point for the chart, by taking the x text protrusion
	// on each side, removing that from the size, halving it and adding the left x protrusion width.
	//
	// This will mean we have a shape fitted to the canvas, as large as it can be with the labels
	// and position it in the most space efficient manner
	//
	// https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif

	var plFont = helpers$1.options._parseFont(scale.options.pointLabels);

	// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
	// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
	var furthestLimits = {
		l: 0,
		r: scale.width,
		t: 0,
		b: scale.height - scale.paddingTop
	};
	var furthestAngles = {};
	var i, textSize, pointPosition;

	scale.ctx.font = plFont.string;
	scale._pointLabelSizes = [];

	var valueCount = scale.chart.data.labels.length;
	for (i = 0; i < valueCount; i++) {
		pointPosition = scale.getPointPosition(i, scale.drawingArea + 5);
		textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i]);
		scale._pointLabelSizes[i] = textSize;

		// Add quarter circle to make degree 0 mean top of circle
		var angleRadians = scale.getIndexAngle(i);
		var angle = helpers$1.toDegrees(angleRadians) % 360;
		var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
		var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);

		if (hLimits.start < furthestLimits.l) {
			furthestLimits.l = hLimits.start;
			furthestAngles.l = angleRadians;
		}

		if (hLimits.end > furthestLimits.r) {
			furthestLimits.r = hLimits.end;
			furthestAngles.r = angleRadians;
		}

		if (vLimits.start < furthestLimits.t) {
			furthestLimits.t = vLimits.start;
			furthestAngles.t = angleRadians;
		}

		if (vLimits.end > furthestLimits.b) {
			furthestLimits.b = vLimits.end;
			furthestAngles.b = angleRadians;
		}
	}

	scale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);
}

function getTextAlignForAngle(angle) {
	if (angle === 0 || angle === 180) {
		return 'center';
	} else if (angle < 180) {
		return 'left';
	}

	return 'right';
}

function fillText(ctx, text, position, lineHeight) {
	var y = position.y + lineHeight / 2;
	var i, ilen;

	if (helpers$1.isArray(text)) {
		for (i = 0, ilen = text.length; i < ilen; ++i) {
			ctx.fillText(text[i], position.x, y);
			y += lineHeight;
		}
	} else {
		ctx.fillText(text, position.x, y);
	}
}

function adjustPointPositionForLabelHeight(angle, textSize, position) {
	if (angle === 90 || angle === 270) {
		position.y -= (textSize.h / 2);
	} else if (angle > 270 || angle < 90) {
		position.y -= textSize.h;
	}
}

function drawPointLabels(scale) {
	var ctx = scale.ctx;
	var opts = scale.options;
	var pointLabelOpts = opts.pointLabels;
	var tickBackdropHeight = getTickBackdropHeight(opts);
	var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);
	var plFont = helpers$1.options._parseFont(pointLabelOpts);

	ctx.save();

	ctx.font = plFont.string;
	ctx.textBaseline = 'middle';

	for (var i = scale.chart.data.labels.length - 1; i >= 0; i--) {
		// Extra pixels out for some label spacing
		var extra = (i === 0 ? tickBackdropHeight / 2 : 0);
		var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5);

		// Keep this in loop since we may support array properties here
		var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);
		ctx.fillStyle = pointLabelFontColor;

		var angleRadians = scale.getIndexAngle(i);
		var angle = helpers$1.toDegrees(angleRadians);
		ctx.textAlign = getTextAlignForAngle(angle);
		adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
		fillText(ctx, scale.pointLabels[i], pointLabelPosition, plFont.lineHeight);
	}
	ctx.restore();
}

function drawRadiusLine(scale, gridLineOpts, radius, index) {
	var ctx = scale.ctx;
	var circular = gridLineOpts.circular;
	var valueCount = scale.chart.data.labels.length;
	var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);
	var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);
	var pointPosition;

	if ((!circular && !valueCount) || !lineColor || !lineWidth) {
		return;
	}

	ctx.save();
	ctx.strokeStyle = lineColor;
	ctx.lineWidth = lineWidth;
	if (ctx.setLineDash) {
		ctx.setLineDash(gridLineOpts.borderDash || []);
		ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;
	}

	ctx.beginPath();
	if (circular) {
		// Draw circular arcs between the points
		ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
	} else {
		// Draw straight lines connecting each index
		pointPosition = scale.getPointPosition(0, radius);
		ctx.moveTo(pointPosition.x, pointPosition.y);

		for (var i = 1; i < valueCount; i++) {
			pointPosition = scale.getPointPosition(i, radius);
			ctx.lineTo(pointPosition.x, pointPosition.y);
		}
	}
	ctx.closePath();
	ctx.stroke();
	ctx.restore();
}

function numberOrZero(param) {
	return helpers$1.isNumber(param) ? param : 0;
}

var scale_radialLinear = scale_linearbase.extend({
	setDimensions: function() {
		var me = this;

		// Set the unconstrained dimension before label rotation
		me.width = me.maxWidth;
		me.height = me.maxHeight;
		me.paddingTop = getTickBackdropHeight(me.options) / 2;
		me.xCenter = Math.floor(me.width / 2);
		me.yCenter = Math.floor((me.height - me.paddingTop) / 2);
		me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;
	},

	determineDataLimits: function() {
		var me = this;
		var chart = me.chart;
		var min = Number.POSITIVE_INFINITY;
		var max = Number.NEGATIVE_INFINITY;

		helpers$1.each(chart.data.datasets, function(dataset, datasetIndex) {
			if (chart.isDatasetVisible(datasetIndex)) {
				var meta = chart.getDatasetMeta(datasetIndex);

				helpers$1.each(dataset.data, function(rawValue, index) {
					var value = +me.getRightValue(rawValue);
					if (isNaN(value) || meta.data[index].hidden) {
						return;
					}

					min = Math.min(value, min);
					max = Math.max(value, max);
				});
			}
		});

		me.min = (min === Number.POSITIVE_INFINITY ? 0 : min);
		me.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);

		// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
		me.handleTickRangeOptions();
	},

	// Returns the maximum number of ticks based on the scale dimension
	_computeTickLimit: function() {
		return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
	},

	convertTicksToLabels: function() {
		var me = this;

		scale_linearbase.prototype.convertTicksToLabels.call(me);

		// Point labels
		me.pointLabels = me.chart.data.labels.map(function() {
			var label = helpers$1.callback(me.options.pointLabels.callback, arguments, me);
			return label || label === 0 ? label : '';
		});
	},

	getLabelForIndex: function(index, datasetIndex) {
		return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
	},

	fit: function() {
		var me = this;
		var opts = me.options;

		if (opts.display && opts.pointLabels.display) {
			fitWithPointLabels(me);
		} else {
			me.setCenterPoint(0, 0, 0, 0);
		}
	},

	/**
	 * Set radius reductions and determine new radius and center point
	 * @private
	 */
	setReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {
		var me = this;
		var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
		var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
		var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
		var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);

		radiusReductionLeft = numberOrZero(radiusReductionLeft);
		radiusReductionRight = numberOrZero(radiusReductionRight);
		radiusReductionTop = numberOrZero(radiusReductionTop);
		radiusReductionBottom = numberOrZero(radiusReductionBottom);

		me.drawingArea = Math.min(
			Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),
			Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
		me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
	},

	setCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {
		var me = this;
		var maxRight = me.width - rightMovement - me.drawingArea;
		var maxLeft = leftMovement + me.drawingArea;
		var maxTop = topMovement + me.drawingArea;
		var maxBottom = (me.height - me.paddingTop) - bottomMovement - me.drawingArea;

		me.xCenter = Math.floor(((maxLeft + maxRight) / 2) + me.left);
		me.yCenter = Math.floor(((maxTop + maxBottom) / 2) + me.top + me.paddingTop);
	},

	getIndexAngle: function(index) {
		var chart = this.chart;
		var angleMultiplier = 360 / chart.data.labels.length;
		var options = chart.options || {};
		var startAngle = options.startAngle || 0;

		// Start from the top instead of right, so remove a quarter of the circle
		var angle = (index * angleMultiplier + startAngle) % 360;

		return (angle < 0 ? angle + 360 : angle) * Math.PI * 2 / 360;
	},

	getDistanceFromCenterForValue: function(value) {
		var me = this;

		if (helpers$1.isNullOrUndef(value)) {
			return NaN;
		}

		// Take into account half font size + the yPadding of the top value
		var scalingFactor = me.drawingArea / (me.max - me.min);
		if (me.options.ticks.reverse) {
			return (me.max - value) * scalingFactor;
		}
		return (value - me.min) * scalingFactor;
	},

	getPointPosition: function(index, distanceFromCenter) {
		var me = this;
		var thisAngle = me.getIndexAngle(index) - (Math.PI / 2);
		return {
			x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,
			y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter
		};
	},

	getPointPositionForValue: function(index, value) {
		return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
	},

	getBasePosition: function(index) {
		var me = this;
		var min = me.min;
		var max = me.max;

		return me.getPointPositionForValue(index || 0,
			me.beginAtZero ? 0 :
			min < 0 && max < 0 ? max :
			min > 0 && max > 0 ? min :
			0);
	},

	/**
	 * @private
	 */
	_drawGrid: function() {
		var me = this;
		var ctx = me.ctx;
		var opts = me.options;
		var gridLineOpts = opts.gridLines;
		var angleLineOpts = opts.angleLines;
		var lineWidth = valueOrDefault$c(angleLineOpts.lineWidth, gridLineOpts.lineWidth);
		var lineColor = valueOrDefault$c(angleLineOpts.color, gridLineOpts.color);
		var i, offset, position;

		if (opts.pointLabels.display) {
			drawPointLabels(me);
		}

		if (gridLineOpts.display) {
			helpers$1.each(me.ticks, function(label, index) {
				if (index !== 0) {
					offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
					drawRadiusLine(me, gridLineOpts, offset, index);
				}
			});
		}

		if (angleLineOpts.display && lineWidth && lineColor) {
			ctx.save();
			ctx.lineWidth = lineWidth;
			ctx.strokeStyle = lineColor;
			if (ctx.setLineDash) {
				ctx.setLineDash(resolve$4([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));
				ctx.lineDashOffset = resolve$4([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);
			}

			for (i = me.chart.data.labels.length - 1; i >= 0; i--) {
				offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);
				position = me.getPointPosition(i, offset);
				ctx.beginPath();
				ctx.moveTo(me.xCenter, me.yCenter);
				ctx.lineTo(position.x, position.y);
				ctx.stroke();
			}

			ctx.restore();
		}
	},

	/**
	 * @private
	 */
	_drawLabels: function() {
		var me = this;
		var ctx = me.ctx;
		var opts = me.options;
		var tickOpts = opts.ticks;

		if (!tickOpts.display) {
			return;
		}

		var startAngle = me.getIndexAngle(0);
		var tickFont = helpers$1.options._parseFont(tickOpts);
		var tickFontColor = valueOrDefault$c(tickOpts.fontColor, core_defaults.global.defaultFontColor);
		var offset, width;

		ctx.save();
		ctx.font = tickFont.string;
		ctx.translate(me.xCenter, me.yCenter);
		ctx.rotate(startAngle);
		ctx.textAlign = 'center';
		ctx.textBaseline = 'middle';

		helpers$1.each(me.ticks, function(label, index) {
			if (index === 0 && !tickOpts.reverse) {
				return;
			}

			offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);

			if (tickOpts.showLabelBackdrop) {
				width = ctx.measureText(label).width;
				ctx.fillStyle = tickOpts.backdropColor;

				ctx.fillRect(
					-width / 2 - tickOpts.backdropPaddingX,
					-offset - tickFont.size / 2 - tickOpts.backdropPaddingY,
					width + tickOpts.backdropPaddingX * 2,
					tickFont.size + tickOpts.backdropPaddingY * 2
				);
			}

			ctx.fillStyle = tickFontColor;
			ctx.fillText(label, 0, -offset);
		});

		ctx.restore();
	},

	/**
	 * @private
	 */
	_drawTitle: helpers$1.noop
});

// INTERNAL: static default options, registered in src/index.js
var _defaults$3 = defaultConfig$3;
scale_radialLinear._defaults = _defaults$3;

var deprecated$1 = helpers$1._deprecated;
var resolve$5 = helpers$1.options.resolve;
var valueOrDefault$d = helpers$1.valueOrDefault;

// Integer constants are from the ES6 spec.
var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

var INTERVALS = {
	millisecond: {
		common: true,
		size: 1,
		steps: 1000
	},
	second: {
		common: true,
		size: 1000,
		steps: 60
	},
	minute: {
		common: true,
		size: 60000,
		steps: 60
	},
	hour: {
		common: true,
		size: 3600000,
		steps: 24
	},
	day: {
		common: true,
		size: 86400000,
		steps: 30
	},
	week: {
		common: false,
		size: 604800000,
		steps: 4
	},
	month: {
		common: true,
		size: 2.628e9,
		steps: 12
	},
	quarter: {
		common: false,
		size: 7.884e9,
		steps: 4
	},
	year: {
		common: true,
		size: 3.154e10
	}
};

var UNITS = Object.keys(INTERVALS);

function sorter(a, b) {
	return a - b;
}

function arrayUnique(items) {
	var hash = {};
	var out = [];
	var i, ilen, item;

	for (i = 0, ilen = items.length; i < ilen; ++i) {
		item = items[i];
		if (!hash[item]) {
			hash[item] = true;
			out.push(item);
		}
	}

	return out;
}

function getMin(options) {
	return helpers$1.valueOrDefault(options.time.min, options.ticks.min);
}

function getMax(options) {
	return helpers$1.valueOrDefault(options.time.max, options.ticks.max);
}

/**
 * Returns an array of {time, pos} objects used to interpolate a specific `time` or position
 * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is
 * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other
 * extremity (left + width or top + height). Note that it would be more optimized to directly
 * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need
 * to create the lookup table. The table ALWAYS contains at least two items: min and max.
 *
 * @param {number[]} timestamps - timestamps sorted from lowest to highest.
 * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min
 * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.
 * If 'series', timestamps will be positioned at the same distance from each other. In this
 * case, only timestamps that break the time linearity are registered, meaning that in the
 * best case, all timestamps are linear, the table contains only min and max.
 */
function buildLookupTable(timestamps, min, max, distribution) {
	if (distribution === 'linear' || !timestamps.length) {
		return [
			{time: min, pos: 0},
			{time: max, pos: 1}
		];
	}

	var table = [];
	var items = [min];
	var i, ilen, prev, curr, next;

	for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
		curr = timestamps[i];
		if (curr > min && curr < max) {
			items.push(curr);
		}
	}

	items.push(max);

	for (i = 0, ilen = items.length; i < ilen; ++i) {
		next = items[i + 1];
		prev = items[i - 1];
		curr = items[i];

		// only add points that breaks the scale linearity
		if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {
			table.push({time: curr, pos: i / (ilen - 1)});
		}
	}

	return table;
}

// @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/
function lookup(table, key, value) {
	var lo = 0;
	var hi = table.length - 1;
	var mid, i0, i1;

	while (lo >= 0 && lo <= hi) {
		mid = (lo + hi) >> 1;
		i0 = table[mid - 1] || null;
		i1 = table[mid];

		if (!i0) {
			// given value is outside table (before first item)
			return {lo: null, hi: i1};
		} else if (i1[key] < value) {
			lo = mid + 1;
		} else if (i0[key] > value) {
			hi = mid - 1;
		} else {
			return {lo: i0, hi: i1};
		}
	}

	// given value is outside table (after last item)
	return {lo: i1, hi: null};
}

/**
 * Linearly interpolates the given source `value` using the table items `skey` values and
 * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')
 * returns the position for a timestamp equal to 42. If value is out of bounds, values at
 * index [0, 1] or [n - 1, n] are used for the interpolation.
 */
function interpolate$1(table, skey, sval, tkey) {
	var range = lookup(table, skey, sval);

	// Note: the lookup table ALWAYS contains at least 2 items (min and max)
	var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;
	var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;

	var span = next[skey] - prev[skey];
	var ratio = span ? (sval - prev[skey]) / span : 0;
	var offset = (next[tkey] - prev[tkey]) * ratio;

	return prev[tkey] + offset;
}

function toTimestamp(scale, input) {
	var adapter = scale._adapter;
	var options = scale.options.time;
	var parser = options.parser;
	var format = parser || options.format;
	var value = input;

	if (typeof parser === 'function') {
		value = parser(value);
	}

	// Only parse if its not a timestamp already
	if (!helpers$1.isFinite(value)) {
		value = typeof format === 'string'
			? adapter.parse(value, format)
			: adapter.parse(value);
	}

	if (value !== null) {
		return +value;
	}

	// Labels are in an incompatible format and no `parser` has been provided.
	// The user might still use the deprecated `format` option for parsing.
	if (!parser && typeof format === 'function') {
		value = format(input);

		// `format` could return something else than a timestamp, if so, parse it
		if (!helpers$1.isFinite(value)) {
			value = adapter.parse(value);
		}
	}

	return value;
}

function parse(scale, input) {
	if (helpers$1.isNullOrUndef(input)) {
		return null;
	}

	var options = scale.options.time;
	var value = toTimestamp(scale, scale.getRightValue(input));
	if (value === null) {
		return value;
	}

	if (options.round) {
		value = +scale._adapter.startOf(value, options.round);
	}

	return value;
}

/**
 * Figures out what unit results in an appropriate number of auto-generated ticks
 */
function determineUnitForAutoTicks(minUnit, min, max, capacity) {
	var ilen = UNITS.length;
	var i, interval, factor;

	for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
		interval = INTERVALS[UNITS[i]];
		factor = interval.steps ? interval.steps : MAX_INTEGER;

		if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
			return UNITS[i];
		}
	}

	return UNITS[ilen - 1];
}

/**
 * Figures out what unit to format a set of ticks with
 */
function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
	var i, unit;

	for (i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
		unit = UNITS[i];
		if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
			return unit;
		}
	}

	return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}

function determineMajorUnit(unit) {
	for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
		if (INTERVALS[UNITS[i]].common) {
			return UNITS[i];
		}
	}
}

/**
 * Generates a maximum of `capacity` timestamps between min and max, rounded to the
 * `minor` unit using the given scale time `options`.
 * Important: this method can return ticks outside the min and max range, it's the
 * responsibility of the calling code to clamp values if needed.
 */
function generate(scale, min, max, capacity) {
	var adapter = scale._adapter;
	var options = scale.options;
	var timeOpts = options.time;
	var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);
	var stepSize = resolve$5([timeOpts.stepSize, timeOpts.unitStepSize, 1]);
	var weekday = minor === 'week' ? timeOpts.isoWeekday : false;
	var first = min;
	var ticks = [];
	var time;

	// For 'week' unit, handle the first day of week option
	if (weekday) {
		first = +adapter.startOf(first, 'isoWeek', weekday);
	}

	// Align first ticks on unit
	first = +adapter.startOf(first, weekday ? 'day' : minor);

	// Prevent browser from freezing in case user options request millions of milliseconds
	if (adapter.diff(max, min, minor) > 100000 * stepSize) {
		throw min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor;
	}

	for (time = first; time < max; time = +adapter.add(time, stepSize, minor)) {
		ticks.push(time);
	}

	if (time === max || options.bounds === 'ticks') {
		ticks.push(time);
	}

	return ticks;
}

/**
 * Returns the start and end offsets from edges in the form of {start, end}
 * where each value is a relative width to the scale and ranges between 0 and 1.
 * They add extra margins on the both sides by scaling down the original scale.
 * Offsets are added when the `offset` option is true.
 */
function computeOffsets(table, ticks, min, max, options) {
	var start = 0;
	var end = 0;
	var first, last;

	if (options.offset && ticks.length) {
		first = interpolate$1(table, 'time', ticks[0], 'pos');
		if (ticks.length === 1) {
			start = 1 - first;
		} else {
			start = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;
		}
		last = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');
		if (ticks.length === 1) {
			end = last;
		} else {
			end = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;
		}
	}

	return {start: start, end: end, factor: 1 / (start + 1 + end)};
}

function setMajorTicks(scale, ticks, map, majorUnit) {
	var adapter = scale._adapter;
	var first = +adapter.startOf(ticks[0].value, majorUnit);
	var last = ticks[ticks.length - 1].value;
	var major, index;

	for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
		index = map[major];
		if (index >= 0) {
			ticks[index].major = true;
		}
	}
	return ticks;
}

function ticksFromTimestamps(scale, values, majorUnit) {
	var ticks = [];
	var map = {};
	var ilen = values.length;
	var i, value;

	for (i = 0; i < ilen; ++i) {
		value = values[i];
		map[value] = i;

		ticks.push({
			value: value,
			major: false
		});
	}

	// We set the major ticks separately from the above loop because calling startOf for every tick
	// is expensive when there is a large number of ticks
	return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
}

var defaultConfig$4 = {
	position: 'bottom',

	/**
	 * Data distribution along the scale:
	 * - 'linear': data are spread according to their time (distances can vary),
	 * - 'series': data are spread at the same distance from each other.
	 * @see https://github.com/chartjs/Chart.js/pull/4507
	 * @since 2.7.0
	 */
	distribution: 'linear',

	/**
	 * Scale boundary strategy (bypassed by min/max time options)
	 * - `data`: make sure data are fully visible, ticks outside are removed
	 * - `ticks`: make sure ticks are fully visible, data outside are truncated
	 * @see https://github.com/chartjs/Chart.js/pull/4556
	 * @since 2.7.0
	 */
	bounds: 'data',

	adapters: {},
	time: {
		parser: false, // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
		unit: false, // false == automatic or override with week, month, year, etc.
		round: false, // none, or override with week, month, year, etc.
		displayFormat: false, // DEPRECATED
		isoWeekday: false, // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/
		minUnit: 'millisecond',
		displayFormats: {}
	},
	ticks: {
		autoSkip: false,

		/**
		 * Ticks generation input values:
		 * - 'auto': generates "optimal" ticks based on scale size and time options.
		 * - 'data': generates ticks from data (including labels from data {t|x|y} objects).
		 * - 'labels': generates ticks from user given `data.labels` values ONLY.
		 * @see https://github.com/chartjs/Chart.js/pull/4507
		 * @since 2.7.0
		 */
		source: 'auto',

		major: {
			enabled: false
		}
	}
};

var scale_time = core_scale.extend({
	initialize: function() {
		this.mergeTicksOptions();
		core_scale.prototype.initialize.call(this);
	},

	update: function() {
		var me = this;
		var options = me.options;
		var time = options.time || (options.time = {});
		var adapter = me._adapter = new core_adapters._date(options.adapters.date);

		// DEPRECATIONS: output a message only one time per update
		deprecated$1('time scale', time.format, 'time.format', 'time.parser');
		deprecated$1('time scale', time.min, 'time.min', 'ticks.min');
		deprecated$1('time scale', time.max, 'time.max', 'ticks.max');

		// Backward compatibility: before introducing adapter, `displayFormats` was
		// supposed to contain *all* unit/string pairs but this can't be resolved
		// when loading the scale (adapters are loaded afterward), so let's populate
		// missing formats on update
		helpers$1.mergeIf(time.displayFormats, adapter.formats());

		return core_scale.prototype.update.apply(me, arguments);
	},

	/**
	 * Allows data to be referenced via 't' attribute
	 */
	getRightValue: function(rawValue) {
		if (rawValue && rawValue.t !== undefined) {
			rawValue = rawValue.t;
		}
		return core_scale.prototype.getRightValue.call(this, rawValue);
	},

	determineDataLimits: function() {
		var me = this;
		var chart = me.chart;
		var adapter = me._adapter;
		var options = me.options;
		var unit = options.time.unit || 'day';
		var min = MAX_INTEGER;
		var max = MIN_INTEGER;
		var timestamps = [];
		var datasets = [];
		var labels = [];
		var i, j, ilen, jlen, data, timestamp, labelsAdded;
		var dataLabels = me._getLabels();

		for (i = 0, ilen = dataLabels.length; i < ilen; ++i) {
			labels.push(parse(me, dataLabels[i]));
		}

		for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
			if (chart.isDatasetVisible(i)) {
				data = chart.data.datasets[i].data;

				// Let's consider that all data have the same format.
				if (helpers$1.isObject(data[0])) {
					datasets[i] = [];

					for (j = 0, jlen = data.length; j < jlen; ++j) {
						timestamp = parse(me, data[j]);
						timestamps.push(timestamp);
						datasets[i][j] = timestamp;
					}
				} else {
					datasets[i] = labels.slice(0);
					if (!labelsAdded) {
						timestamps = timestamps.concat(labels);
						labelsAdded = true;
					}
				}
			} else {
				datasets[i] = [];
			}
		}

		if (labels.length) {
			min = Math.min(min, labels[0]);
			max = Math.max(max, labels[labels.length - 1]);
		}

		if (timestamps.length) {
			timestamps = ilen > 1 ? arrayUnique(timestamps).sort(sorter) : timestamps.sort(sorter);
			min = Math.min(min, timestamps[0]);
			max = Math.max(max, timestamps[timestamps.length - 1]);
		}

		min = parse(me, getMin(options)) || min;
		max = parse(me, getMax(options)) || max;

		// In case there is no valid min/max, set limits based on unit time option
		min = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;
		max = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max;

		// Make sure that max is strictly higher than min (required by the lookup table)
		me.min = Math.min(min, max);
		me.max = Math.max(min + 1, max);

		// PRIVATE
		me._table = [];
		me._timestamps = {
			data: timestamps,
			datasets: datasets,
			labels: labels
		};
	},

	buildTicks: function() {
		var me = this;
		var min = me.min;
		var max = me.max;
		var options = me.options;
		var tickOpts = options.ticks;
		var timeOpts = options.time;
		var timestamps = me._timestamps;
		var ticks = [];
		var capacity = me.getLabelCapacity(min);
		var source = tickOpts.source;
		var distribution = options.distribution;
		var i, ilen, timestamp;

		if (source === 'data' || (source === 'auto' && distribution === 'series')) {
			timestamps = timestamps.data;
		} else if (source === 'labels') {
			timestamps = timestamps.labels;
		} else {
			timestamps = generate(me, min, max, capacity);
		}

		if (options.bounds === 'ticks' && timestamps.length) {
			min = timestamps[0];
			max = timestamps[timestamps.length - 1];
		}

		// Enforce limits with user min/max options
		min = parse(me, getMin(options)) || min;
		max = parse(me, getMax(options)) || max;

		// Remove ticks outside the min/max range
		for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
			timestamp = timestamps[i];
			if (timestamp >= min && timestamp <= max) {
				ticks.push(timestamp);
			}
		}

		me.min = min;
		me.max = max;

		// PRIVATE
		// determineUnitForFormatting relies on the number of ticks so we don't use it when
		// autoSkip is enabled because we don't yet know what the final number of ticks will be
		me._unit = timeOpts.unit || (tickOpts.autoSkip
			? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, capacity)
			: determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));
		me._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined
			: determineMajorUnit(me._unit);
		me._table = buildLookupTable(me._timestamps.data, min, max, distribution);
		me._offsets = computeOffsets(me._table, ticks, min, max, options);

		if (tickOpts.reverse) {
			ticks.reverse();
		}

		return ticksFromTimestamps(me, ticks, me._majorUnit);
	},

	getLabelForIndex: function(index, datasetIndex) {
		var me = this;
		var adapter = me._adapter;
		var data = me.chart.data;
		var timeOpts = me.options.time;
		var label = data.labels && index < data.labels.length ? data.labels[index] : '';
		var value = data.datasets[datasetIndex].data[index];

		if (helpers$1.isObject(value)) {
			label = me.getRightValue(value);
		}
		if (timeOpts.tooltipFormat) {
			return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);
		}
		if (typeof label === 'string') {
			return label;
		}
		return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);
	},

	/**
	 * Function to format an individual tick mark
	 * @private
	 */
	tickFormatFunction: function(time, index, ticks, format) {
		var me = this;
		var adapter = me._adapter;
		var options = me.options;
		var formats = options.time.displayFormats;
		var minorFormat = formats[me._unit];
		var majorUnit = me._majorUnit;
		var majorFormat = formats[majorUnit];
		var tick = ticks[index];
		var tickOpts = options.ticks;
		var major = majorUnit && majorFormat && tick && tick.major;
		var label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);
		var nestedTickOpts = major ? tickOpts.major : tickOpts.minor;
		var formatter = resolve$5([
			nestedTickOpts.callback,
			nestedTickOpts.userCallback,
			tickOpts.callback,
			tickOpts.userCallback
		]);

		return formatter ? formatter(label, index, ticks) : label;
	},

	convertTicksToLabels: function(ticks) {
		var labels = [];
		var i, ilen;

		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
			labels.push(this.tickFormatFunction(ticks[i].value, i, ticks));
		}

		return labels;
	},

	/**
	 * @private
	 */
	getPixelForOffset: function(time) {
		var me = this;
		var offsets = me._offsets;
		var pos = interpolate$1(me._table, 'time', time, 'pos');
		return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);
	},

	getPixelForValue: function(value, index, datasetIndex) {
		var me = this;
		var time = null;

		if (index !== undefined && datasetIndex !== undefined) {
			time = me._timestamps.datasets[datasetIndex][index];
		}

		if (time === null) {
			time = parse(me, value);
		}

		if (time !== null) {
			return me.getPixelForOffset(time);
		}
	},

	getPixelForTick: function(index) {
		var ticks = this.getTicks();
		return index >= 0 && index < ticks.length ?
			this.getPixelForOffset(ticks[index].value) :
			null;
	},

	getValueForPixel: function(pixel) {
		var me = this;
		var offsets = me._offsets;
		var pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
		var time = interpolate$1(me._table, 'pos', pos, 'time');

		// DEPRECATION, we should return time directly
		return me._adapter._create(time);
	},

	/**
	 * @private
	 */
	_getLabelSize: function(label) {
		var me = this;
		var ticksOpts = me.options.ticks;
		var tickLabelWidth = me.ctx.measureText(label).width;
		var angle = helpers$1.toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
		var cosRotation = Math.cos(angle);
		var sinRotation = Math.sin(angle);
		var tickFontSize = valueOrDefault$d(ticksOpts.fontSize, core_defaults.global.defaultFontSize);

		return {
			w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),
			h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)
		};
	},

	/**
	 * Crude approximation of what the label width might be
	 * @private
	 */
	getLabelWidth: function(label) {
		return this._getLabelSize(label).w;
	},

	/**
	 * @private
	 */
	getLabelCapacity: function(exampleTime) {
		var me = this;
		var timeOpts = me.options.time;
		var displayFormats = timeOpts.displayFormats;

		// pick the longest format (milliseconds) for guestimation
		var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
		var exampleLabel = me.tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);
		var size = me._getLabelSize(exampleLabel);
		var capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h);

		if (me.options.offset) {
			capacity--;
		}

		return capacity > 0 ? capacity : 1;
	}
});

// INTERNAL: static default options, registered in src/index.js
var _defaults$4 = defaultConfig$4;
scale_time._defaults = _defaults$4;

var scales = {
	category: scale_category,
	linear: scale_linear,
	logarithmic: scale_logarithmic,
	radialLinear: scale_radialLinear,
	time: scale_time
};

var FORMATS = {
	datetime: 'MMM D, YYYY, h:mm:ss a',
	millisecond: 'h:mm:ss.SSS a',
	second: 'h:mm:ss a',
	minute: 'h:mm a',
	hour: 'hA',
	day: 'MMM D',
	week: 'll',
	month: 'MMM YYYY',
	quarter: '[Q]Q - YYYY',
	year: 'YYYY'
};

core_adapters._date.override(typeof moment === 'function' ? {
	_id: 'moment', // DEBUG ONLY

	formats: function() {
		return FORMATS;
	},

	parse: function(value, format) {
		if (typeof value === 'string' && typeof format === 'string') {
			value = moment(value, format);
		} else if (!(value instanceof moment)) {
			value = moment(value);
		}
		return value.isValid() ? value.valueOf() : null;
	},

	format: function(time, format) {
		return moment(time).format(format);
	},

	add: function(time, amount, unit) {
		return moment(time).add(amount, unit).valueOf();
	},

	diff: function(max, min, unit) {
		return moment(max).diff(moment(min), unit);
	},

	startOf: function(time, unit, weekday) {
		time = moment(time);
		if (unit === 'isoWeek') {
			return time.isoWeekday(weekday).valueOf();
		}
		return time.startOf(unit).valueOf();
	},

	endOf: function(time, unit) {
		return moment(time).endOf(unit).valueOf();
	},

	// DEPRECATIONS

	/**
	 * Provided for backward compatibility with scale.getValueForPixel().
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 * @private
	 */
	_create: function(time) {
		return moment(time);
	},
} : {});

core_defaults._set('global', {
	plugins: {
		filler: {
			propagate: true
		}
	}
});

var mappers = {
	dataset: function(source) {
		var index = source.fill;
		var chart = source.chart;
		var meta = chart.getDatasetMeta(index);
		var visible = meta && chart.isDatasetVisible(index);
		var points = (visible && meta.dataset._children) || [];
		var length = points.length || 0;

		return !length ? null : function(point, i) {
			return (i < length && points[i]._view) || null;
		};
	},

	boundary: function(source) {
		var boundary = source.boundary;
		var x = boundary ? boundary.x : null;
		var y = boundary ? boundary.y : null;

		if (helpers$1.isArray(boundary)) {
			return function(point, i) {
				return boundary[i];
			};
		}

		return function(point) {
			return {
				x: x === null ? point.x : x,
				y: y === null ? point.y : y,
			};
		};
	}
};

// @todo if (fill[0] === '#')
function decodeFill(el, index, count) {
	var model = el._model || {};
	var fill = model.fill;
	var target;

	if (fill === undefined) {
		fill = !!model.backgroundColor;
	}

	if (fill === false || fill === null) {
		return false;
	}

	if (fill === true) {
		return 'origin';
	}

	target = parseFloat(fill, 10);
	if (isFinite(target) && Math.floor(target) === target) {
		if (fill[0] === '-' || fill[0] === '+') {
			target = index + target;
		}

		if (target === index || target < 0 || target >= count) {
			return false;
		}

		return target;
	}

	switch (fill) {
	// compatibility
	case 'bottom':
		return 'start';
	case 'top':
		return 'end';
	case 'zero':
		return 'origin';
	// supported boundaries
	case 'origin':
	case 'start':
	case 'end':
		return fill;
	// invalid fill values
	default:
		return false;
	}
}

function computeLinearBoundary(source) {
	var model = source.el._model || {};
	var scale = source.el._scale || {};
	var fill = source.fill;
	var target = null;
	var horizontal;

	if (isFinite(fill)) {
		return null;
	}

	// Backward compatibility: until v3, we still need to support boundary values set on
	// the model (scaleTop, scaleBottom and scaleZero) because some external plugins and
	// controllers might still use it (e.g. the Smith chart).

	if (fill === 'start') {
		target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;
	} else if (fill === 'end') {
		target = model.scaleTop === undefined ? scale.top : model.scaleTop;
	} else if (model.scaleZero !== undefined) {
		target = model.scaleZero;
	} else if (scale.getBasePixel) {
		target = scale.getBasePixel();
	}

	if (target !== undefined && target !== null) {
		if (target.x !== undefined && target.y !== undefined) {
			return target;
		}

		if (helpers$1.isFinite(target)) {
			horizontal = scale.isHorizontal();
			return {
				x: horizontal ? target : null,
				y: horizontal ? null : target
			};
		}
	}

	return null;
}

function computeCircularBoundary(source) {
	var scale = source.el._scale;
	var options = scale.options;
	var length = scale.chart.data.labels.length;
	var fill = source.fill;
	var target = [];
	var start, end, center, i, point;

	if (!length) {
		return null;
	}

	start = options.ticks.reverse ? scale.max : scale.min;
	end = options.ticks.reverse ? scale.min : scale.max;
	center = scale.getPointPositionForValue(0, start);
	for (i = 0; i < length; ++i) {
		point = fill === 'start' || fill === 'end'
			? scale.getPointPositionForValue(i, fill === 'start' ? start : end)
			: scale.getBasePosition(i);
		if (options.gridLines.circular) {
			point.cx = center.x;
			point.cy = center.y;
			point.angle = scale.getIndexAngle(i) - Math.PI / 2;
		}
		target.push(point);
	}
	return target;
}

function computeBoundary(source) {
	var scale = source.el._scale || {};

	if (scale.getPointPositionForValue) {
		return computeCircularBoundary(source);
	}
	return computeLinearBoundary(source);
}

function resolveTarget(sources, index, propagate) {
	var source = sources[index];
	var fill = source.fill;
	var visited = [index];
	var target;

	if (!propagate) {
		return fill;
	}

	while (fill !== false && visited.indexOf(fill) === -1) {
		if (!isFinite(fill)) {
			return fill;
		}

		target = sources[fill];
		if (!target) {
			return false;
		}

		if (target.visible) {
			return fill;
		}

		visited.push(fill);
		fill = target.fill;
	}

	return false;
}

function createMapper(source) {
	var fill = source.fill;
	var type = 'dataset';

	if (fill === false) {
		return null;
	}

	if (!isFinite(fill)) {
		type = 'boundary';
	}

	return mappers[type](source);
}

function isDrawable(point) {
	return point && !point.skip;
}

function drawArea(ctx, curve0, curve1, len0, len1) {
	var i, cx, cy, r;

	if (!len0 || !len1) {
		return;
	}

	// building first area curve (normal)
	ctx.moveTo(curve0[0].x, curve0[0].y);
	for (i = 1; i < len0; ++i) {
		helpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);
	}

	if (curve1[0].angle !== undefined) {
		cx = curve1[0].cx;
		cy = curve1[0].cy;
		r = Math.sqrt(Math.pow(curve1[0].x - cx, 2) + Math.pow(curve1[0].y - cy, 2));
		for (i = len1 - 1; i > 0; --i) {
			ctx.arc(cx, cy, r, curve1[i].angle, curve1[i - 1].angle, true);
		}
		return;
	}

	// joining the two area curves
	ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);

	// building opposite area curve (reverse)
	for (i = len1 - 1; i > 0; --i) {
		helpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);
	}
}

function doFill(ctx, points, mapper, view, color, loop) {
	var count = points.length;
	var span = view.spanGaps;
	var curve0 = [];
	var curve1 = [];
	var len0 = 0;
	var len1 = 0;
	var i, ilen, index, p0, p1, d0, d1, loopOffset;

	ctx.beginPath();

	for (i = 0, ilen = count; i < ilen; ++i) {
		index = i % count;
		p0 = points[index]._view;
		p1 = mapper(p0, index, view);
		d0 = isDrawable(p0);
		d1 = isDrawable(p1);

		if (loop && loopOffset === undefined && d0) {
			loopOffset = i + 1;
			ilen = count + loopOffset;
		}

		if (d0 && d1) {
			len0 = curve0.push(p0);
			len1 = curve1.push(p1);
		} else if (len0 && len1) {
			if (!span) {
				drawArea(ctx, curve0, curve1, len0, len1);
				len0 = len1 = 0;
				curve0 = [];
				curve1 = [];
			} else {
				if (d0) {
					curve0.push(p0);
				}
				if (d1) {
					curve1.push(p1);
				}
			}
		}
	}

	drawArea(ctx, curve0, curve1, len0, len1);

	ctx.closePath();
	ctx.fillStyle = color;
	ctx.fill();
}

var plugin_filler = {
	id: 'filler',

	afterDatasetsUpdate: function(chart, options) {
		var count = (chart.data.datasets || []).length;
		var propagate = options.propagate;
		var sources = [];
		var meta, i, el, source;

		for (i = 0; i < count; ++i) {
			meta = chart.getDatasetMeta(i);
			el = meta.dataset;
			source = null;

			if (el && el._model && el instanceof elements.Line) {
				source = {
					visible: chart.isDatasetVisible(i),
					fill: decodeFill(el, i, count),
					chart: chart,
					el: el
				};
			}

			meta.$filler = source;
			sources.push(source);
		}

		for (i = 0; i < count; ++i) {
			source = sources[i];
			if (!source) {
				continue;
			}

			source.fill = resolveTarget(sources, i, propagate);
			source.boundary = computeBoundary(source);
			source.mapper = createMapper(source);
		}
	},

	beforeDatasetsDraw: function(chart) {
		var metasets = chart._getSortedVisibleDatasetMetas();
		var ctx = chart.ctx;
		var meta, i, el, view, points, mapper, color;

		for (i = metasets.length - 1; i >= 0; --i) {
			meta = metasets[i].$filler;

			if (!meta || !meta.visible) {
				continue;
			}

			el = meta.el;
			view = el._view;
			points = el._children || [];
			mapper = meta.mapper;
			color = view.backgroundColor || core_defaults.global.defaultColor;

			if (mapper && color && points.length) {
				helpers$1.canvas.clipArea(ctx, chart.chartArea);
				doFill(ctx, points, mapper, view, color, el._loop);
				helpers$1.canvas.unclipArea(ctx);
			}
		}
	}
};

var getRtlHelper$1 = helpers$1.rtl.getRtlAdapter;
var noop$1 = helpers$1.noop;
var valueOrDefault$e = helpers$1.valueOrDefault;

core_defaults._set('global', {
	legend: {
		display: true,
		position: 'top',
		align: 'center',
		fullWidth: true,
		reverse: false,
		weight: 1000,

		// a callback that will handle
		onClick: function(e, legendItem) {
			var index = legendItem.datasetIndex;
			var ci = this.chart;
			var meta = ci.getDatasetMeta(index);

			// See controller.isDatasetVisible comment
			meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;

			// We hid a dataset ... rerender the chart
			ci.update();
		},

		onHover: null,
		onLeave: null,

		labels: {
			boxWidth: 40,
			padding: 10,
			// Generates labels shown in the legend
			// Valid properties to return:
			// text : text to display
			// fillStyle : fill of coloured box
			// strokeStyle: stroke of coloured box
			// hidden : if this legend item refers to a hidden item
			// lineCap : cap style for line
			// lineDash
			// lineDashOffset :
			// lineJoin :
			// lineWidth :
			generateLabels: function(chart) {
				var datasets = chart.data.datasets;
				var options = chart.options.legend || {};
				var usePointStyle = options.labels && options.labels.usePointStyle;

				return chart._getSortedDatasetMetas().map(function(meta) {
					var style = meta.controller.getStyle(usePointStyle ? 0 : undefined);

					return {
						text: datasets[meta.index].label,
						fillStyle: style.backgroundColor,
						hidden: !chart.isDatasetVisible(meta.index),
						lineCap: style.borderCapStyle,
						lineDash: style.borderDash,
						lineDashOffset: style.borderDashOffset,
						lineJoin: style.borderJoinStyle,
						lineWidth: style.borderWidth,
						strokeStyle: style.borderColor,
						pointStyle: style.pointStyle,
						rotation: style.rotation,

						// Below is extra data used for toggling the datasets
						datasetIndex: meta.index
					};
				}, this);
			}
		}
	},

	legendCallback: function(chart) {
		var list = document.createElement('ul');
		var datasets = chart.data.datasets;
		var i, ilen, listItem, listItemSpan;

		list.setAttribute('class', chart.id + '-legend');

		for (i = 0, ilen = datasets.length; i < ilen; i++) {
			listItem = list.appendChild(document.createElement('li'));
			listItemSpan = listItem.appendChild(document.createElement('span'));
			listItemSpan.style.backgroundColor = datasets[i].backgroundColor;
			if (datasets[i].label) {
				listItem.appendChild(document.createTextNode(datasets[i].label));
			}
		}

		return list.outerHTML;
	}
});

/**
 * Helper function to get the box width based on the usePointStyle option
 * @param {object} labelopts - the label options on the legend
 * @param {number} fontSize - the label font size
 * @return {number} width of the color box area
 */
function getBoxWidth(labelOpts, fontSize) {
	return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ?
		fontSize :
		labelOpts.boxWidth;
}

/**
 * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
 */
var Legend = core_element.extend({

	initialize: function(config) {
		var me = this;
		helpers$1.extend(me, config);

		// Contains hit boxes for each dataset (in dataset order)
		me.legendHitBoxes = [];

		/**
 		 * @private
 		 */
		me._hoveredItem = null;

		// Are we in doughnut mode which has a different data type
		me.doughnutMode = false;
	},

	// These methods are ordered by lifecycle. Utilities then follow.
	// Any function defined here is inherited by all legend types.
	// Any function can be extended by the legend type

	beforeUpdate: noop$1,
	update: function(maxWidth, maxHeight, margins) {
		var me = this;

		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
		me.beforeUpdate();

		// Absorb the master measurements
		me.maxWidth = maxWidth;
		me.maxHeight = maxHeight;
		me.margins = margins;

		// Dimensions
		me.beforeSetDimensions();
		me.setDimensions();
		me.afterSetDimensions();
		// Labels
		me.beforeBuildLabels();
		me.buildLabels();
		me.afterBuildLabels();

		// Fit
		me.beforeFit();
		me.fit();
		me.afterFit();
		//
		me.afterUpdate();

		return me.minSize;
	},
	afterUpdate: noop$1,

	//

	beforeSetDimensions: noop$1,
	setDimensions: function() {
		var me = this;
		// Set the unconstrained dimension before label rotation
		if (me.isHorizontal()) {
			// Reset position before calculating rotation
			me.width = me.maxWidth;
			me.left = 0;
			me.right = me.width;
		} else {
			me.height = me.maxHeight;

			// Reset position before calculating rotation
			me.top = 0;
			me.bottom = me.height;
		}

		// Reset padding
		me.paddingLeft = 0;
		me.paddingTop = 0;
		me.paddingRight = 0;
		me.paddingBottom = 0;

		// Reset minSize
		me.minSize = {
			width: 0,
			height: 0
		};
	},
	afterSetDimensions: noop$1,

	//

	beforeBuildLabels: noop$1,
	buildLabels: function() {
		var me = this;
		var labelOpts = me.options.labels || {};
		var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];

		if (labelOpts.filter) {
			legendItems = legendItems.filter(function(item) {
				return labelOpts.filter(item, me.chart.data);
			});
		}

		if (me.options.reverse) {
			legendItems.reverse();
		}

		me.legendItems = legendItems;
	},
	afterBuildLabels: noop$1,

	//

	beforeFit: noop$1,
	fit: function() {
		var me = this;
		var opts = me.options;
		var labelOpts = opts.labels;
		var display = opts.display;

		var ctx = me.ctx;

		var labelFont = helpers$1.options._parseFont(labelOpts);
		var fontSize = labelFont.size;

		// Reset hit boxes
		var hitboxes = me.legendHitBoxes = [];

		var minSize = me.minSize;
		var isHorizontal = me.isHorizontal();

		if (isHorizontal) {
			minSize.width = me.maxWidth; // fill all the width
			minSize.height = display ? 10 : 0;
		} else {
			minSize.width = display ? 10 : 0;
			minSize.height = me.maxHeight; // fill all the height
		}

		// Increase sizes here
		if (!display) {
			me.width = minSize.width = me.height = minSize.height = 0;
			return;
		}
		ctx.font = labelFont.string;

		if (isHorizontal) {
			// Labels

			// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
			var lineWidths = me.lineWidths = [0];
			var totalHeight = 0;

			ctx.textAlign = 'left';
			ctx.textBaseline = 'middle';

			helpers$1.each(me.legendItems, function(legendItem, i) {
				var boxWidth = getBoxWidth(labelOpts, fontSize);
				var width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

				if (i === 0 || lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {
					totalHeight += fontSize + labelOpts.padding;
					lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
				}

				// Store the hitbox width and height here. Final position will be updated in `draw`
				hitboxes[i] = {
					left: 0,
					top: 0,
					width: width,
					height: fontSize
				};

				lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
			});

			minSize.height += totalHeight;

		} else {
			var vPadding = labelOpts.padding;
			var columnWidths = me.columnWidths = [];
			var columnHeights = me.columnHeights = [];
			var totalWidth = labelOpts.padding;
			var currentColWidth = 0;
			var currentColHeight = 0;

			helpers$1.each(me.legendItems, function(legendItem, i) {
				var boxWidth = getBoxWidth(labelOpts, fontSize);
				var itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

				// If too tall, go to new column
				if (i > 0 && currentColHeight + fontSize + 2 * vPadding > minSize.height) {
					totalWidth += currentColWidth + labelOpts.padding;
					columnWidths.push(currentColWidth); // previous column width
					columnHeights.push(currentColHeight);
					currentColWidth = 0;
					currentColHeight = 0;
				}

				// Get max width
				currentColWidth = Math.max(currentColWidth, itemWidth);
				currentColHeight += fontSize + vPadding;

				// Store the hitbox width and height here. Final position will be updated in `draw`
				hitboxes[i] = {
					left: 0,
					top: 0,
					width: itemWidth,
					height: fontSize
				};
			});

			totalWidth += currentColWidth;
			columnWidths.push(currentColWidth);
			columnHeights.push(currentColHeight);
			minSize.width += totalWidth;
		}

		me.width = minSize.width;
		me.height = minSize.height;
	},
	afterFit: noop$1,

	// Shared Methods
	isHorizontal: function() {
		return this.options.position === 'top' || this.options.position === 'bottom';
	},

	// Actually draw the legend on the canvas
	draw: function() {
		var me = this;
		var opts = me.options;
		var labelOpts = opts.labels;
		var globalDefaults = core_defaults.global;
		var defaultColor = globalDefaults.defaultColor;
		var lineDefault = globalDefaults.elements.line;
		var legendHeight = me.height;
		var columnHeights = me.columnHeights;
		var legendWidth = me.width;
		var lineWidths = me.lineWidths;

		if (!opts.display) {
			return;
		}

		var rtlHelper = getRtlHelper$1(opts.rtl, me.left, me.minSize.width);
		var ctx = me.ctx;
		var fontColor = valueOrDefault$e(labelOpts.fontColor, globalDefaults.defaultFontColor);
		var labelFont = helpers$1.options._parseFont(labelOpts);
		var fontSize = labelFont.size;
		var cursor;

		// Canvas setup
		ctx.textAlign = rtlHelper.textAlign('left');
		ctx.textBaseline = 'middle';
		ctx.lineWidth = 0.5;
		ctx.strokeStyle = fontColor; // for strikethrough effect
		ctx.fillStyle = fontColor; // render in correct colour
		ctx.font = labelFont.string;

		var boxWidth = getBoxWidth(labelOpts, fontSize);
		var hitboxes = me.legendHitBoxes;

		// current position
		var drawLegendBox = function(x, y, legendItem) {
			if (isNaN(boxWidth) || boxWidth <= 0) {
				return;
			}

			// Set the ctx for the box
			ctx.save();

			var lineWidth = valueOrDefault$e(legendItem.lineWidth, lineDefault.borderWidth);
			ctx.fillStyle = valueOrDefault$e(legendItem.fillStyle, defaultColor);
			ctx.lineCap = valueOrDefault$e(legendItem.lineCap, lineDefault.borderCapStyle);
			ctx.lineDashOffset = valueOrDefault$e(legendItem.lineDashOffset, lineDefault.borderDashOffset);
			ctx.lineJoin = valueOrDefault$e(legendItem.lineJoin, lineDefault.borderJoinStyle);
			ctx.lineWidth = lineWidth;
			ctx.strokeStyle = valueOrDefault$e(legendItem.strokeStyle, defaultColor);

			if (ctx.setLineDash) {
				// IE 9 and 10 do not support line dash
				ctx.setLineDash(valueOrDefault$e(legendItem.lineDash, lineDefault.borderDash));
			}

			if (labelOpts && labelOpts.usePointStyle) {
				// Recalculate x and y for drawPoint() because its expecting
				// x and y to be center of figure (instead of top left)
				var radius = boxWidth * Math.SQRT2 / 2;
				var centerX = rtlHelper.xPlus(x, boxWidth / 2);
				var centerY = y + fontSize / 2;

				// Draw pointStyle as legend symbol
				helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY, legendItem.rotation);
			} else {
				// Draw box as legend symbol
				ctx.fillRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
				if (lineWidth !== 0) {
					ctx.strokeRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
				}
			}

			ctx.restore();
		};

		var fillText = function(x, y, legendItem, textWidth) {
			var halfFontSize = fontSize / 2;
			var xLeft = rtlHelper.xPlus(x, boxWidth + halfFontSize);
			var yMiddle = y + halfFontSize;

			ctx.fillText(legendItem.text, xLeft, yMiddle);

			if (legendItem.hidden) {
				// Strikethrough the text if hidden
				ctx.beginPath();
				ctx.lineWidth = 2;
				ctx.moveTo(xLeft, yMiddle);
				ctx.lineTo(rtlHelper.xPlus(xLeft, textWidth), yMiddle);
				ctx.stroke();
			}
		};

		var alignmentOffset = function(dimension, blockSize) {
			switch (opts.align) {
			case 'start':
				return labelOpts.padding;
			case 'end':
				return dimension - blockSize;
			default: // center
				return (dimension - blockSize + labelOpts.padding) / 2;
			}
		};

		// Horizontal
		var isHorizontal = me.isHorizontal();
		if (isHorizontal) {
			cursor = {
				x: me.left + alignmentOffset(legendWidth, lineWidths[0]),
				y: me.top + labelOpts.padding,
				line: 0
			};
		} else {
			cursor = {
				x: me.left + labelOpts.padding,
				y: me.top + alignmentOffset(legendHeight, columnHeights[0]),
				line: 0
			};
		}

		helpers$1.rtl.overrideTextDirection(me.ctx, opts.textDirection);

		var itemHeight = fontSize + labelOpts.padding;
		helpers$1.each(me.legendItems, function(legendItem, i) {
			var textWidth = ctx.measureText(legendItem.text).width;
			var width = boxWidth + (fontSize / 2) + textWidth;
			var x = cursor.x;
			var y = cursor.y;

			rtlHelper.setWidth(me.minSize.width);

			// Use (me.left + me.minSize.width) and (me.top + me.minSize.height)
			// instead of me.right and me.bottom because me.width and me.height
			// may have been changed since me.minSize was calculated
			if (isHorizontal) {
				if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {
					y = cursor.y += itemHeight;
					cursor.line++;
					x = cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);
				}
			} else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {
				x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
				cursor.line++;
				y = cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);
			}

			var realX = rtlHelper.x(x);

			drawLegendBox(realX, y, legendItem);

			hitboxes[i].left = rtlHelper.leftForLtr(realX, hitboxes[i].width);
			hitboxes[i].top = y;

			// Fill the actual label
			fillText(realX, y, legendItem, textWidth);

			if (isHorizontal) {
				cursor.x += width + labelOpts.padding;
			} else {
				cursor.y += itemHeight;
			}
		});

		helpers$1.rtl.restoreTextDirection(me.ctx, opts.textDirection);
	},

	/**
	 * @private
	 */
	_getLegendItemAt: function(x, y) {
		var me = this;
		var i, hitBox, lh;

		if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
			// See if we are touching one of the dataset boxes
			lh = me.legendHitBoxes;
			for (i = 0; i < lh.length; ++i) {
				hitBox = lh[i];

				if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
					// Touching an element
					return me.legendItems[i];
				}
			}
		}

		return null;
	},

	/**
	 * Handle an event
	 * @private
	 * @param {IEvent} event - The event to handle
	 */
	handleEvent: function(e) {
		var me = this;
		var opts = me.options;
		var type = e.type === 'mouseup' ? 'click' : e.type;
		var hoveredItem;

		if (type === 'mousemove') {
			if (!opts.onHover && !opts.onLeave) {
				return;
			}
		} else if (type === 'click') {
			if (!opts.onClick) {
				return;
			}
		} else {
			return;
		}

		// Chart event already has relative position in it
		hoveredItem = me._getLegendItemAt(e.x, e.y);

		if (type === 'click') {
			if (hoveredItem && opts.onClick) {
				// use e.native for backwards compatibility
				opts.onClick.call(me, e.native, hoveredItem);
			}
		} else {
			if (opts.onLeave && hoveredItem !== me._hoveredItem) {
				if (me._hoveredItem) {
					opts.onLeave.call(me, e.native, me._hoveredItem);
				}
				me._hoveredItem = hoveredItem;
			}

			if (opts.onHover && hoveredItem) {
				// use e.native for backwards compatibility
				opts.onHover.call(me, e.native, hoveredItem);
			}
		}
	}
});

function createNewLegendAndAttach(chart, legendOpts) {
	var legend = new Legend({
		ctx: chart.ctx,
		options: legendOpts,
		chart: chart
	});

	core_layouts.configure(chart, legend, legendOpts);
	core_layouts.addBox(chart, legend);
	chart.legend = legend;
}

var plugin_legend = {
	id: 'legend',

	/**
	 * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making
	 * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of
	 * the plugin, which one will be re-exposed in the chart.js file.
	 * https://github.com/chartjs/Chart.js/pull/2640
	 * @private
	 */
	_element: Legend,

	beforeInit: function(chart) {
		var legendOpts = chart.options.legend;

		if (legendOpts) {
			createNewLegendAndAttach(chart, legendOpts);
		}
	},

	beforeUpdate: function(chart) {
		var legendOpts = chart.options.legend;
		var legend = chart.legend;

		if (legendOpts) {
			helpers$1.mergeIf(legendOpts, core_defaults.global.legend);

			if (legend) {
				core_layouts.configure(chart, legend, legendOpts);
				legend.options = legendOpts;
			} else {
				createNewLegendAndAttach(chart, legendOpts);
			}
		} else if (legend) {
			core_layouts.removeBox(chart, legend);
			delete chart.legend;
		}
	},

	afterEvent: function(chart, e) {
		var legend = chart.legend;
		if (legend) {
			legend.handleEvent(e);
		}
	}
};

var noop$2 = helpers$1.noop;

core_defaults._set('global', {
	title: {
		display: false,
		fontStyle: 'bold',
		fullWidth: true,
		padding: 10,
		position: 'top',
		text: '',
		weight: 2000         // by default greater than legend (1000) to be above
	}
});

/**
 * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
 */
var Title = core_element.extend({
	initialize: function(config) {
		var me = this;
		helpers$1.extend(me, config);

		// Contains hit boxes for each dataset (in dataset order)
		me.legendHitBoxes = [];
	},

	// These methods are ordered by lifecycle. Utilities then follow.

	beforeUpdate: noop$2,
	update: function(maxWidth, maxHeight, margins) {
		var me = this;

		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
		me.beforeUpdate();

		// Absorb the master measurements
		me.maxWidth = maxWidth;
		me.maxHeight = maxHeight;
		me.margins = margins;

		// Dimensions
		me.beforeSetDimensions();
		me.setDimensions();
		me.afterSetDimensions();
		// Labels
		me.beforeBuildLabels();
		me.buildLabels();
		me.afterBuildLabels();

		// Fit
		me.beforeFit();
		me.fit();
		me.afterFit();
		//
		me.afterUpdate();

		return me.minSize;

	},
	afterUpdate: noop$2,

	//

	beforeSetDimensions: noop$2,
	setDimensions: function() {
		var me = this;
		// Set the unconstrained dimension before label rotation
		if (me.isHorizontal()) {
			// Reset position before calculating rotation
			me.width = me.maxWidth;
			me.left = 0;
			me.right = me.width;
		} else {
			me.height = me.maxHeight;

			// Reset position before calculating rotation
			me.top = 0;
			me.bottom = me.height;
		}

		// Reset padding
		me.paddingLeft = 0;
		me.paddingTop = 0;
		me.paddingRight = 0;
		me.paddingBottom = 0;

		// Reset minSize
		me.minSize = {
			width: 0,
			height: 0
		};
	},
	afterSetDimensions: noop$2,

	//

	beforeBuildLabels: noop$2,
	buildLabels: noop$2,
	afterBuildLabels: noop$2,

	//

	beforeFit: noop$2,
	fit: function() {
		var me = this;
		var opts = me.options;
		var minSize = me.minSize = {};
		var isHorizontal = me.isHorizontal();
		var lineCount, textSize;

		if (!opts.display) {
			me.width = minSize.width = me.height = minSize.height = 0;
			return;
		}

		lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;
		textSize = lineCount * helpers$1.options._parseFont(opts).lineHeight + opts.padding * 2;

		me.width = minSize.width = isHorizontal ? me.maxWidth : textSize;
		me.height = minSize.height = isHorizontal ? textSize : me.maxHeight;
	},
	afterFit: noop$2,

	// Shared Methods
	isHorizontal: function() {
		var pos = this.options.position;
		return pos === 'top' || pos === 'bottom';
	},

	// Actually draw the title block on the canvas
	draw: function() {
		var me = this;
		var ctx = me.ctx;
		var opts = me.options;

		if (!opts.display) {
			return;
		}

		var fontOpts = helpers$1.options._parseFont(opts);
		var lineHeight = fontOpts.lineHeight;
		var offset = lineHeight / 2 + opts.padding;
		var rotation = 0;
		var top = me.top;
		var left = me.left;
		var bottom = me.bottom;
		var right = me.right;
		var maxWidth, titleX, titleY;

		ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour
		ctx.font = fontOpts.string;

		// Horizontal
		if (me.isHorizontal()) {
			titleX = left + ((right - left) / 2); // midpoint of the width
			titleY = top + offset;
			maxWidth = right - left;
		} else {
			titleX = opts.position === 'left' ? left + offset : right - offset;
			titleY = top + ((bottom - top) / 2);
			maxWidth = bottom - top;
			rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
		}

		ctx.save();
		ctx.translate(titleX, titleY);
		ctx.rotate(rotation);
		ctx.textAlign = 'center';
		ctx.textBaseline = 'middle';

		var text = opts.text;
		if (helpers$1.isArray(text)) {
			var y = 0;
			for (var i = 0; i < text.length; ++i) {
				ctx.fillText(text[i], 0, y, maxWidth);
				y += lineHeight;
			}
		} else {
			ctx.fillText(text, 0, 0, maxWidth);
		}

		ctx.restore();
	}
});

function createNewTitleBlockAndAttach(chart, titleOpts) {
	var title = new Title({
		ctx: chart.ctx,
		options: titleOpts,
		chart: chart
	});

	core_layouts.configure(chart, title, titleOpts);
	core_layouts.addBox(chart, title);
	chart.titleBlock = title;
}

var plugin_title = {
	id: 'title',

	/**
	 * Backward compatibility: since 2.1.5, the title is registered as a plugin, making
	 * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of
	 * the plugin, which one will be re-exposed in the chart.js file.
	 * https://github.com/chartjs/Chart.js/pull/2640
	 * @private
	 */
	_element: Title,

	beforeInit: function(chart) {
		var titleOpts = chart.options.title;

		if (titleOpts) {
			createNewTitleBlockAndAttach(chart, titleOpts);
		}
	},

	beforeUpdate: function(chart) {
		var titleOpts = chart.options.title;
		var titleBlock = chart.titleBlock;

		if (titleOpts) {
			helpers$1.mergeIf(titleOpts, core_defaults.global.title);

			if (titleBlock) {
				core_layouts.configure(chart, titleBlock, titleOpts);
				titleBlock.options = titleOpts;
			} else {
				createNewTitleBlockAndAttach(chart, titleOpts);
			}
		} else if (titleBlock) {
			core_layouts.removeBox(chart, titleBlock);
			delete chart.titleBlock;
		}
	}
};

var plugins = {};
var filler = plugin_filler;
var legend = plugin_legend;
var title = plugin_title;
plugins.filler = filler;
plugins.legend = legend;
plugins.title = title;

/**
 * @namespace Chart
 */


core_controller.helpers = helpers$1;

// @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!
core_helpers();

core_controller._adapters = core_adapters;
core_controller.Animation = core_animation;
core_controller.animationService = core_animations;
core_controller.controllers = controllers;
core_controller.DatasetController = core_datasetController;
core_controller.defaults = core_defaults;
core_controller.Element = core_element;
core_controller.elements = elements;
core_controller.Interaction = core_interaction;
core_controller.layouts = core_layouts;
core_controller.platform = platform;
core_controller.plugins = core_plugins;
core_controller.Scale = core_scale;
core_controller.scaleService = core_scaleService;
core_controller.Ticks = core_ticks;
core_controller.Tooltip = core_tooltip;

// Register built-in scales

core_controller.helpers.each(scales, function(scale, type) {
	core_controller.scaleService.registerScaleType(type, scale, scale._defaults);
});

// Load to register built-in adapters (as side effects)


// Loading built-in plugins

for (var k in plugins) {
	if (plugins.hasOwnProperty(k)) {
		core_controller.plugins.register(plugins[k]);
	}
}

core_controller.platform.initialize();

var src = core_controller;
if (typeof window !== 'undefined') {
	window.Chart = core_controller;
}

// DEPRECATIONS

/**
 * Provided for backward compatibility, not available anymore
 * @namespace Chart.Chart
 * @deprecated since version 2.8.0
 * @todo remove at version 3
 * @private
 */
core_controller.Chart = core_controller;

/**
 * Provided for backward compatibility, not available anymore
 * @namespace Chart.Legend
 * @deprecated since version 2.1.5
 * @todo remove at version 3
 * @private
 */
core_controller.Legend = plugins.legend._element;

/**
 * Provided for backward compatibility, not available anymore
 * @namespace Chart.Title
 * @deprecated since version 2.1.5
 * @todo remove at version 3
 * @private
 */
core_controller.Title = plugins.title._element;

/**
 * Provided for backward compatibility, use Chart.plugins instead
 * @namespace Chart.pluginService
 * @deprecated since version 2.1.5
 * @todo remove at version 3
 * @private
 */
core_controller.pluginService = core_controller.plugins;

/**
 * Provided for backward compatibility, inheriting from Chart.PlugingBase has no
 * effect, instead simply create/register plugins via plain JavaScript objects.
 * @interface Chart.PluginBase
 * @deprecated since version 2.5.0
 * @todo remove at version 3
 * @private
 */
core_controller.PluginBase = core_controller.Element.extend({});

/**
 * Provided for backward compatibility, use Chart.helpers.canvas instead.
 * @namespace Chart.canvasHelpers
 * @deprecated since version 2.6.0
 * @todo remove at version 3
 * @private
 */
core_controller.canvasHelpers = core_controller.helpers.canvas;

/**
 * Provided for backward compatibility, use Chart.layouts instead.
 * @namespace Chart.layoutService
 * @deprecated since version 2.7.3
 * @todo remove at version 3
 * @private
 */
core_controller.layoutService = core_controller.layouts;

/**
 * Provided for backward compatibility, not available anymore.
 * @namespace Chart.LinearScaleBase
 * @deprecated since version 2.8
 * @todo remove at version 3
 * @private
 */
core_controller.LinearScaleBase = scale_linearbase;

/**
 * Provided for backward compatibility, instead we should create a new Chart
 * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).
 * @deprecated since version 2.8.0
 * @todo remove at version 3
 */
core_controller.helpers.each(
	[
		'Bar',
		'Bubble',
		'Doughnut',
		'Line',
		'PolarArea',
		'Radar',
		'Scatter'
	],
	function(klass) {
		core_controller[klass] = function(ctx, cfg) {
			return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {
				type: klass.charAt(0).toLowerCase() + klass.slice(1)
			}));
		};
	}
);

return src;

})));


/***/ }),

/***/ "./node_modules/file-saver/dist/FileSaver.min.js":
/*!*******************************************************!*\
  !*** ./node_modules/file-saver/dist/FileSaver.min.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(a,b){if(true)!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}})(this,function(){"use strict";function b(a,b){return"undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Deprecated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open("GET",a),d.responseType="blob",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error("could not download file")},d.send()}function d(a){var b=new XMLHttpRequest;b.open("HEAD",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"))}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof __webpack_require__.g&&__webpack_require__.g.global===__webpack_require__.g?__webpack_require__.g:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open("","_blank"),g&&(g.document.title=g.document.body.innerText="downloading..."),"string"==typeof b)return c(b,d,e);var h="application/octet-stream"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\/[\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&"undefined"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g, true&&(module.exports=g)});

//# sourceMappingURL=FileSaver.min.js.map

/***/ }),

/***/ "./node_modules/moment/locale/af.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/af.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Afrikaans [af]
//! author : Werner Mollentze : https://github.com/wernerm

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var af = moment.defineLocale('af', {
        months: 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split(
            '_'
        ),
        weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
        weekdaysMin: 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
        meridiemParse: /vm|nm/i,
        isPM: function (input) {
            return /^nm$/i.test(input);
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'vm' : 'VM';
            } else {
                return isLower ? 'nm' : 'NM';
            }
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Vandag om] LT',
            nextDay: '[Môre om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[Gister om] LT',
            lastWeek: '[Laas] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'oor %s',
            past: '%s gelede',
            s: "'n paar sekondes",
            ss: '%d sekondes',
            m: "'n minuut",
            mm: '%d minute',
            h: "'n uur",
            hh: '%d ure',
            d: "'n dag",
            dd: '%d dae',
            M: "'n maand",
            MM: '%d maande',
            y: "'n jaar",
            yy: '%d jaar',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            ); // Thanks to Joris Röling : https://github.com/jjupiter
        },
        week: {
            dow: 1, // Maandag is die eerste dag van die week.
            doy: 4, // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
        },
    });

    return af;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-dz.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-dz.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Algeria) [ar-dz]
//! author : Amine Roukh: https://github.com/Amine27
//! author : Abdel Said: https://github.com/abdelsaid
//! author : Ahmed Elkhatib
//! author : forabi https://github.com/forabi
//! author : Noureddine LOUAHEDJ : https://github.com/noureddinem

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var pluralForm = function (n) {
            return n === 0
                ? 0
                : n === 1
                ? 1
                : n === 2
                ? 2
                : n % 100 >= 3 && n % 100 <= 10
                ? 3
                : n % 100 >= 11
                ? 4
                : 5;
        },
        plurals = {
            s: [
                'أقل من ثانية',
                'ثانية واحدة',
                ['ثانيتان', 'ثانيتين'],
                '%d ثوان',
                '%d ثانية',
                '%d ثانية',
            ],
            m: [
                'أقل من دقيقة',
                'دقيقة واحدة',
                ['دقيقتان', 'دقيقتين'],
                '%d دقائق',
                '%d دقيقة',
                '%d دقيقة',
            ],
            h: [
                'أقل من ساعة',
                'ساعة واحدة',
                ['ساعتان', 'ساعتين'],
                '%d ساعات',
                '%d ساعة',
                '%d ساعة',
            ],
            d: [
                'أقل من يوم',
                'يوم واحد',
                ['يومان', 'يومين'],
                '%d أيام',
                '%d يومًا',
                '%d يوم',
            ],
            M: [
                'أقل من شهر',
                'شهر واحد',
                ['شهران', 'شهرين'],
                '%d أشهر',
                '%d شهرا',
                '%d شهر',
            ],
            y: [
                'أقل من عام',
                'عام واحد',
                ['عامان', 'عامين'],
                '%d أعوام',
                '%d عامًا',
                '%d عام',
            ],
        },
        pluralize = function (u) {
            return function (number, withoutSuffix, string, isFuture) {
                var f = pluralForm(number),
                    str = plurals[u][pluralForm(number)];
                if (f === 2) {
                    str = str[withoutSuffix ? 0 : 1];
                }
                return str.replace(/%d/i, number);
            };
        },
        months = [
            'جانفي',
            'فيفري',
            'مارس',
            'أفريل',
            'ماي',
            'جوان',
            'جويلية',
            'أوت',
            'سبتمبر',
            'أكتوبر',
            'نوفمبر',
            'ديسمبر',
        ];

    var arDz = moment.defineLocale('ar-dz', {
        months: months,
        monthsShort: months,
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            ss: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y'),
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return arDz;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-kw.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-kw.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Kuwait) [ar-kw]
//! author : Nusret Parlak: https://github.com/nusretparlak

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var arKw = moment.defineLocale('ar-kw', {
        months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
            '_'
        ),
        monthsShort:
            'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
                '_'
            ),
        weekdays: 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات',
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return arKw;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-ly.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-ly.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Libya) [ar-ly]
//! author : Ali Hmer: https://github.com/kikoanis

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '1',
            2: '2',
            3: '3',
            4: '4',
            5: '5',
            6: '6',
            7: '7',
            8: '8',
            9: '9',
            0: '0',
        },
        pluralForm = function (n) {
            return n === 0
                ? 0
                : n === 1
                ? 1
                : n === 2
                ? 2
                : n % 100 >= 3 && n % 100 <= 10
                ? 3
                : n % 100 >= 11
                ? 4
                : 5;
        },
        plurals = {
            s: [
                'أقل من ثانية',
                'ثانية واحدة',
                ['ثانيتان', 'ثانيتين'],
                '%d ثوان',
                '%d ثانية',
                '%d ثانية',
            ],
            m: [
                'أقل من دقيقة',
                'دقيقة واحدة',
                ['دقيقتان', 'دقيقتين'],
                '%d دقائق',
                '%d دقيقة',
                '%d دقيقة',
            ],
            h: [
                'أقل من ساعة',
                'ساعة واحدة',
                ['ساعتان', 'ساعتين'],
                '%d ساعات',
                '%d ساعة',
                '%d ساعة',
            ],
            d: [
                'أقل من يوم',
                'يوم واحد',
                ['يومان', 'يومين'],
                '%d أيام',
                '%d يومًا',
                '%d يوم',
            ],
            M: [
                'أقل من شهر',
                'شهر واحد',
                ['شهران', 'شهرين'],
                '%d أشهر',
                '%d شهرا',
                '%d شهر',
            ],
            y: [
                'أقل من عام',
                'عام واحد',
                ['عامان', 'عامين'],
                '%d أعوام',
                '%d عامًا',
                '%d عام',
            ],
        },
        pluralize = function (u) {
            return function (number, withoutSuffix, string, isFuture) {
                var f = pluralForm(number),
                    str = plurals[u][pluralForm(number)];
                if (f === 2) {
                    str = str[withoutSuffix ? 0 : 1];
                }
                return str.replace(/%d/i, number);
            };
        },
        months = [
            'يناير',
            'فبراير',
            'مارس',
            'أبريل',
            'مايو',
            'يونيو',
            'يوليو',
            'أغسطس',
            'سبتمبر',
            'أكتوبر',
            'نوفمبر',
            'ديسمبر',
        ];

    var arLy = moment.defineLocale('ar-ly', {
        months: months,
        monthsShort: months,
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            ss: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y'),
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return arLy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-ma.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-ma.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Morocco) [ar-ma]
//! author : ElFadili Yassine : https://github.com/ElFadiliY
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var arMa = moment.defineLocale('ar-ma', {
        months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
            '_'
        ),
        monthsShort:
            'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
                '_'
            ),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return arMa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-sa.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-sa.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Saudi Arabia) [ar-sa]
//! author : Suhail Alkowaileet : https://github.com/xsoh

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '١',
            2: '٢',
            3: '٣',
            4: '٤',
            5: '٥',
            6: '٦',
            7: '٧',
            8: '٨',
            9: '٩',
            0: '٠',
        },
        numberMap = {
            '١': '1',
            '٢': '2',
            '٣': '3',
            '٤': '4',
            '٥': '5',
            '٦': '6',
            '٧': '7',
            '٨': '8',
            '٩': '9',
            '٠': '0',
        };

    var arSa = moment.defineLocale('ar-sa', {
        months: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
            '_'
        ),
        monthsShort:
            'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
                '_'
            ),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات',
        },
        preparse: function (string) {
            return string
                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return arSa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-tn.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-tn.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale  :  Arabic (Tunisia) [ar-tn]
//! author : Nader Toukabri : https://github.com/naderio

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var arTn = moment.defineLocale('ar-tn', {
        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
            '_'
        ),
        monthsShort:
            'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
                '_'
            ),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return arTn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ar.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic [ar]
//! author : Abdel Said: https://github.com/abdelsaid
//! author : Ahmed Elkhatib
//! author : forabi https://github.com/forabi

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '١',
            2: '٢',
            3: '٣',
            4: '٤',
            5: '٥',
            6: '٦',
            7: '٧',
            8: '٨',
            9: '٩',
            0: '٠',
        },
        numberMap = {
            '١': '1',
            '٢': '2',
            '٣': '3',
            '٤': '4',
            '٥': '5',
            '٦': '6',
            '٧': '7',
            '٨': '8',
            '٩': '9',
            '٠': '0',
        },
        pluralForm = function (n) {
            return n === 0
                ? 0
                : n === 1
                ? 1
                : n === 2
                ? 2
                : n % 100 >= 3 && n % 100 <= 10
                ? 3
                : n % 100 >= 11
                ? 4
                : 5;
        },
        plurals = {
            s: [
                'أقل من ثانية',
                'ثانية واحدة',
                ['ثانيتان', 'ثانيتين'],
                '%d ثوان',
                '%d ثانية',
                '%d ثانية',
            ],
            m: [
                'أقل من دقيقة',
                'دقيقة واحدة',
                ['دقيقتان', 'دقيقتين'],
                '%d دقائق',
                '%d دقيقة',
                '%d دقيقة',
            ],
            h: [
                'أقل من ساعة',
                'ساعة واحدة',
                ['ساعتان', 'ساعتين'],
                '%d ساعات',
                '%d ساعة',
                '%d ساعة',
            ],
            d: [
                'أقل من يوم',
                'يوم واحد',
                ['يومان', 'يومين'],
                '%d أيام',
                '%d يومًا',
                '%d يوم',
            ],
            M: [
                'أقل من شهر',
                'شهر واحد',
                ['شهران', 'شهرين'],
                '%d أشهر',
                '%d شهرا',
                '%d شهر',
            ],
            y: [
                'أقل من عام',
                'عام واحد',
                ['عامان', 'عامين'],
                '%d أعوام',
                '%d عامًا',
                '%d عام',
            ],
        },
        pluralize = function (u) {
            return function (number, withoutSuffix, string, isFuture) {
                var f = pluralForm(number),
                    str = plurals[u][pluralForm(number)];
                if (f === 2) {
                    str = str[withoutSuffix ? 0 : 1];
                }
                return str.replace(/%d/i, number);
            };
        },
        months = [
            'يناير',
            'فبراير',
            'مارس',
            'أبريل',
            'مايو',
            'يونيو',
            'يوليو',
            'أغسطس',
            'سبتمبر',
            'أكتوبر',
            'نوفمبر',
            'ديسمبر',
        ];

    var ar = moment.defineLocale('ar', {
        months: months,
        monthsShort: months,
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            ss: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y'),
        },
        preparse: function (string) {
            return string
                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return ar;

})));


/***/ }),

/***/ "./node_modules/moment/locale/az.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/az.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Azerbaijani [az]
//! author : topchiyev : https://github.com/topchiyev

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        1: '-inci',
        5: '-inci',
        8: '-inci',
        70: '-inci',
        80: '-inci',
        2: '-nci',
        7: '-nci',
        20: '-nci',
        50: '-nci',
        3: '-üncü',
        4: '-üncü',
        100: '-üncü',
        6: '-ncı',
        9: '-uncu',
        10: '-uncu',
        30: '-uncu',
        60: '-ıncı',
        90: '-ıncı',
    };

    var az = moment.defineLocale('az', {
        months: 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split(
            '_'
        ),
        monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
        weekdays:
            'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split(
                '_'
            ),
        weekdaysShort: 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
        weekdaysMin: 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[bugün saat] LT',
            nextDay: '[sabah saat] LT',
            nextWeek: '[gələn həftə] dddd [saat] LT',
            lastDay: '[dünən] LT',
            lastWeek: '[keçən həftə] dddd [saat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s sonra',
            past: '%s əvvəl',
            s: 'bir neçə saniyə',
            ss: '%d saniyə',
            m: 'bir dəqiqə',
            mm: '%d dəqiqə',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir gün',
            dd: '%d gün',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir il',
            yy: '%d il',
        },
        meridiemParse: /gecə|səhər|gündüz|axşam/,
        isPM: function (input) {
            return /^(gündüz|axşam)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'gecə';
            } else if (hour < 12) {
                return 'səhər';
            } else if (hour < 17) {
                return 'gündüz';
            } else {
                return 'axşam';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
        ordinal: function (number) {
            if (number === 0) {
                // special case for zero
                return number + '-ıncı';
            }
            var a = number % 10,
                b = (number % 100) - a,
                c = number >= 100 ? 100 : null;
            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return az;

})));


/***/ }),

/***/ "./node_modules/moment/locale/be.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/be.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Belarusian [be]
//! author : Dmitry Demidov : https://github.com/demidov91
//! author: Praleska: http://praleska.pro/
//! Author : Menelion Elensúle : https://github.com/Oire

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11
            ? forms[0]
            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
            ? forms[1]
            : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
            mm: withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
            hh: withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
            dd: 'дзень_дні_дзён',
            MM: 'месяц_месяцы_месяцаў',
            yy: 'год_гады_гадоў',
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвіліна' : 'хвіліну';
        } else if (key === 'h') {
            return withoutSuffix ? 'гадзіна' : 'гадзіну';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }

    var be = moment.defineLocale('be', {
        months: {
            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split(
                '_'
            ),
            standalone:
                'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split(
                    '_'
                ),
        },
        monthsShort:
            'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
        weekdays: {
            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split(
                '_'
            ),
            standalone:
                'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split(
                    '_'
                ),
            isFormat: /\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/,
        },
        weekdaysShort: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        weekdaysMin: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY г.',
            LLL: 'D MMMM YYYY г., HH:mm',
            LLLL: 'dddd, D MMMM YYYY г., HH:mm',
        },
        calendar: {
            sameDay: '[Сёння ў] LT',
            nextDay: '[Заўтра ў] LT',
            lastDay: '[Учора ў] LT',
            nextWeek: function () {
                return '[У] dddd [ў] LT';
            },
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return '[У мінулую] dddd [ў] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[У мінулы] dddd [ў] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'праз %s',
            past: '%s таму',
            s: 'некалькі секунд',
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: relativeTimeWithPlural,
            hh: relativeTimeWithPlural,
            d: 'дзень',
            dd: relativeTimeWithPlural,
            M: 'месяц',
            MM: relativeTimeWithPlural,
            y: 'год',
            yy: relativeTimeWithPlural,
        },
        meridiemParse: /ночы|раніцы|дня|вечара/,
        isPM: function (input) {
            return /^(дня|вечара)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночы';
            } else if (hour < 12) {
                return 'раніцы';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечара';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return (number % 10 === 2 || number % 10 === 3) &&
                        number % 100 !== 12 &&
                        number % 100 !== 13
                        ? number + '-і'
                        : number + '-ы';
                case 'D':
                    return number + '-га';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return be;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bg.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bg.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bulgarian [bg]
//! author : Krasen Borisov : https://github.com/kraz

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var bg = moment.defineLocale('bg', {
        months: 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split(
            '_'
        ),
        monthsShort: 'яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
        weekdays: 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split(
            '_'
        ),
        weekdaysShort: 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[Днес в] LT',
            nextDay: '[Утре в] LT',
            nextWeek: 'dddd [в] LT',
            lastDay: '[Вчера в] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[Миналата] dddd [в] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[Миналия] dddd [в] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'след %s',
            past: 'преди %s',
            s: 'няколко секунди',
            ss: '%d секунди',
            m: 'минута',
            mm: '%d минути',
            h: 'час',
            hh: '%d часа',
            d: 'ден',
            dd: '%d дена',
            w: 'седмица',
            ww: '%d седмици',
            M: 'месец',
            MM: '%d месеца',
            y: 'година',
            yy: '%d години',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal: function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return bg;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bm.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bm.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bambara [bm]
//! author : Estelle Comment : https://github.com/estellecomment

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var bm = moment.defineLocale('bm', {
        months: 'Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo'.split(
            '_'
        ),
        monthsShort: 'Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des'.split('_'),
        weekdays: 'Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri'.split('_'),
        weekdaysShort: 'Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib'.split('_'),
        weekdaysMin: 'Ka_Nt_Ta_Ar_Al_Ju_Si'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'MMMM [tile] D [san] YYYY',
            LLL: 'MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
            LLLL: 'dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
        },
        calendar: {
            sameDay: '[Bi lɛrɛ] LT',
            nextDay: '[Sini lɛrɛ] LT',
            nextWeek: 'dddd [don lɛrɛ] LT',
            lastDay: '[Kunu lɛrɛ] LT',
            lastWeek: 'dddd [tɛmɛnen lɛrɛ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s kɔnɔ',
            past: 'a bɛ %s bɔ',
            s: 'sanga dama dama',
            ss: 'sekondi %d',
            m: 'miniti kelen',
            mm: 'miniti %d',
            h: 'lɛrɛ kelen',
            hh: 'lɛrɛ %d',
            d: 'tile kelen',
            dd: 'tile %d',
            M: 'kalo kelen',
            MM: 'kalo %d',
            y: 'san kelen',
            yy: 'san %d',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return bm;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bn-bd.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/bn-bd.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bengali (Bangladesh) [bn-bd]
//! author : Asraf Hossain Patoary : https://github.com/ashwoolford

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '১',
            2: '২',
            3: '৩',
            4: '৪',
            5: '৫',
            6: '৬',
            7: '৭',
            8: '৮',
            9: '৯',
            0: '০',
        },
        numberMap = {
            '১': '1',
            '২': '2',
            '৩': '3',
            '৪': '4',
            '৫': '5',
            '৬': '6',
            '৭': '7',
            '৮': '8',
            '৯': '9',
            '০': '0',
        };

    var bnBd = moment.defineLocale('bn-bd', {
        months: 'জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split(
            '_'
        ),
        monthsShort:
            'জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে'.split(
                '_'
            ),
        weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split(
            '_'
        ),
        weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
        weekdaysMin: 'রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি'.split('_'),
        longDateFormat: {
            LT: 'A h:mm সময়',
            LTS: 'A h:mm:ss সময়',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm সময়',
            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়',
        },
        calendar: {
            sameDay: '[আজ] LT',
            nextDay: '[আগামীকাল] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[গতকাল] LT',
            lastWeek: '[গত] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s পরে',
            past: '%s আগে',
            s: 'কয়েক সেকেন্ড',
            ss: '%d সেকেন্ড',
            m: 'এক মিনিট',
            mm: '%d মিনিট',
            h: 'এক ঘন্টা',
            hh: '%d ঘন্টা',
            d: 'এক দিন',
            dd: '%d দিন',
            M: 'এক মাস',
            MM: '%d মাস',
            y: 'এক বছর',
            yy: '%d বছর',
        },
        preparse: function (string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },

        meridiemParse: /রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'রাত') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ভোর') {
                return hour;
            } else if (meridiem === 'সকাল') {
                return hour;
            } else if (meridiem === 'দুপুর') {
                return hour >= 3 ? hour : hour + 12;
            } else if (meridiem === 'বিকাল') {
                return hour + 12;
            } else if (meridiem === 'সন্ধ্যা') {
                return hour + 12;
            }
        },

        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'রাত';
            } else if (hour < 6) {
                return 'ভোর';
            } else if (hour < 12) {
                return 'সকাল';
            } else if (hour < 15) {
                return 'দুপুর';
            } else if (hour < 18) {
                return 'বিকাল';
            } else if (hour < 20) {
                return 'সন্ধ্যা';
            } else {
                return 'রাত';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return bnBd;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bn.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bn.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bengali [bn]
//! author : Kaushik Gandhi : https://github.com/kaushikgandhi

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '১',
            2: '২',
            3: '৩',
            4: '৪',
            5: '৫',
            6: '৬',
            7: '৭',
            8: '৮',
            9: '৯',
            0: '০',
        },
        numberMap = {
            '১': '1',
            '২': '2',
            '৩': '3',
            '৪': '4',
            '৫': '5',
            '৬': '6',
            '৭': '7',
            '৮': '8',
            '৯': '9',
            '০': '0',
        };

    var bn = moment.defineLocale('bn', {
        months: 'জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split(
            '_'
        ),
        monthsShort:
            'জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে'.split(
                '_'
            ),
        weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split(
            '_'
        ),
        weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
        weekdaysMin: 'রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি'.split('_'),
        longDateFormat: {
            LT: 'A h:mm সময়',
            LTS: 'A h:mm:ss সময়',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm সময়',
            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়',
        },
        calendar: {
            sameDay: '[আজ] LT',
            nextDay: '[আগামীকাল] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[গতকাল] LT',
            lastWeek: '[গত] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s পরে',
            past: '%s আগে',
            s: 'কয়েক সেকেন্ড',
            ss: '%d সেকেন্ড',
            m: 'এক মিনিট',
            mm: '%d মিনিট',
            h: 'এক ঘন্টা',
            hh: '%d ঘন্টা',
            d: 'এক দিন',
            dd: '%d দিন',
            M: 'এক মাস',
            MM: '%d মাস',
            y: 'এক বছর',
            yy: '%d বছর',
        },
        preparse: function (string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                (meridiem === 'রাত' && hour >= 4) ||
                (meridiem === 'দুপুর' && hour < 5) ||
                meridiem === 'বিকাল'
            ) {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'রাত';
            } else if (hour < 10) {
                return 'সকাল';
            } else if (hour < 17) {
                return 'দুপুর';
            } else if (hour < 20) {
                return 'বিকাল';
            } else {
                return 'রাত';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return bn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bo.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tibetan [bo]
//! author : Thupten N. Chakrishar : https://github.com/vajradog

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '༡',
            2: '༢',
            3: '༣',
            4: '༤',
            5: '༥',
            6: '༦',
            7: '༧',
            8: '༨',
            9: '༩',
            0: '༠',
        },
        numberMap = {
            '༡': '1',
            '༢': '2',
            '༣': '3',
            '༤': '4',
            '༥': '5',
            '༦': '6',
            '༧': '7',
            '༨': '8',
            '༩': '9',
            '༠': '0',
        };

    var bo = moment.defineLocale('bo', {
        months: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split(
            '_'
        ),
        monthsShort:
            'ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12'.split(
                '_'
            ),
        monthsShortRegex: /^(ཟླ་\d{1,2})/,
        monthsParseExact: true,
        weekdays:
            'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split(
                '_'
            ),
        weekdaysShort: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split(
            '_'
        ),
        weekdaysMin: 'ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm',
        },
        calendar: {
            sameDay: '[དི་རིང] LT',
            nextDay: '[སང་ཉིན] LT',
            nextWeek: '[བདུན་ཕྲག་རྗེས་མ], LT',
            lastDay: '[ཁ་སང] LT',
            lastWeek: '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ལ་',
            past: '%s སྔན་ལ',
            s: 'ལམ་སང',
            ss: '%d སྐར་ཆ།',
            m: 'སྐར་མ་གཅིག',
            mm: '%d སྐར་མ',
            h: 'ཆུ་ཚོད་གཅིག',
            hh: '%d ཆུ་ཚོད',
            d: 'ཉིན་གཅིག',
            dd: '%d ཉིན་',
            M: 'ཟླ་བ་གཅིག',
            MM: '%d ཟླ་བ',
            y: 'ལོ་གཅིག',
            yy: '%d ལོ',
        },
        preparse: function (string) {
            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                (meridiem === 'མཚན་མོ' && hour >= 4) ||
                (meridiem === 'ཉིན་གུང' && hour < 5) ||
                meridiem === 'དགོང་དག'
            ) {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'མཚན་མོ';
            } else if (hour < 10) {
                return 'ཞོགས་ཀས';
            } else if (hour < 17) {
                return 'ཉིན་གུང';
            } else if (hour < 20) {
                return 'དགོང་དག';
            } else {
                return 'མཚན་མོ';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return bo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/br.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/br.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Breton [br]
//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function relativeTimeWithMutation(number, withoutSuffix, key) {
        var format = {
            mm: 'munutenn',
            MM: 'miz',
            dd: 'devezh',
        };
        return number + ' ' + mutation(format[key], number);
    }
    function specialMutationForYears(number) {
        switch (lastNumber(number)) {
            case 1:
            case 3:
            case 4:
            case 5:
            case 9:
                return number + ' bloaz';
            default:
                return number + ' vloaz';
        }
    }
    function lastNumber(number) {
        if (number > 9) {
            return lastNumber(number % 10);
        }
        return number;
    }
    function mutation(text, number) {
        if (number === 2) {
            return softMutation(text);
        }
        return text;
    }
    function softMutation(text) {
        var mutationTable = {
            m: 'v',
            b: 'v',
            d: 'z',
        };
        if (mutationTable[text.charAt(0)] === undefined) {
            return text;
        }
        return mutationTable[text.charAt(0)] + text.substring(1);
    }

    var monthsParse = [
            /^gen/i,
            /^c[ʼ\']hwe/i,
            /^meu/i,
            /^ebr/i,
            /^mae/i,
            /^(mez|eve)/i,
            /^gou/i,
            /^eos/i,
            /^gwe/i,
            /^her/i,
            /^du/i,
            /^ker/i,
        ],
        monthsRegex =
            /^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
        monthsStrictRegex =
            /^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,
        monthsShortStrictRegex =
            /^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
        fullWeekdaysParse = [
            /^sul/i,
            /^lun/i,
            /^meurzh/i,
            /^merc[ʼ\']her/i,
            /^yaou/i,
            /^gwener/i,
            /^sadorn/i,
        ],
        shortWeekdaysParse = [
            /^Sul/i,
            /^Lun/i,
            /^Meu/i,
            /^Mer/i,
            /^Yao/i,
            /^Gwe/i,
            /^Sad/i,
        ],
        minWeekdaysParse = [
            /^Su/i,
            /^Lu/i,
            /^Me([^r]|$)/i,
            /^Mer/i,
            /^Ya/i,
            /^Gw/i,
            /^Sa/i,
        ];

    var br = moment.defineLocale('br', {
        months: 'Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split(
            '_'
        ),
        monthsShort: 'Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
        weekdays: 'Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn'.split('_'),
        weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
        weekdaysParse: minWeekdaysParse,
        fullWeekdaysParse: fullWeekdaysParse,
        shortWeekdaysParse: shortWeekdaysParse,
        minWeekdaysParse: minWeekdaysParse,

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: monthsStrictRegex,
        monthsShortStrictRegex: monthsShortStrictRegex,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [a viz] MMMM YYYY',
            LLL: 'D [a viz] MMMM YYYY HH:mm',
            LLLL: 'dddd, D [a viz] MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Hiziv da] LT',
            nextDay: '[Warcʼhoazh da] LT',
            nextWeek: 'dddd [da] LT',
            lastDay: '[Decʼh da] LT',
            lastWeek: 'dddd [paset da] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'a-benn %s',
            past: '%s ʼzo',
            s: 'un nebeud segondennoù',
            ss: '%d eilenn',
            m: 'ur vunutenn',
            mm: relativeTimeWithMutation,
            h: 'un eur',
            hh: '%d eur',
            d: 'un devezh',
            dd: relativeTimeWithMutation,
            M: 'ur miz',
            MM: relativeTimeWithMutation,
            y: 'ur bloaz',
            yy: specialMutationForYears,
        },
        dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
        ordinal: function (number) {
            var output = number === 1 ? 'añ' : 'vet';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
        meridiemParse: /a.m.|g.m./, // goude merenn | a-raok merenn
        isPM: function (token) {
            return token === 'g.m.';
        },
        meridiem: function (hour, minute, isLower) {
            return hour < 12 ? 'a.m.' : 'g.m.';
        },
    });

    return br;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bs.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bs.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bosnian [bs]
//! author : Nedim Cholich : https://github.com/frontyard
//! based on (hr) translation by Bojan Marković

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                if (number === 1) {
                    result += 'sekunda';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sekunde';
                } else {
                    result += 'sekundi';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var bs = moment.defineLocale('bs', {
        months: 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[jučer u] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return '[prošlu] dddd [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: 'dan',
            dd: translate,
            M: 'mjesec',
            MM: translate,
            y: 'godinu',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return bs;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ca.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ca.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Catalan [ca]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ca = moment.defineLocale('ca', {
        months: {
            standalone:
                'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split(
                    '_'
                ),
            format: "de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split(
                '_'
            ),
            isFormat: /D[oD]?(\s)+MMMM/,
        },
        monthsShort:
            'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split(
                '_'
            ),
        weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
        weekdaysMin: 'dg_dl_dt_dc_dj_dv_ds'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [de] YYYY',
            ll: 'D MMM YYYY',
            LLL: 'D MMMM [de] YYYY [a les] H:mm',
            lll: 'D MMM YYYY, H:mm',
            LLLL: 'dddd D MMMM [de] YYYY [a les] H:mm',
            llll: 'ddd D MMM YYYY, H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[avui a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            nextDay: function () {
                return '[demà a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            lastDay: function () {
                return '[ahir a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [passat a ' +
                    (this.hours() !== 1 ? 'les' : 'la') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: "d'aquí %s",
            past: 'fa %s',
            s: 'uns segons',
            ss: '%d segons',
            m: 'un minut',
            mm: '%d minuts',
            h: 'una hora',
            hh: '%d hores',
            d: 'un dia',
            dd: '%d dies',
            M: 'un mes',
            MM: '%d mesos',
            y: 'un any',
            yy: '%d anys',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
        ordinal: function (number, period) {
            var output =
                number === 1
                    ? 'r'
                    : number === 2
                    ? 'n'
                    : number === 3
                    ? 'r'
                    : number === 4
                    ? 't'
                    : 'è';
            if (period === 'w' || period === 'W') {
                output = 'a';
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ca;

})));


/***/ }),

/***/ "./node_modules/moment/locale/cs.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/cs.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Czech [cs]
//! author : petrbela : https://github.com/petrbela

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = {
            format: 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split(
                '_'
            ),
            standalone:
                'ledna_února_března_dubna_května_června_července_srpna_září_října_listopadu_prosince'.split(
                    '_'
                ),
        },
        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_'),
        monthsParse = [
            /^led/i,
            /^úno/i,
            /^bře/i,
            /^dub/i,
            /^kvě/i,
            /^(čvn|červen$|června)/i,
            /^(čvc|červenec|července)/i,
            /^srp/i,
            /^zář/i,
            /^říj/i,
            /^lis/i,
            /^pro/i,
        ],
        // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
        // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
        monthsRegex =
            /^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;

    function plural(n) {
        return n > 1 && n < 5 && ~~(n / 10) !== 1;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's': // a few seconds / in a few seconds / a few seconds ago
                return withoutSuffix || isFuture ? 'pár sekund' : 'pár sekundami';
            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'sekundy' : 'sekund');
                } else {
                    return result + 'sekundami';
                }
            case 'm': // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minuta' : isFuture ? 'minutu' : 'minutou';
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'minuty' : 'minut');
                } else {
                    return result + 'minutami';
                }
            case 'h': // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'hodiny' : 'hodin');
                } else {
                    return result + 'hodinami';
                }
            case 'd': // a day / in a day / a day ago
                return withoutSuffix || isFuture ? 'den' : 'dnem';
            case 'dd': // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'dny' : 'dní');
                } else {
                    return result + 'dny';
                }
            case 'M': // a month / in a month / a month ago
                return withoutSuffix || isFuture ? 'měsíc' : 'měsícem';
            case 'MM': // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'měsíce' : 'měsíců');
                } else {
                    return result + 'měsíci';
                }
            case 'y': // a year / in a year / a year ago
                return withoutSuffix || isFuture ? 'rok' : 'rokem';
            case 'yy': // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'roky' : 'let');
                } else {
                    return result + 'lety';
                }
        }
    }

    var cs = moment.defineLocale('cs', {
        months: months,
        monthsShort: monthsShort,
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
        // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
        monthsStrictRegex:
            /^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,
        monthsShortStrictRegex:
            /^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
        weekdaysShort: 'ne_po_út_st_čt_pá_so'.split('_'),
        weekdaysMin: 'ne_po_út_st_čt_pá_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd D. MMMM YYYY H:mm',
            l: 'D. M. YYYY',
        },
        calendar: {
            sameDay: '[dnes v] LT',
            nextDay: '[zítra v] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v neděli v] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [v] LT';
                    case 3:
                        return '[ve středu v] LT';
                    case 4:
                        return '[ve čtvrtek v] LT';
                    case 5:
                        return '[v pátek v] LT';
                    case 6:
                        return '[v sobotu v] LT';
                }
            },
            lastDay: '[včera v] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[minulou neděli v] LT';
                    case 1:
                    case 2:
                        return '[minulé] dddd [v] LT';
                    case 3:
                        return '[minulou středu v] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [v] LT';
                    case 6:
                        return '[minulou sobotu v] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'před %s',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return cs;

})));


/***/ }),

/***/ "./node_modules/moment/locale/cv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/cv.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chuvash [cv]
//! author : Anatoly Mironov : https://github.com/mirontoli

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var cv = moment.defineLocale('cv', {
        months: 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split(
            '_'
        ),
        monthsShort: 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
        weekdays:
            'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split(
                '_'
            ),
        weekdaysShort: 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
        weekdaysMin: 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
            LLL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
            LLLL: 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
        },
        calendar: {
            sameDay: '[Паян] LT [сехетре]',
            nextDay: '[Ыран] LT [сехетре]',
            lastDay: '[Ӗнер] LT [сехетре]',
            nextWeek: '[Ҫитес] dddd LT [сехетре]',
            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
            sameElse: 'L',
        },
        relativeTime: {
            future: function (output) {
                var affix = /сехет$/i.exec(output)
                    ? 'рен'
                    : /ҫул$/i.exec(output)
                    ? 'тан'
                    : 'ран';
                return output + affix;
            },
            past: '%s каялла',
            s: 'пӗр-ик ҫеккунт',
            ss: '%d ҫеккунт',
            m: 'пӗр минут',
            mm: '%d минут',
            h: 'пӗр сехет',
            hh: '%d сехет',
            d: 'пӗр кун',
            dd: '%d кун',
            M: 'пӗр уйӑх',
            MM: '%d уйӑх',
            y: 'пӗр ҫул',
            yy: '%d ҫул',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
        ordinal: '%d-мӗш',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return cv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/cy.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/cy.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Welsh [cy]
//! author : Robert Allen : https://github.com/robgallen
//! author : https://github.com/ryangreaves

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var cy = moment.defineLocale('cy', {
        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split(
            '_'
        ),
        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split(
            '_'
        ),
        weekdays:
            'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split(
                '_'
            ),
        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
        weekdaysParseExact: true,
        // time formats are the same as en-gb
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Heddiw am] LT',
            nextDay: '[Yfory am] LT',
            nextWeek: 'dddd [am] LT',
            lastDay: '[Ddoe am] LT',
            lastWeek: 'dddd [diwethaf am] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'mewn %s',
            past: '%s yn ôl',
            s: 'ychydig eiliadau',
            ss: '%d eiliad',
            m: 'munud',
            mm: '%d munud',
            h: 'awr',
            hh: '%d awr',
            d: 'diwrnod',
            dd: '%d diwrnod',
            M: 'mis',
            MM: '%d mis',
            y: 'blwyddyn',
            yy: '%d flynedd',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
        ordinal: function (number) {
            var b = number,
                output = '',
                lookup = [
                    '',
                    'af',
                    'il',
                    'ydd',
                    'ydd',
                    'ed',
                    'ed',
                    'ed',
                    'fed',
                    'fed',
                    'fed', // 1af to 10fed
                    'eg',
                    'fed',
                    'eg',
                    'eg',
                    'fed',
                    'eg',
                    'eg',
                    'fed',
                    'eg',
                    'fed', // 11eg to 20fed
                ];
            if (b > 20) {
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                    output = 'fed'; // not 30ain, 70ain or 90ain
                } else {
                    output = 'ain';
                }
            } else if (b > 0) {
                output = lookup[b];
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return cy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/da.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/da.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Danish [da]
//! author : Ulrik Nielsen : https://github.com/mrbase

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var da = moment.defineLocale('da', {
        months: 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort: 'søn_man_tir_ons_tor_fre_lør'.split('_'),
        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd [d.] D. MMMM YYYY [kl.] HH:mm',
        },
        calendar: {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'på dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[i] dddd[s kl.] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: '%s siden',
            s: 'få sekunder',
            ss: '%d sekunder',
            m: 'et minut',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dage',
            M: 'en måned',
            MM: '%d måneder',
            y: 'et år',
            yy: '%d år',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return da;

})));


/***/ }),

/***/ "./node_modules/moment/locale/de-at.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/de-at.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German (Austria) [de-at]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion Elensúle: https://github.com/Oire
//! author : Martin Groller : https://github.com/MadMG
//! author : Mikolaj Dadela : https://github.com/mik01aj

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eine Minute', 'einer Minute'],
            h: ['eine Stunde', 'einer Stunde'],
            d: ['ein Tag', 'einem Tag'],
            dd: [number + ' Tage', number + ' Tagen'],
            w: ['eine Woche', 'einer Woche'],
            M: ['ein Monat', 'einem Monat'],
            MM: [number + ' Monate', number + ' Monaten'],
            y: ['ein Jahr', 'einem Jahr'],
            yy: [number + ' Jahre', number + ' Jahren'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var deAt = moment.defineLocale('de-at', {
        months: 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort:
            'Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays:
            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
                '_'
            ),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]',
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            ss: '%d Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            w: processRelativeTime,
            ww: '%d Wochen',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return deAt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/de-ch.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/de-ch.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German (Switzerland) [de-ch]
//! author : sschueller : https://github.com/sschueller

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eine Minute', 'einer Minute'],
            h: ['eine Stunde', 'einer Stunde'],
            d: ['ein Tag', 'einem Tag'],
            dd: [number + ' Tage', number + ' Tagen'],
            w: ['eine Woche', 'einer Woche'],
            M: ['ein Monat', 'einem Monat'],
            MM: [number + ' Monate', number + ' Monaten'],
            y: ['ein Jahr', 'einem Jahr'],
            yy: [number + ' Jahre', number + ' Jahren'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var deCh = moment.defineLocale('de-ch', {
        months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort:
            'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays:
            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
                '_'
            ),
        weekdaysShort: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]',
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            ss: '%d Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            w: processRelativeTime,
            ww: '%d Wochen',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return deCh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/de.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/de.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German [de]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion Elensúle: https://github.com/Oire
//! author : Mikolaj Dadela : https://github.com/mik01aj

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eine Minute', 'einer Minute'],
            h: ['eine Stunde', 'einer Stunde'],
            d: ['ein Tag', 'einem Tag'],
            dd: [number + ' Tage', number + ' Tagen'],
            w: ['eine Woche', 'einer Woche'],
            M: ['ein Monat', 'einem Monat'],
            MM: [number + ' Monate', number + ' Monaten'],
            y: ['ein Jahr', 'einem Jahr'],
            yy: [number + ' Jahre', number + ' Jahren'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var de = moment.defineLocale('de', {
        months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort:
            'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays:
            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
                '_'
            ),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]',
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            ss: '%d Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            w: processRelativeTime,
            ww: '%d Wochen',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return de;

})));


/***/ }),

/***/ "./node_modules/moment/locale/dv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/dv.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maldivian [dv]
//! author : Jawish Hameed : https://github.com/jawish

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'ޖެނުއަރީ',
            'ފެބްރުއަރީ',
            'މާރިޗު',
            'އޭޕްރީލު',
            'މޭ',
            'ޖޫން',
            'ޖުލައި',
            'އޯގަސްޓު',
            'ސެޕްޓެމްބަރު',
            'އޮކްޓޯބަރު',
            'ނޮވެމްބަރު',
            'ޑިސެމްބަރު',
        ],
        weekdays = [
            'އާދިއްތަ',
            'ހޯމަ',
            'އަންގާރަ',
            'ބުދަ',
            'ބުރާސްފަތި',
            'ހުކުރު',
            'ހޮނިހިރު',
        ];

    var dv = moment.defineLocale('dv', {
        months: months,
        monthsShort: months,
        weekdays: weekdays,
        weekdaysShort: weekdays,
        weekdaysMin: 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/M/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /މކ|މފ/,
        isPM: function (input) {
            return 'މފ' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'މކ';
            } else {
                return 'މފ';
            }
        },
        calendar: {
            sameDay: '[މިއަދު] LT',
            nextDay: '[މާދަމާ] LT',
            nextWeek: 'dddd LT',
            lastDay: '[އިއްޔެ] LT',
            lastWeek: '[ފާއިތުވި] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ތެރޭގައި %s',
            past: 'ކުރިން %s',
            s: 'ސިކުންތުކޮޅެއް',
            ss: 'd% ސިކުންތު',
            m: 'މިނިޓެއް',
            mm: 'މިނިޓު %d',
            h: 'ގަޑިއިރެއް',
            hh: 'ގަޑިއިރު %d',
            d: 'ދުވަހެއް',
            dd: 'ދުވަސް %d',
            M: 'މަހެއް',
            MM: 'މަސް %d',
            y: 'އަހަރެއް',
            yy: 'އަހަރު %d',
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 7, // Sunday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return dv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/el.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/el.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Greek [el]
//! author : Aggelos Karalias : https://github.com/mehiel

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function isFunction(input) {
        return (
            (typeof Function !== 'undefined' && input instanceof Function) ||
            Object.prototype.toString.call(input) === '[object Function]'
        );
    }

    var el = moment.defineLocale('el', {
        monthsNominativeEl:
            'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split(
                '_'
            ),
        monthsGenitiveEl:
            'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split(
                '_'
            ),
        months: function (momentToFormat, format) {
            if (!momentToFormat) {
                return this._monthsNominativeEl;
            } else if (
                typeof format === 'string' &&
                /D/.test(format.substring(0, format.indexOf('MMMM')))
            ) {
                // if there is a day number before 'MMMM'
                return this._monthsGenitiveEl[momentToFormat.month()];
            } else {
                return this._monthsNominativeEl[momentToFormat.month()];
            }
        },
        monthsShort: 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
        weekdays: 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split(
            '_'
        ),
        weekdaysShort: 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
        weekdaysMin: 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'μμ' : 'ΜΜ';
            } else {
                return isLower ? 'πμ' : 'ΠΜ';
            }
        },
        isPM: function (input) {
            return (input + '').toLowerCase()[0] === 'μ';
        },
        meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendarEl: {
            sameDay: '[Σήμερα {}] LT',
            nextDay: '[Αύριο {}] LT',
            nextWeek: 'dddd [{}] LT',
            lastDay: '[Χθες {}] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 6:
                        return '[το προηγούμενο] dddd [{}] LT';
                    default:
                        return '[την προηγούμενη] dddd [{}] LT';
                }
            },
            sameElse: 'L',
        },
        calendar: function (key, mom) {
            var output = this._calendarEl[key],
                hours = mom && mom.hours();
            if (isFunction(output)) {
                output = output.apply(mom);
            }
            return output.replace('{}', hours % 12 === 1 ? 'στη' : 'στις');
        },
        relativeTime: {
            future: 'σε %s',
            past: '%s πριν',
            s: 'λίγα δευτερόλεπτα',
            ss: '%d δευτερόλεπτα',
            m: 'ένα λεπτό',
            mm: '%d λεπτά',
            h: 'μία ώρα',
            hh: '%d ώρες',
            d: 'μία μέρα',
            dd: '%d μέρες',
            M: 'ένας μήνας',
            MM: '%d μήνες',
            y: 'ένας χρόνος',
            yy: '%d χρόνια',
        },
        dayOfMonthOrdinalParse: /\d{1,2}η/,
        ordinal: '%dη',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4st is the first week of the year.
        },
    });

    return el;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-au.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-au.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Australia) [en-au]
//! author : Jared Morse : https://github.com/jarcoal

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enAu = moment.defineLocale('en-au', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enAu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-ca.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-ca.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Canada) [en-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enCa = moment.defineLocale('en-ca', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'YYYY-MM-DD',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    return enCa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-gb.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-gb.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (United Kingdom) [en-gb]
//! author : Chris Gedrim : https://github.com/chrisgedrim

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enGb = moment.defineLocale('en-gb', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enGb;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-ie.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-ie.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Ireland) [en-ie]
//! author : Chris Cartlidge : https://github.com/chriscartlidge

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enIe = moment.defineLocale('en-ie', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enIe;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-il.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-il.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Israel) [en-il]
//! author : Chris Gedrim : https://github.com/chrisgedrim

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enIl = moment.defineLocale('en-il', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    return enIl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-in.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-in.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (India) [en-in]
//! author : Jatin Agrawal : https://github.com/jatinag22

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enIn = moment.defineLocale('en-in', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 1st is the first week of the year.
        },
    });

    return enIn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-nz.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-nz.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (New Zealand) [en-nz]
//! author : Luke McGregor : https://github.com/lukemcgregor

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enNz = moment.defineLocale('en-nz', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enNz;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-sg.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-sg.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Singapore) [en-sg]
//! author : Matthew Castrillon-Madrigal : https://github.com/techdimension

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enSg = moment.defineLocale('en-sg', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enSg;

})));


/***/ }),

/***/ "./node_modules/moment/locale/eo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/eo.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Esperanto [eo]
//! author : Colin Dean : https://github.com/colindean
//! author : Mia Nordentoft Imperatori : https://github.com/miestasmia
//! comment : miestasmia corrected the translation by colindean
//! comment : Vivakvo corrected the translation by colindean and miestasmia

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var eo = moment.defineLocale('eo', {
        months: 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec'.split('_'),
        weekdays: 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
        weekdaysShort: 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
        weekdaysMin: 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: '[la] D[-an de] MMMM, YYYY',
            LLL: '[la] D[-an de] MMMM, YYYY HH:mm',
            LLLL: 'dddd[n], [la] D[-an de] MMMM, YYYY HH:mm',
            llll: 'ddd, [la] D[-an de] MMM, YYYY HH:mm',
        },
        meridiemParse: /[ap]\.t\.m/i,
        isPM: function (input) {
            return input.charAt(0).toLowerCase() === 'p';
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'p.t.m.' : 'P.T.M.';
            } else {
                return isLower ? 'a.t.m.' : 'A.T.M.';
            }
        },
        calendar: {
            sameDay: '[Hodiaŭ je] LT',
            nextDay: '[Morgaŭ je] LT',
            nextWeek: 'dddd[n je] LT',
            lastDay: '[Hieraŭ je] LT',
            lastWeek: '[pasintan] dddd[n je] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'post %s',
            past: 'antaŭ %s',
            s: 'kelkaj sekundoj',
            ss: '%d sekundoj',
            m: 'unu minuto',
            mm: '%d minutoj',
            h: 'unu horo',
            hh: '%d horoj',
            d: 'unu tago', //ne 'diurno', ĉar estas uzita por proksimumo
            dd: '%d tagoj',
            M: 'unu monato',
            MM: '%d monatoj',
            y: 'unu jaro',
            yy: '%d jaroj',
        },
        dayOfMonthOrdinalParse: /\d{1,2}a/,
        ordinal: '%da',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return eo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/es-do.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/es-do.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (Dominican Republic) [es-do]

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot =
            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
                '_'
            ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex =
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esDo = moment.defineLocale('es-do', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex:
            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY h:mm A',
            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return esDo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/es-mx.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/es-mx.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (Mexico) [es-mx]
//! author : JC Franco : https://github.com/jcfranco

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot =
            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
                '_'
            ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex =
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esMx = moment.defineLocale('es-mx', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex:
            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
        invalidDate: 'Fecha inválida',
    });

    return esMx;

})));


/***/ }),

/***/ "./node_modules/moment/locale/es-us.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/es-us.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (United States) [es-us]
//! author : bustta : https://github.com/bustta
//! author : chrisrodz : https://github.com/chrisrodz

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot =
            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
                '_'
            ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex =
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esUs = moment.defineLocale('es-us', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex:
            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'MM/DD/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY h:mm A',
            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return esUs;

})));


/***/ }),

/***/ "./node_modules/moment/locale/es.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/es.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish [es]
//! author : Julio Napurí : https://github.com/julionc

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot =
            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
                '_'
            ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex =
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var es = moment.defineLocale('es', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex:
            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
        invalidDate: 'Fecha inválida',
    });

    return es;

})));


/***/ }),

/***/ "./node_modules/moment/locale/et.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/et.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Estonian [et]
//! author : Henry Kehlmann : https://github.com/madhenry
//! improvements : Illimar Tambek : https://github.com/ragulka

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
            ss: [number + 'sekundi', number + 'sekundit'],
            m: ['ühe minuti', 'üks minut'],
            mm: [number + ' minuti', number + ' minutit'],
            h: ['ühe tunni', 'tund aega', 'üks tund'],
            hh: [number + ' tunni', number + ' tundi'],
            d: ['ühe päeva', 'üks päev'],
            M: ['kuu aja', 'kuu aega', 'üks kuu'],
            MM: [number + ' kuu', number + ' kuud'],
            y: ['ühe aasta', 'aasta', 'üks aasta'],
            yy: [number + ' aasta', number + ' aastat'],
        };
        if (withoutSuffix) {
            return format[key][2] ? format[key][2] : format[key][1];
        }
        return isFuture ? format[key][0] : format[key][1];
    }

    var et = moment.defineLocale('et', {
        months: 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split(
            '_'
        ),
        monthsShort:
            'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
        weekdays:
            'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split(
                '_'
            ),
        weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),
        weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[Täna,] LT',
            nextDay: '[Homme,] LT',
            nextWeek: '[Järgmine] dddd LT',
            lastDay: '[Eile,] LT',
            lastWeek: '[Eelmine] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s pärast',
            past: '%s tagasi',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: '%d päeva',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return et;

})));


/***/ }),

/***/ "./node_modules/moment/locale/eu.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/eu.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Basque [eu]
//! author : Eneko Illarramendi : https://github.com/eillarra

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var eu = moment.defineLocale('eu', {
        months: 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split(
            '_'
        ),
        monthsShort:
            'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split(
                '_'
            ),
        weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),
        weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY[ko] MMMM[ren] D[a]',
            LLL: 'YYYY[ko] MMMM[ren] D[a] HH:mm',
            LLLL: 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
            l: 'YYYY-M-D',
            ll: 'YYYY[ko] MMM D[a]',
            lll: 'YYYY[ko] MMM D[a] HH:mm',
            llll: 'ddd, YYYY[ko] MMM D[a] HH:mm',
        },
        calendar: {
            sameDay: '[gaur] LT[etan]',
            nextDay: '[bihar] LT[etan]',
            nextWeek: 'dddd LT[etan]',
            lastDay: '[atzo] LT[etan]',
            lastWeek: '[aurreko] dddd LT[etan]',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s barru',
            past: 'duela %s',
            s: 'segundo batzuk',
            ss: '%d segundo',
            m: 'minutu bat',
            mm: '%d minutu',
            h: 'ordu bat',
            hh: '%d ordu',
            d: 'egun bat',
            dd: '%d egun',
            M: 'hilabete bat',
            MM: '%d hilabete',
            y: 'urte bat',
            yy: '%d urte',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return eu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fa.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fa.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Persian [fa]
//! author : Ebrahim Byagowi : https://github.com/ebraminio

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '۱',
            2: '۲',
            3: '۳',
            4: '۴',
            5: '۵',
            6: '۶',
            7: '۷',
            8: '۸',
            9: '۹',
            0: '۰',
        },
        numberMap = {
            '۱': '1',
            '۲': '2',
            '۳': '3',
            '۴': '4',
            '۵': '5',
            '۶': '6',
            '۷': '7',
            '۸': '8',
            '۹': '9',
            '۰': '0',
        };

    var fa = moment.defineLocale('fa', {
        months: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split(
            '_'
        ),
        monthsShort:
            'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split(
                '_'
            ),
        weekdays:
            'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split(
                '_'
            ),
        weekdaysShort:
            'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split(
                '_'
            ),
        weekdaysMin: 'ی_د_س_چ_پ_ج_ش'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        meridiemParse: /قبل از ظهر|بعد از ظهر/,
        isPM: function (input) {
            return /بعد از ظهر/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'قبل از ظهر';
            } else {
                return 'بعد از ظهر';
            }
        },
        calendar: {
            sameDay: '[امروز ساعت] LT',
            nextDay: '[فردا ساعت] LT',
            nextWeek: 'dddd [ساعت] LT',
            lastDay: '[دیروز ساعت] LT',
            lastWeek: 'dddd [پیش] [ساعت] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'در %s',
            past: '%s پیش',
            s: 'چند ثانیه',
            ss: '%d ثانیه',
            m: 'یک دقیقه',
            mm: '%d دقیقه',
            h: 'یک ساعت',
            hh: '%d ساعت',
            d: 'یک روز',
            dd: '%d روز',
            M: 'یک ماه',
            MM: '%d ماه',
            y: 'یک سال',
            yy: '%d سال',
        },
        preparse: function (string) {
            return string
                .replace(/[۰-۹]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        dayOfMonthOrdinalParse: /\d{1,2}م/,
        ordinal: '%dم',
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return fa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fi.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fi.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Finnish [fi]
//! author : Tarmo Aidantausta : https://github.com/bleadof

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var numbersPast =
            'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(
                ' '
            ),
        numbersFuture = [
            'nolla',
            'yhden',
            'kahden',
            'kolmen',
            'neljän',
            'viiden',
            'kuuden',
            numbersPast[7],
            numbersPast[8],
            numbersPast[9],
        ];
    function translate(number, withoutSuffix, key, isFuture) {
        var result = '';
        switch (key) {
            case 's':
                return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
            case 'ss':
                result = isFuture ? 'sekunnin' : 'sekuntia';
                break;
            case 'm':
                return isFuture ? 'minuutin' : 'minuutti';
            case 'mm':
                result = isFuture ? 'minuutin' : 'minuuttia';
                break;
            case 'h':
                return isFuture ? 'tunnin' : 'tunti';
            case 'hh':
                result = isFuture ? 'tunnin' : 'tuntia';
                break;
            case 'd':
                return isFuture ? 'päivän' : 'päivä';
            case 'dd':
                result = isFuture ? 'päivän' : 'päivää';
                break;
            case 'M':
                return isFuture ? 'kuukauden' : 'kuukausi';
            case 'MM':
                result = isFuture ? 'kuukauden' : 'kuukautta';
                break;
            case 'y':
                return isFuture ? 'vuoden' : 'vuosi';
            case 'yy':
                result = isFuture ? 'vuoden' : 'vuotta';
                break;
        }
        result = verbalNumber(number, isFuture) + ' ' + result;
        return result;
    }
    function verbalNumber(number, isFuture) {
        return number < 10
            ? isFuture
                ? numbersFuture[number]
                : numbersPast[number]
            : number;
    }

    var fi = moment.defineLocale('fi', {
        months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split(
            '_'
        ),
        monthsShort:
            'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split(
                '_'
            ),
        weekdays:
            'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split(
                '_'
            ),
        weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),
        weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'Do MMMM[ta] YYYY',
            LLL: 'Do MMMM[ta] YYYY, [klo] HH.mm',
            LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
            l: 'D.M.YYYY',
            ll: 'Do MMM YYYY',
            lll: 'Do MMM YYYY, [klo] HH.mm',
            llll: 'ddd, Do MMM YYYY, [klo] HH.mm',
        },
        calendar: {
            sameDay: '[tänään] [klo] LT',
            nextDay: '[huomenna] [klo] LT',
            nextWeek: 'dddd [klo] LT',
            lastDay: '[eilen] [klo] LT',
            lastWeek: '[viime] dddd[na] [klo] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s päästä',
            past: '%s sitten',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fil.js":
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/fil.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Filipino [fil]
//! author : Dan Hagman : https://github.com/hagmandan
//! author : Matthew Co : https://github.com/matthewdeeco

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var fil = moment.defineLocale('fil', {
        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split(
            '_'
        ),
        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split(
            '_'
        ),
        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'MM/D/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY HH:mm',
            LLLL: 'dddd, MMMM DD, YYYY HH:mm',
        },
        calendar: {
            sameDay: 'LT [ngayong araw]',
            nextDay: '[Bukas ng] LT',
            nextWeek: 'LT [sa susunod na] dddd',
            lastDay: 'LT [kahapon]',
            lastWeek: 'LT [noong nakaraang] dddd',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'sa loob ng %s',
            past: '%s ang nakalipas',
            s: 'ilang segundo',
            ss: '%d segundo',
            m: 'isang minuto',
            mm: '%d minuto',
            h: 'isang oras',
            hh: '%d oras',
            d: 'isang araw',
            dd: '%d araw',
            M: 'isang buwan',
            MM: '%d buwan',
            y: 'isang taon',
            yy: '%d taon',
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fil;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fo.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Faroese [fo]
//! author : Ragnar Johannesen : https://github.com/ragnar123
//! author : Kristian Sakarisson : https://github.com/sakarisson

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var fo = moment.defineLocale('fo', {
        months: 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays:
            'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split(
                '_'
            ),
        weekdaysShort: 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
        weekdaysMin: 'su_má_tý_mi_hó_fr_le'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D. MMMM, YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Í dag kl.] LT',
            nextDay: '[Í morgin kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[Í gjár kl.] LT',
            lastWeek: '[síðstu] dddd [kl] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'um %s',
            past: '%s síðani',
            s: 'fá sekund',
            ss: '%d sekundir',
            m: 'ein minuttur',
            mm: '%d minuttir',
            h: 'ein tími',
            hh: '%d tímar',
            d: 'ein dagur',
            dd: '%d dagar',
            M: 'ein mánaður',
            MM: '%d mánaðir',
            y: 'eitt ár',
            yy: '%d ár',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fr-ca.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/fr-ca.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French (Canada) [fr-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var frCa = moment.defineLocale('fr-ca', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split(
            '_'
        ),
        monthsShort:
            'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Aujourd’hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            ss: '%d secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
        ordinal: function (number, period) {
            switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
    });

    return frCa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fr-ch.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/fr-ch.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French (Switzerland) [fr-ch]
//! author : Gaspard Bucher : https://github.com/gaspard

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var frCh = moment.defineLocale('fr-ch', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split(
            '_'
        ),
        monthsShort:
            'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Aujourd’hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            ss: '%d secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
        ordinal: function (number, period) {
            switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return frCh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fr.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French [fr]
//! author : John Fischer : https://github.com/jfroffice

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsStrictRegex =
            /^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,
        monthsShortStrictRegex =
            /(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,
        monthsRegex =
            /(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,
        monthsParse = [
            /^janv/i,
            /^févr/i,
            /^mars/i,
            /^avr/i,
            /^mai/i,
            /^juin/i,
            /^juil/i,
            /^août/i,
            /^sept/i,
            /^oct/i,
            /^nov/i,
            /^déc/i,
        ];

    var fr = moment.defineLocale('fr', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split(
            '_'
        ),
        monthsShort:
            'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split(
                '_'
            ),
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: monthsStrictRegex,
        monthsShortStrictRegex: monthsShortStrictRegex,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Aujourd’hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            ss: '%d secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            w: 'une semaine',
            ww: '%d semaines',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
        ordinal: function (number, period) {
            switch (period) {
                // TODO: Return 'e' when day of month > 1. Move this case inside
                // block for masculine words below.
                // See https://github.com/moment/moment/issues/3375
                case 'D':
                    return number + (number === 1 ? 'er' : '');

                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fy.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fy.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Frisian [fy]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortWithDots =
            'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
        monthsShortWithoutDots =
            'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

    var fy = moment.defineLocale('fy', {
        months: 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },
        monthsParseExact: true,
        weekdays: 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split(
            '_'
        ),
        weekdaysShort: 'si._mo._ti._wo._to._fr._so.'.split('_'),
        weekdaysMin: 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[hjoed om] LT',
            nextDay: '[moarn om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[juster om] LT',
            lastWeek: '[ôfrûne] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'oer %s',
            past: '%s lyn',
            s: 'in pear sekonden',
            ss: '%d sekonden',
            m: 'ien minút',
            mm: '%d minuten',
            h: 'ien oere',
            hh: '%d oeren',
            d: 'ien dei',
            dd: '%d dagen',
            M: 'ien moanne',
            MM: '%d moannen',
            y: 'ien jier',
            yy: '%d jierren',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            );
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ga.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ga.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Irish or Irish Gaelic [ga]
//! author : André Silva : https://github.com/askpt

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'Eanáir',
            'Feabhra',
            'Márta',
            'Aibreán',
            'Bealtaine',
            'Meitheamh',
            'Iúil',
            'Lúnasa',
            'Meán Fómhair',
            'Deireadh Fómhair',
            'Samhain',
            'Nollaig',
        ],
        monthsShort = [
            'Ean',
            'Feabh',
            'Márt',
            'Aib',
            'Beal',
            'Meith',
            'Iúil',
            'Lún',
            'M.F.',
            'D.F.',
            'Samh',
            'Noll',
        ],
        weekdays = [
            'Dé Domhnaigh',
            'Dé Luain',
            'Dé Máirt',
            'Dé Céadaoin',
            'Déardaoin',
            'Dé hAoine',
            'Dé Sathairn',
        ],
        weekdaysShort = ['Domh', 'Luan', 'Máirt', 'Céad', 'Déar', 'Aoine', 'Sath'],
        weekdaysMin = ['Do', 'Lu', 'Má', 'Cé', 'Dé', 'A', 'Sa'];

    var ga = moment.defineLocale('ga', {
        months: months,
        monthsShort: monthsShort,
        monthsParseExact: true,
        weekdays: weekdays,
        weekdaysShort: weekdaysShort,
        weekdaysMin: weekdaysMin,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Inniu ag] LT',
            nextDay: '[Amárach ag] LT',
            nextWeek: 'dddd [ag] LT',
            lastDay: '[Inné ag] LT',
            lastWeek: 'dddd [seo caite] [ag] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'i %s',
            past: '%s ó shin',
            s: 'cúpla soicind',
            ss: '%d soicind',
            m: 'nóiméad',
            mm: '%d nóiméad',
            h: 'uair an chloig',
            hh: '%d uair an chloig',
            d: 'lá',
            dd: '%d lá',
            M: 'mí',
            MM: '%d míonna',
            y: 'bliain',
            yy: '%d bliain',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
        ordinal: function (number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ga;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gd.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/gd.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Scottish Gaelic [gd]
//! author : Jon Ashdown : https://github.com/jonashdown

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'Am Faoilleach',
            'An Gearran',
            'Am Màrt',
            'An Giblean',
            'An Cèitean',
            'An t-Ògmhios',
            'An t-Iuchar',
            'An Lùnastal',
            'An t-Sultain',
            'An Dàmhair',
            'An t-Samhain',
            'An Dùbhlachd',
        ],
        monthsShort = [
            'Faoi',
            'Gear',
            'Màrt',
            'Gibl',
            'Cèit',
            'Ògmh',
            'Iuch',
            'Lùn',
            'Sult',
            'Dàmh',
            'Samh',
            'Dùbh',
        ],
        weekdays = [
            'Didòmhnaich',
            'Diluain',
            'Dimàirt',
            'Diciadain',
            'Diardaoin',
            'Dihaoine',
            'Disathairne',
        ],
        weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'],
        weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

    var gd = moment.defineLocale('gd', {
        months: months,
        monthsShort: monthsShort,
        monthsParseExact: true,
        weekdays: weekdays,
        weekdaysShort: weekdaysShort,
        weekdaysMin: weekdaysMin,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[An-diugh aig] LT',
            nextDay: '[A-màireach aig] LT',
            nextWeek: 'dddd [aig] LT',
            lastDay: '[An-dè aig] LT',
            lastWeek: 'dddd [seo chaidh] [aig] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ann an %s',
            past: 'bho chionn %s',
            s: 'beagan diogan',
            ss: '%d diogan',
            m: 'mionaid',
            mm: '%d mionaidean',
            h: 'uair',
            hh: '%d uairean',
            d: 'latha',
            dd: '%d latha',
            M: 'mìos',
            MM: '%d mìosan',
            y: 'bliadhna',
            yy: '%d bliadhna',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
        ordinal: function (number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return gd;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gl.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/gl.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Galician [gl]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var gl = moment.defineLocale('gl', {
        months: 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split(
            '_'
        ),
        monthsShort:
            'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mé_xo_ve_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[hoxe ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
            },
            nextDay: function () {
                return '[mañá ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT';
            },
            lastDay: function () {
                return '[onte ' + (this.hours() !== 1 ? 'á' : 'a') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[o] dddd [pasado ' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: function (str) {
                if (str.indexOf('un') === 0) {
                    return 'n' + str;
                }
                return 'en ' + str;
            },
            past: 'hai %s',
            s: 'uns segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'unha hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            M: 'un mes',
            MM: '%d meses',
            y: 'un ano',
            yy: '%d anos',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return gl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gom-deva.js":
/*!************************************************!*\
  !*** ./node_modules/moment/locale/gom-deva.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Konkani Devanagari script [gom-deva]
//! author : The Discoverer : https://github.com/WikiDiscoverer

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['थोडया सॅकंडांनी', 'थोडे सॅकंड'],
            ss: [number + ' सॅकंडांनी', number + ' सॅकंड'],
            m: ['एका मिणटान', 'एक मिनूट'],
            mm: [number + ' मिणटांनी', number + ' मिणटां'],
            h: ['एका वरान', 'एक वर'],
            hh: [number + ' वरांनी', number + ' वरां'],
            d: ['एका दिसान', 'एक दीस'],
            dd: [number + ' दिसांनी', number + ' दीस'],
            M: ['एका म्हयन्यान', 'एक म्हयनो'],
            MM: [number + ' म्हयन्यानी', number + ' म्हयने'],
            y: ['एका वर्सान', 'एक वर्स'],
            yy: [number + ' वर्सांनी', number + ' वर्सां'],
        };
        return isFuture ? format[key][0] : format[key][1];
    }

    var gomDeva = moment.defineLocale('gom-deva', {
        months: {
            standalone:
                'जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split(
                    '_'
                ),
            format: 'जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या'.split(
                '_'
            ),
            isFormat: /MMMM(\s)+D[oD]?/,
        },
        monthsShort:
            'जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार'.split('_'),
        weekdaysShort: 'आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.'.split('_'),
        weekdaysMin: 'आ_सो_मं_बु_ब्रे_सु_शे'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'A h:mm [वाजतां]',
            LTS: 'A h:mm:ss [वाजतां]',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY A h:mm [वाजतां]',
            LLLL: 'dddd, MMMM Do, YYYY, A h:mm [वाजतां]',
            llll: 'ddd, D MMM YYYY, A h:mm [वाजतां]',
        },
        calendar: {
            sameDay: '[आयज] LT',
            nextDay: '[फाल्यां] LT',
            nextWeek: '[फुडलो] dddd[,] LT',
            lastDay: '[काल] LT',
            lastWeek: '[फाटलो] dddd[,] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s',
            past: '%s आदीं',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}(वेर)/,
        ordinal: function (number, period) {
            switch (period) {
                // the ordinal 'वेर' only applies to day of the month
                case 'D':
                    return number + 'वेर';
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                case 'w':
                case 'W':
                    return number;
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week
            doy: 3, // The week that contains Jan 4th is the first week of the year (7 + 0 - 4)
        },
        meridiemParse: /राती|सकाळीं|दनपारां|सांजे/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'राती') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सकाळीं') {
                return hour;
            } else if (meridiem === 'दनपारां') {
                return hour > 12 ? hour : hour + 12;
            } else if (meridiem === 'सांजे') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'राती';
            } else if (hour < 12) {
                return 'सकाळीं';
            } else if (hour < 16) {
                return 'दनपारां';
            } else if (hour < 20) {
                return 'सांजे';
            } else {
                return 'राती';
            }
        },
    });

    return gomDeva;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gom-latn.js":
/*!************************************************!*\
  !*** ./node_modules/moment/locale/gom-latn.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Konkani Latin script [gom-latn]
//! author : The Discoverer : https://github.com/WikiDiscoverer

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['thoddea sekondamni', 'thodde sekond'],
            ss: [number + ' sekondamni', number + ' sekond'],
            m: ['eka mintan', 'ek minut'],
            mm: [number + ' mintamni', number + ' mintam'],
            h: ['eka voran', 'ek vor'],
            hh: [number + ' voramni', number + ' voram'],
            d: ['eka disan', 'ek dis'],
            dd: [number + ' disamni', number + ' dis'],
            M: ['eka mhoinean', 'ek mhoino'],
            MM: [number + ' mhoineamni', number + ' mhoine'],
            y: ['eka vorsan', 'ek voros'],
            yy: [number + ' vorsamni', number + ' vorsam'],
        };
        return isFuture ? format[key][0] : format[key][1];
    }

    var gomLatn = moment.defineLocale('gom-latn', {
        months: {
            standalone:
                'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split(
                    '_'
                ),
            format: 'Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea'.split(
                '_'
            ),
            isFormat: /MMMM(\s)+D[oD]?/,
        },
        monthsShort:
            'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays: "Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split('_'),
        weekdaysShort: 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
        weekdaysMin: 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'A h:mm [vazta]',
            LTS: 'A h:mm:ss [vazta]',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY A h:mm [vazta]',
            LLLL: 'dddd, MMMM Do, YYYY, A h:mm [vazta]',
            llll: 'ddd, D MMM YYYY, A h:mm [vazta]',
        },
        calendar: {
            sameDay: '[Aiz] LT',
            nextDay: '[Faleam] LT',
            nextWeek: '[Fuddlo] dddd[,] LT',
            lastDay: '[Kal] LT',
            lastWeek: '[Fattlo] dddd[,] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s',
            past: '%s adim',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er)/,
        ordinal: function (number, period) {
            switch (period) {
                // the ordinal 'er' only applies to day of the month
                case 'D':
                    return number + 'er';
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                case 'w':
                case 'W':
                    return number;
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week
            doy: 3, // The week that contains Jan 4th is the first week of the year (7 + 0 - 4)
        },
        meridiemParse: /rati|sokallim|donparam|sanje/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'rati') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'sokallim') {
                return hour;
            } else if (meridiem === 'donparam') {
                return hour > 12 ? hour : hour + 12;
            } else if (meridiem === 'sanje') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'rati';
            } else if (hour < 12) {
                return 'sokallim';
            } else if (hour < 16) {
                return 'donparam';
            } else if (hour < 20) {
                return 'sanje';
            } else {
                return 'rati';
            }
        },
    });

    return gomLatn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gu.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/gu.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Gujarati [gu]
//! author : Kaushik Thanki : https://github.com/Kaushik1987

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '૧',
            2: '૨',
            3: '૩',
            4: '૪',
            5: '૫',
            6: '૬',
            7: '૭',
            8: '૮',
            9: '૯',
            0: '૦',
        },
        numberMap = {
            '૧': '1',
            '૨': '2',
            '૩': '3',
            '૪': '4',
            '૫': '5',
            '૬': '6',
            '૭': '7',
            '૮': '8',
            '૯': '9',
            '૦': '0',
        };

    var gu = moment.defineLocale('gu', {
        months: 'જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર'.split(
            '_'
        ),
        monthsShort:
            'જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર'.split(
            '_'
        ),
        weekdaysShort: 'રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ'.split('_'),
        weekdaysMin: 'ર_સો_મં_બુ_ગુ_શુ_શ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm વાગ્યે',
            LTS: 'A h:mm:ss વાગ્યે',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm વાગ્યે',
            LLLL: 'dddd, D MMMM YYYY, A h:mm વાગ્યે',
        },
        calendar: {
            sameDay: '[આજ] LT',
            nextDay: '[કાલે] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ગઇકાલે] LT',
            lastWeek: '[પાછલા] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s મા',
            past: '%s પહેલા',
            s: 'અમુક પળો',
            ss: '%d સેકંડ',
            m: 'એક મિનિટ',
            mm: '%d મિનિટ',
            h: 'એક કલાક',
            hh: '%d કલાક',
            d: 'એક દિવસ',
            dd: '%d દિવસ',
            M: 'એક મહિનો',
            MM: '%d મહિનો',
            y: 'એક વર્ષ',
            yy: '%d વર્ષ',
        },
        preparse: function (string) {
            return string.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Gujarati notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.
        meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'રાત') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'સવાર') {
                return hour;
            } else if (meridiem === 'બપોર') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'સાંજ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'રાત';
            } else if (hour < 10) {
                return 'સવાર';
            } else if (hour < 17) {
                return 'બપોર';
            } else if (hour < 20) {
                return 'સાંજ';
            } else {
                return 'રાત';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return gu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/he.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/he.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hebrew [he]
//! author : Tomer Cohen : https://github.com/tomer
//! author : Moshe Simantov : https://github.com/DevelopmentIL
//! author : Tal Ater : https://github.com/TalAter

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var he = moment.defineLocale('he', {
        months: 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split(
            '_'
        ),
        monthsShort:
            'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
        weekdays: 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
        weekdaysShort: 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
        weekdaysMin: 'א_ב_ג_ד_ה_ו_ש'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [ב]MMMM YYYY',
            LLL: 'D [ב]MMMM YYYY HH:mm',
            LLLL: 'dddd, D [ב]MMMM YYYY HH:mm',
            l: 'D/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd, D MMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[היום ב־]LT',
            nextDay: '[מחר ב־]LT',
            nextWeek: 'dddd [בשעה] LT',
            lastDay: '[אתמול ב־]LT',
            lastWeek: '[ביום] dddd [האחרון בשעה] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'בעוד %s',
            past: 'לפני %s',
            s: 'מספר שניות',
            ss: '%d שניות',
            m: 'דקה',
            mm: '%d דקות',
            h: 'שעה',
            hh: function (number) {
                if (number === 2) {
                    return 'שעתיים';
                }
                return number + ' שעות';
            },
            d: 'יום',
            dd: function (number) {
                if (number === 2) {
                    return 'יומיים';
                }
                return number + ' ימים';
            },
            M: 'חודש',
            MM: function (number) {
                if (number === 2) {
                    return 'חודשיים';
                }
                return number + ' חודשים';
            },
            y: 'שנה',
            yy: function (number) {
                if (number === 2) {
                    return 'שנתיים';
                } else if (number % 10 === 0 && number !== 10) {
                    return number + ' שנה';
                }
                return number + ' שנים';
            },
        },
        meridiemParse:
            /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
        isPM: function (input) {
            return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 5) {
                return 'לפנות בוקר';
            } else if (hour < 10) {
                return 'בבוקר';
            } else if (hour < 12) {
                return isLower ? 'לפנה"צ' : 'לפני הצהריים';
            } else if (hour < 18) {
                return isLower ? 'אחה"צ' : 'אחרי הצהריים';
            } else {
                return 'בערב';
            }
        },
    });

    return he;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hi.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/hi.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hindi [hi]
//! author : Mayank Singhal : https://github.com/mayanksinghal

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '१',
            2: '२',
            3: '३',
            4: '४',
            5: '५',
            6: '६',
            7: '७',
            8: '८',
            9: '९',
            0: '०',
        },
        numberMap = {
            '१': '1',
            '२': '2',
            '३': '3',
            '४': '4',
            '५': '5',
            '६': '6',
            '७': '7',
            '८': '8',
            '९': '9',
            '०': '0',
        },
        monthsParse = [
            /^जन/i,
            /^फ़र|फर/i,
            /^मार्च/i,
            /^अप्रै/i,
            /^मई/i,
            /^जून/i,
            /^जुल/i,
            /^अग/i,
            /^सितं|सित/i,
            /^अक्टू/i,
            /^नव|नवं/i,
            /^दिसं|दिस/i,
        ],
        shortMonthsParse = [
            /^जन/i,
            /^फ़र/i,
            /^मार्च/i,
            /^अप्रै/i,
            /^मई/i,
            /^जून/i,
            /^जुल/i,
            /^अग/i,
            /^सित/i,
            /^अक्टू/i,
            /^नव/i,
            /^दिस/i,
        ];

    var hi = moment.defineLocale('hi', {
        months: {
            format: 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split(
                '_'
            ),
            standalone:
                'जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर'.split(
                    '_'
                ),
        },
        monthsShort:
            'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
        weekdays: 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort: 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat: {
            LT: 'A h:mm बजे',
            LTS: 'A h:mm:ss बजे',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm बजे',
            LLLL: 'dddd, D MMMM YYYY, A h:mm बजे',
        },

        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: shortMonthsParse,

        monthsRegex:
            /^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,

        monthsShortRegex:
            /^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,

        monthsStrictRegex:
            /^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,

        monthsShortStrictRegex:
            /^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,

        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[कल] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[कल] LT',
            lastWeek: '[पिछले] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s में',
            past: '%s पहले',
            s: 'कुछ ही क्षण',
            ss: '%d सेकंड',
            m: 'एक मिनट',
            mm: '%d मिनट',
            h: 'एक घंटा',
            hh: '%d घंटे',
            d: 'एक दिन',
            dd: '%d दिन',
            M: 'एक महीने',
            MM: '%d महीने',
            y: 'एक वर्ष',
            yy: '%d वर्ष',
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
        meridiemParse: /रात|सुबह|दोपहर|शाम/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सुबह') {
                return hour;
            } else if (meridiem === 'दोपहर') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'शाम') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'रात';
            } else if (hour < 10) {
                return 'सुबह';
            } else if (hour < 17) {
                return 'दोपहर';
            } else if (hour < 20) {
                return 'शाम';
            } else {
                return 'रात';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return hi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/hr.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Croatian [hr]
//! author : Bojan Marković : https://github.com/bmarkovic

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                if (number === 1) {
                    result += 'sekunda';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sekunde';
                } else {
                    result += 'sekundi';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var hr = moment.defineLocale('hr', {
        months: {
            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split(
                '_'
            ),
            standalone:
                'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split(
                    '_'
                ),
        },
        monthsShort:
            'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'Do MMMM YYYY',
            LLL: 'Do MMMM YYYY H:mm',
            LLLL: 'dddd, Do MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[jučer u] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[prošlu] [nedjelju] [u] LT';
                    case 3:
                        return '[prošlu] [srijedu] [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: 'dan',
            dd: translate,
            M: 'mjesec',
            MM: translate,
            y: 'godinu',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return hr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hu.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/hu.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hungarian [hu]
//! author : Adam Brunner : https://github.com/adambrunner
//! author : Peter Viszt  : https://github.com/passatgt

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var weekEndings =
        'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
    function translate(number, withoutSuffix, key, isFuture) {
        var num = number;
        switch (key) {
            case 's':
                return isFuture || withoutSuffix
                    ? 'néhány másodperc'
                    : 'néhány másodperce';
            case 'ss':
                return num + (isFuture || withoutSuffix)
                    ? ' másodperc'
                    : ' másodperce';
            case 'm':
                return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'mm':
                return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'h':
                return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'hh':
                return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'd':
                return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'dd':
                return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'M':
                return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'MM':
                return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'y':
                return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
            case 'yy':
                return num + (isFuture || withoutSuffix ? ' év' : ' éve');
        }
        return '';
    }
    function week(isFuture) {
        return (
            (isFuture ? '' : '[múlt] ') +
            '[' +
            weekEndings[this.day()] +
            '] LT[-kor]'
        );
    }

    var hu = moment.defineLocale('hu', {
        months: 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
        weekdaysShort: 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
        weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'YYYY.MM.DD.',
            LL: 'YYYY. MMMM D.',
            LLL: 'YYYY. MMMM D. H:mm',
            LLLL: 'YYYY. MMMM D., dddd H:mm',
        },
        meridiemParse: /de|du/i,
        isPM: function (input) {
            return input.charAt(1).toLowerCase() === 'u';
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower === true ? 'de' : 'DE';
            } else {
                return isLower === true ? 'du' : 'DU';
            }
        },
        calendar: {
            sameDay: '[ma] LT[-kor]',
            nextDay: '[holnap] LT[-kor]',
            nextWeek: function () {
                return week.call(this, true);
            },
            lastDay: '[tegnap] LT[-kor]',
            lastWeek: function () {
                return week.call(this, false);
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s múlva',
            past: '%s',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return hu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hy-am.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/hy-am.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Armenian [hy-am]
//! author : Armendarabyan : https://github.com/armendarabyan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var hyAm = moment.defineLocale('hy-am', {
        months: {
            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split(
                '_'
            ),
            standalone:
                'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split(
                    '_'
                ),
        },
        monthsShort: 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
        weekdays:
            'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split(
                '_'
            ),
        weekdaysShort: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        weekdaysMin: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY թ.',
            LLL: 'D MMMM YYYY թ., HH:mm',
            LLLL: 'dddd, D MMMM YYYY թ., HH:mm',
        },
        calendar: {
            sameDay: '[այսօր] LT',
            nextDay: '[վաղը] LT',
            lastDay: '[երեկ] LT',
            nextWeek: function () {
                return 'dddd [օրը ժամը] LT';
            },
            lastWeek: function () {
                return '[անցած] dddd [օրը ժամը] LT';
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s հետո',
            past: '%s առաջ',
            s: 'մի քանի վայրկյան',
            ss: '%d վայրկյան',
            m: 'րոպե',
            mm: '%d րոպե',
            h: 'ժամ',
            hh: '%d ժամ',
            d: 'օր',
            dd: '%d օր',
            M: 'ամիս',
            MM: '%d ամիս',
            y: 'տարի',
            yy: '%d տարի',
        },
        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
        isPM: function (input) {
            return /^(ցերեկվա|երեկոյան)$/.test(input);
        },
        meridiem: function (hour) {
            if (hour < 4) {
                return 'գիշերվա';
            } else if (hour < 12) {
                return 'առավոտվա';
            } else if (hour < 17) {
                return 'ցերեկվա';
            } else {
                return 'երեկոյան';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'DDD':
                case 'w':
                case 'W':
                case 'DDDo':
                    if (number === 1) {
                        return number + '-ին';
                    }
                    return number + '-րդ';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return hyAm;

})));


/***/ }),

/***/ "./node_modules/moment/locale/id.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/id.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Indonesian [id]
//! author : Mohammad Satrio Utomo : https://github.com/tyok
//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var id = moment.defineLocale('id', {
        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /pagi|siang|sore|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'siang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sore' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'siang';
            } else if (hours < 19) {
                return 'sore';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Besok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kemarin pukul] LT',
            lastWeek: 'dddd [lalu pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lalu',
            s: 'beberapa detik',
            ss: '%d detik',
            m: 'semenit',
            mm: '%d menit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun',
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return id;

})));


/***/ }),

/***/ "./node_modules/moment/locale/is.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/is.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Icelandic [is]
//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(n) {
        if (n % 100 === 11) {
            return true;
        } else if (n % 10 === 1) {
            return false;
        }
        return true;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture
                    ? 'nokkrar sekúndur'
                    : 'nokkrum sekúndum';
            case 'ss':
                if (plural(number)) {
                    return (
                        result +
                        (withoutSuffix || isFuture ? 'sekúndur' : 'sekúndum')
                    );
                }
                return result + 'sekúnda';
            case 'm':
                return withoutSuffix ? 'mínúta' : 'mínútu';
            case 'mm':
                if (plural(number)) {
                    return (
                        result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum')
                    );
                } else if (withoutSuffix) {
                    return result + 'mínúta';
                }
                return result + 'mínútu';
            case 'hh':
                if (plural(number)) {
                    return (
                        result +
                        (withoutSuffix || isFuture
                            ? 'klukkustundir'
                            : 'klukkustundum')
                    );
                }
                return result + 'klukkustund';
            case 'd':
                if (withoutSuffix) {
                    return 'dagur';
                }
                return isFuture ? 'dag' : 'degi';
            case 'dd':
                if (plural(number)) {
                    if (withoutSuffix) {
                        return result + 'dagar';
                    }
                    return result + (isFuture ? 'daga' : 'dögum');
                } else if (withoutSuffix) {
                    return result + 'dagur';
                }
                return result + (isFuture ? 'dag' : 'degi');
            case 'M':
                if (withoutSuffix) {
                    return 'mánuður';
                }
                return isFuture ? 'mánuð' : 'mánuði';
            case 'MM':
                if (plural(number)) {
                    if (withoutSuffix) {
                        return result + 'mánuðir';
                    }
                    return result + (isFuture ? 'mánuði' : 'mánuðum');
                } else if (withoutSuffix) {
                    return result + 'mánuður';
                }
                return result + (isFuture ? 'mánuð' : 'mánuði');
            case 'y':
                return withoutSuffix || isFuture ? 'ár' : 'ári';
            case 'yy':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
                }
                return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
        }
    }

    var is = moment.defineLocale('is', {
        months: 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
        weekdays:
            'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split(
                '_'
            ),
        weekdaysShort: 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
        weekdaysMin: 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] H:mm',
            LLLL: 'dddd, D. MMMM YYYY [kl.] H:mm',
        },
        calendar: {
            sameDay: '[í dag kl.] LT',
            nextDay: '[á morgun kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[í gær kl.] LT',
            lastWeek: '[síðasta] dddd [kl.] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'eftir %s',
            past: 'fyrir %s síðan',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: 'klukkustund',
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return is;

})));


/***/ }),

/***/ "./node_modules/moment/locale/it-ch.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/it-ch.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Italian (Switzerland) [it-ch]
//! author : xfh : https://github.com/xfh

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var itCh = moment.defineLocale('it-ch', {
        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split(
            '_'
        ),
        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split(
            '_'
        ),
        weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
        weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[la scorsa] dddd [alle] LT';
                    default:
                        return '[lo scorso] dddd [alle] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: function (s) {
                return (/^[0-9].+$/.test(s) ? 'tra' : 'in') + ' ' + s;
            },
            past: '%s fa',
            s: 'alcuni secondi',
            ss: '%d secondi',
            m: 'un minuto',
            mm: '%d minuti',
            h: "un'ora",
            hh: '%d ore',
            d: 'un giorno',
            dd: '%d giorni',
            M: 'un mese',
            MM: '%d mesi',
            y: 'un anno',
            yy: '%d anni',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return itCh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/it.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/it.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Italian [it]
//! author : Lorenzo : https://github.com/aliem
//! author: Mattia Larentis: https://github.com/nostalgiaz
//! author: Marco : https://github.com/Manfre98

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var it = moment.defineLocale('it', {
        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split(
            '_'
        ),
        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split(
            '_'
        ),
        weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
        weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: function () {
                return (
                    '[Oggi a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            nextDay: function () {
                return (
                    '[Domani a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            nextWeek: function () {
                return (
                    'dddd [a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            lastDay: function () {
                return (
                    '[Ieri a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return (
                            '[La scorsa] dddd [a' +
                            (this.hours() > 1
                                ? 'lle '
                                : this.hours() === 0
                                ? ' '
                                : "ll'") +
                            ']LT'
                        );
                    default:
                        return (
                            '[Lo scorso] dddd [a' +
                            (this.hours() > 1
                                ? 'lle '
                                : this.hours() === 0
                                ? ' '
                                : "ll'") +
                            ']LT'
                        );
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'tra %s',
            past: '%s fa',
            s: 'alcuni secondi',
            ss: '%d secondi',
            m: 'un minuto',
            mm: '%d minuti',
            h: "un'ora",
            hh: '%d ore',
            d: 'un giorno',
            dd: '%d giorni',
            w: 'una settimana',
            ww: '%d settimane',
            M: 'un mese',
            MM: '%d mesi',
            y: 'un anno',
            yy: '%d anni',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return it;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ja.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ja.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Japanese [ja]
//! author : LI Long : https://github.com/baryon

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ja = moment.defineLocale('ja', {
        eras: [
            {
                since: '2019-05-01',
                offset: 1,
                name: '令和',
                narrow: '㋿',
                abbr: 'R',
            },
            {
                since: '1989-01-08',
                until: '2019-04-30',
                offset: 1,
                name: '平成',
                narrow: '㍻',
                abbr: 'H',
            },
            {
                since: '1926-12-25',
                until: '1989-01-07',
                offset: 1,
                name: '昭和',
                narrow: '㍼',
                abbr: 'S',
            },
            {
                since: '1912-07-30',
                until: '1926-12-24',
                offset: 1,
                name: '大正',
                narrow: '㍽',
                abbr: 'T',
            },
            {
                since: '1873-01-01',
                until: '1912-07-29',
                offset: 6,
                name: '明治',
                narrow: '㍾',
                abbr: 'M',
            },
            {
                since: '0001-01-01',
                until: '1873-12-31',
                offset: 1,
                name: '西暦',
                narrow: 'AD',
                abbr: 'AD',
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: '紀元前',
                narrow: 'BC',
                abbr: 'BC',
            },
        ],
        eraYearOrdinalRegex: /(元|\d+)年/,
        eraYearOrdinalParse: function (input, match) {
            return match[1] === '元' ? 1 : parseInt(match[1] || input, 10);
        },
        months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
        weekdaysShort: '日_月_火_水_木_金_土'.split('_'),
        weekdaysMin: '日_月_火_水_木_金_土'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日 dddd HH:mm',
            l: 'YYYY/MM/DD',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日(ddd) HH:mm',
        },
        meridiemParse: /午前|午後/i,
        isPM: function (input) {
            return input === '午後';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return '午前';
            } else {
                return '午後';
            }
        },
        calendar: {
            sameDay: '[今日] LT',
            nextDay: '[明日] LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    return '[来週]dddd LT';
                } else {
                    return 'dddd LT';
                }
            },
            lastDay: '[昨日] LT',
            lastWeek: function (now) {
                if (this.week() !== now.week()) {
                    return '[先週]dddd LT';
                } else {
                    return 'dddd LT';
                }
            },
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}日/,
        ordinal: function (number, period) {
            switch (period) {
                case 'y':
                    return number === 1 ? '元年' : number + '年';
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '数秒',
            ss: '%d秒',
            m: '1分',
            mm: '%d分',
            h: '1時間',
            hh: '%d時間',
            d: '1日',
            dd: '%d日',
            M: '1ヶ月',
            MM: '%dヶ月',
            y: '1年',
            yy: '%d年',
        },
    });

    return ja;

})));


/***/ }),

/***/ "./node_modules/moment/locale/jv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/jv.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Javanese [jv]
//! author : Rony Lantip : https://github.com/lantip
//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var jv = moment.defineLocale('jv', {
        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
        weekdays: 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /enjing|siyang|sonten|ndalu/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'enjing') {
                return hour;
            } else if (meridiem === 'siyang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'enjing';
            } else if (hours < 15) {
                return 'siyang';
            } else if (hours < 19) {
                return 'sonten';
            } else {
                return 'ndalu';
            }
        },
        calendar: {
            sameDay: '[Dinten puniko pukul] LT',
            nextDay: '[Mbenjang pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kala wingi pukul] LT',
            lastWeek: 'dddd [kepengker pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'wonten ing %s',
            past: '%s ingkang kepengker',
            s: 'sawetawis detik',
            ss: '%d detik',
            m: 'setunggal menit',
            mm: '%d menit',
            h: 'setunggal jam',
            hh: '%d jam',
            d: 'sedinten',
            dd: '%d dinten',
            M: 'sewulan',
            MM: '%d wulan',
            y: 'setaun',
            yy: '%d taun',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return jv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ka.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ka.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Georgian [ka]
//! author : Irakli Janiashvili : https://github.com/IrakliJani

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ka = moment.defineLocale('ka', {
        months: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split(
            '_'
        ),
        monthsShort: 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
        weekdays: {
            standalone:
                'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split(
                    '_'
                ),
            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split(
                '_'
            ),
            isFormat: /(წინა|შემდეგ)/,
        },
        weekdaysShort: 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
        weekdaysMin: 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[დღეს] LT[-ზე]',
            nextDay: '[ხვალ] LT[-ზე]',
            lastDay: '[გუშინ] LT[-ზე]',
            nextWeek: '[შემდეგ] dddd LT[-ზე]',
            lastWeek: '[წინა] dddd LT-ზე',
            sameElse: 'L',
        },
        relativeTime: {
            future: function (s) {
                return s.replace(
                    /(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,
                    function ($0, $1, $2) {
                        return $2 === 'ი' ? $1 + 'ში' : $1 + $2 + 'ში';
                    }
                );
            },
            past: function (s) {
                if (/(წამი|წუთი|საათი|დღე|თვე)/.test(s)) {
                    return s.replace(/(ი|ე)$/, 'ის წინ');
                }
                if (/წელი/.test(s)) {
                    return s.replace(/წელი$/, 'წლის წინ');
                }
                return s;
            },
            s: 'რამდენიმე წამი',
            ss: '%d წამი',
            m: 'წუთი',
            mm: '%d წუთი',
            h: 'საათი',
            hh: '%d საათი',
            d: 'დღე',
            dd: '%d დღე',
            M: 'თვე',
            MM: '%d თვე',
            y: 'წელი',
            yy: '%d წელი',
        },
        dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
        ordinal: function (number) {
            if (number === 0) {
                return number;
            }
            if (number === 1) {
                return number + '-ლი';
            }
            if (
                number < 20 ||
                (number <= 100 && number % 20 === 0) ||
                number % 100 === 0
            ) {
                return 'მე-' + number;
            }
            return number + '-ე';
        },
        week: {
            dow: 1,
            doy: 7,
        },
    });

    return ka;

})));


/***/ }),

/***/ "./node_modules/moment/locale/kk.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/kk.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kazakh [kk]
//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        0: '-ші',
        1: '-ші',
        2: '-ші',
        3: '-ші',
        4: '-ші',
        5: '-ші',
        6: '-шы',
        7: '-ші',
        8: '-ші',
        9: '-шы',
        10: '-шы',
        20: '-шы',
        30: '-шы',
        40: '-шы',
        50: '-ші',
        60: '-шы',
        70: '-ші',
        80: '-ші',
        90: '-шы',
        100: '-ші',
    };

    var kk = moment.defineLocale('kk', {
        months: 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split(
            '_'
        ),
        monthsShort: 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
        weekdays: 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split(
            '_'
        ),
        weekdaysShort: 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
        weekdaysMin: 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Бүгін сағат] LT',
            nextDay: '[Ертең сағат] LT',
            nextWeek: 'dddd [сағат] LT',
            lastDay: '[Кеше сағат] LT',
            lastWeek: '[Өткен аптаның] dddd [сағат] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ішінде',
            past: '%s бұрын',
            s: 'бірнеше секунд',
            ss: '%d секунд',
            m: 'бір минут',
            mm: '%d минут',
            h: 'бір сағат',
            hh: '%d сағат',
            d: 'бір күн',
            dd: '%d күн',
            M: 'бір ай',
            MM: '%d ай',
            y: 'бір жыл',
            yy: '%d жыл',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return kk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/km.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/km.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Cambodian [km]
//! author : Kruy Vanna : https://github.com/kruyvanna

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '១',
            2: '២',
            3: '៣',
            4: '៤',
            5: '៥',
            6: '៦',
            7: '៧',
            8: '៨',
            9: '៩',
            0: '០',
        },
        numberMap = {
            '១': '1',
            '២': '2',
            '៣': '3',
            '៤': '4',
            '៥': '5',
            '៦': '6',
            '៧': '7',
            '៨': '8',
            '៩': '9',
            '០': '0',
        };

    var km = moment.defineLocale('km', {
        months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
            '_'
        ),
        monthsShort:
            'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
                '_'
            ),
        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        weekdaysShort: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
        weekdaysMin: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        meridiemParse: /ព្រឹក|ល្ងាច/,
        isPM: function (input) {
            return input === 'ល្ងាច';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ព្រឹក';
            } else {
                return 'ល្ងាច';
            }
        },
        calendar: {
            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
            nextDay: '[ស្អែក ម៉ោង] LT',
            nextWeek: 'dddd [ម៉ោង] LT',
            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sទៀត',
            past: '%sមុន',
            s: 'ប៉ុន្មានវិនាទី',
            ss: '%d វិនាទី',
            m: 'មួយនាទី',
            mm: '%d នាទី',
            h: 'មួយម៉ោង',
            hh: '%d ម៉ោង',
            d: 'មួយថ្ងៃ',
            dd: '%d ថ្ងៃ',
            M: 'មួយខែ',
            MM: '%d ខែ',
            y: 'មួយឆ្នាំ',
            yy: '%d ឆ្នាំ',
        },
        dayOfMonthOrdinalParse: /ទី\d{1,2}/,
        ordinal: 'ទី%d',
        preparse: function (string) {
            return string.replace(/[១២៣៤៥៦៧៨៩០]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return km;

})));


/***/ }),

/***/ "./node_modules/moment/locale/kn.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/kn.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kannada [kn]
//! author : Rajeev Naik : https://github.com/rajeevnaikte

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '೧',
            2: '೨',
            3: '೩',
            4: '೪',
            5: '೫',
            6: '೬',
            7: '೭',
            8: '೮',
            9: '೯',
            0: '೦',
        },
        numberMap = {
            '೧': '1',
            '೨': '2',
            '೩': '3',
            '೪': '4',
            '೫': '5',
            '೬': '6',
            '೭': '7',
            '೮': '8',
            '೯': '9',
            '೦': '0',
        };

    var kn = moment.defineLocale('kn', {
        months: 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split(
            '_'
        ),
        monthsShort:
            'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split(
            '_'
        ),
        weekdaysShort: 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
        weekdaysMin: 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm',
        },
        calendar: {
            sameDay: '[ಇಂದು] LT',
            nextDay: '[ನಾಳೆ] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ನಿನ್ನೆ] LT',
            lastWeek: '[ಕೊನೆಯ] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ನಂತರ',
            past: '%s ಹಿಂದೆ',
            s: 'ಕೆಲವು ಕ್ಷಣಗಳು',
            ss: '%d ಸೆಕೆಂಡುಗಳು',
            m: 'ಒಂದು ನಿಮಿಷ',
            mm: '%d ನಿಮಿಷ',
            h: 'ಒಂದು ಗಂಟೆ',
            hh: '%d ಗಂಟೆ',
            d: 'ಒಂದು ದಿನ',
            dd: '%d ದಿನ',
            M: 'ಒಂದು ತಿಂಗಳು',
            MM: '%d ತಿಂಗಳು',
            y: 'ಒಂದು ವರ್ಷ',
            yy: '%d ವರ್ಷ',
        },
        preparse: function (string) {
            return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ರಾತ್ರಿ') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
                return hour;
            } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'ಸಂಜೆ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ರಾತ್ರಿ';
            } else if (hour < 10) {
                return 'ಬೆಳಿಗ್ಗೆ';
            } else if (hour < 17) {
                return 'ಮಧ್ಯಾಹ್ನ';
            } else if (hour < 20) {
                return 'ಸಂಜೆ';
            } else {
                return 'ರಾತ್ರಿ';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
        ordinal: function (number) {
            return number + 'ನೇ';
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return kn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ko.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ko.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Korean [ko]
//! author : Kyungwook, Park : https://github.com/kyungw00k
//! author : Jeeeyul Lee <jeeeyul@gmail.com>

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ko = moment.defineLocale('ko', {
        months: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
        monthsShort: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split(
            '_'
        ),
        weekdays: '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
        weekdaysShort: '일_월_화_수_목_금_토'.split('_'),
        weekdaysMin: '일_월_화_수_목_금_토'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'YYYY.MM.DD.',
            LL: 'YYYY년 MMMM D일',
            LLL: 'YYYY년 MMMM D일 A h:mm',
            LLLL: 'YYYY년 MMMM D일 dddd A h:mm',
            l: 'YYYY.MM.DD.',
            ll: 'YYYY년 MMMM D일',
            lll: 'YYYY년 MMMM D일 A h:mm',
            llll: 'YYYY년 MMMM D일 dddd A h:mm',
        },
        calendar: {
            sameDay: '오늘 LT',
            nextDay: '내일 LT',
            nextWeek: 'dddd LT',
            lastDay: '어제 LT',
            lastWeek: '지난주 dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s 후',
            past: '%s 전',
            s: '몇 초',
            ss: '%d초',
            m: '1분',
            mm: '%d분',
            h: '한 시간',
            hh: '%d시간',
            d: '하루',
            dd: '%d일',
            M: '한 달',
            MM: '%d달',
            y: '일 년',
            yy: '%d년',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(일|월|주)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '일';
                case 'M':
                    return number + '월';
                case 'w':
                case 'W':
                    return number + '주';
                default:
                    return number;
            }
        },
        meridiemParse: /오전|오후/,
        isPM: function (token) {
            return token === '오후';
        },
        meridiem: function (hour, minute, isUpper) {
            return hour < 12 ? '오전' : '오후';
        },
    });

    return ko;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ku.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ku.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kurdish [ku]
//! author : Shahram Mebashar : https://github.com/ShahramMebashar

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '١',
            2: '٢',
            3: '٣',
            4: '٤',
            5: '٥',
            6: '٦',
            7: '٧',
            8: '٨',
            9: '٩',
            0: '٠',
        },
        numberMap = {
            '١': '1',
            '٢': '2',
            '٣': '3',
            '٤': '4',
            '٥': '5',
            '٦': '6',
            '٧': '7',
            '٨': '8',
            '٩': '9',
            '٠': '0',
        },
        months = [
            'کانونی دووەم',
            'شوبات',
            'ئازار',
            'نیسان',
            'ئایار',
            'حوزەیران',
            'تەمموز',
            'ئاب',
            'ئەیلوول',
            'تشرینی یەكەم',
            'تشرینی دووەم',
            'كانونی یەکەم',
        ];

    var ku = moment.defineLocale('ku', {
        months: months,
        monthsShort: months,
        weekdays:
            'یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌'.split(
                '_'
            ),
        weekdaysShort:
            'یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌'.split('_'),
        weekdaysMin: 'ی_د_س_چ_پ_ه_ش'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        meridiemParse: /ئێواره‌|به‌یانی/,
        isPM: function (input) {
            return /ئێواره‌/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'به‌یانی';
            } else {
                return 'ئێواره‌';
            }
        },
        calendar: {
            sameDay: '[ئه‌مرۆ كاتژمێر] LT',
            nextDay: '[به‌یانی كاتژمێر] LT',
            nextWeek: 'dddd [كاتژمێر] LT',
            lastDay: '[دوێنێ كاتژمێر] LT',
            lastWeek: 'dddd [كاتژمێر] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'له‌ %s',
            past: '%s',
            s: 'چه‌ند چركه‌یه‌ك',
            ss: 'چركه‌ %d',
            m: 'یه‌ك خوله‌ك',
            mm: '%d خوله‌ك',
            h: 'یه‌ك كاتژمێر',
            hh: '%d كاتژمێر',
            d: 'یه‌ك ڕۆژ',
            dd: '%d ڕۆژ',
            M: 'یه‌ك مانگ',
            MM: '%d مانگ',
            y: 'یه‌ك ساڵ',
            yy: '%d ساڵ',
        },
        preparse: function (string) {
            return string
                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return ku;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ky.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ky.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kyrgyz [ky]
//! author : Chyngyz Arystan uulu : https://github.com/chyngyz

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        0: '-чү',
        1: '-чи',
        2: '-чи',
        3: '-чү',
        4: '-чү',
        5: '-чи',
        6: '-чы',
        7: '-чи',
        8: '-чи',
        9: '-чу',
        10: '-чу',
        20: '-чы',
        30: '-чу',
        40: '-чы',
        50: '-чү',
        60: '-чы',
        70: '-чи',
        80: '-чи',
        90: '-чу',
        100: '-чү',
    };

    var ky = moment.defineLocale('ky', {
        months: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split(
            '_'
        ),
        monthsShort: 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split(
            '_'
        ),
        weekdays: 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split(
            '_'
        ),
        weekdaysShort: 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
        weekdaysMin: 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Бүгүн саат] LT',
            nextDay: '[Эртең саат] LT',
            nextWeek: 'dddd [саат] LT',
            lastDay: '[Кечээ саат] LT',
            lastWeek: '[Өткөн аптанын] dddd [күнү] [саат] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ичинде',
            past: '%s мурун',
            s: 'бирнече секунд',
            ss: '%d секунд',
            m: 'бир мүнөт',
            mm: '%d мүнөт',
            h: 'бир саат',
            hh: '%d саат',
            d: 'бир күн',
            dd: '%d күн',
            M: 'бир ай',
            MM: '%d ай',
            y: 'бир жыл',
            yy: '%d жыл',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return ky;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lb.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lb.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Luxembourgish [lb]
//! author : mweimerskirch : https://github.com/mweimerskirch
//! author : David Raison : https://github.com/kwisatz

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eng Minutt', 'enger Minutt'],
            h: ['eng Stonn', 'enger Stonn'],
            d: ['een Dag', 'engem Dag'],
            M: ['ee Mount', 'engem Mount'],
            y: ['ee Joer', 'engem Joer'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }
    function processFutureTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'a ' + string;
        }
        return 'an ' + string;
    }
    function processPastTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'viru ' + string;
        }
        return 'virun ' + string;
    }
    /**
     * Returns true if the word before the given number loses the '-n' ending.
     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
     *
     * @param number {integer}
     * @returns {boolean}
     */
    function eifelerRegelAppliesToNumber(number) {
        number = parseInt(number, 10);
        if (isNaN(number)) {
            return false;
        }
        if (number < 0) {
            // Negative Number --> always true
            return true;
        } else if (number < 10) {
            // Only 1 digit
            if (4 <= number && number <= 7) {
                return true;
            }
            return false;
        } else if (number < 100) {
            // 2 digits
            var lastDigit = number % 10,
                firstDigit = number / 10;
            if (lastDigit === 0) {
                return eifelerRegelAppliesToNumber(firstDigit);
            }
            return eifelerRegelAppliesToNumber(lastDigit);
        } else if (number < 10000) {
            // 3 or 4 digits --> recursively check first digit
            while (number >= 10) {
                number = number / 10;
            }
            return eifelerRegelAppliesToNumber(number);
        } else {
            // Anything larger than 4 digits: recursively check first n-3 digits
            number = number / 1000;
            return eifelerRegelAppliesToNumber(number);
        }
    }

    var lb = moment.defineLocale('lb', {
        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort:
            'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split(
                '_'
            ),
        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm [Auer]',
            LTS: 'H:mm:ss [Auer]',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm [Auer]',
            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]',
        },
        calendar: {
            sameDay: '[Haut um] LT',
            sameElse: 'L',
            nextDay: '[Muer um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gëschter um] LT',
            lastWeek: function () {
                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
                switch (this.day()) {
                    case 2:
                    case 4:
                        return '[Leschten] dddd [um] LT';
                    default:
                        return '[Leschte] dddd [um] LT';
                }
            },
        },
        relativeTime: {
            future: processFutureTime,
            past: processPastTime,
            s: 'e puer Sekonnen',
            ss: '%d Sekonnen',
            m: processRelativeTime,
            mm: '%d Minutten',
            h: processRelativeTime,
            hh: '%d Stonnen',
            d: processRelativeTime,
            dd: '%d Deeg',
            M: processRelativeTime,
            MM: '%d Méint',
            y: processRelativeTime,
            yy: '%d Joer',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return lb;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lo.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Lao [lo]
//! author : Ryan Hart : https://github.com/ryanhart2

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var lo = moment.defineLocale('lo', {
        months: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split(
            '_'
        ),
        monthsShort:
            'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split(
                '_'
            ),
        weekdays: 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
        weekdaysShort: 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
        weekdaysMin: 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'ວັນdddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
        isPM: function (input) {
            return input === 'ຕອນແລງ';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ຕອນເຊົ້າ';
            } else {
                return 'ຕອນແລງ';
            }
        },
        calendar: {
            sameDay: '[ມື້ນີ້ເວລາ] LT',
            nextDay: '[ມື້ອື່ນເວລາ] LT',
            nextWeek: '[ວັນ]dddd[ໜ້າເວລາ] LT',
            lastDay: '[ມື້ວານນີ້ເວລາ] LT',
            lastWeek: '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ອີກ %s',
            past: '%sຜ່ານມາ',
            s: 'ບໍ່ເທົ່າໃດວິນາທີ',
            ss: '%d ວິນາທີ',
            m: '1 ນາທີ',
            mm: '%d ນາທີ',
            h: '1 ຊົ່ວໂມງ',
            hh: '%d ຊົ່ວໂມງ',
            d: '1 ມື້',
            dd: '%d ມື້',
            M: '1 ເດືອນ',
            MM: '%d ເດືອນ',
            y: '1 ປີ',
            yy: '%d ປີ',
        },
        dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
        ordinal: function (number) {
            return 'ທີ່' + number;
        },
    });

    return lo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lt.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lt.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Lithuanian [lt]
//! author : Mindaugas Mozūras : https://github.com/mmozuras

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var units = {
        ss: 'sekundė_sekundžių_sekundes',
        m: 'minutė_minutės_minutę',
        mm: 'minutės_minučių_minutes',
        h: 'valanda_valandos_valandą',
        hh: 'valandos_valandų_valandas',
        d: 'diena_dienos_dieną',
        dd: 'dienos_dienų_dienas',
        M: 'mėnuo_mėnesio_mėnesį',
        MM: 'mėnesiai_mėnesių_mėnesius',
        y: 'metai_metų_metus',
        yy: 'metai_metų_metus',
    };
    function translateSeconds(number, withoutSuffix, key, isFuture) {
        if (withoutSuffix) {
            return 'kelios sekundės';
        } else {
            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
        }
    }
    function translateSingular(number, withoutSuffix, key, isFuture) {
        return withoutSuffix
            ? forms(key)[0]
            : isFuture
            ? forms(key)[1]
            : forms(key)[2];
    }
    function special(number) {
        return number % 10 === 0 || (number > 10 && number < 20);
    }
    function forms(key) {
        return units[key].split('_');
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        if (number === 1) {
            return (
                result + translateSingular(number, withoutSuffix, key[0], isFuture)
            );
        } else if (withoutSuffix) {
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
        } else {
            if (isFuture) {
                return result + forms(key)[1];
            } else {
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
            }
        }
    }
    var lt = moment.defineLocale('lt', {
        months: {
            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split(
                '_'
            ),
            standalone:
                'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split(
                    '_'
                ),
            isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/,
        },
        monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
        weekdays: {
            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split(
                '_'
            ),
            standalone:
                'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split(
                    '_'
                ),
            isFormat: /dddd HH:mm/,
        },
        weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
        weekdaysMin: 'S_P_A_T_K_Pn_Š'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY [m.] MMMM D [d.]',
            LLL: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            LLLL: 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
            l: 'YYYY-MM-DD',
            ll: 'YYYY [m.] MMMM D [d.]',
            lll: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            llll: 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]',
        },
        calendar: {
            sameDay: '[Šiandien] LT',
            nextDay: '[Rytoj] LT',
            nextWeek: 'dddd LT',
            lastDay: '[Vakar] LT',
            lastWeek: '[Praėjusį] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'po %s',
            past: 'prieš %s',
            s: translateSeconds,
            ss: translate,
            m: translateSingular,
            mm: translate,
            h: translateSingular,
            hh: translate,
            d: translateSingular,
            dd: translate,
            M: translateSingular,
            MM: translate,
            y: translateSingular,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}-oji/,
        ordinal: function (number) {
            return number + '-oji';
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return lt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lv.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Latvian [lv]
//! author : Kristaps Karlsons : https://github.com/skakri
//! author : Jānis Elmeris : https://github.com/JanisE

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var units = {
        ss: 'sekundes_sekundēm_sekunde_sekundes'.split('_'),
        m: 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        mm: 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        h: 'stundas_stundām_stunda_stundas'.split('_'),
        hh: 'stundas_stundām_stunda_stundas'.split('_'),
        d: 'dienas_dienām_diena_dienas'.split('_'),
        dd: 'dienas_dienām_diena_dienas'.split('_'),
        M: 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        MM: 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        y: 'gada_gadiem_gads_gadi'.split('_'),
        yy: 'gada_gadiem_gads_gadi'.split('_'),
    };
    /**
     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
     */
    function format(forms, number, withoutSuffix) {
        if (withoutSuffix) {
            // E.g. "21 minūte", "3 minūtes".
            return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
        } else {
            // E.g. "21 minūtes" as in "pēc 21 minūtes".
            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
            return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
        }
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        return number + ' ' + format(units[key], number, withoutSuffix);
    }
    function relativeTimeWithSingular(number, withoutSuffix, key) {
        return format(units[key], number, withoutSuffix);
    }
    function relativeSeconds(number, withoutSuffix) {
        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
    }

    var lv = moment.defineLocale('lv', {
        months: 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
        weekdays:
            'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split(
                '_'
            ),
        weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY.',
            LL: 'YYYY. [gada] D. MMMM',
            LLL: 'YYYY. [gada] D. MMMM, HH:mm',
            LLLL: 'YYYY. [gada] D. MMMM, dddd, HH:mm',
        },
        calendar: {
            sameDay: '[Šodien pulksten] LT',
            nextDay: '[Rīt pulksten] LT',
            nextWeek: 'dddd [pulksten] LT',
            lastDay: '[Vakar pulksten] LT',
            lastWeek: '[Pagājušā] dddd [pulksten] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'pēc %s',
            past: 'pirms %s',
            s: relativeSeconds,
            ss: relativeTimeWithPlural,
            m: relativeTimeWithSingular,
            mm: relativeTimeWithPlural,
            h: relativeTimeWithSingular,
            hh: relativeTimeWithPlural,
            d: relativeTimeWithSingular,
            dd: relativeTimeWithPlural,
            M: relativeTimeWithSingular,
            MM: relativeTimeWithPlural,
            y: relativeTimeWithSingular,
            yy: relativeTimeWithPlural,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return lv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/me.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/me.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Montenegrin [me]
//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var translator = {
        words: {
            //Different grammatical cases
            ss: ['sekund', 'sekunda', 'sekundi'],
            m: ['jedan minut', 'jednog minuta'],
            mm: ['minut', 'minuta', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mjesec', 'mjeseca', 'mjeseci'],
            yy: ['godina', 'godine', 'godina'],
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1
                ? wordKey[0]
                : number >= 2 && number <= 4
                ? wordKey[1]
                : wordKey[2];
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return (
                    number +
                    ' ' +
                    translator.correctGrammaticalCase(number, wordKey)
                );
            }
        },
    };

    var me = moment.defineLocale('me', {
        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sjutra u] LT',

            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[juče u] LT',
            lastWeek: function () {
                var lastWeekDays = [
                    '[prošle] [nedjelje] [u] LT',
                    '[prošlog] [ponedjeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srijede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT',
                ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'nekoliko sekundi',
            ss: translator.translate,
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: 'dan',
            dd: translator.translate,
            M: 'mjesec',
            MM: translator.translate,
            y: 'godinu',
            yy: translator.translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return me;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mi.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mi.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maori [mi]
//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var mi = moment.defineLocale('mi', {
        months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split(
            '_'
        ),
        monthsShort:
            'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split(
                '_'
            ),
        monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
        weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
        weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
        weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [i] HH:mm',
            LLLL: 'dddd, D MMMM YYYY [i] HH:mm',
        },
        calendar: {
            sameDay: '[i teie mahana, i] LT',
            nextDay: '[apopo i] LT',
            nextWeek: 'dddd [i] LT',
            lastDay: '[inanahi i] LT',
            lastWeek: 'dddd [whakamutunga i] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'i roto i %s',
            past: '%s i mua',
            s: 'te hēkona ruarua',
            ss: '%d hēkona',
            m: 'he meneti',
            mm: '%d meneti',
            h: 'te haora',
            hh: '%d haora',
            d: 'he ra',
            dd: '%d ra',
            M: 'he marama',
            MM: '%d marama',
            y: 'he tau',
            yy: '%d tau',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return mi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mk.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mk.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Macedonian [mk]
//! author : Borislav Mickov : https://github.com/B0k0
//! author : Sashko Todorov : https://github.com/bkyceh

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var mk = moment.defineLocale('mk', {
        months: 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split(
            '_'
        ),
        monthsShort: 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
        weekdays: 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split(
            '_'
        ),
        weekdaysShort: 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
        weekdaysMin: 'нe_пo_вт_ср_че_пе_сa'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[Денес во] LT',
            nextDay: '[Утре во] LT',
            nextWeek: '[Во] dddd [во] LT',
            lastDay: '[Вчера во] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[Изминатата] dddd [во] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[Изминатиот] dddd [во] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'за %s',
            past: 'пред %s',
            s: 'неколку секунди',
            ss: '%d секунди',
            m: 'една минута',
            mm: '%d минути',
            h: 'еден час',
            hh: '%d часа',
            d: 'еден ден',
            dd: '%d дена',
            M: 'еден месец',
            MM: '%d месеци',
            y: 'една година',
            yy: '%d години',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal: function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return mk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ml.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ml.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malayalam [ml]
//! author : Floyd Pink : https://github.com/floydpink

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ml = moment.defineLocale('ml', {
        months: 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split(
            '_'
        ),
        monthsShort:
            'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split(
                '_'
            ),
        weekdaysShort: 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
        weekdaysMin: 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm -നു',
            LTS: 'A h:mm:ss -നു',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm -നു',
            LLLL: 'dddd, D MMMM YYYY, A h:mm -നു',
        },
        calendar: {
            sameDay: '[ഇന്ന്] LT',
            nextDay: '[നാളെ] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ഇന്നലെ] LT',
            lastWeek: '[കഴിഞ്ഞ] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s കഴിഞ്ഞ്',
            past: '%s മുൻപ്',
            s: 'അൽപ നിമിഷങ്ങൾ',
            ss: '%d സെക്കൻഡ്',
            m: 'ഒരു മിനിറ്റ്',
            mm: '%d മിനിറ്റ്',
            h: 'ഒരു മണിക്കൂർ',
            hh: '%d മണിക്കൂർ',
            d: 'ഒരു ദിവസം',
            dd: '%d ദിവസം',
            M: 'ഒരു മാസം',
            MM: '%d മാസം',
            y: 'ഒരു വർഷം',
            yy: '%d വർഷം',
        },
        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                (meridiem === 'രാത്രി' && hour >= 4) ||
                meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
                meridiem === 'വൈകുന്നേരം'
            ) {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'രാത്രി';
            } else if (hour < 12) {
                return 'രാവിലെ';
            } else if (hour < 17) {
                return 'ഉച്ച കഴിഞ്ഞ്';
            } else if (hour < 20) {
                return 'വൈകുന്നേരം';
            } else {
                return 'രാത്രി';
            }
        },
    });

    return ml;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mn.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mn.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Mongolian [mn]
//! author : Javkhlantugs Nyamdorj : https://github.com/javkhaanj7

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function translate(number, withoutSuffix, key, isFuture) {
        switch (key) {
            case 's':
                return withoutSuffix ? 'хэдхэн секунд' : 'хэдхэн секундын';
            case 'ss':
                return number + (withoutSuffix ? ' секунд' : ' секундын');
            case 'm':
            case 'mm':
                return number + (withoutSuffix ? ' минут' : ' минутын');
            case 'h':
            case 'hh':
                return number + (withoutSuffix ? ' цаг' : ' цагийн');
            case 'd':
            case 'dd':
                return number + (withoutSuffix ? ' өдөр' : ' өдрийн');
            case 'M':
            case 'MM':
                return number + (withoutSuffix ? ' сар' : ' сарын');
            case 'y':
            case 'yy':
                return number + (withoutSuffix ? ' жил' : ' жилийн');
            default:
                return number;
        }
    }

    var mn = moment.defineLocale('mn', {
        months: 'Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар'.split(
            '_'
        ),
        monthsShort:
            '1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба'.split('_'),
        weekdaysShort: 'Ням_Дав_Мяг_Лха_Пүр_Баа_Бям'.split('_'),
        weekdaysMin: 'Ня_Да_Мя_Лх_Пү_Ба_Бя'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY оны MMMMын D',
            LLL: 'YYYY оны MMMMын D HH:mm',
            LLLL: 'dddd, YYYY оны MMMMын D HH:mm',
        },
        meridiemParse: /ҮӨ|ҮХ/i,
        isPM: function (input) {
            return input === 'ҮХ';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ҮӨ';
            } else {
                return 'ҮХ';
            }
        },
        calendar: {
            sameDay: '[Өнөөдөр] LT',
            nextDay: '[Маргааш] LT',
            nextWeek: '[Ирэх] dddd LT',
            lastDay: '[Өчигдөр] LT',
            lastWeek: '[Өнгөрсөн] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s дараа',
            past: '%s өмнө',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2} өдөр/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + ' өдөр';
                default:
                    return number;
            }
        },
    });

    return mn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mr.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Marathi [mr]
//! author : Harshad Kale : https://github.com/kalehv
//! author : Vivek Athalye : https://github.com/vnathalye

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '१',
            2: '२',
            3: '३',
            4: '४',
            5: '५',
            6: '६',
            7: '७',
            8: '८',
            9: '९',
            0: '०',
        },
        numberMap = {
            '१': '1',
            '२': '2',
            '३': '3',
            '४': '4',
            '५': '5',
            '६': '6',
            '७': '7',
            '८': '8',
            '९': '9',
            '०': '0',
        };

    function relativeTimeMr(number, withoutSuffix, string, isFuture) {
        var output = '';
        if (withoutSuffix) {
            switch (string) {
                case 's':
                    output = 'काही सेकंद';
                    break;
                case 'ss':
                    output = '%d सेकंद';
                    break;
                case 'm':
                    output = 'एक मिनिट';
                    break;
                case 'mm':
                    output = '%d मिनिटे';
                    break;
                case 'h':
                    output = 'एक तास';
                    break;
                case 'hh':
                    output = '%d तास';
                    break;
                case 'd':
                    output = 'एक दिवस';
                    break;
                case 'dd':
                    output = '%d दिवस';
                    break;
                case 'M':
                    output = 'एक महिना';
                    break;
                case 'MM':
                    output = '%d महिने';
                    break;
                case 'y':
                    output = 'एक वर्ष';
                    break;
                case 'yy':
                    output = '%d वर्षे';
                    break;
            }
        } else {
            switch (string) {
                case 's':
                    output = 'काही सेकंदां';
                    break;
                case 'ss':
                    output = '%d सेकंदां';
                    break;
                case 'm':
                    output = 'एका मिनिटा';
                    break;
                case 'mm':
                    output = '%d मिनिटां';
                    break;
                case 'h':
                    output = 'एका तासा';
                    break;
                case 'hh':
                    output = '%d तासां';
                    break;
                case 'd':
                    output = 'एका दिवसा';
                    break;
                case 'dd':
                    output = '%d दिवसां';
                    break;
                case 'M':
                    output = 'एका महिन्या';
                    break;
                case 'MM':
                    output = '%d महिन्यां';
                    break;
                case 'y':
                    output = 'एका वर्षा';
                    break;
                case 'yy':
                    output = '%d वर्षां';
                    break;
            }
        }
        return output.replace(/%d/i, number);
    }

    var mr = moment.defineLocale('mr', {
        months: 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split(
            '_'
        ),
        monthsShort:
            'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort: 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat: {
            LT: 'A h:mm वाजता',
            LTS: 'A h:mm:ss वाजता',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm वाजता',
            LLLL: 'dddd, D MMMM YYYY, A h:mm वाजता',
        },
        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[उद्या] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[काल] LT',
            lastWeek: '[मागील] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sमध्ये',
            past: '%sपूर्वी',
            s: relativeTimeMr,
            ss: relativeTimeMr,
            m: relativeTimeMr,
            mm: relativeTimeMr,
            h: relativeTimeMr,
            hh: relativeTimeMr,
            d: relativeTimeMr,
            dd: relativeTimeMr,
            M: relativeTimeMr,
            MM: relativeTimeMr,
            y: relativeTimeMr,
            yy: relativeTimeMr,
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'पहाटे' || meridiem === 'सकाळी') {
                return hour;
            } else if (
                meridiem === 'दुपारी' ||
                meridiem === 'सायंकाळी' ||
                meridiem === 'रात्री'
            ) {
                return hour >= 12 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour >= 0 && hour < 6) {
                return 'पहाटे';
            } else if (hour < 12) {
                return 'सकाळी';
            } else if (hour < 17) {
                return 'दुपारी';
            } else if (hour < 20) {
                return 'सायंकाळी';
            } else {
                return 'रात्री';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return mr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ms-my.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ms-my.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malay [ms-my]
//! note : DEPRECATED, the correct one is [ms]
//! author : Weldan Jamili : https://github.com/weldan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var msMy = moment.defineLocale('ms-my', {
        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            ss: '%d saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return msMy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ms.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ms.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malay [ms]
//! author : Weldan Jamili : https://github.com/weldan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ms = moment.defineLocale('ms', {
        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            ss: '%d saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return ms;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mt.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mt.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maltese (Malta) [mt]
//! author : Alessandro Maruccia : https://github.com/alesma

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var mt = moment.defineLocale('mt', {
        months: 'Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru'.split(
            '_'
        ),
        monthsShort: 'Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ'.split('_'),
        weekdays:
            'Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt'.split(
                '_'
            ),
        weekdaysShort: 'Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib'.split('_'),
        weekdaysMin: 'Ħa_Tn_Tl_Er_Ħa_Ġi_Si'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Illum fil-]LT',
            nextDay: '[Għada fil-]LT',
            nextWeek: 'dddd [fil-]LT',
            lastDay: '[Il-bieraħ fil-]LT',
            lastWeek: 'dddd [li għadda] [fil-]LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'f’ %s',
            past: '%s ilu',
            s: 'ftit sekondi',
            ss: '%d sekondi',
            m: 'minuta',
            mm: '%d minuti',
            h: 'siegħa',
            hh: '%d siegħat',
            d: 'ġurnata',
            dd: '%d ġranet',
            M: 'xahar',
            MM: '%d xhur',
            y: 'sena',
            yy: '%d sni',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return mt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/my.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/my.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Burmese [my]
//! author : Squar team, mysquar.com
//! author : David Rossellat : https://github.com/gholadr
//! author : Tin Aung Lin : https://github.com/thanyawzinmin

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '၁',
            2: '၂',
            3: '၃',
            4: '၄',
            5: '၅',
            6: '၆',
            7: '၇',
            8: '၈',
            9: '၉',
            0: '၀',
        },
        numberMap = {
            '၁': '1',
            '၂': '2',
            '၃': '3',
            '၄': '4',
            '၅': '5',
            '၆': '6',
            '၇': '7',
            '၈': '8',
            '၉': '9',
            '၀': '0',
        };

    var my = moment.defineLocale('my', {
        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split(
            '_'
        ),
        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split(
            '_'
        ),
        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[ယနေ.] LT [မှာ]',
            nextDay: '[မနက်ဖြန်] LT [မှာ]',
            nextWeek: 'dddd LT [မှာ]',
            lastDay: '[မနေ.က] LT [မှာ]',
            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'လာမည့် %s မှာ',
            past: 'လွန်ခဲ့သော %s က',
            s: 'စက္ကန်.အနည်းငယ်',
            ss: '%d စက္ကန့်',
            m: 'တစ်မိနစ်',
            mm: '%d မိနစ်',
            h: 'တစ်နာရီ',
            hh: '%d နာရီ',
            d: 'တစ်ရက်',
            dd: '%d ရက်',
            M: 'တစ်လ',
            MM: '%d လ',
            y: 'တစ်နှစ်',
            yy: '%d နှစ်',
        },
        preparse: function (string) {
            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return my;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nb.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/nb.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Norwegian Bokmål [nb]
//! authors : Espen Hovlandsdal : https://github.com/rexxars
//!           Sigurd Gartmann : https://github.com/sigurdga
//!           Stephen Ramthun : https://github.com/stephenramthun

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var nb = moment.defineLocale('nb', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
        monthsParseExact: true,
        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort: 'sø._ma._ti._on._to._fr._lø.'.split('_'),
        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] HH:mm',
            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm',
        },
        calendar: {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[forrige] dddd [kl.] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: '%s siden',
            s: 'noen sekunder',
            ss: '%d sekunder',
            m: 'ett minutt',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dager',
            w: 'en uke',
            ww: '%d uker',
            M: 'en måned',
            MM: '%d måneder',
            y: 'ett år',
            yy: '%d år',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nb;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ne.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ne.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Nepalese [ne]
//! author : suvash : https://github.com/suvash

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '१',
            2: '२',
            3: '३',
            4: '४',
            5: '५',
            6: '६',
            7: '७',
            8: '८',
            9: '९',
            0: '०',
        },
        numberMap = {
            '१': '1',
            '२': '2',
            '३': '3',
            '४': '4',
            '५': '5',
            '६': '6',
            '७': '7',
            '८': '8',
            '९': '9',
            '०': '0',
        };

    var ne = moment.defineLocale('ne', {
        months: 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split(
            '_'
        ),
        monthsShort:
            'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split(
            '_'
        ),
        weekdaysShort: 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
        weekdaysMin: 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'Aको h:mm बजे',
            LTS: 'Aको h:mm:ss बजे',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, Aको h:mm बजे',
            LLLL: 'dddd, D MMMM YYYY, Aको h:mm बजे',
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'राति') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'बिहान') {
                return hour;
            } else if (meridiem === 'दिउँसो') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'साँझ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 3) {
                return 'राति';
            } else if (hour < 12) {
                return 'बिहान';
            } else if (hour < 16) {
                return 'दिउँसो';
            } else if (hour < 20) {
                return 'साँझ';
            } else {
                return 'राति';
            }
        },
        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[भोलि] LT',
            nextWeek: '[आउँदो] dddd[,] LT',
            lastDay: '[हिजो] LT',
            lastWeek: '[गएको] dddd[,] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sमा',
            past: '%s अगाडि',
            s: 'केही क्षण',
            ss: '%d सेकेण्ड',
            m: 'एक मिनेट',
            mm: '%d मिनेट',
            h: 'एक घण्टा',
            hh: '%d घण्टा',
            d: 'एक दिन',
            dd: '%d दिन',
            M: 'एक महिना',
            MM: '%d महिना',
            y: 'एक बर्ष',
            yy: '%d बर्ष',
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return ne;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nl-be.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/nl-be.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Dutch (Belgium) [nl-be]
//! author : Joris Röling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortWithDots =
            'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        monthsShortWithoutDots =
            'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        monthsParse = [
            /^jan/i,
            /^feb/i,
            /^maart|mrt.?$/i,
            /^apr/i,
            /^mei$/i,
            /^jun[i.]?$/i,
            /^jul[i.]?$/i,
            /^aug/i,
            /^sep/i,
            /^okt/i,
            /^nov/i,
            /^dec/i,
        ],
        monthsRegex =
            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nlBe = moment.defineLocale('nl-be', {
        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex:
            /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        weekdays:
            'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'over %s',
            past: '%s geleden',
            s: 'een paar seconden',
            ss: '%d seconden',
            m: 'één minuut',
            mm: '%d minuten',
            h: 'één uur',
            hh: '%d uur',
            d: 'één dag',
            dd: '%d dagen',
            M: 'één maand',
            MM: '%d maanden',
            y: 'één jaar',
            yy: '%d jaar',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            );
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nlBe;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nl.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/nl.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Dutch [nl]
//! author : Joris Röling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortWithDots =
            'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        monthsShortWithoutDots =
            'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        monthsParse = [
            /^jan/i,
            /^feb/i,
            /^maart|mrt.?$/i,
            /^apr/i,
            /^mei$/i,
            /^jun[i.]?$/i,
            /^jul[i.]?$/i,
            /^aug/i,
            /^sep/i,
            /^okt/i,
            /^nov/i,
            /^dec/i,
        ],
        monthsRegex =
            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nl = moment.defineLocale('nl', {
        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex:
            /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        weekdays:
            'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'over %s',
            past: '%s geleden',
            s: 'een paar seconden',
            ss: '%d seconden',
            m: 'één minuut',
            mm: '%d minuten',
            h: 'één uur',
            hh: '%d uur',
            d: 'één dag',
            dd: '%d dagen',
            w: 'één week',
            ww: '%d weken',
            M: 'één maand',
            MM: '%d maanden',
            y: 'één jaar',
            yy: '%d jaar',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            );
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nn.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/nn.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Nynorsk [nn]
//! authors : https://github.com/mechuwind
//!           Stephen Ramthun : https://github.com/stephenramthun

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var nn = moment.defineLocale('nn', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
        monthsParseExact: true,
        weekdays: 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
        weekdaysShort: 'su._må._ty._on._to._fr._lau.'.split('_'),
        weekdaysMin: 'su_må_ty_on_to_fr_la'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] H:mm',
            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm',
        },
        calendar: {
            sameDay: '[I dag klokka] LT',
            nextDay: '[I morgon klokka] LT',
            nextWeek: 'dddd [klokka] LT',
            lastDay: '[I går klokka] LT',
            lastWeek: '[Føregåande] dddd [klokka] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: '%s sidan',
            s: 'nokre sekund',
            ss: '%d sekund',
            m: 'eit minutt',
            mm: '%d minutt',
            h: 'ein time',
            hh: '%d timar',
            d: 'ein dag',
            dd: '%d dagar',
            w: 'ei veke',
            ww: '%d veker',
            M: 'ein månad',
            MM: '%d månader',
            y: 'eit år',
            yy: '%d år',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/oc-lnc.js":
/*!**********************************************!*\
  !*** ./node_modules/moment/locale/oc-lnc.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Occitan, lengadocian dialecte [oc-lnc]
//! author : Quentin PAGÈS : https://github.com/Quenty31

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ocLnc = moment.defineLocale('oc-lnc', {
        months: {
            standalone:
                'genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre'.split(
                    '_'
                ),
            format: "de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split(
                '_'
            ),
            isFormat: /D[oD]?(\s)+MMMM/,
        },
        monthsShort:
            'gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte'.split(
            '_'
        ),
        weekdaysShort: 'dg._dl._dm._dc._dj._dv._ds.'.split('_'),
        weekdaysMin: 'dg_dl_dm_dc_dj_dv_ds'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [de] YYYY',
            ll: 'D MMM YYYY',
            LLL: 'D MMMM [de] YYYY [a] H:mm',
            lll: 'D MMM YYYY, H:mm',
            LLLL: 'dddd D MMMM [de] YYYY [a] H:mm',
            llll: 'ddd D MMM YYYY, H:mm',
        },
        calendar: {
            sameDay: '[uèi a] LT',
            nextDay: '[deman a] LT',
            nextWeek: 'dddd [a] LT',
            lastDay: '[ièr a] LT',
            lastWeek: 'dddd [passat a] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: "d'aquí %s",
            past: 'fa %s',
            s: 'unas segondas',
            ss: '%d segondas',
            m: 'una minuta',
            mm: '%d minutas',
            h: 'una ora',
            hh: '%d oras',
            d: 'un jorn',
            dd: '%d jorns',
            M: 'un mes',
            MM: '%d meses',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
        ordinal: function (number, period) {
            var output =
                number === 1
                    ? 'r'
                    : number === 2
                    ? 'n'
                    : number === 3
                    ? 'r'
                    : number === 4
                    ? 't'
                    : 'è';
            if (period === 'w' || period === 'W') {
                output = 'a';
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4,
        },
    });

    return ocLnc;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pa-in.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/pa-in.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Punjabi (India) [pa-in]
//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '੧',
            2: '੨',
            3: '੩',
            4: '੪',
            5: '੫',
            6: '੬',
            7: '੭',
            8: '੮',
            9: '੯',
            0: '੦',
        },
        numberMap = {
            '੧': '1',
            '੨': '2',
            '੩': '3',
            '੪': '4',
            '੫': '5',
            '੬': '6',
            '੭': '7',
            '੮': '8',
            '੯': '9',
            '੦': '0',
        };

    var paIn = moment.defineLocale('pa-in', {
        // There are months name as per Nanakshahi Calendar but they are not used as rigidly in modern Punjabi.
        months: 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split(
            '_'
        ),
        monthsShort:
            'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split(
                '_'
            ),
        weekdays: 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split(
            '_'
        ),
        weekdaysShort: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
        weekdaysMin: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm ਵਜੇ',
            LTS: 'A h:mm:ss ਵਜੇ',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm ਵਜੇ',
            LLLL: 'dddd, D MMMM YYYY, A h:mm ਵਜੇ',
        },
        calendar: {
            sameDay: '[ਅਜ] LT',
            nextDay: '[ਕਲ] LT',
            nextWeek: '[ਅਗਲਾ] dddd, LT',
            lastDay: '[ਕਲ] LT',
            lastWeek: '[ਪਿਛਲੇ] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ਵਿੱਚ',
            past: '%s ਪਿਛਲੇ',
            s: 'ਕੁਝ ਸਕਿੰਟ',
            ss: '%d ਸਕਿੰਟ',
            m: 'ਇਕ ਮਿੰਟ',
            mm: '%d ਮਿੰਟ',
            h: 'ਇੱਕ ਘੰਟਾ',
            hh: '%d ਘੰਟੇ',
            d: 'ਇੱਕ ਦਿਨ',
            dd: '%d ਦਿਨ',
            M: 'ਇੱਕ ਮਹੀਨਾ',
            MM: '%d ਮਹੀਨੇ',
            y: 'ਇੱਕ ਸਾਲ',
            yy: '%d ਸਾਲ',
        },
        preparse: function (string) {
            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ਰਾਤ') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ਸਵੇਰ') {
                return hour;
            } else if (meridiem === 'ਦੁਪਹਿਰ') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'ਸ਼ਾਮ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ਰਾਤ';
            } else if (hour < 10) {
                return 'ਸਵੇਰ';
            } else if (hour < 17) {
                return 'ਦੁਪਹਿਰ';
            } else if (hour < 20) {
                return 'ਸ਼ਾਮ';
            } else {
                return 'ਰਾਤ';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return paIn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pl.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/pl.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Polish [pl]
//! author : Rafal Hirsz : https://github.com/evoL

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsNominative =
            'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split(
                '_'
            ),
        monthsSubjective =
            'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split(
                '_'
            ),
        monthsParse = [
            /^sty/i,
            /^lut/i,
            /^mar/i,
            /^kwi/i,
            /^maj/i,
            /^cze/i,
            /^lip/i,
            /^sie/i,
            /^wrz/i,
            /^paź/i,
            /^lis/i,
            /^gru/i,
        ];
    function plural(n) {
        return n % 10 < 5 && n % 10 > 1 && ~~(n / 10) % 10 !== 1;
    }
    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                return result + (plural(number) ? 'sekundy' : 'sekund');
            case 'm':
                return withoutSuffix ? 'minuta' : 'minutę';
            case 'mm':
                return result + (plural(number) ? 'minuty' : 'minut');
            case 'h':
                return withoutSuffix ? 'godzina' : 'godzinę';
            case 'hh':
                return result + (plural(number) ? 'godziny' : 'godzin');
            case 'ww':
                return result + (plural(number) ? 'tygodnie' : 'tygodni');
            case 'MM':
                return result + (plural(number) ? 'miesiące' : 'miesięcy');
            case 'yy':
                return result + (plural(number) ? 'lata' : 'lat');
        }
    }

    var pl = moment.defineLocale('pl', {
        months: function (momentToFormat, format) {
            if (!momentToFormat) {
                return monthsNominative;
            } else if (/D MMMM/.test(format)) {
                return monthsSubjective[momentToFormat.month()];
            } else {
                return monthsNominative[momentToFormat.month()];
            }
        },
        monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays:
            'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
        weekdaysShort: 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
        weekdaysMin: 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Dziś o] LT',
            nextDay: '[Jutro o] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[W niedzielę o] LT';

                    case 2:
                        return '[We wtorek o] LT';

                    case 3:
                        return '[W środę o] LT';

                    case 6:
                        return '[W sobotę o] LT';

                    default:
                        return '[W] dddd [o] LT';
                }
            },
            lastDay: '[Wczoraj o] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[W zeszłą niedzielę o] LT';
                    case 3:
                        return '[W zeszłą środę o] LT';
                    case 6:
                        return '[W zeszłą sobotę o] LT';
                    default:
                        return '[W zeszły] dddd [o] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: '%s temu',
            s: 'kilka sekund',
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: '1 dzień',
            dd: '%d dni',
            w: 'tydzień',
            ww: translate,
            M: 'miesiąc',
            MM: translate,
            y: 'rok',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return pl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pt-br.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/pt-br.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Portuguese (Brazil) [pt-br]
//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ptBr = moment.defineLocale('pt-br', {
        months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split(
            '_'
        ),
        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
        weekdays:
            'domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado'.split(
                '_'
            ),
        weekdaysShort: 'dom_seg_ter_qua_qui_sex_sáb'.split('_'),
        weekdaysMin: 'do_2ª_3ª_4ª_5ª_6ª_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY [às] HH:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY [às] HH:mm',
        },
        calendar: {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return this.day() === 0 || this.day() === 6
                    ? '[Último] dddd [às] LT' // Saturday + Sunday
                    : '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'em %s',
            past: 'há %s',
            s: 'poucos segundos',
            ss: '%d segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            M: 'um mês',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        invalidDate: 'Data inválida',
    });

    return ptBr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pt.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/pt.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Portuguese [pt]
//! author : Jefferson : https://github.com/jalex79

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var pt = moment.defineLocale('pt', {
        months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split(
            '_'
        ),
        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
        weekdays:
            'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split(
                '_'
            ),
        weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
        weekdaysMin: 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY HH:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return this.day() === 0 || this.day() === 6
                    ? '[Último] dddd [às] LT' // Saturday + Sunday
                    : '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'em %s',
            past: 'há %s',
            s: 'segundos',
            ss: '%d segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            w: 'uma semana',
            ww: '%d semanas',
            M: 'um mês',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return pt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ro.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ro.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Romanian [ro]
//! author : Vlad Gurdiga : https://github.com/gurdiga
//! author : Valentin Agachi : https://github.com/avaly
//! author : Emanuel Cepoi : https://github.com/cepem

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
                ss: 'secunde',
                mm: 'minute',
                hh: 'ore',
                dd: 'zile',
                ww: 'săptămâni',
                MM: 'luni',
                yy: 'ani',
            },
            separator = ' ';
        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
            separator = ' de ';
        }
        return number + separator + format[key];
    }

    var ro = moment.defineLocale('ro', {
        months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split(
            '_'
        ),
        monthsShort:
            'ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
        weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
        weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[azi la] LT',
            nextDay: '[mâine la] LT',
            nextWeek: 'dddd [la] LT',
            lastDay: '[ieri la] LT',
            lastWeek: '[fosta] dddd [la] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'peste %s',
            past: '%s în urmă',
            s: 'câteva secunde',
            ss: relativeTimeWithPlural,
            m: 'un minut',
            mm: relativeTimeWithPlural,
            h: 'o oră',
            hh: relativeTimeWithPlural,
            d: 'o zi',
            dd: relativeTimeWithPlural,
            w: 'o săptămână',
            ww: relativeTimeWithPlural,
            M: 'o lună',
            MM: relativeTimeWithPlural,
            y: 'un an',
            yy: relativeTimeWithPlural,
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return ro;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ru.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ru.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Russian [ru]
//! author : Viktorminator : https://github.com/Viktorminator
//! author : Menelion Elensúle : https://github.com/Oire
//! author : Коренберг Марк : https://github.com/socketpair

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11
            ? forms[0]
            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
            ? forms[1]
            : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
            mm: withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
            hh: 'час_часа_часов',
            dd: 'день_дня_дней',
            ww: 'неделя_недели_недель',
            MM: 'месяц_месяца_месяцев',
            yy: 'год_года_лет',
        };
        if (key === 'm') {
            return withoutSuffix ? 'минута' : 'минуту';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    var monthsParse = [
        /^янв/i,
        /^фев/i,
        /^мар/i,
        /^апр/i,
        /^ма[йя]/i,
        /^июн/i,
        /^июл/i,
        /^авг/i,
        /^сен/i,
        /^окт/i,
        /^ноя/i,
        /^дек/i,
    ];

    // http://new.gramota.ru/spravka/rules/139-prop : § 103
    // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
    var ru = moment.defineLocale('ru', {
        months: {
            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split(
                '_'
            ),
            standalone:
                'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split(
                    '_'
                ),
        },
        monthsShort: {
            // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку?
            format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split(
                '_'
            ),
            standalone:
                'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split(
                    '_'
                ),
        },
        weekdays: {
            standalone:
                'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split(
                    '_'
                ),
            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split(
                '_'
            ),
            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/,
        },
        weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
        monthsRegex:
            /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

        // копия предыдущего
        monthsShortRegex:
            /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

        // полные названия с падежами
        monthsStrictRegex:
            /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

        // Выражение, которое соответствует только сокращённым формам
        monthsShortStrictRegex:
            /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY г.',
            LLL: 'D MMMM YYYY г., H:mm',
            LLLL: 'dddd, D MMMM YYYY г., H:mm',
        },
        calendar: {
            sameDay: '[Сегодня, в] LT',
            nextDay: '[Завтра, в] LT',
            lastDay: '[Вчера, в] LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В следующее] dddd, [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В следующий] dddd, [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В следующую] dddd, [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd, [в] LT';
                    } else {
                        return '[В] dddd, [в] LT';
                    }
                }
            },
            lastWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В прошлое] dddd, [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В прошлый] dddd, [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В прошлую] dddd, [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd, [в] LT';
                    } else {
                        return '[В] dddd, [в] LT';
                    }
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'через %s',
            past: '%s назад',
            s: 'несколько секунд',
            ss: relativeTimeWithPlural,
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: 'час',
            hh: relativeTimeWithPlural,
            d: 'день',
            dd: relativeTimeWithPlural,
            w: 'неделя',
            ww: relativeTimeWithPlural,
            M: 'месяц',
            MM: relativeTimeWithPlural,
            y: 'год',
            yy: relativeTimeWithPlural,
        },
        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM: function (input) {
            return /^(дня|вечера)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночи';
            } else if (hour < 12) {
                return 'утра';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечера';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                case 'w':
                case 'W':
                    return number + '-я';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ru;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sd.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sd.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Sindhi [sd]
//! author : Narain Sagar : https://github.com/narainsagar

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'جنوري',
            'فيبروري',
            'مارچ',
            'اپريل',
            'مئي',
            'جون',
            'جولاءِ',
            'آگسٽ',
            'سيپٽمبر',
            'آڪٽوبر',
            'نومبر',
            'ڊسمبر',
        ],
        days = ['آچر', 'سومر', 'اڱارو', 'اربع', 'خميس', 'جمع', 'ڇنڇر'];

    var sd = moment.defineLocale('sd', {
        months: months,
        monthsShort: months,
        weekdays: days,
        weekdaysShort: days,
        weekdaysMin: days,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd، D MMMM YYYY HH:mm',
        },
        meridiemParse: /صبح|شام/,
        isPM: function (input) {
            return 'شام' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'صبح';
            }
            return 'شام';
        },
        calendar: {
            sameDay: '[اڄ] LT',
            nextDay: '[سڀاڻي] LT',
            nextWeek: 'dddd [اڳين هفتي تي] LT',
            lastDay: '[ڪالهه] LT',
            lastWeek: '[گزريل هفتي] dddd [تي] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s پوء',
            past: '%s اڳ',
            s: 'چند سيڪنڊ',
            ss: '%d سيڪنڊ',
            m: 'هڪ منٽ',
            mm: '%d منٽ',
            h: 'هڪ ڪلاڪ',
            hh: '%d ڪلاڪ',
            d: 'هڪ ڏينهن',
            dd: '%d ڏينهن',
            M: 'هڪ مهينو',
            MM: '%d مهينا',
            y: 'هڪ سال',
            yy: '%d سال',
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sd;

})));


/***/ }),

/***/ "./node_modules/moment/locale/se.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/se.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Northern Sami [se]
//! authors : Bård Rolstad Henriksen : https://github.com/karamell

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var se = moment.defineLocale('se', {
        months: 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split(
            '_'
        ),
        monthsShort:
            'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
        weekdays:
            'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split(
                '_'
            ),
        weekdaysShort: 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
        weekdaysMin: 's_v_m_g_d_b_L'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'MMMM D. [b.] YYYY',
            LLL: 'MMMM D. [b.] YYYY [ti.] HH:mm',
            LLLL: 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm',
        },
        calendar: {
            sameDay: '[otne ti] LT',
            nextDay: '[ihttin ti] LT',
            nextWeek: 'dddd [ti] LT',
            lastDay: '[ikte ti] LT',
            lastWeek: '[ovddit] dddd [ti] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s geažes',
            past: 'maŋit %s',
            s: 'moadde sekunddat',
            ss: '%d sekunddat',
            m: 'okta minuhta',
            mm: '%d minuhtat',
            h: 'okta diimmu',
            hh: '%d diimmut',
            d: 'okta beaivi',
            dd: '%d beaivvit',
            M: 'okta mánnu',
            MM: '%d mánut',
            y: 'okta jahki',
            yy: '%d jagit',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return se;

})));


/***/ }),

/***/ "./node_modules/moment/locale/si.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/si.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Sinhalese [si]
//! author : Sampath Sitinamaluwa : https://github.com/sampathsris

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    /*jshint -W100*/
    var si = moment.defineLocale('si', {
        months: 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split(
            '_'
        ),
        monthsShort: 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split(
            '_'
        ),
        weekdays:
            'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split(
                '_'
            ),
        weekdaysShort: 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
        weekdaysMin: 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'a h:mm',
            LTS: 'a h:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY MMMM D',
            LLL: 'YYYY MMMM D, a h:mm',
            LLLL: 'YYYY MMMM D [වැනි] dddd, a h:mm:ss',
        },
        calendar: {
            sameDay: '[අද] LT[ට]',
            nextDay: '[හෙට] LT[ට]',
            nextWeek: 'dddd LT[ට]',
            lastDay: '[ඊයේ] LT[ට]',
            lastWeek: '[පසුගිය] dddd LT[ට]',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sකින්',
            past: '%sකට පෙර',
            s: 'තත්පර කිහිපය',
            ss: 'තත්පර %d',
            m: 'මිනිත්තුව',
            mm: 'මිනිත්තු %d',
            h: 'පැය',
            hh: 'පැය %d',
            d: 'දිනය',
            dd: 'දින %d',
            M: 'මාසය',
            MM: 'මාස %d',
            y: 'වසර',
            yy: 'වසර %d',
        },
        dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
        ordinal: function (number) {
            return number + ' වැනි';
        },
        meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
        isPM: function (input) {
            return input === 'ප.ව.' || input === 'පස් වරු';
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'ප.ව.' : 'පස් වරු';
            } else {
                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
            }
        },
    });

    return si;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sk.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sk.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Slovak [sk]
//! author : Martin Minka : https://github.com/k2s
//! based on work of petrbela : https://github.com/petrbela

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months =
            'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split(
                '_'
            ),
        monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
    function plural(n) {
        return n > 1 && n < 5;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's': // a few seconds / in a few seconds / a few seconds ago
                return withoutSuffix || isFuture ? 'pár sekúnd' : 'pár sekundami';
            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'sekundy' : 'sekúnd');
                } else {
                    return result + 'sekundami';
                }
            case 'm': // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minúta' : isFuture ? 'minútu' : 'minútou';
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'minúty' : 'minút');
                } else {
                    return result + 'minútami';
                }
            case 'h': // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'hodiny' : 'hodín');
                } else {
                    return result + 'hodinami';
                }
            case 'd': // a day / in a day / a day ago
                return withoutSuffix || isFuture ? 'deň' : 'dňom';
            case 'dd': // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'dni' : 'dní');
                } else {
                    return result + 'dňami';
                }
            case 'M': // a month / in a month / a month ago
                return withoutSuffix || isFuture ? 'mesiac' : 'mesiacom';
            case 'MM': // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'mesiace' : 'mesiacov');
                } else {
                    return result + 'mesiacmi';
                }
            case 'y': // a year / in a year / a year ago
                return withoutSuffix || isFuture ? 'rok' : 'rokom';
            case 'yy': // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'roky' : 'rokov');
                } else {
                    return result + 'rokmi';
                }
        }
    }

    var sk = moment.defineLocale('sk', {
        months: months,
        monthsShort: monthsShort,
        weekdays: 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
        weekdaysShort: 'ne_po_ut_st_št_pi_so'.split('_'),
        weekdaysMin: 'ne_po_ut_st_št_pi_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[dnes o] LT',
            nextDay: '[zajtra o] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [o] LT';
                    case 3:
                        return '[v stredu o] LT';
                    case 4:
                        return '[vo štvrtok o] LT';
                    case 5:
                        return '[v piatok o] LT';
                    case 6:
                        return '[v sobotu o] LT';
                }
            },
            lastDay: '[včera o] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[minulú nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[minulý] dddd [o] LT';
                    case 3:
                        return '[minulú stredu o] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [o] LT';
                    case 6:
                        return '[minulú sobotu o] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'pred %s',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sl.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sl.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Slovenian [sl]
//! author : Robert Sedovšek : https://github.com/sedovsek

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture
                    ? 'nekaj sekund'
                    : 'nekaj sekundami';
            case 'ss':
                if (number === 1) {
                    result += withoutSuffix ? 'sekundo' : 'sekundi';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'sekundi' : 'sekundah';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'sekunde' : 'sekundah';
                } else {
                    result += 'sekund';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'ena minuta' : 'eno minuto';
            case 'mm':
                if (number === 1) {
                    result += withoutSuffix ? 'minuta' : 'minuto';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'minute' : 'minutami';
                } else {
                    result += withoutSuffix || isFuture ? 'minut' : 'minutami';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'ena ura' : 'eno uro';
            case 'hh':
                if (number === 1) {
                    result += withoutSuffix ? 'ura' : 'uro';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'uri' : 'urama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'ure' : 'urami';
                } else {
                    result += withoutSuffix || isFuture ? 'ur' : 'urami';
                }
                return result;
            case 'd':
                return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
            case 'dd':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'dan' : 'dnem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
                } else {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
                }
                return result;
            case 'M':
                return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
            case 'MM':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
                } else {
                    result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
                }
                return result;
            case 'y':
                return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
            case 'yy':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'leto' : 'letom';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'leti' : 'letoma';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'leta' : 'leti';
                } else {
                    result += withoutSuffix || isFuture ? 'let' : 'leti';
                }
                return result;
        }
    }

    var sl = moment.defineLocale('sl', {
        months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
        weekdaysShort: 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
        weekdaysMin: 'ne_po_to_sr_če_pe_so'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danes ob] LT',
            nextDay: '[jutri ob] LT',

            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v] [nedeljo] [ob] LT';
                    case 3:
                        return '[v] [sredo] [ob] LT';
                    case 6:
                        return '[v] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[v] dddd [ob] LT';
                }
            },
            lastDay: '[včeraj ob] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[prejšnjo] [nedeljo] [ob] LT';
                    case 3:
                        return '[prejšnjo] [sredo] [ob] LT';
                    case 6:
                        return '[prejšnjo] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prejšnji] dddd [ob] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'čez %s',
            past: 'pred %s',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return sl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sq.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sq.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Albanian [sq]
//! author : Flakërim Ismani : https://github.com/flakerimi
//! author : Menelion Elensúle : https://github.com/Oire
//! author : Oerd Cukalla : https://github.com/oerd

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var sq = moment.defineLocale('sq', {
        months: 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split(
            '_'
        ),
        monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
        weekdays: 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split(
            '_'
        ),
        weekdaysShort: 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
        weekdaysMin: 'D_H_Ma_Më_E_P_Sh'.split('_'),
        weekdaysParseExact: true,
        meridiemParse: /PD|MD/,
        isPM: function (input) {
            return input.charAt(0) === 'M';
        },
        meridiem: function (hours, minutes, isLower) {
            return hours < 12 ? 'PD' : 'MD';
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Sot në] LT',
            nextDay: '[Nesër në] LT',
            nextWeek: 'dddd [në] LT',
            lastDay: '[Dje në] LT',
            lastWeek: 'dddd [e kaluar në] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'në %s',
            past: '%s më parë',
            s: 'disa sekonda',
            ss: '%d sekonda',
            m: 'një minutë',
            mm: '%d minuta',
            h: 'një orë',
            hh: '%d orë',
            d: 'një ditë',
            dd: '%d ditë',
            M: 'një muaj',
            MM: '%d muaj',
            y: 'një vit',
            yy: '%d vite',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sq;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sr-cyrl.js":
/*!***********************************************!*\
  !*** ./node_modules/moment/locale/sr-cyrl.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Serbian Cyrillic [sr-cyrl]
//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
//! author : Stefan Crnjaković <stefan@hotmail.rs> : https://github.com/crnjakovic

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var translator = {
        words: {
            //Different grammatical cases
            ss: ['секунда', 'секунде', 'секунди'],
            m: ['један минут', 'једног минута'],
            mm: ['минут', 'минута', 'минута'],
            h: ['један сат', 'једног сата'],
            hh: ['сат', 'сата', 'сати'],
            d: ['један дан', 'једног дана'],
            dd: ['дан', 'дана', 'дана'],
            M: ['један месец', 'једног месеца'],
            MM: ['месец', 'месеца', 'месеци'],
            y: ['једну годину', 'једне године'],
            yy: ['годину', 'године', 'година'],
        },
        correctGrammaticalCase: function (number, wordKey) {
            if (
                number % 10 >= 1 &&
                number % 10 <= 4 &&
                (number % 100 < 10 || number % 100 >= 20)
            ) {
                return number % 10 === 1 ? wordKey[0] : wordKey[1];
            }
            return wordKey[2];
        },
        translate: function (number, withoutSuffix, key, isFuture) {
            var wordKey = translator.words[key],
                word;

            if (key.length === 1) {
                // Nominativ
                if (key === 'y' && withoutSuffix) return 'једна година';
                return isFuture || withoutSuffix ? wordKey[0] : wordKey[1];
            }

            word = translator.correctGrammaticalCase(number, wordKey);
            // Nominativ
            if (key === 'yy' && withoutSuffix && word === 'годину') {
                return number + ' година';
            }

            return number + ' ' + word;
        },
    };

    var srCyrl = moment.defineLocale('sr-cyrl', {
        months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split(
            '_'
        ),
        monthsShort:
            'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
        monthsParseExact: true,
        weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
        weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
        weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D. M. YYYY.',
            LL: 'D. MMMM YYYY.',
            LLL: 'D. MMMM YYYY. H:mm',
            LLLL: 'dddd, D. MMMM YYYY. H:mm',
        },
        calendar: {
            sameDay: '[данас у] LT',
            nextDay: '[сутра у] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[у] [недељу] [у] LT';
                    case 3:
                        return '[у] [среду] [у] LT';
                    case 6:
                        return '[у] [суботу] [у] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[у] dddd [у] LT';
                }
            },
            lastDay: '[јуче у] LT',
            lastWeek: function () {
                var lastWeekDays = [
                    '[прошле] [недеље] [у] LT',
                    '[прошлог] [понедељка] [у] LT',
                    '[прошлог] [уторка] [у] LT',
                    '[прошле] [среде] [у] LT',
                    '[прошлог] [четвртка] [у] LT',
                    '[прошлог] [петка] [у] LT',
                    '[прошле] [суботе] [у] LT',
                ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'за %s',
            past: 'пре %s',
            s: 'неколико секунди',
            ss: translator.translate,
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: translator.translate,
            dd: translator.translate,
            M: translator.translate,
            MM: translator.translate,
            y: translator.translate,
            yy: translator.translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 1st is the first week of the year.
        },
    });

    return srCyrl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sr.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Serbian [sr]
//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
//! author : Stefan Crnjaković <stefan@hotmail.rs> : https://github.com/crnjakovic

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var translator = {
        words: {
            //Different grammatical cases
            ss: ['sekunda', 'sekunde', 'sekundi'],
            m: ['jedan minut', 'jednog minuta'],
            mm: ['minut', 'minuta', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            d: ['jedan dan', 'jednog dana'],
            dd: ['dan', 'dana', 'dana'],
            M: ['jedan mesec', 'jednog meseca'],
            MM: ['mesec', 'meseca', 'meseci'],
            y: ['jednu godinu', 'jedne godine'],
            yy: ['godinu', 'godine', 'godina'],
        },
        correctGrammaticalCase: function (number, wordKey) {
            if (
                number % 10 >= 1 &&
                number % 10 <= 4 &&
                (number % 100 < 10 || number % 100 >= 20)
            ) {
                return number % 10 === 1 ? wordKey[0] : wordKey[1];
            }
            return wordKey[2];
        },
        translate: function (number, withoutSuffix, key, isFuture) {
            var wordKey = translator.words[key],
                word;

            if (key.length === 1) {
                // Nominativ
                if (key === 'y' && withoutSuffix) return 'jedna godina';
                return isFuture || withoutSuffix ? wordKey[0] : wordKey[1];
            }

            word = translator.correctGrammaticalCase(number, wordKey);
            // Nominativ
            if (key === 'yy' && withoutSuffix && word === 'godinu') {
                return number + ' godina';
            }

            return number + ' ' + word;
        },
    };

    var sr = moment.defineLocale('sr', {
        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D. M. YYYY.',
            LL: 'D. MMMM YYYY.',
            LLL: 'D. MMMM YYYY. H:mm',
            LLLL: 'dddd, D. MMMM YYYY. H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedelju] [u] LT';
                    case 3:
                        return '[u] [sredu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[juče u] LT',
            lastWeek: function () {
                var lastWeekDays = [
                    '[prošle] [nedelje] [u] LT',
                    '[prošlog] [ponedeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT',
                ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'pre %s',
            s: 'nekoliko sekundi',
            ss: translator.translate,
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: translator.translate,
            dd: translator.translate,
            M: translator.translate,
            MM: translator.translate,
            y: translator.translate,
            yy: translator.translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return sr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ss.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ss.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : siSwati [ss]
//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ss = moment.defineLocale('ss', {
        months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split(
            '_'
        ),
        monthsShort: 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
        weekdays:
            'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split(
                '_'
            ),
        weekdaysShort: 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
        weekdaysMin: 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Namuhla nga] LT',
            nextDay: '[Kusasa nga] LT',
            nextWeek: 'dddd [nga] LT',
            lastDay: '[Itolo nga] LT',
            lastWeek: 'dddd [leliphelile] [nga] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'nga %s',
            past: 'wenteka nga %s',
            s: 'emizuzwana lomcane',
            ss: '%d mzuzwana',
            m: 'umzuzu',
            mm: '%d emizuzu',
            h: 'lihora',
            hh: '%d emahora',
            d: 'lilanga',
            dd: '%d emalanga',
            M: 'inyanga',
            MM: '%d tinyanga',
            y: 'umnyaka',
            yy: '%d iminyaka',
        },
        meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'ekuseni';
            } else if (hours < 15) {
                return 'emini';
            } else if (hours < 19) {
                return 'entsambama';
            } else {
                return 'ebusuku';
            }
        },
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ekuseni') {
                return hour;
            } else if (meridiem === 'emini') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
                if (hour === 0) {
                    return 0;
                }
                return hour + 12;
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: '%d',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ss;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sv.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Swedish [sv]
//! author : Jens Alm : https://github.com/ulmus

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var sv = moment.defineLocale('sv', {
        months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
        weekdaysShort: 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
        weekdaysMin: 'sö_må_ti_on_to_fr_lö'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [kl.] HH:mm',
            LLLL: 'dddd D MMMM YYYY [kl.] HH:mm',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd D MMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Idag] LT',
            nextDay: '[Imorgon] LT',
            lastDay: '[Igår] LT',
            nextWeek: '[På] dddd LT',
            lastWeek: '[I] dddd[s] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: 'för %s sedan',
            s: 'några sekunder',
            ss: '%d sekunder',
            m: 'en minut',
            mm: '%d minuter',
            h: 'en timme',
            hh: '%d timmar',
            d: 'en dag',
            dd: '%d dagar',
            M: 'en månad',
            MM: '%d månader',
            y: 'ett år',
            yy: '%d år',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(\:e|\:a)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? ':e'
                        : b === 1
                        ? ':a'
                        : b === 2
                        ? ':a'
                        : b === 3
                        ? ':e'
                        : ':e';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sw.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sw.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Swahili [sw]
//! author : Fahad Kassim : https://github.com/fadsel

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var sw = moment.defineLocale('sw', {
        months: 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
        weekdays:
            'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split(
                '_'
            ),
        weekdaysShort: 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
        weekdaysMin: 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'hh:mm A',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[leo saa] LT',
            nextDay: '[kesho saa] LT',
            nextWeek: '[wiki ijayo] dddd [saat] LT',
            lastDay: '[jana] LT',
            lastWeek: '[wiki iliyopita] dddd [saat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s baadaye',
            past: 'tokea %s',
            s: 'hivi punde',
            ss: 'sekunde %d',
            m: 'dakika moja',
            mm: 'dakika %d',
            h: 'saa limoja',
            hh: 'masaa %d',
            d: 'siku moja',
            dd: 'siku %d',
            M: 'mwezi mmoja',
            MM: 'miezi %d',
            y: 'mwaka mmoja',
            yy: 'miaka %d',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return sw;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ta.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ta.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tamil [ta]
//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '௧',
            2: '௨',
            3: '௩',
            4: '௪',
            5: '௫',
            6: '௬',
            7: '௭',
            8: '௮',
            9: '௯',
            0: '௦',
        },
        numberMap = {
            '௧': '1',
            '௨': '2',
            '௩': '3',
            '௪': '4',
            '௫': '5',
            '௬': '6',
            '௭': '7',
            '௮': '8',
            '௯': '9',
            '௦': '0',
        };

    var ta = moment.defineLocale('ta', {
        months: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split(
            '_'
        ),
        monthsShort:
            'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split(
                '_'
            ),
        weekdays:
            'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split(
                '_'
            ),
        weekdaysShort: 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split(
            '_'
        ),
        weekdaysMin: 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, HH:mm',
            LLLL: 'dddd, D MMMM YYYY, HH:mm',
        },
        calendar: {
            sameDay: '[இன்று] LT',
            nextDay: '[நாளை] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[நேற்று] LT',
            lastWeek: '[கடந்த வாரம்] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s இல்',
            past: '%s முன்',
            s: 'ஒரு சில விநாடிகள்',
            ss: '%d விநாடிகள்',
            m: 'ஒரு நிமிடம்',
            mm: '%d நிமிடங்கள்',
            h: 'ஒரு மணி நேரம்',
            hh: '%d மணி நேரம்',
            d: 'ஒரு நாள்',
            dd: '%d நாட்கள்',
            M: 'ஒரு மாதம்',
            MM: '%d மாதங்கள்',
            y: 'ஒரு வருடம்',
            yy: '%d ஆண்டுகள்',
        },
        dayOfMonthOrdinalParse: /\d{1,2}வது/,
        ordinal: function (number) {
            return number + 'வது';
        },
        preparse: function (string) {
            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // refer http://ta.wikipedia.org/s/1er1
        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
        meridiem: function (hour, minute, isLower) {
            if (hour < 2) {
                return ' யாமம்';
            } else if (hour < 6) {
                return ' வைகறை'; // வைகறை
            } else if (hour < 10) {
                return ' காலை'; // காலை
            } else if (hour < 14) {
                return ' நண்பகல்'; // நண்பகல்
            } else if (hour < 18) {
                return ' எற்பாடு'; // எற்பாடு
            } else if (hour < 22) {
                return ' மாலை'; // மாலை
            } else {
                return ' யாமம்';
            }
        },
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'யாமம்') {
                return hour < 2 ? hour : hour + 12;
            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
                return hour;
            } else if (meridiem === 'நண்பகல்') {
                return hour >= 10 ? hour : hour + 12;
            } else {
                return hour + 12;
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return ta;

})));


/***/ }),

/***/ "./node_modules/moment/locale/te.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/te.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Telugu [te]
//! author : Krishna Chaitanya Thota : https://github.com/kcthota

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var te = moment.defineLocale('te', {
        months: 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split(
            '_'
        ),
        monthsShort:
            'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split(
                '_'
            ),
        weekdaysShort: 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
        weekdaysMin: 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm',
        },
        calendar: {
            sameDay: '[నేడు] LT',
            nextDay: '[రేపు] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[నిన్న] LT',
            lastWeek: '[గత] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s లో',
            past: '%s క్రితం',
            s: 'కొన్ని క్షణాలు',
            ss: '%d సెకన్లు',
            m: 'ఒక నిమిషం',
            mm: '%d నిమిషాలు',
            h: 'ఒక గంట',
            hh: '%d గంటలు',
            d: 'ఒక రోజు',
            dd: '%d రోజులు',
            M: 'ఒక నెల',
            MM: '%d నెలలు',
            y: 'ఒక సంవత్సరం',
            yy: '%d సంవత్సరాలు',
        },
        dayOfMonthOrdinalParse: /\d{1,2}వ/,
        ordinal: '%dవ',
        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'రాత్రి') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ఉదయం') {
                return hour;
            } else if (meridiem === 'మధ్యాహ్నం') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'సాయంత్రం') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'రాత్రి';
            } else if (hour < 10) {
                return 'ఉదయం';
            } else if (hour < 17) {
                return 'మధ్యాహ్నం';
            } else if (hour < 20) {
                return 'సాయంత్రం';
            } else {
                return 'రాత్రి';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return te;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tet.js":
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tet.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tetun Dili (East Timor) [tet]
//! author : Joshua Brooks : https://github.com/joshbrooks
//! author : Onorio De J. Afonso : https://github.com/marobo
//! author : Sonia Simoes : https://github.com/soniasimoes

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tet = moment.defineLocale('tet', {
        months: 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru'.split(
            '_'
        ),
        monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
        weekdays: 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu'.split('_'),
        weekdaysShort: 'Dom_Seg_Ters_Kua_Kint_Sest_Sab'.split('_'),
        weekdaysMin: 'Do_Seg_Te_Ku_Ki_Ses_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Ohin iha] LT',
            nextDay: '[Aban iha] LT',
            nextWeek: 'dddd [iha] LT',
            lastDay: '[Horiseik iha] LT',
            lastWeek: 'dddd [semana kotuk] [iha] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'iha %s',
            past: '%s liuba',
            s: 'segundu balun',
            ss: 'segundu %d',
            m: 'minutu ida',
            mm: 'minutu %d',
            h: 'oras ida',
            hh: 'oras %d',
            d: 'loron ida',
            dd: 'loron %d',
            M: 'fulan ida',
            MM: 'fulan %d',
            y: 'tinan ida',
            yy: 'tinan %d',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return tet;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tg.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/tg.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tajik [tg]
//! author : Orif N. Jr. : https://github.com/orif-jr

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        0: '-ум',
        1: '-ум',
        2: '-юм',
        3: '-юм',
        4: '-ум',
        5: '-ум',
        6: '-ум',
        7: '-ум',
        8: '-ум',
        9: '-ум',
        10: '-ум',
        12: '-ум',
        13: '-ум',
        20: '-ум',
        30: '-юм',
        40: '-ум',
        50: '-ум',
        60: '-ум',
        70: '-ум',
        80: '-ум',
        90: '-ум',
        100: '-ум',
    };

    var tg = moment.defineLocale('tg', {
        months: {
            format: 'январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри'.split(
                '_'
            ),
            standalone:
                'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split(
                    '_'
                ),
        },
        monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
        weekdays: 'якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе'.split(
            '_'
        ),
        weekdaysShort: 'яшб_дшб_сшб_чшб_пшб_ҷум_шнб'.split('_'),
        weekdaysMin: 'яш_дш_сш_чш_пш_ҷм_шб'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Имрӯз соати] LT',
            nextDay: '[Фардо соати] LT',
            lastDay: '[Дирӯз соати] LT',
            nextWeek: 'dddd[и] [ҳафтаи оянда соати] LT',
            lastWeek: 'dddd[и] [ҳафтаи гузашта соати] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'баъди %s',
            past: '%s пеш',
            s: 'якчанд сония',
            m: 'як дақиқа',
            mm: '%d дақиқа',
            h: 'як соат',
            hh: '%d соат',
            d: 'як рӯз',
            dd: '%d рӯз',
            M: 'як моҳ',
            MM: '%d моҳ',
            y: 'як сол',
            yy: '%d сол',
        },
        meridiemParse: /шаб|субҳ|рӯз|бегоҳ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'шаб') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'субҳ') {
                return hour;
            } else if (meridiem === 'рӯз') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'бегоҳ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'шаб';
            } else if (hour < 11) {
                return 'субҳ';
            } else if (hour < 16) {
                return 'рӯз';
            } else if (hour < 19) {
                return 'бегоҳ';
            } else {
                return 'шаб';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ум|юм)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 1th is the first week of the year.
        },
    });

    return tg;

})));


/***/ }),

/***/ "./node_modules/moment/locale/th.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/th.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Thai [th]
//! author : Kridsada Thanabulpong : https://github.com/sirn

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var th = moment.defineLocale('th', {
        months: 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split(
            '_'
        ),
        monthsShort:
            'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
        weekdaysShort: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
        weekdaysMin: 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY เวลา H:mm',
            LLLL: 'วันddddที่ D MMMM YYYY เวลา H:mm',
        },
        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
        isPM: function (input) {
            return input === 'หลังเที่ยง';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ก่อนเที่ยง';
            } else {
                return 'หลังเที่ยง';
            }
        },
        calendar: {
            sameDay: '[วันนี้ เวลา] LT',
            nextDay: '[พรุ่งนี้ เวลา] LT',
            nextWeek: 'dddd[หน้า เวลา] LT',
            lastDay: '[เมื่อวานนี้ เวลา] LT',
            lastWeek: '[วัน]dddd[ที่แล้ว เวลา] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'อีก %s',
            past: '%sที่แล้ว',
            s: 'ไม่กี่วินาที',
            ss: '%d วินาที',
            m: '1 นาที',
            mm: '%d นาที',
            h: '1 ชั่วโมง',
            hh: '%d ชั่วโมง',
            d: '1 วัน',
            dd: '%d วัน',
            w: '1 สัปดาห์',
            ww: '%d สัปดาห์',
            M: '1 เดือน',
            MM: '%d เดือน',
            y: '1 ปี',
            yy: '%d ปี',
        },
    });

    return th;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tk.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/tk.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Turkmen [tk]
//! author : Atamyrat Abdyrahmanov : https://github.com/atamyratabdy

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        1: "'inji",
        5: "'inji",
        8: "'inji",
        70: "'inji",
        80: "'inji",
        2: "'nji",
        7: "'nji",
        20: "'nji",
        50: "'nji",
        3: "'ünji",
        4: "'ünji",
        100: "'ünji",
        6: "'njy",
        9: "'unjy",
        10: "'unjy",
        30: "'unjy",
        60: "'ynjy",
        90: "'ynjy",
    };

    var tk = moment.defineLocale('tk', {
        months: 'Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr'.split(
            '_'
        ),
        monthsShort: 'Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek'.split('_'),
        weekdays: 'Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe'.split(
            '_'
        ),
        weekdaysShort: 'Ýek_Duş_Siş_Çar_Pen_Ann_Şen'.split('_'),
        weekdaysMin: 'Ýk_Dş_Sş_Çr_Pn_An_Şn'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[bugün sagat] LT',
            nextDay: '[ertir sagat] LT',
            nextWeek: '[indiki] dddd [sagat] LT',
            lastDay: '[düýn] LT',
            lastWeek: '[geçen] dddd [sagat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s soň',
            past: '%s öň',
            s: 'birnäçe sekunt',
            m: 'bir minut',
            mm: '%d minut',
            h: 'bir sagat',
            hh: '%d sagat',
            d: 'bir gün',
            dd: '%d gün',
            M: 'bir aý',
            MM: '%d aý',
            y: 'bir ýyl',
            yy: '%d ýyl',
        },
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'Do':
                case 'DD':
                    return number;
                default:
                    if (number === 0) {
                        // special case for zero
                        return number + "'unjy";
                    }
                    var a = number % 10,
                        b = (number % 100) - a,
                        c = number >= 100 ? 100 : null;
                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return tk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tl-ph.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/tl-ph.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tagalog (Philippines) [tl-ph]
//! author : Dan Hagman : https://github.com/hagmandan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tlPh = moment.defineLocale('tl-ph', {
        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split(
            '_'
        ),
        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split(
            '_'
        ),
        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'MM/D/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY HH:mm',
            LLLL: 'dddd, MMMM DD, YYYY HH:mm',
        },
        calendar: {
            sameDay: 'LT [ngayong araw]',
            nextDay: '[Bukas ng] LT',
            nextWeek: 'LT [sa susunod na] dddd',
            lastDay: 'LT [kahapon]',
            lastWeek: 'LT [noong nakaraang] dddd',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'sa loob ng %s',
            past: '%s ang nakalipas',
            s: 'ilang segundo',
            ss: '%d segundo',
            m: 'isang minuto',
            mm: '%d minuto',
            h: 'isang oras',
            hh: '%d oras',
            d: 'isang araw',
            dd: '%d araw',
            M: 'isang buwan',
            MM: '%d buwan',
            y: 'isang taon',
            yy: '%d taon',
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return tlPh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tlh.js":
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tlh.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Klingon [tlh]
//! author : Dominika Kruk : https://github.com/amaranthrose

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

    function translateFuture(output) {
        var time = output;
        time =
            output.indexOf('jaj') !== -1
                ? time.slice(0, -3) + 'leS'
                : output.indexOf('jar') !== -1
                ? time.slice(0, -3) + 'waQ'
                : output.indexOf('DIS') !== -1
                ? time.slice(0, -3) + 'nem'
                : time + ' pIq';
        return time;
    }

    function translatePast(output) {
        var time = output;
        time =
            output.indexOf('jaj') !== -1
                ? time.slice(0, -3) + 'Hu’'
                : output.indexOf('jar') !== -1
                ? time.slice(0, -3) + 'wen'
                : output.indexOf('DIS') !== -1
                ? time.slice(0, -3) + 'ben'
                : time + ' ret';
        return time;
    }

    function translate(number, withoutSuffix, string, isFuture) {
        var numberNoun = numberAsNoun(number);
        switch (string) {
            case 'ss':
                return numberNoun + ' lup';
            case 'mm':
                return numberNoun + ' tup';
            case 'hh':
                return numberNoun + ' rep';
            case 'dd':
                return numberNoun + ' jaj';
            case 'MM':
                return numberNoun + ' jar';
            case 'yy':
                return numberNoun + ' DIS';
        }
    }

    function numberAsNoun(number) {
        var hundred = Math.floor((number % 1000) / 100),
            ten = Math.floor((number % 100) / 10),
            one = number % 10,
            word = '';
        if (hundred > 0) {
            word += numbersNouns[hundred] + 'vatlh';
        }
        if (ten > 0) {
            word += (word !== '' ? ' ' : '') + numbersNouns[ten] + 'maH';
        }
        if (one > 0) {
            word += (word !== '' ? ' ' : '') + numbersNouns[one];
        }
        return word === '' ? 'pagh' : word;
    }

    var tlh = moment.defineLocale('tlh', {
        months: 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split(
            '_'
        ),
        monthsShort:
            'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split(
            '_'
        ),
        weekdaysShort:
            'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        weekdaysMin:
            'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[DaHjaj] LT',
            nextDay: '[wa’leS] LT',
            nextWeek: 'LLL',
            lastDay: '[wa’Hu’] LT',
            lastWeek: 'LLL',
            sameElse: 'L',
        },
        relativeTime: {
            future: translateFuture,
            past: translatePast,
            s: 'puS lup',
            ss: translate,
            m: 'wa’ tup',
            mm: translate,
            h: 'wa’ rep',
            hh: translate,
            d: 'wa’ jaj',
            dd: translate,
            M: 'wa’ jar',
            MM: translate,
            y: 'wa’ DIS',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return tlh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/tr.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Turkish [tr]
//! authors : Erhan Gundogan : https://github.com/erhangundogan,
//!           Burak Yiğit Kaya: https://github.com/BYK

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        1: "'inci",
        5: "'inci",
        8: "'inci",
        70: "'inci",
        80: "'inci",
        2: "'nci",
        7: "'nci",
        20: "'nci",
        50: "'nci",
        3: "'üncü",
        4: "'üncü",
        100: "'üncü",
        6: "'ncı",
        9: "'uncu",
        10: "'uncu",
        30: "'uncu",
        60: "'ıncı",
        90: "'ıncı",
    };

    var tr = moment.defineLocale('tr', {
        months: 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split(
            '_'
        ),
        monthsShort: 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
        weekdays: 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split(
            '_'
        ),
        weekdaysShort: 'Paz_Pzt_Sal_Çar_Per_Cum_Cmt'.split('_'),
        weekdaysMin: 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'öö' : 'ÖÖ';
            } else {
                return isLower ? 'ös' : 'ÖS';
            }
        },
        meridiemParse: /öö|ÖÖ|ös|ÖS/,
        isPM: function (input) {
            return input === 'ös' || input === 'ÖS';
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[bugün saat] LT',
            nextDay: '[yarın saat] LT',
            nextWeek: '[gelecek] dddd [saat] LT',
            lastDay: '[dün] LT',
            lastWeek: '[geçen] dddd [saat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s sonra',
            past: '%s önce',
            s: 'birkaç saniye',
            ss: '%d saniye',
            m: 'bir dakika',
            mm: '%d dakika',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir gün',
            dd: '%d gün',
            w: 'bir hafta',
            ww: '%d hafta',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir yıl',
            yy: '%d yıl',
        },
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'Do':
                case 'DD':
                    return number;
                default:
                    if (number === 0) {
                        // special case for zero
                        return number + "'ıncı";
                    }
                    var a = number % 10,
                        b = (number % 100) - a,
                        c = number >= 100 ? 100 : null;
                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return tr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tzl.js":
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tzl.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Talossan [tzl]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v
//! author : Iustì Canun

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
    // This is currently too difficult (maybe even impossible) to add.
    var tzl = moment.defineLocale('tzl', {
        months: 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split(
            '_'
        ),
        monthsShort: 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
        weekdays: 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
        weekdaysShort: 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
        weekdaysMin: 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM [dallas] YYYY',
            LLL: 'D. MMMM [dallas] YYYY HH.mm',
            LLLL: 'dddd, [li] D. MMMM [dallas] YYYY HH.mm',
        },
        meridiemParse: /d\'o|d\'a/i,
        isPM: function (input) {
            return "d'o" === input.toLowerCase();
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? "d'o" : "D'O";
            } else {
                return isLower ? "d'a" : "D'A";
            }
        },
        calendar: {
            sameDay: '[oxhi à] LT',
            nextDay: '[demà à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[ieiri à] LT',
            lastWeek: '[sür el] dddd [lasteu à] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'osprei %s',
            past: 'ja%s',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['viensas secunds', "'iensas secunds"],
            ss: [number + ' secunds', '' + number + ' secunds'],
            m: ["'n míut", "'iens míut"],
            mm: [number + ' míuts', '' + number + ' míuts'],
            h: ["'n þora", "'iensa þora"],
            hh: [number + ' þoras', '' + number + ' þoras'],
            d: ["'n ziua", "'iensa ziua"],
            dd: [number + ' ziuas', '' + number + ' ziuas'],
            M: ["'n mes", "'iens mes"],
            MM: [number + ' mesen', '' + number + ' mesen'],
            y: ["'n ar", "'iens ar"],
            yy: [number + ' ars', '' + number + ' ars'],
        };
        return isFuture
            ? format[key][0]
            : withoutSuffix
            ? format[key][0]
            : format[key][1];
    }

    return tzl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tzm-latn.js":
/*!************************************************!*\
  !*** ./node_modules/moment/locale/tzm-latn.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Central Atlas Tamazight Latin [tzm-latn]
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tzmLatn = moment.defineLocale('tzm-latn', {
        months: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split(
            '_'
        ),
        monthsShort:
            'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split(
                '_'
            ),
        weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[asdkh g] LT',
            nextDay: '[aska g] LT',
            nextWeek: 'dddd [g] LT',
            lastDay: '[assant g] LT',
            lastWeek: 'dddd [g] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dadkh s yan %s',
            past: 'yan %s',
            s: 'imik',
            ss: '%d imik',
            m: 'minuḍ',
            mm: '%d minuḍ',
            h: 'saɛa',
            hh: '%d tassaɛin',
            d: 'ass',
            dd: '%d ossan',
            M: 'ayowr',
            MM: '%d iyyirn',
            y: 'asgas',
            yy: '%d isgasn',
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return tzmLatn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tzm.js":
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tzm.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Central Atlas Tamazight [tzm]
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tzm = moment.defineLocale('tzm', {
        months: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split(
            '_'
        ),
        monthsShort:
            'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split(
                '_'
            ),
        weekdays: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysShort: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysMin: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
            nextWeek: 'dddd [ⴴ] LT',
            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
            lastWeek: 'dddd [ⴴ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
            past: 'ⵢⴰⵏ %s',
            s: 'ⵉⵎⵉⴽ',
            ss: '%d ⵉⵎⵉⴽ',
            m: 'ⵎⵉⵏⵓⴺ',
            mm: '%d ⵎⵉⵏⵓⴺ',
            h: 'ⵙⴰⵄⴰ',
            hh: '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
            d: 'ⴰⵙⵙ',
            dd: '%d oⵙⵙⴰⵏ',
            M: 'ⴰⵢoⵓⵔ',
            MM: '%d ⵉⵢⵢⵉⵔⵏ',
            y: 'ⴰⵙⴳⴰⵙ',
            yy: '%d ⵉⵙⴳⴰⵙⵏ',
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return tzm;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ug-cn.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ug-cn.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uyghur (China) [ug-cn]
//! author: boyaq : https://github.com/boyaq

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ugCn = moment.defineLocale('ug-cn', {
        months: 'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
            '_'
        ),
        monthsShort:
            'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
                '_'
            ),
        weekdays: 'يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە'.split(
            '_'
        ),
        weekdaysShort: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
        weekdaysMin: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY-يىلىM-ئاينىڭD-كۈنى',
            LLL: 'YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm',
            LLLL: 'dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm',
        },
        meridiemParse: /يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                meridiem === 'يېرىم كېچە' ||
                meridiem === 'سەھەر' ||
                meridiem === 'چۈشتىن بۇرۇن'
            ) {
                return hour;
            } else if (meridiem === 'چۈشتىن كېيىن' || meridiem === 'كەچ') {
                return hour + 12;
            } else {
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return 'يېرىم كېچە';
            } else if (hm < 900) {
                return 'سەھەر';
            } else if (hm < 1130) {
                return 'چۈشتىن بۇرۇن';
            } else if (hm < 1230) {
                return 'چۈش';
            } else if (hm < 1800) {
                return 'چۈشتىن كېيىن';
            } else {
                return 'كەچ';
            }
        },
        calendar: {
            sameDay: '[بۈگۈن سائەت] LT',
            nextDay: '[ئەتە سائەت] LT',
            nextWeek: '[كېلەركى] dddd [سائەت] LT',
            lastDay: '[تۆنۈگۈن] LT',
            lastWeek: '[ئالدىنقى] dddd [سائەت] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s كېيىن',
            past: '%s بۇرۇن',
            s: 'نەچچە سېكونت',
            ss: '%d سېكونت',
            m: 'بىر مىنۇت',
            mm: '%d مىنۇت',
            h: 'بىر سائەت',
            hh: '%d سائەت',
            d: 'بىر كۈن',
            dd: '%d كۈن',
            M: 'بىر ئاي',
            MM: '%d ئاي',
            y: 'بىر يىل',
            yy: '%d يىل',
        },

        dayOfMonthOrdinalParse: /\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '-كۈنى';
                case 'w':
                case 'W':
                    return number + '-ھەپتە';
                default:
                    return number;
            }
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 1st is the first week of the year.
        },
    });

    return ugCn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/uk.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/uk.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Ukrainian [uk]
//! author : zemlanin : https://github.com/zemlanin
//! Author : Menelion Elensúle : https://github.com/Oire

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11
            ? forms[0]
            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
            ? forms[1]
            : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            ss: withoutSuffix ? 'секунда_секунди_секунд' : 'секунду_секунди_секунд',
            mm: withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
            hh: withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
            dd: 'день_дні_днів',
            MM: 'місяць_місяці_місяців',
            yy: 'рік_роки_років',
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвилина' : 'хвилину';
        } else if (key === 'h') {
            return withoutSuffix ? 'година' : 'годину';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    function weekdaysCaseReplace(m, format) {
        var weekdays = {
                nominative:
                    'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split(
                        '_'
                    ),
                accusative:
                    'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split(
                        '_'
                    ),
                genitive:
                    'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split(
                        '_'
                    ),
            },
            nounCase;

        if (m === true) {
            return weekdays['nominative']
                .slice(1, 7)
                .concat(weekdays['nominative'].slice(0, 1));
        }
        if (!m) {
            return weekdays['nominative'];
        }

        nounCase = /(\[[ВвУу]\]) ?dddd/.test(format)
            ? 'accusative'
            : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(format)
            ? 'genitive'
            : 'nominative';
        return weekdays[nounCase][m.day()];
    }
    function processHoursFunction(str) {
        return function () {
            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
        };
    }

    var uk = moment.defineLocale('uk', {
        months: {
            format: 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split(
                '_'
            ),
            standalone:
                'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split(
                    '_'
                ),
        },
        monthsShort: 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split(
            '_'
        ),
        weekdays: weekdaysCaseReplace,
        weekdaysShort: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY р.',
            LLL: 'D MMMM YYYY р., HH:mm',
            LLLL: 'dddd, D MMMM YYYY р., HH:mm',
        },
        calendar: {
            sameDay: processHoursFunction('[Сьогодні '),
            nextDay: processHoursFunction('[Завтра '),
            lastDay: processHoursFunction('[Вчора '),
            nextWeek: processHoursFunction('[У] dddd ['),
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return processHoursFunction('[Минулої] dddd [').call(this);
                    case 1:
                    case 2:
                    case 4:
                        return processHoursFunction('[Минулого] dddd [').call(this);
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'за %s',
            past: '%s тому',
            s: 'декілька секунд',
            ss: relativeTimeWithPlural,
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: 'годину',
            hh: relativeTimeWithPlural,
            d: 'день',
            dd: relativeTimeWithPlural,
            M: 'місяць',
            MM: relativeTimeWithPlural,
            y: 'рік',
            yy: relativeTimeWithPlural,
        },
        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
        meridiemParse: /ночі|ранку|дня|вечора/,
        isPM: function (input) {
            return /^(дня|вечора)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночі';
            } else if (hour < 12) {
                return 'ранку';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечора';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return uk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ur.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ur.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Urdu [ur]
//! author : Sawood Alam : https://github.com/ibnesayeed
//! author : Zack : https://github.com/ZackVision

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'جنوری',
            'فروری',
            'مارچ',
            'اپریل',
            'مئی',
            'جون',
            'جولائی',
            'اگست',
            'ستمبر',
            'اکتوبر',
            'نومبر',
            'دسمبر',
        ],
        days = ['اتوار', 'پیر', 'منگل', 'بدھ', 'جمعرات', 'جمعہ', 'ہفتہ'];

    var ur = moment.defineLocale('ur', {
        months: months,
        monthsShort: months,
        weekdays: days,
        weekdaysShort: days,
        weekdaysMin: days,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd، D MMMM YYYY HH:mm',
        },
        meridiemParse: /صبح|شام/,
        isPM: function (input) {
            return 'شام' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'صبح';
            }
            return 'شام';
        },
        calendar: {
            sameDay: '[آج بوقت] LT',
            nextDay: '[کل بوقت] LT',
            nextWeek: 'dddd [بوقت] LT',
            lastDay: '[گذشتہ روز بوقت] LT',
            lastWeek: '[گذشتہ] dddd [بوقت] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s بعد',
            past: '%s قبل',
            s: 'چند سیکنڈ',
            ss: '%d سیکنڈ',
            m: 'ایک منٹ',
            mm: '%d منٹ',
            h: 'ایک گھنٹہ',
            hh: '%d گھنٹے',
            d: 'ایک دن',
            dd: '%d دن',
            M: 'ایک ماہ',
            MM: '%d ماہ',
            y: 'ایک سال',
            yy: '%d سال',
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ur;

})));


/***/ }),

/***/ "./node_modules/moment/locale/uz-latn.js":
/*!***********************************************!*\
  !*** ./node_modules/moment/locale/uz-latn.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uzbek Latin [uz-latn]
//! author : Rasulbek Mirzayev : github.com/Rasulbeeek

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var uzLatn = moment.defineLocale('uz-latn', {
        months: 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split(
            '_'
        ),
        monthsShort: 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
        weekdays:
            'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split(
                '_'
            ),
        weekdaysShort: 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
        weekdaysMin: 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'D MMMM YYYY, dddd HH:mm',
        },
        calendar: {
            sameDay: '[Bugun soat] LT [da]',
            nextDay: '[Ertaga] LT [da]',
            nextWeek: 'dddd [kuni soat] LT [da]',
            lastDay: '[Kecha soat] LT [da]',
            lastWeek: "[O'tgan] dddd [kuni soat] LT [da]",
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Yaqin %s ichida',
            past: 'Bir necha %s oldin',
            s: 'soniya',
            ss: '%d soniya',
            m: 'bir daqiqa',
            mm: '%d daqiqa',
            h: 'bir soat',
            hh: '%d soat',
            d: 'bir kun',
            dd: '%d kun',
            M: 'bir oy',
            MM: '%d oy',
            y: 'bir yil',
            yy: '%d yil',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return uzLatn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/uz.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/uz.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uzbek [uz]
//! author : Sardor Muminov : https://github.com/muminoff

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var uz = moment.defineLocale('uz', {
        months: 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split(
            '_'
        ),
        monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
        weekdays: 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
        weekdaysShort: 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
        weekdaysMin: 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'D MMMM YYYY, dddd HH:mm',
        },
        calendar: {
            sameDay: '[Бугун соат] LT [да]',
            nextDay: '[Эртага] LT [да]',
            nextWeek: 'dddd [куни соат] LT [да]',
            lastDay: '[Кеча соат] LT [да]',
            lastWeek: '[Утган] dddd [куни соат] LT [да]',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Якин %s ичида',
            past: 'Бир неча %s олдин',
            s: 'фурсат',
            ss: '%d фурсат',
            m: 'бир дакика',
            mm: '%d дакика',
            h: 'бир соат',
            hh: '%d соат',
            d: 'бир кун',
            dd: '%d кун',
            M: 'бир ой',
            MM: '%d ой',
            y: 'бир йил',
            yy: '%d йил',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return uz;

})));


/***/ }),

/***/ "./node_modules/moment/locale/vi.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/vi.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Vietnamese [vi]
//! author : Bang Nguyen : https://github.com/bangnk
//! author : Chien Kira : https://github.com/chienkira

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var vi = moment.defineLocale('vi', {
        months: 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split(
            '_'
        ),
        monthsShort:
            'Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split(
            '_'
        ),
        weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysParseExact: true,
        meridiemParse: /sa|ch/i,
        isPM: function (input) {
            return /^ch$/i.test(input);
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'sa' : 'SA';
            } else {
                return isLower ? 'ch' : 'CH';
            }
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [năm] YYYY',
            LLL: 'D MMMM [năm] YYYY HH:mm',
            LLLL: 'dddd, D MMMM [năm] YYYY HH:mm',
            l: 'DD/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd, D MMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Hôm nay lúc] LT',
            nextDay: '[Ngày mai lúc] LT',
            nextWeek: 'dddd [tuần tới lúc] LT',
            lastDay: '[Hôm qua lúc] LT',
            lastWeek: 'dddd [tuần trước lúc] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s tới',
            past: '%s trước',
            s: 'vài giây',
            ss: '%d giây',
            m: 'một phút',
            mm: '%d phút',
            h: 'một giờ',
            hh: '%d giờ',
            d: 'một ngày',
            dd: '%d ngày',
            w: 'một tuần',
            ww: '%d tuần',
            M: 'một tháng',
            MM: '%d tháng',
            y: 'một năm',
            yy: '%d năm',
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return vi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/x-pseudo.js":
/*!************************************************!*\
  !*** ./node_modules/moment/locale/x-pseudo.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Pseudo [x-pseudo]
//! author : Andrew Hood : https://github.com/andrewhood125

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var xPseudo = moment.defineLocale('x-pseudo', {
        months: 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split(
            '_'
        ),
        monthsShort:
            'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split(
                '_'
            ),
        weekdaysShort: 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
        weekdaysMin: 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[T~ódá~ý át] LT',
            nextDay: '[T~ómó~rró~w át] LT',
            nextWeek: 'dddd [át] LT',
            lastDay: '[Ý~ést~érdá~ý át] LT',
            lastWeek: '[L~ást] dddd [át] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'í~ñ %s',
            past: '%s á~gó',
            s: 'á ~féw ~sécó~ñds',
            ss: '%d s~écóñ~ds',
            m: 'á ~míñ~úté',
            mm: '%d m~íñú~tés',
            h: 'á~ñ hó~úr',
            hh: '%d h~óúrs',
            d: 'á ~dáý',
            dd: '%d d~áýs',
            M: 'á ~móñ~th',
            MM: '%d m~óñt~hs',
            y: 'á ~ýéár',
            yy: '%d ý~éárs',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return xPseudo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/yo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/yo.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Yoruba Nigeria [yo]
//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var yo = moment.defineLocale('yo', {
        months: 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split(
            '_'
        ),
        monthsShort: 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
        weekdays: 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
        weekdaysShort: 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
        weekdaysMin: 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Ònì ni] LT',
            nextDay: '[Ọ̀la ni] LT',
            nextWeek: "dddd [Ọsẹ̀ tón'bọ] [ni] LT",
            lastDay: '[Àna ni] LT',
            lastWeek: 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ní %s',
            past: '%s kọjá',
            s: 'ìsẹjú aayá die',
            ss: 'aayá %d',
            m: 'ìsẹjú kan',
            mm: 'ìsẹjú %d',
            h: 'wákati kan',
            hh: 'wákati %d',
            d: 'ọjọ́ kan',
            dd: 'ọjọ́ %d',
            M: 'osù kan',
            MM: 'osù %d',
            y: 'ọdún kan',
            yy: 'ọdún %d',
        },
        dayOfMonthOrdinalParse: /ọjọ́\s\d{1,2}/,
        ordinal: 'ọjọ́ %d',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return yo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/zh-cn.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-cn.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (China) [zh-cn]
//! author : suupic : https://github.com/suupic
//! author : Zeno Zeng : https://github.com/zenozeng
//! author : uu109 : https://github.com/uu109

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhCn = moment.defineLocale('zh-cn', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
            '_'
        ),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日Ah点mm分',
            LLLL: 'YYYY年M月D日ddddAh点mm分',
            l: 'YYYY/M/D',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            } else {
                // '中午'
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天]LT',
            nextDay: '[明天]LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    return '[下]dddLT';
                } else {
                    return '[本]dddLT';
                }
            },
            lastDay: '[昨天]LT',
            lastWeek: function (now) {
                if (this.week() !== now.week()) {
                    return '[上]dddLT';
                } else {
                    return '[本]dddLT';
                }
            },
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '周';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s后',
            past: '%s前',
            s: '几秒',
            ss: '%d 秒',
            m: '1 分钟',
            mm: '%d 分钟',
            h: '1 小时',
            hh: '%d 小时',
            d: '1 天',
            dd: '%d 天',
            w: '1 周',
            ww: '%d 周',
            M: '1 个月',
            MM: '%d 个月',
            y: '1 年',
            yy: '%d 年',
        },
        week: {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return zhCn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/zh-hk.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-hk.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Hong Kong) [zh-hk]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris
//! author : Konstantin : https://github.com/skfd
//! author : Anthony : https://github.com/anthonylau

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhHk = moment.defineLocale('zh-hk', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
            '_'
        ),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日dddd HH:mm',
            l: 'YYYY/M/D',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1200) {
                return '上午';
            } else if (hm === 1200) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天]LT',
            nextDay: '[明天]LT',
            nextWeek: '[下]ddddLT',
            lastDay: '[昨天]LT',
            lastWeek: '[上]ddddLT',
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '週';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '幾秒',
            ss: '%d 秒',
            m: '1 分鐘',
            mm: '%d 分鐘',
            h: '1 小時',
            hh: '%d 小時',
            d: '1 天',
            dd: '%d 天',
            M: '1 個月',
            MM: '%d 個月',
            y: '1 年',
            yy: '%d 年',
        },
    });

    return zhHk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/zh-mo.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-mo.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Macau) [zh-mo]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris
//! author : Tan Yuanhong : https://github.com/le0tan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhMo = moment.defineLocale('zh-mo', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
            '_'
        ),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日dddd HH:mm',
            l: 'D/M/YYYY',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天] LT',
            nextDay: '[明天] LT',
            nextWeek: '[下]dddd LT',
            lastDay: '[昨天] LT',
            lastWeek: '[上]dddd LT',
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '週';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s內',
            past: '%s前',
            s: '幾秒',
            ss: '%d 秒',
            m: '1 分鐘',
            mm: '%d 分鐘',
            h: '1 小時',
            hh: '%d 小時',
            d: '1 天',
            dd: '%d 天',
            M: '1 個月',
            MM: '%d 個月',
            y: '1 年',
            yy: '%d 年',
        },
    });

    return zhMo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/zh-tw.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-tw.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Taiwan) [zh-tw]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhTw = moment.defineLocale('zh-tw', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
            '_'
        ),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日dddd HH:mm',
            l: 'YYYY/M/D',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天] LT',
            nextDay: '[明天] LT',
            nextWeek: '[下]dddd LT',
            lastDay: '[昨天] LT',
            lastWeek: '[上]dddd LT',
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '週';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '幾秒',
            ss: '%d 秒',
            m: '1 分鐘',
            mm: '%d 分鐘',
            h: '1 小時',
            hh: '%d 小時',
            d: '1 天',
            dd: '%d 天',
            M: '1 個月',
            MM: '%d 個月',
            y: '1 年',
            yy: '%d 年',
        },
    });

    return zhTw;

})));


/***/ }),

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!***************************************************!*\
  !*** ./node_modules/moment/locale/ sync ^\.\/.*$ ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "./node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bm": "./node_modules/moment/locale/bm.js",
	"./bm.js": "./node_modules/moment/locale/bm.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn-bd": "./node_modules/moment/locale/bn-bd.js",
	"./bn-bd.js": "./node_modules/moment/locale/bn-bd.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de-ch": "./node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "./node_modules/moment/locale/de-ch.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-il": "./node_modules/moment/locale/en-il.js",
	"./en-il.js": "./node_modules/moment/locale/en-il.js",
	"./en-in": "./node_modules/moment/locale/en-in.js",
	"./en-in.js": "./node_modules/moment/locale/en-in.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./en-sg": "./node_modules/moment/locale/en-sg.js",
	"./en-sg.js": "./node_modules/moment/locale/en-sg.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es-mx": "./node_modules/moment/locale/es-mx.js",
	"./es-mx.js": "./node_modules/moment/locale/es-mx.js",
	"./es-us": "./node_modules/moment/locale/es-us.js",
	"./es-us.js": "./node_modules/moment/locale/es-us.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fil": "./node_modules/moment/locale/fil.js",
	"./fil.js": "./node_modules/moment/locale/fil.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./ga": "./node_modules/moment/locale/ga.js",
	"./ga.js": "./node_modules/moment/locale/ga.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./gom-deva": "./node_modules/moment/locale/gom-deva.js",
	"./gom-deva.js": "./node_modules/moment/locale/gom-deva.js",
	"./gom-latn": "./node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
	"./gu": "./node_modules/moment/locale/gu.js",
	"./gu.js": "./node_modules/moment/locale/gu.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it-ch": "./node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "./node_modules/moment/locale/it-ch.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./kn": "./node_modules/moment/locale/kn.js",
	"./kn.js": "./node_modules/moment/locale/kn.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ku": "./node_modules/moment/locale/ku.js",
	"./ku.js": "./node_modules/moment/locale/ku.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mn": "./node_modules/moment/locale/mn.js",
	"./mn.js": "./node_modules/moment/locale/mn.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./mt": "./node_modules/moment/locale/mt.js",
	"./mt.js": "./node_modules/moment/locale/mt.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./oc-lnc": "./node_modules/moment/locale/oc-lnc.js",
	"./oc-lnc.js": "./node_modules/moment/locale/oc-lnc.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./sd": "./node_modules/moment/locale/sd.js",
	"./sd.js": "./node_modules/moment/locale/sd.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./tg": "./node_modules/moment/locale/tg.js",
	"./tg.js": "./node_modules/moment/locale/tg.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tk": "./node_modules/moment/locale/tk.js",
	"./tk.js": "./node_modules/moment/locale/tk.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./ug-cn": "./node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "./node_modules/moment/locale/ug-cn.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./ur": "./node_modules/moment/locale/ur.js",
	"./ur.js": "./node_modules/moment/locale/ur.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz-latn": "./node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-mo": "./node_modules/moment/locale/zh-mo.js",
	"./zh-mo.js": "./node_modules/moment/locale/zh-mo.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "./node_modules/moment/moment.js":
/*!***************************************!*\
  !*** ./node_modules/moment/moment.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
//! moment.js
//! version : 2.29.4
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
     true ? module.exports = factory() :
    0
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks() {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return (
            input instanceof Array ||
            Object.prototype.toString.call(input) === '[object Array]'
        );
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return (
            input != null &&
            Object.prototype.toString.call(input) === '[object Object]'
        );
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
        } else {
            var k;
            for (k in obj) {
                if (hasOwnProp(obj, k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return (
            typeof input === 'number' ||
            Object.prototype.toString.call(input) === '[object Number]'
        );
    }

    function isDate(input) {
        return (
            input instanceof Date ||
            Object.prototype.toString.call(input) === '[object Date]'
        );
    }

    function map(arr, fn) {
        var res = [],
            i,
            arrLen = arr.length;
        for (i = 0; i < arrLen; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false,
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this),
                len = t.length >>> 0,
                i;

            for (i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m),
                parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                }),
                isNowValid =
                    !isNaN(m._d.getTime()) &&
                    flags.overflow < 0 &&
                    !flags.empty &&
                    !flags.invalidEra &&
                    !flags.invalidMonth &&
                    !flags.invalidWeekday &&
                    !flags.weekdayMismatch &&
                    !flags.nullInput &&
                    !flags.invalidFormat &&
                    !flags.userInvalidated &&
                    (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid =
                    isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = (hooks.momentProperties = []),
        updateInProgress = false;

    function copyConfig(to, from) {
        var i,
            prop,
            val,
            momentPropertiesLen = momentProperties.length;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentPropertiesLen > 0) {
            for (i = 0; i < momentPropertiesLen; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return (
            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
        );
    }

    function warn(msg) {
        if (
            hooks.suppressDeprecationWarnings === false &&
            typeof console !== 'undefined' &&
            console.warn
        ) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [],
                    arg,
                    i,
                    key,
                    argLen = arguments.length;
                for (i = 0; i < argLen; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (key in arguments[0]) {
                            if (hasOwnProp(arguments[0], key)) {
                                arg += key + ': ' + arguments[0][key] + ', ';
                            }
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(
                    msg +
                        '\nArguments: ' +
                        Array.prototype.slice.call(args).join('') +
                        '\n' +
                        new Error().stack
                );
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return (
            (typeof Function !== 'undefined' && input instanceof Function) ||
            Object.prototype.toString.call(input) === '[object Function]'
        );
    }

    function set(config) {
        var prop, i;
        for (i in config) {
            if (hasOwnProp(config, i)) {
                prop = config[i];
                if (isFunction(prop)) {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' +
                /\d{1,2}/.source
        );
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (
                hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])
            ) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i,
                res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
    };

    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (
            (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
            absNumber
        );
    }

    var formattingTokens =
            /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        formatFunctions = {},
        formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(
                    func.apply(this, arguments),
                    token
                );
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '',
                i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i])
                    ? array[i].call(mom, format)
                    : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] =
            formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(
                localFormattingTokens,
                replaceLongDateFormatTokens
            );
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A',
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper
            .match(formattingTokens)
            .map(function (tok) {
                if (
                    tok === 'MMMM' ||
                    tok === 'MM' ||
                    tok === 'DD' ||
                    tok === 'dddd'
                ) {
                    return tok.slice(1);
                }
                return tok;
            })
            .join('');

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d',
        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
    };

    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output)
            ? output(number, withoutSuffix, string, isFuture)
            : output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string'
            ? aliases[units] || aliases[units.toLowerCase()]
            : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [],
            u;
        for (u in unitsObj) {
            if (hasOwnProp(unitsObj, u)) {
                units.push({ unit: u, priority: priorities[u] });
            }
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function absFloor(number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get(mom, unit) {
        return mom.isValid()
            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
            : NaN;
    }

    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (
                unit === 'FullYear' &&
                isLeapYear(mom.year()) &&
                mom.month() === 1 &&
                mom.date() === 29
            ) {
                value = toInt(value);
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                    value,
                    mom.month(),
                    daysInMonth(value, mom.month())
                );
            } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }

    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units),
                i,
                prioritizedLen = prioritized.length;
            for (i = 0; i < prioritizedLen; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    var match1 = /\d/, //       0 - 9
        match2 = /\d\d/, //      00 - 99
        match3 = /\d{3}/, //     000 - 999
        match4 = /\d{4}/, //    0000 - 9999
        match6 = /[+-]?\d{6}/, // -999999 - 999999
        match1to2 = /\d\d?/, //       0 - 99
        match3to4 = /\d\d\d\d?/, //     999 - 9999
        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
        match1to3 = /\d{1,3}/, //       0 - 999
        match1to4 = /\d{1,4}/, //       0 - 9999
        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
        matchUnsigned = /\d+/, //       0 - inf
        matchSigned = /[+-]?\d+/, //    -inf - inf
        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        // any word (or two) characters or numbers including two/three word month in arabic.
        // includes scottish gaelic two word and hyphenated months
        matchWord =
            /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
        regexes;

    regexes = {};

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex)
            ? regex
            : function (isStrict, localeData) {
                  return isStrict && strictRegex ? strictRegex : regex;
              };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(
            s
                .replace('\\', '')
                .replace(
                    /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
                    function (matched, p1, p2, p3, p4) {
                        return p1 || p2 || p3 || p4;
                    }
                )
        );
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i,
            func = callback,
            tokenLen;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        tokenLen = token.length;
        for (i = 0; i < tokenLen; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,
        WEEK = 7,
        WEEKDAY = 8;

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1
            ? isLeapYear(year)
                ? 29
                : 28
            : 31 - ((modMonth % 7) % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths =
            'January_February_March_April_May_June_July_August_September_October_November_December'.split(
                '_'
            ),
        defaultLocaleMonthsShort =
            'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
        defaultMonthsShortRegex = matchWord,
        defaultMonthsRegex = matchWord;

    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months)
                ? this._months
                : this._months['standalone'];
        }
        return isArray(this._months)
            ? this._months[m.month()]
            : this._months[
                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                      ? 'format'
                      : 'standalone'
              ][m.month()];
    }

    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort)
                ? this._monthsShort
                : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort)
            ? this._monthsShort[m.month()]
            : this._monthsShort[
                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
              ][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp(
                    '^' + this.months(mom, '').replace('.', '') + '$',
                    'i'
                );
                this._shortMonthsParse[i] = new RegExp(
                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                    'i'
                );
            }
            if (!strict && !this._monthsParse[i]) {
                regex =
                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'MMMM' &&
                this._longMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'MMM' &&
                this._shortMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict
                ? this._monthsShortStrictRegex
                : this._monthsShortRegex;
        }
    }

    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict
                ? this._monthsStrictRegex
                : this._monthsRegex;
        }
    }

    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._monthsShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] =
            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear,
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear,
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(
        ['w', 'ww', 'W', 'WW'],
        function (input, week, config, token) {
            week[token.substr(0, 1)] = toInt(input);
        }
    );

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6, // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays =
            'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        defaultWeekdaysRegex = matchWord,
        defaultWeekdaysShortRegex = matchWord,
        defaultWeekdaysMinRegex = matchWord;

    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays)
            ? this._weekdays
            : this._weekdays[
                  m && m !== true && this._weekdays.isFormat.test(format)
                      ? 'format'
                      : 'standalone'
              ];
        return m === true
            ? shiftWeekdays(weekdays, this._week.dow)
            : m
            ? weekdays[m.day()]
            : weekdays;
    }

    function localeWeekdaysShort(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : m
            ? this._weekdaysShort[m.day()]
            : this._weekdaysShort;
    }

    function localeWeekdaysMin(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : m
            ? this._weekdaysMin[m.day()]
            : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._shortWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._minWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
            }
            if (!this._weekdaysParse[i]) {
                regex =
                    '^' +
                    this.weekdays(mom, '') +
                    '|^' +
                    this.weekdaysShort(mom, '') +
                    '|^' +
                    this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'dddd' &&
                this._fullWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'ddd' &&
                this._shortWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'dd' &&
                this._minWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict
                ? this._weekdaysStrictRegex
                : this._weekdaysRegex;
        }
    }

    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict
                ? this._weekdaysShortStrictRegex
                : this._weekdaysShortRegex;
        }
    }

    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict
                ? this._weekdaysMinStrictRegex
                : this._weekdaysMinRegex;
        }
    }

    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = regexEscape(this.weekdaysMin(mom, ''));
            shortp = regexEscape(this.weekdaysShort(mom, ''));
            longp = regexEscape(this.weekdays(mom, ''));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._weekdaysShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
        this._weekdaysMinStrictRegex = new RegExp(
            '^(' + minPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return (
            '' +
            hFormat.apply(this) +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return (
            '' +
            this.hours() +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(
                this.hours(),
                this.minutes(),
                lowercase
            );
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
        // Setting the hour should keep the time, because the user explicitly
        // specified which hour they want. So trying to maintain the same hour (in
        // a new timezone) makes sense. Adding/subtracting hours does not follow
        // this rule.
        getSetHour = makeGetSet('Hours', true);

    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse,
    };

    // internal storage for locale config files
    var locales = {},
        localeFamilies = {},
        globalLocale;

    function commonPrefix(arr1, arr2) {
        var i,
            minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
            if (arr1[i] !== arr2[i]) {
                return i;
            }
        }
        return minl;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (
                    next &&
                    next.length >= j &&
                    commonPrefix(split, next) >= j - 1
                ) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function isLocaleNameSane(name) {
        // Prevent names that look like filesystem paths, i.e contain '/' or '\'
        return name.match('^[^/\\\\]*$') != null;
    }

    function loadLocale(name) {
        var oldLocale = null,
            aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (
            locales[name] === undefined &&
            "object" !== 'undefined' &&
            module &&
            module.exports &&
            isLocaleNameSane(name)
        ) {
            try {
                oldLocale = globalLocale._abbr;
                aliasedRequire = undefined;
                __webpack_require__("./node_modules/moment/locale sync recursive ^\\.\\/.*$")("./" + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {
                // mark as not found to avoid repeating expensive file require call causing high CPU
                // when trying to find en-US, en_US, en-us for every format call
                locales[name] = null; // null means not found
            }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            } else {
                if (typeof console !== 'undefined' && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn(
                        'Locale ' + key + ' not found. Did you forget to load it?'
                    );
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, config) {
        if (config !== null) {
            var locale,
                parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple(
                    'defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                );
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config,
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale,
                tmpLocale,
                parentConfig = baseConfig;

            if (locales[name] != null && locales[name].parentLocale != null) {
                // Update existing child locale in-place to avoid memory-leaks
                locales[name].set(mergeConfigs(locales[name]._config, config));
            } else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) {
                    parentConfig = tmpLocale._config;
                }
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) {
                    // updateLocale is called for creating a new locale
                    // Set abbr so it will have a name (getters return
                    // undefined otherwise).
                    config.abbr = name;
                }
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
            }

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                    if (name === getSetGlobalLocale()) {
                        getSetGlobalLocale(name);
                    }
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow(m) {
        var overflow,
            a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH] < 0 || a[MONTH] > 11
                    ? MONTH
                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                    ? DATE
                    : a[HOUR] < 0 ||
                      a[HOUR] > 24 ||
                      (a[HOUR] === 24 &&
                          (a[MINUTE] !== 0 ||
                              a[SECOND] !== 0 ||
                              a[MILLISECOND] !== 0))
                    ? HOUR
                    : a[MINUTE] < 0 || a[MINUTE] > 59
                    ? MINUTE
                    : a[SECOND] < 0 || a[SECOND] > 59
                    ? SECOND
                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                    ? MILLISECOND
                    : -1;

            if (
                getParsingFlags(m)._overflowDayOfYear &&
                (overflow < YEAR || overflow > DATE)
            ) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex =
            /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        basicIsoRegex =
            /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
            ['YYYY-DDD', /\d{4}-\d{3}/],
            ['YYYY-MM', /\d{4}-\d\d/, false],
            ['YYYYYYMMDD', /[+-]\d{10}/],
            ['YYYYMMDD', /\d{8}/],
            ['GGGG[W]WWE', /\d{4}W\d{3}/],
            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
            ['YYYYDDD', /\d{7}/],
            ['YYYYMM', /\d{6}/, false],
            ['YYYY', /\d{4}/, false],
        ],
        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
            ['HH:mm', /\d\d:\d\d/],
            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
            ['HHmmss', /\d\d\d\d\d\d/],
            ['HHmm', /\d\d\d\d/],
            ['HH', /\d\d/],
        ],
        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
        rfc2822 =
            /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
        obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60,
        };

    // date from iso format
    function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat,
            isoDatesLen = isoDates.length,
            isoTimesLen = isoTimes.length;

        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDatesLen; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimesLen; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    function extractFromRFC2822Strings(
        yearStr,
        monthStr,
        dayStr,
        hourStr,
        minuteStr,
        secondStr
    ) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10),
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s
            .replace(/\([^()]*\)|[\n\t]/g, ' ')
            .replace(/(\s\s+)/g, ' ')
            .replace(/^\s\s*/, '')
            .replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(
                    parsedInput[0],
                    parsedInput[1],
                    parsedInput[2]
                ).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10),
                m = hm % 100,
                h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)),
            parsedArray;
        if (match) {
            parsedArray = extractFromRFC2822Strings(
                match[4],
                match[3],
                match[2],
                match[5],
                match[6],
                match[7]
            );
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        if (config._strict) {
            config._isValid = false;
        } else {
            // Final attempt, use Input Fallback
            hooks.createFromInputFallback(config);
        }
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [
                nowValue.getUTCFullYear(),
                nowValue.getUTCMonth(),
                nowValue.getUTCDate(),
            ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            expectedWeekday,
            yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (
                config._dayOfYear > daysInYear(yearToUse) ||
                config._dayOfYear === 0
            ) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] =
                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (
            config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0
        ) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(
            null,
            input
        );
        expectedWeekday = config._useUTC
            ? config._d.getUTCDay()
            : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (
            config._w &&
            typeof config._w.d !== 'undefined' &&
            config._w.d !== expectedWeekday
        ) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(
                w.GG,
                config._a[YEAR],
                weekOfYear(createLocal(), 1, 4).year
            );
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0,
            era,
            tokenLen;

        tokens =
            expandFormat(config._f, config._locale).match(formattingTokens) || [];
        tokenLen = tokens.length;
        for (i = 0; i < tokenLen; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(
                    string.indexOf(parsedInput) + parsedInput.length
                );
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver =
            stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (
            config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0
        ) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(
            config._locale,
            config._a[HOUR],
            config._meridiem
        );

        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) {
            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }

        configFromArray(config);
        checkOverflow(config);
    }

    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,
            scoreToBeat,
            i,
            currentScore,
            validFormatFound,
            bestFormatIsValid = false,
            configfLen = config._f.length;

        if (configfLen === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < configfLen; i++) {
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (isValid(tempConfig)) {
                validFormatFound = true;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (!bestFormatIsValid) {
                if (
                    scoreToBeat == null ||
                    currentScore < scoreToBeat ||
                    validFormatFound
                ) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                    if (validFormatFound) {
                        bestFormatIsValid = true;
                    }
                }
            } else {
                if (currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i),
            dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map(
            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
            function (obj) {
                return obj && parseInt(obj, 10);
            }
        );

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (format === true || format === false) {
            strict = format;
            format = undefined;
        }

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if (
            (isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)
        ) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other < this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        ),
        prototypeMax = deprecate(
            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other > this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +new Date();
    };

    var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond',
    ];

    function isDurationValid(m) {
        var key,
            unitHasDecimal = false,
            i,
            orderLen = ordering.length;
        for (key in m) {
            if (
                hasOwnProp(m, key) &&
                !(
                    indexOf.call(ordering, key) !== -1 &&
                    (m[key] == null || !isNaN(m[key]))
                )
            ) {
                return false;
            }
        }

        for (i = 0; i < orderLen; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds =
            +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (
                (dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
            ) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    // FORMATTING

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset(),
                sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return (
                sign +
                zeroFill(~~(offset / 60), 2) +
                separator +
                zeroFill(~~offset % 60, 2)
            );
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher),
            chunk,
            parts,
            minutes;

        if (matches === null) {
            return null;
        }

        chunk = matches[matches.length - 1] || [];
        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff =
                (isMoment(input) || isDate(input)
                    ? input.valueOf()
                    : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(
                        this,
                        createDuration(input - offset, 'm'),
                        1,
                        false
                    );
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {},
            other;

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted =
                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        // and further modified to allow for strings containing both week and day
        isoRegex =
            /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months,
            };
        } else if (isNumber(input) || !isNaN(+input)) {
            duration = {};
            if (key) {
                duration[key] = +input;
            } else {
                duration.milliseconds = +input;
            }
        } else if ((match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
            };
        } else if ((match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign),
            };
        } else if (duration == null) {
            // checks for null or undefined
            duration = {};
        } else if (
            typeof duration === 'object' &&
            ('from' in duration || 'to' in duration)
        ) {
            diffRes = momentsDifference(
                createLocal(duration.from),
                createLocal(duration.to)
            );

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
            ret._isValid = input._isValid;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months =
            other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(
                    name,
                    'moment().' +
                        name +
                        '(period, number) is deprecated. Please use moment().' +
                        name +
                        '(number, period). ' +
                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                );
                tmp = val;
                val = period;
                period = tmp;
            }

            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add = createAdder(1, 'add'),
        subtract = createAdder(-1, 'subtract');

    function isString(input) {
        return typeof input === 'string' || input instanceof String;
    }

    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
        return (
            isMoment(input) ||
            isDate(input) ||
            isString(input) ||
            isNumber(input) ||
            isNumberOrStringArray(input) ||
            isMomentInputObject(input) ||
            input === null ||
            input === undefined
        );
    }

    function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'years',
                'year',
                'y',
                'months',
                'month',
                'M',
                'days',
                'day',
                'd',
                'dates',
                'date',
                'D',
                'hours',
                'hour',
                'h',
                'minutes',
                'minute',
                'm',
                'seconds',
                'second',
                's',
                'milliseconds',
                'millisecond',
                'ms',
            ],
            i,
            property,
            propertyLen = properties.length;

        for (i = 0; i < propertyLen; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function isNumberOrStringArray(input) {
        var arrayTest = isArray(input),
            dataTypeTest = false;
        if (arrayTest) {
            dataTypeTest =
                input.filter(function (item) {
                    return !isNumber(item) && isString(input);
                }).length === 0;
        }
        return arrayTest && dataTypeTest;
    }

    function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'sameDay',
                'nextDay',
                'lastDay',
                'nextWeek',
                'lastWeek',
                'sameElse',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6
            ? 'sameElse'
            : diff < -1
            ? 'lastWeek'
            : diff < 0
            ? 'lastDay'
            : diff < 1
            ? 'sameDay'
            : diff < 2
            ? 'nextDay'
            : diff < 7
            ? 'nextWeek'
            : 'sameElse';
    }

    function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
            if (!arguments[0]) {
                time = undefined;
                formats = undefined;
            } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
            } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
            }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse',
            output =
                formats &&
                (isFunction(formats[format])
                    ? formats[format].call(this, now)
                    : formats[format]);

        return this.format(
            output || this.localeData().calendar(format, this, createLocal(now))
        );
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (
            (inclusivity[0] === '('
                ? this.isAfter(localFrom, units)
                : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')'
                ? this.isBefore(localTo, units)
                : !this.isAfter(localTo, units))
        );
    }

    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return (
                this.clone().startOf(units).valueOf() <= inputMs &&
                inputMs <= this.clone().endOf(units).valueOf()
            );
        }
    }

    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year':
                output = monthDiff(this, that) / 12;
                break;
            case 'month':
                output = monthDiff(this, that);
                break;
            case 'quarter':
                output = monthDiff(this, that) / 3;
                break;
            case 'second':
                output = (this - that) / 1e3;
                break; // 1000
            case 'minute':
                output = (this - that) / 6e4;
                break; // 1000 * 60
            case 'hour':
                output = (this - that) / 36e5;
                break; // 1000 * 60 * 60
            case 'day':
                output = (this - that - zoneDelta) / 864e5;
                break; // 1000 * 60 * 60 * 24, negate dst
            case 'week':
                output = (this - that - zoneDelta) / 6048e5;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        if (a.date() < b.date()) {
            // end-of-month calculations work correct when the start month has more
            // days than the end month.
            return -monthDiff(b, a);
        }
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true,
            m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(
                m,
                utc
                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
            );
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                    .toISOString()
                    .replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(
            m,
            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
        );
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment',
            zone = '',
            prefix,
            year,
            datetime,
            suffix;
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc()
                ? hooks.defaultFormatUtc
                : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ to: this, from: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ from: this, to: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData() {
        return this._locale;
    }

    var MS_PER_SECOND = 1000,
        MS_PER_MINUTE = 60 * MS_PER_SECOND,
        MS_PER_HOUR = 60 * MS_PER_MINUTE,
        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return ((dividend % divisor) + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(
                    this.year(),
                    this.month() - (this.month() % 3),
                    1
                );
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - this.weekday()
                );
                break;
            case 'isoWeek':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - (this.isoWeekday() - 1)
                );
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(
                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                    MS_PER_HOUR
                );
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time =
                    startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3) + 3,
                        1
                    ) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday() + 7
                    ) - 1;
                break;
            case 'isoWeek':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1) + 7
                    ) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time +=
                    MS_PER_HOUR -
                    mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    ) -
                    1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate() {
        return new Date(this.valueOf());
    }

    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond(),
        ];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds(),
        };
    }

    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2() {
        return isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict,
        };
    }

    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    addFormatToken('y', ['yy', 2], 0, 'eraYear');
    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);

    addParseToken(
        ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
        function (input, array, config, token) {
            var era = config._locale.erasParse(input, token, config._strict);
            if (era) {
                getParsingFlags(config).era = era;
            } else {
                getParsingFlags(config).invalidEra = input;
            }
        }
    );

    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);

    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    addParseToken(['yo'], function (input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
            match = input.match(config._locale._eraYearOrdinalRegex);
        }

        if (config._locale.eraYearOrdinalParse) {
            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
            array[YEAR] = parseInt(input, 10);
        }
    });

    function localeEras(m, format) {
        var i,
            l,
            date,
            eras = this._eras || getLocale('en')._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
            switch (typeof eras[i].since) {
                case 'string':
                    // truncate time
                    date = hooks(eras[i].since).startOf('day');
                    eras[i].since = date.valueOf();
                    break;
            }

            switch (typeof eras[i].until) {
                case 'undefined':
                    eras[i].until = +Infinity;
                    break;
                case 'string':
                    // truncate time
                    date = hooks(eras[i].until).startOf('day').valueOf();
                    eras[i].until = date.valueOf();
                    break;
            }
        }
        return eras;
    }

    function localeErasParse(eraName, format, strict) {
        var i,
            l,
            eras = this.eras(),
            name,
            abbr,
            narrow;
        eraName = eraName.toUpperCase();

        for (i = 0, l = eras.length; i < l; ++i) {
            name = eras[i].name.toUpperCase();
            abbr = eras[i].abbr.toUpperCase();
            narrow = eras[i].narrow.toUpperCase();

            if (strict) {
                switch (format) {
                    case 'N':
                    case 'NN':
                    case 'NNN':
                        if (abbr === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNN':
                        if (name === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNNN':
                        if (narrow === eraName) {
                            return eras[i];
                        }
                        break;
                }
            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                return eras[i];
            }
        }
    }

    function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? +1 : -1;
        if (year === undefined) {
            return hooks(era.since).year();
        } else {
            return hooks(era.since).year() + (year - era.offset) * dir;
        }
    }

    function getEraName() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].name;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].name;
            }
        }

        return '';
    }

    function getEraNarrow() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].narrow;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].narrow;
            }
        }

        return '';
    }

    function getEraAbbr() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].abbr;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].abbr;
            }
        }

        return '';
    }

    function getEraYear() {
        var i,
            l,
            dir,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            dir = eras[i].since <= eras[i].until ? +1 : -1;

            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (
                (eras[i].since <= val && val <= eras[i].until) ||
                (eras[i].until <= val && val <= eras[i].since)
            ) {
                return (
                    (this.year() - hooks(eras[i].since).year()) * dir +
                    eras[i].offset
                );
            }
        }

        return this.year();
    }

    function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
    }

    function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }

    function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }

    function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
    }

    function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
    }

    function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
    }

    function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
    }

    function computeErasParse() {
        var abbrPieces = [],
            namePieces = [],
            narrowPieces = [],
            mixedPieces = [],
            i,
            l,
            eras = this.eras();

        for (i = 0, l = eras.length; i < l; ++i) {
            namePieces.push(regexEscape(eras[i].name));
            abbrPieces.push(regexEscape(eras[i].abbr));
            narrowPieces.push(regexEscape(eras[i].narrow));

            mixedPieces.push(regexEscape(eras[i].name));
            mixedPieces.push(regexEscape(eras[i].abbr));
            mixedPieces.push(regexEscape(eras[i].narrow));
        }

        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
        this._erasNarrowRegex = new RegExp(
            '^(' + narrowPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(
        ['gggg', 'ggggg', 'GGGG', 'GGGGG'],
        function (input, week, config, token) {
            week[token.substr(0, 2)] = toInt(input);
        }
    );

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy
        );
    }

    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.isoWeek(),
            this.isoWeekday(),
            1,
            4
        );
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
        return input == null
            ? Math.ceil((this.month() + 1) / 3)
            : this.month((input - 1) * 3 + (this.month() % 3));
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict
            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
            : locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
        var dayOfYear =
            Math.round(
                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
            ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });

    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token, getSetMillisecond;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }

    getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return 'Moment<' + this.format() + '>';
        };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
        'dates accessor is deprecated. Use date instead.',
        getSetDayOfMonth
    );
    proto.months = deprecate(
        'months accessor is deprecated. Use month instead',
        getSetMonth
    );
    proto.years = deprecate(
        'years accessor is deprecated. Use year instead',
        getSetYear
    );
    proto.zone = deprecate(
        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
        getSetZone
    );
    proto.isDSTShifted = deprecate(
        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
        isDaylightSavingTimeShifted
    );

    function createUnix(input) {
        return createLocal(input * 1000);
    }

    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat(string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;

    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;

    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1(format, index, field, setter) {
        var locale = getLocale(),
            utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i,
            out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0,
            i,
            out = [];

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        eras: [
            {
                since: '0001-01-01',
                until: +Infinity,
                offset: 1,
                name: 'Anno Domini',
                narrow: 'AD',
                abbr: 'AD',
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: 'Before Christ',
                narrow: 'BC',
                abbr: 'BC',
            },
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    toInt((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    // Side effect imports

    hooks.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        getSetGlobalLocale
    );
    hooks.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        getLocale
    );

    var mathAbs = Math.abs;

    function abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds,
            days = this._days,
            months = this._months,
            data = this._data,
            seconds,
            minutes,
            hours,
            years,
            monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (
            !(
                (milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0)
            )
        ) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return (days * 4800) / 146097;
    }

    function monthsToDays(months) {
        // the reverse of daysToMonths
        return (months * 146097) / 4800;
    }

    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days,
            months,
            milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':
                    return months;
                case 'quarter':
                    return months / 3;
                case 'year':
                    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms'),
        asSeconds = makeAs('s'),
        asMinutes = makeAs('m'),
        asHours = makeAs('h'),
        asDays = makeAs('d'),
        asWeeks = makeAs('w'),
        asMonths = makeAs('M'),
        asQuarters = makeAs('Q'),
        asYears = makeAs('y');

    function clone$1() {
        return createDuration(this);
    }

    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds'),
        seconds = makeGetter('seconds'),
        minutes = makeGetter('minutes'),
        hours = makeGetter('hours'),
        days = makeGetter('days'),
        months = makeGetter('months'),
        years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round,
        thresholds = {
            ss: 44, // a few seconds to seconds
            s: 45, // seconds to minute
            m: 45, // minutes to hour
            h: 22, // hours to day
            d: 26, // days to month/week
            w: null, // weeks to month
            M: 11, // months to year
        };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            weeks = round(duration.as('w')),
            years = round(duration.as('y')),
            a =
                (seconds <= thresholds.ss && ['s', seconds]) ||
                (seconds < thresholds.s && ['ss', seconds]) ||
                (minutes <= 1 && ['m']) ||
                (minutes < thresholds.m && ['mm', minutes]) ||
                (hours <= 1 && ['h']) ||
                (hours < thresholds.h && ['hh', hours]) ||
                (days <= 1 && ['d']) ||
                (days < thresholds.d && ['dd', days]);

        if (thresholds.w != null) {
            a =
                a ||
                (weeks <= 1 && ['w']) ||
                (weeks < thresholds.w && ['ww', weeks]);
        }
        a = a ||
            (months <= 1 && ['M']) ||
            (months < thresholds.M && ['MM', months]) ||
            (years <= 1 && ['y']) || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var withSuffix = false,
            th = thresholds,
            locale,
            output;

        if (typeof argWithSuffix === 'object') {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') {
            withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === 'object') {
            th = Object.assign({}, thresholds, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) {
                th.ss = argThresholds.s - 1;
            }
        }

        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000,
            days = abs$1(this._days),
            months = abs$1(this._months),
            minutes,
            hours,
            years,
            s,
            total = this.asSeconds(),
            totalSign,
            ymSign,
            daysSign,
            hmsSign;

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

        totalSign = total < 0 ? '-' : '';
        ymSign = sign(this._months) !== sign(total) ? '-' : '';
        daysSign = sign(this._days) !== sign(total) ? '-' : '';
        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return (
            totalSign +
            'P' +
            (years ? ymSign + years + 'Y' : '') +
            (months ? ymSign + months + 'M' : '') +
            (days ? daysSign + days + 'D' : '') +
            (hours || minutes || seconds ? 'T' : '') +
            (hours ? hmsSign + hours + 'H' : '') +
            (minutes ? hmsSign + minutes + 'M' : '') +
            (seconds ? hmsSign + s + 'S' : '')
        );
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;

    proto$2.toIsoString = deprecate(
        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
        toISOString$1
    );
    proto$2.lang = lang;

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    //! moment.js

    hooks.version = '2.29.4';

    setHookCallback(createLocal);

    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD', // <input type="date" />
        TIME: 'HH:mm', // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW', // <input type="week" />
        MONTH: 'YYYY-MM', // <input type="month" />
    };

    return hooks;

})));


/***/ }),

/***/ "./src/2DgraphicsItems/DoubleRoundDotSolidShader.ts":
/*!**********************************************************!*\
  !*** ./src/2DgraphicsItems/DoubleRoundDotSolidShader.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DoubleRoundDotSolidShader = void 0;
var cuon_utils_1 = __webpack_require__(/*! ../webgl/cuon-utils */ "./src/webgl/cuon-utils.ts");
var DoubleRoundDotSolidShader = /** @class */ (function () {
    function DoubleRoundDotSolidShader(gl) {
        // Vertex shader program
        this.VSHADER_SOURCE = 'attribute vec3 a_Position; \n' +
            'attribute vec2 a_Texture; \n' +
            'varying vec2 v_Texture; \n' +
            'void main() {\n' +
            '    v_Texture = a_Texture; \n' +
            '    gl_Position = vec4(a_Position, 1.0); \n' +
            '}\n';
        // Fragment shader program
        this.FSHADER_SOURCE = 'precision highp float; \n' +
            'uniform vec4 a_Color; \n' +
            'varying vec2 v_Texture; \n' +
            'void main() {\n' +
            '     float dist = distance(v_Texture, vec2(0.0, 0.0)); \n' +
            '     if (dist > 0.4 && dist < 0.55 || dist > 0.75) discard; \n' +
            '     gl_FragColor = a_Color; \n' +
            '}\n';
        this.gl = gl;
        this.program = cuon_utils_1.createProgram(this.gl, this.VSHADER_SOURCE, this.FSHADER_SOURCE);
        if (!this.program) {
            console.log('Failed to create program');
        }
        this.gl.useProgram(this.program);
    }
    DoubleRoundDotSolidShader.prototype.renderFrame = function (numberOfElements) {
        if (this.program) {
            this.gl.drawElements(this.gl.TRIANGLES, numberOfElements, this.gl.UNSIGNED_BYTE, 0);
        }
    };
    return DoubleRoundDotSolidShader;
}());
exports.DoubleRoundDotSolidShader = DoubleRoundDotSolidShader;


/***/ }),

/***/ "./src/2DgraphicsItems/InsertKnotButtonDialogShader.ts":
/*!*************************************************************!*\
  !*** ./src/2DgraphicsItems/InsertKnotButtonDialogShader.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InsertKnotButtonDialogShader = void 0;
var cuon_utils_1 = __webpack_require__(/*! ../webgl/cuon-utils */ "./src/webgl/cuon-utils.ts");
var InsertKnotButtonDialogShader = /** @class */ (function () {
    function InsertKnotButtonDialogShader(gl) {
        // Vertex shader program
        this.VSHADER_SOURCE = 'attribute vec3 a_Position; \n' +
            'attribute vec2 a_Texture; \n' +
            'attribute vec3 a_Color; \n' +
            'varying vec2 v_Texture; \n' +
            'varying vec3 v_Color; \n' +
            'void main() {\n' +
            '    v_Texture = a_Texture; \n' +
            '    v_Color = a_Color; \n' +
            '    gl_Position = vec4(a_Position, 1.0); \n' +
            '}\n';
        // Fragment shader program
        this.FSHADER_SOURCE = 'precision highp float; \n' +
            'varying vec2 v_Texture; \n' +
            'varying vec3 v_Color; \n' +
            'void main() {\n' +
            '     float dist1 = distance(v_Texture, vec2(0.0, 0.0)); \n' +
            '     float dist2 = distance(v_Texture, vec2(0.9, 0.0)); \n' +
            '     float dist3 = distance(v_Texture, vec2(-0.9, 0.0)); \n' +
            '     if (dist1 < 0.25 || dist2 < 0.25 || dist3 < 0.25) { \n' +
            '     gl_FragColor = vec4(0.25, 0.25, 0.25, 1.0); } \n ' +
            '     else if (v_Texture[0] > -0.9 && v_Texture[0] < 0.9 && v_Texture[1] < 0.1 && v_Texture[1] > -0.1) { \n' +
            '     gl_FragColor = vec4(0.25, 0.25, 0.25, 1.0); } \n ' +
            '     else if ( distance(v_Texture, vec2(1.2, 0.7)) > 0.3 && v_Texture[0] > 1.2 && v_Texture[1] > 0.7 ) { \n' +
            '     gl_FragColor = vec4(0.3, 0.3, 0.3, 0.0); } \n' +
            '     else if ( distance(v_Texture, vec2(1.2, -0.7)) > 0.3 && v_Texture[0] > 1.2 && v_Texture[1] < -0.7 ) { \n' +
            '     gl_FragColor = vec4(0.3, 0.3, 0.3, 0.0); } \n' +
            '     else if ( distance(v_Texture, vec2(-1.2, 0.7)) > 0.3 && v_Texture[0] < -1.2 && v_Texture[1] > 0.7 ) { \n' +
            '     gl_FragColor = vec4(0.3, 0.3, 0.3, 0.0); } \n' +
            '     else if ( distance(v_Texture, vec2(-1.2, -0.7)) > 0.3 && v_Texture[0] < -1.2 && v_Texture[1] < -0.7 ) { \n' +
            '     gl_FragColor = vec4(0.3, 0.3, 0.3, 0.0); } \n' +
            '     else { \n' +
            '     /*gl_FragColor = vec4(0.5, 0.5, 0.5, 1.0); } */ \n' +
            '     gl_FragColor = vec4(v_Color, 1.0); } \n' +
            '}\n';
        this.gl = gl;
        this.program = cuon_utils_1.createProgram(this.gl, this.VSHADER_SOURCE, this.FSHADER_SOURCE);
        if (!this.program) {
            console.log('Failed to create program');
        }
        this.gl.useProgram(this.program);
    }
    InsertKnotButtonDialogShader.prototype.renderFrame = function (numberOfElements) {
        if (this.program) {
            this.gl.drawElements(this.gl.TRIANGLES, numberOfElements, this.gl.UNSIGNED_BYTE, 0);
        }
    };
    return InsertKnotButtonDialogShader;
}());
exports.InsertKnotButtonDialogShader = InsertKnotButtonDialogShader;
;


/***/ }),

/***/ "./src/2DgraphicsItems/LineSegmentShader.ts":
/*!**************************************************!*\
  !*** ./src/2DgraphicsItems/LineSegmentShader.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LineSegmentShader = void 0;
var cuon_utils_1 = __webpack_require__(/*! ../webgl/cuon-utils */ "./src/webgl/cuon-utils.ts");
var LineSegmentShader = /** @class */ (function () {
    function LineSegmentShader(gl) {
        // Vertex shader program
        this.VSHADER_SOURCE = 'attribute vec3 a_Position; \n' +
            'void main() {\n' +
            '    gl_Position = vec4(a_Position, 1.0); \n' +
            '}\n';
        // Fragment shader program
        this.FSHADER_SOURCE = 
        /* JCL 2020/09/28 Add control management of the control polygon */
        'precision mediump float; \n' +
            'uniform vec4 fColor; \n' +
            'void main() {\n' +
            '    gl_FragColor = fColor; \n' +
            /*'     gl_FragColor = vec4(216.0/255.0, 216.0/255.0, 216.0/255.0, 0.05); \n' +  */
            '}\n';
        this.gl = gl;
        this.program = cuon_utils_1.createProgram(this.gl, this.VSHADER_SOURCE, this.FSHADER_SOURCE);
        if (!this.program) {
            console.log('Failed to create program');
        }
        this.gl.useProgram(this.program);
    }
    LineSegmentShader.prototype.renderFrame = function (numberOfElements) {
        this.gl.drawElements(this.gl.TRIANGLES, numberOfElements, this.gl.UNSIGNED_BYTE, 0);
    };
    return LineSegmentShader;
}());
exports.LineSegmentShader = LineSegmentShader;
;


/***/ }),

/***/ "./src/2DgraphicsItems/PolylineShader.ts":
/*!***********************************************!*\
  !*** ./src/2DgraphicsItems/PolylineShader.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PolylineShader = void 0;
var cuon_utils_1 = __webpack_require__(/*! ../webgl/cuon-utils */ "./src/webgl/cuon-utils.ts");
var PolylineShader = /** @class */ (function () {
    function PolylineShader(gl) {
        // Vertex shader program
        this.VSHADER_SOURCE = 'attribute vec3 a_Position; \n' +
            'void main() {\n' +
            '    gl_Position = vec4(a_Position, 1.0); \n' +
            '}\n';
        // Fragment shader program
        this.FSHADER_SOURCE = 'precision mediump float; \n' +
            'uniform vec4 fColor; \n' +
            'void main() {\n' +
            '    gl_FragColor = fColor; \n' +
            '}\n';
        this.gl = gl;
        this.program = cuon_utils_1.createProgram(this.gl, this.VSHADER_SOURCE, this.FSHADER_SOURCE);
        if (!this.program) {
            console.log('Failed to create program');
        }
        this.gl.useProgram(this.program);
    }
    PolylineShader.prototype.renderFrame = function (numberOfVertices) {
        this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, numberOfVertices);
    };
    return PolylineShader;
}());
exports.PolylineShader = PolylineShader;
;


/***/ }),

/***/ "./src/2DgraphicsItems/RoundDotSolidShader.ts":
/*!****************************************************!*\
  !*** ./src/2DgraphicsItems/RoundDotSolidShader.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RoundDotSolidShader = void 0;
var cuon_utils_1 = __webpack_require__(/*! ../webgl/cuon-utils */ "./src/webgl/cuon-utils.ts");
var RoundDotSolidShader = /** @class */ (function () {
    function RoundDotSolidShader(gl) {
        // Vertex shader program
        this.VSHADER_SOURCE = 'attribute vec3 a_Position; \n' +
            'attribute vec2 a_Texture; \n' +
            'varying vec2 v_Texture; \n' +
            'void main() {\n' +
            '    v_Texture = a_Texture; \n' +
            '    gl_Position = vec4(a_Position, 1.0); \n' +
            '}\n';
        // Fragment shader program
        this.FSHADER_SOURCE = 'precision highp float; \n' +
            'uniform vec4 a_Color; \n' +
            'varying vec2 v_Texture; \n' +
            'void main() {\n' +
            '     float dist = distance(v_Texture, vec2(0.0, 0.0)); \n' +
            '     if (dist > 0.5) discard; \n' +
            '     gl_FragColor = a_Color; \n' +
            '}\n';
        this.gl = gl;
        this.program = cuon_utils_1.createProgram(this.gl, this.VSHADER_SOURCE, this.FSHADER_SOURCE);
        if (!this.program) {
            console.log('Failed to create program');
        }
        this.gl.useProgram(this.program);
    }
    RoundDotSolidShader.prototype.renderFrame = function (numberOfElements) {
        if (this.program) {
            this.gl.drawElements(this.gl.TRIANGLES, numberOfElements, this.gl.UNSIGNED_BYTE, 0);
        }
    };
    return RoundDotSolidShader;
}());
exports.RoundDotSolidShader = RoundDotSolidShader;


/***/ }),

/***/ "./src/2DgraphicsItems/RoundDotTwoLevelsTransparencyShader.ts":
/*!********************************************************************!*\
  !*** ./src/2DgraphicsItems/RoundDotTwoLevelsTransparencyShader.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RoundDotTwoLevelsTransparencyShader = void 0;
var cuon_utils_1 = __webpack_require__(/*! ../webgl/cuon-utils */ "./src/webgl/cuon-utils.ts");
var RoundDotTwoLevelsTransparencyShader = /** @class */ (function () {
    function RoundDotTwoLevelsTransparencyShader(gl) {
        // Vertex shader program
        this.VSHADER_SOURCE = 'attribute vec3 a_Position; \n' +
            'attribute vec2 a_Texture; \n' +
            'attribute vec3 a_Color; \n' +
            'varying vec2 v_Texture; \n' +
            'varying vec3 v_Color; \n' +
            'void main() {\n' +
            '    v_Texture = a_Texture; \n' +
            '    v_Color = a_Color; \n' +
            '    gl_Position = vec4(a_Position, 1.0); \n' +
            '}\n';
        // Fragment shader program
        this.FSHADER_SOURCE = 'precision highp float; \n' +
            '//uniform bool selected; \n' +
            'varying vec2 v_Texture; \n' +
            'varying vec3 v_Color; \n' +
            'void main() {\n' +
            '     vec4 fColor = vec4(0.1, 0.1, 0.1, 0.0); \n' +
            '     float dist = distance(v_Texture, vec2(0.0, 0.0)); \n' +
            '     vec4 color1 = vec4(v_Color, 0.35); \n' +
            '     vec4 color2 = vec4(v_Color, 0.9); \n' +
            '     float delta = 0.1; \n' +
            '     float alpha1 = smoothstep(0.35-delta, 0.35, dist); \n' +
            '     float alpha2 = smoothstep(0.65-delta, 0.65, dist); \n' +
            '     vec4 fColor1 = mix(color1, fColor, alpha1); \n' +
            '     vec4 fColor2 = mix(color2, fColor, alpha2); \n' +
            '     gl_FragColor = (fColor1+fColor2)/2.0; \n' +
            '}\n';
        this.gl = gl;
        this.program = cuon_utils_1.createProgram(this.gl, this.VSHADER_SOURCE, this.FSHADER_SOURCE);
        if (!this.program) {
            console.log('Failed to create program');
        }
        this.gl.useProgram(this.program);
    }
    RoundDotTwoLevelsTransparencyShader.prototype.renderFrame = function (numberOfElements, selectedControlPoint) {
        if (this.program) {
            //this.gl.uniform1i(this.gl.getUniformLocation(this.program, "selected"), False);
            this.gl.drawElements(this.gl.TRIANGLES, numberOfElements, this.gl.UNSIGNED_BYTE, 0);
            if (selectedControlPoint != -1 && selectedControlPoint !== null) {
                //this.gl.uniform1i(this.gl.getUniformLocation(this.program, "selected"), True);
                this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_BYTE, selectedControlPoint * 6);
            }
        }
    };
    return RoundDotTwoLevelsTransparencyShader;
}());
exports.RoundDotTwoLevelsTransparencyShader = RoundDotTwoLevelsTransparencyShader;


/***/ }),

/***/ "./src/2DgraphicsItems/SquareDotSolidShader.ts":
/*!*****************************************************!*\
  !*** ./src/2DgraphicsItems/SquareDotSolidShader.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SquareDotSolidShader = void 0;
var cuon_utils_1 = __webpack_require__(/*! ../webgl/cuon-utils */ "./src/webgl/cuon-utils.ts");
var SquareDotSolidShader = /** @class */ (function () {
    function SquareDotSolidShader(gl) {
        // Vertex shader program
        this.VSHADER_SOURCE = 'attribute vec3 a_Position; \n' +
            'void main() {\n' +
            '    gl_Position = vec4(a_Position, 1.0); \n' +
            '}\n';
        // Fragment shader program
        this.FSHADER_SOURCE = 
        // 'precision highp float; \n' +
        'precision mediump float; \n' +
            'uniform vec4 fColor; \n' +
            'void main() {\n' +
            '    gl_FragColor = fColor; \n' +
            '}\n';
        this.gl = gl;
        this.program = cuon_utils_1.createProgram(this.gl, this.VSHADER_SOURCE, this.FSHADER_SOURCE);
        if (!this.program) {
            console.log('Failed to create program');
        }
        this.gl.useProgram(this.program);
    }
    SquareDotSolidShader.prototype.renderFrame = function (numberOfElements) {
        if (this.program) {
            this.gl.drawElements(this.gl.TRIANGLES, numberOfElements, this.gl.UNSIGNED_BYTE, 0);
        }
    };
    return SquareDotSolidShader;
}());
exports.SquareDotSolidShader = SquareDotSolidShader;


/***/ }),

/***/ "./src/bsplineOptimizationProblems/AbstractOptProblemBSplineR1toR2.ts":
/*!****************************************************************************!*\
  !*** ./src/bsplineOptimizationProblems/AbstractOptProblemBSplineR1toR2.ts ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deepCopyAnalyticHighOrderCurveDerivatives = exports.convertStepToVector2d = exports.AbstractOptProblemBSplineR1toR2 = exports.ConstraintType = void 0;
var BernsteinDecompositionR1toR1_1 = __webpack_require__(/*! ../newBsplines/BernsteinDecompositionR1toR1 */ "./src/newBsplines/BernsteinDecompositionR1toR1.ts");
var DenseMatrix_1 = __webpack_require__(/*! ../linearAlgebra/DenseMatrix */ "./src/linearAlgebra/DenseMatrix.ts");
var DiagonalMatrix_1 = __webpack_require__(/*! ../linearAlgebra/DiagonalMatrix */ "./src/linearAlgebra/DiagonalMatrix.ts");
var Vector2d_1 = __webpack_require__(/*! ../mathVector/Vector2d */ "./src/mathVector/Vector2d.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ConstraintType;
(function (ConstraintType) {
    ConstraintType[ConstraintType["none"] = 0] = "none";
    ConstraintType[ConstraintType["inflection"] = 1] = "inflection";
    ConstraintType[ConstraintType["curvatureExtrema"] = 2] = "curvatureExtrema";
})(ConstraintType = exports.ConstraintType || (exports.ConstraintType = {}));
var AbstractOptProblemBSplineR1toR2 = /** @class */ (function () {
    function AbstractOptProblemBSplineR1toR2(splineInitial, shapeSpaceDiffEventsStructure) {
        this.inflectionConstraintsSign = [];
        this._inflectionInactiveConstraints = [];
        this._curvatureExtremaConstraintsSign = [];
        this._curvatureExtremaInactiveConstraints = [];
        this._curvatureNumeratorCP = [];
        this._curvatureDerivativeNumeratorCP = [];
        this.dBasisFunctions_du = [];
        this.d2BasisFunctions_du2 = [];
        this.d3BasisFunctions_du3 = [];
        this.constraintType = ConstraintType.none;
        this._inflectionTotalNumberOfConstraints = 0;
        this.inflectionNumberOfActiveConstraints = 0;
        this._curvatureExtremaTotalNumberOfConstraints = 0;
        this.curvatureExtremaNumberOfActiveConstraints = 0;
        this._spline = splineInitial.clone();
        this._previousSpline = splineInitial.clone();
        this._target = splineInitial.clone();
        this._shapeSpaceDiffEventsStructure = shapeSpaceDiffEventsStructure;
        this.computeBasisFunctionsDerivatives();
        this._numberOfIndependentVariables = this._spline.freeControlPoints.length * 2;
        this._gradient_f0 = this.compute_gradient_f0(this._spline);
        this._f0 = this.compute_f0(this._gradient_f0);
        this._hessian_f0 = DiagonalMatrix_1.identityMatrix(this._numberOfIndependentVariables);
        this._f = [];
        this._gradient_f = new DenseMatrix_1.DenseMatrix(1, 1);
        this._hessian_f = undefined;
        this._analyticHighOrderCurveDerivatives = this.initExpansiveComputations();
        this._previousAnalyticHighOrderCurveDerivatives = this.initExpansiveComputations();
    }
    Object.defineProperty(AbstractOptProblemBSplineR1toR2.prototype, "shapeSpaceDiffEventsStructure", {
        get: function () {
            return this._shapeSpaceDiffEventsStructure;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractOptProblemBSplineR1toR2.prototype, "inflectionInactiveConstraints", {
        get: function () {
            return this._inflectionInactiveConstraints.slice();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractOptProblemBSplineR1toR2.prototype, "curvatureExtremaInactiveConstraints", {
        get: function () {
            return this._curvatureExtremaInactiveConstraints.slice();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractOptProblemBSplineR1toR2.prototype, "numberOfIndependentVariables", {
        get: function () {
            return this._numberOfIndependentVariables;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractOptProblemBSplineR1toR2.prototype, "inflectionTotalNumberOfConstraints", {
        get: function () {
            return this._inflectionTotalNumberOfConstraints;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractOptProblemBSplineR1toR2.prototype, "curvatureExtremaTotalNumberOfConstraints", {
        get: function () {
            return this._curvatureExtremaTotalNumberOfConstraints;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractOptProblemBSplineR1toR2.prototype, "curvatureExtremaConstraintsSign", {
        get: function () {
            return this._curvatureExtremaConstraintsSign.slice();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractOptProblemBSplineR1toR2.prototype, "curvatureNumeratorCP", {
        get: function () {
            return this._curvatureNumeratorCP.slice();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractOptProblemBSplineR1toR2.prototype, "curvatureDerivativeNumeratorCP", {
        get: function () {
            return this._curvatureDerivativeNumeratorCP.slice();
        },
        set: function (curvatureDerivativeNumeratorCP) {
            this._curvatureDerivativeNumeratorCP = curvatureDerivativeNumeratorCP.slice();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractOptProblemBSplineR1toR2.prototype, "f0", {
        get: function () {
            return this._f0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractOptProblemBSplineR1toR2.prototype, "gradient_f0", {
        get: function () {
            return this._gradient_f0.slice();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractOptProblemBSplineR1toR2.prototype, "hessian_f0", {
        get: function () {
            return this._hessian_f0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractOptProblemBSplineR1toR2.prototype, "numberOfConstraints", {
        get: function () {
            if (this._shapeSpaceDiffEventsStructure.activeControlInflections && this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
                return this.inflectionConstraintsSign.length - this._inflectionInactiveConstraints.length + this._curvatureExtremaConstraintsSign.length - this._curvatureExtremaInactiveConstraints.length;
            }
            else if (this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
                return this._curvatureExtremaConstraintsSign.length - this._curvatureExtremaInactiveConstraints.length;
            }
            else if (this._shapeSpaceDiffEventsStructure.activeControlInflections) {
                return this.inflectionConstraintsSign.length - this._inflectionInactiveConstraints.length;
            }
            else {
                // JCL 27/02/2023 modification to integrate the status none: must be double checked
                return 0;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractOptProblemBSplineR1toR2.prototype, "f", {
        get: function () {
            return this._f.slice();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractOptProblemBSplineR1toR2.prototype, "gradient_f", {
        get: function () {
            return this._gradient_f;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractOptProblemBSplineR1toR2.prototype, "hessian_f", {
        get: function () {
            return this._hessian_f;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractOptProblemBSplineR1toR2.prototype, "analyticHighOrderCurveDerivatives", {
        get: function () {
            return this._analyticHighOrderCurveDerivatives;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractOptProblemBSplineR1toR2.prototype, "previousAnalyticHighOrderCurveDerivatives", {
        get: function () {
            return this._previousAnalyticHighOrderCurveDerivatives;
        },
        enumerable: false,
        configurable: true
    });
    AbstractOptProblemBSplineR1toR2.prototype.step = function (deltaX) {
        this._previousAnalyticHighOrderCurveDerivatives = deepCopyAnalyticHighOrderCurveDerivatives(this._analyticHighOrderCurveDerivatives);
        this._analyticHighOrderCurveDerivatives = this.initExpansiveComputations();
        // let e: ExpensiveComputationResults = this.initExpansiveComputations();
        var curvatureNumerator = [];
        var curvatureDerivativeNumerator = [];
        this._previousSpline = this._spline.clone();
        this._spline = this.spline.moveControlPoints(convertStepToVector2d(deltaX));
        this._gradient_f0 = this.compute_gradient_f0(this._spline);
        this._f0 = this.compute_f0(this._gradient_f0);
        if (this._shapeSpaceDiffEventsStructure.activeControlInflections || this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // e = this.expensiveComputation(this._spline);
            this._analyticHighOrderCurveDerivatives = this.expensiveComputation(this._spline);
            // curvatureNumerator = this.curvatureNumerator(e.h4);
            curvatureNumerator = this.curvatureNumerator();
            this.inflectionConstraintsSign = this.computeConstraintsSign(curvatureNumerator);
            this.constraintType = ConstraintType.inflection;
            //this._inflectionInactiveConstraints = this.computeInactiveConstraints(this.inflectionConstraintsSign, curvatureNumerator)
            this._inflectionInactiveConstraints = this.computeInactiveConstraints(curvatureNumerator);
            this.inflectionNumberOfActiveConstraints = curvatureNumerator.length - this.inflectionInactiveConstraints.length;
        }
        if (this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // curvatureDerivativeNumerator = this.curvatureDerivativeNumerator(e.h1, e.h2, e.h3, e.h4);
            curvatureDerivativeNumerator = this.curvatureDerivativeNumerator();
            this._curvatureExtremaConstraintsSign = this.computeConstraintsSign(curvatureDerivativeNumerator);
            this.constraintType = ConstraintType.curvatureExtrema;
            //this._curvatureExtremaInactiveConstraints = this.computeInactiveConstraints(this.curvatureExtremaConstraintsSign, g)
            this._curvatureExtremaInactiveConstraints = this.computeInactiveConstraints(curvatureDerivativeNumerator);
            this.curvatureExtremaNumberOfActiveConstraints = curvatureDerivativeNumerator.length - this.curvatureExtremaInactiveConstraints.length;
        }
        this._f = this.compute_f(curvatureNumerator, this.inflectionConstraintsSign, this._inflectionInactiveConstraints, curvatureDerivativeNumerator, this._curvatureExtremaConstraintsSign, this._curvatureExtremaInactiveConstraints);
        // this._gradient_f = this.compute_gradient_f(e, this.inflectionConstraintsSign, this._inflectionInactiveConstraints, this._curvatureExtremaConstraintsSign, this._curvatureExtremaInactiveConstraints)  
        this._gradient_f = this.compute_gradient_f(this.inflectionConstraintsSign, this._inflectionInactiveConstraints, this._curvatureExtremaConstraintsSign, this._curvatureExtremaInactiveConstraints);
        // JCL temporary add
        return true;
    };
    AbstractOptProblemBSplineR1toR2.prototype.fStep = function (step) {
        if (this._previousAnalyticHighOrderCurveDerivatives.bdsxu.flattenControlPointsArray().length === 0) {
            if (this._analyticHighOrderCurveDerivatives.bdsxu.flattenControlPointsArray().length === 0) {
                this._previousAnalyticHighOrderCurveDerivatives = this.expensiveComputation(this._spline);
            }
            else {
                this._previousAnalyticHighOrderCurveDerivatives = deepCopyAnalyticHighOrderCurveDerivatives(this._analyticHighOrderCurveDerivatives);
            }
            this._previousSpline = this._spline.clone();
        }
        // let e: ExpensiveComputationResults = this.initExpansiveComputations();
        this._analyticHighOrderCurveDerivatives = this.initExpansiveComputations();
        var curvatureNumerator = [];
        var curvatureDerivativeNumerator = [];
        var splineTemp = this.spline.clone();
        splineTemp = splineTemp.moveControlPoints(convertStepToVector2d(step));
        if (this._shapeSpaceDiffEventsStructure.activeControlInflections || this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // e = this.expensiveComputation(splineTemp);
            this._analyticHighOrderCurveDerivatives = this.expensiveComputation(splineTemp);
            // curvatureNumerator = this.curvatureNumerator(e.h4);
            curvatureNumerator = this.curvatureNumerator();
        }
        if (this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // curvatureDerivativeNumerator = this.curvatureDerivativeNumerator(e.h1, e.h2, e.h3, e.h4);
            curvatureDerivativeNumerator = this.curvatureDerivativeNumerator();
        }
        return this.compute_f(curvatureNumerator, this.inflectionConstraintsSign, this._inflectionInactiveConstraints, curvatureDerivativeNumerator, this._curvatureExtremaConstraintsSign, this._curvatureExtremaInactiveConstraints);
    };
    AbstractOptProblemBSplineR1toR2.prototype.f0Step = function (step) {
        var splineTemp = this.spline.clone();
        splineTemp = splineTemp.moveControlPoints(convertStepToVector2d(step));
        return this.compute_f0(this.compute_gradient_f0(splineTemp));
    };
    AbstractOptProblemBSplineR1toR2.prototype.expensiveComputation = function (spline) {
        var sxuuu;
        var syuuu;
        var controlPointArray = [];
        var bdsxuuu = new BernsteinDecompositionR1toR1_1.BernsteinDecompositionR1toR1(controlPointArray);
        var bdsyuuu = new BernsteinDecompositionR1toR1_1.BernsteinDecompositionR1toR1(controlPointArray);
        var h1 = new BernsteinDecompositionR1toR1_1.BernsteinDecompositionR1toR1(controlPointArray);
        var h2 = new BernsteinDecompositionR1toR1_1.BernsteinDecompositionR1toR1(controlPointArray);
        var h3 = new BernsteinDecompositionR1toR1_1.BernsteinDecompositionR1toR1(controlPointArray);
        var sx = this.bSplineR1toR1Factory(spline.getControlPointsX(), spline.knots);
        var sy = this.bSplineR1toR1Factory(spline.getControlPointsY(), spline.knots);
        var sxu = sx.derivative();
        var syu = sy.derivative();
        var sxuu = sxu.derivative();
        var syuu = syu.derivative();
        var bdsxu = sxu.bernsteinDecomposition();
        var bdsyu = syu.bernsteinDecomposition();
        var bdsxuu = sxuu.bernsteinDecomposition();
        var bdsyuu = syuu.bernsteinDecomposition();
        if (this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            sxuuu = sxuu.derivative();
            syuuu = syuu.derivative();
            bdsxuuu = sxuuu.bernsteinDecomposition();
            bdsyuuu = syuuu.bernsteinDecomposition();
            h1 = (bdsxu.multiply(bdsxu)).add(bdsyu.multiply(bdsyu));
            h2 = (bdsxu.multiply(bdsyuuu)).subtract(bdsyu.multiply(bdsxuuu));
            h3 = (bdsxu.multiply(bdsxuu)).add(bdsyu.multiply(bdsyuu));
        }
        var h4 = (bdsxu.multiply(bdsyuu)).subtract(bdsyu.multiply(bdsxuu));
        return {
            bdsxu: bdsxu,
            bdsyu: bdsyu,
            bdsxuu: bdsxuu,
            bdsyuu: bdsyuu,
            bdsxuuu: bdsxuuu,
            bdsyuuu: bdsyuuu,
            h1: h1,
            h2: h2,
            h3: h3,
            h4: h4
        };
    };
    AbstractOptProblemBSplineR1toR2.prototype.initExpansiveComputations = function () {
        var controlPointArray = [];
        var bdsxu = new BernsteinDecompositionR1toR1_1.BernsteinDecompositionR1toR1(controlPointArray);
        var bdsyu = new BernsteinDecompositionR1toR1_1.BernsteinDecompositionR1toR1(controlPointArray);
        var bdsxuu = new BernsteinDecompositionR1toR1_1.BernsteinDecompositionR1toR1(controlPointArray);
        var bdsyuu = new BernsteinDecompositionR1toR1_1.BernsteinDecompositionR1toR1(controlPointArray);
        var bdsxuuu = new BernsteinDecompositionR1toR1_1.BernsteinDecompositionR1toR1(controlPointArray);
        var bdsyuuu = new BernsteinDecompositionR1toR1_1.BernsteinDecompositionR1toR1(controlPointArray);
        var h1 = new BernsteinDecompositionR1toR1_1.BernsteinDecompositionR1toR1(controlPointArray);
        var h2 = new BernsteinDecompositionR1toR1_1.BernsteinDecompositionR1toR1(controlPointArray);
        var h3 = new BernsteinDecompositionR1toR1_1.BernsteinDecompositionR1toR1(controlPointArray);
        var h4 = new BernsteinDecompositionR1toR1_1.BernsteinDecompositionR1toR1(controlPointArray);
        return {
            bdsxu: bdsxu,
            bdsyu: bdsyu,
            bdsxuu: bdsxuu,
            bdsyuu: bdsyuu,
            bdsxuuu: bdsxuuu,
            bdsyuuu: bdsyuuu,
            h1: h1,
            h2: h2,
            h3: h3,
            h4: h4
        };
    };
    AbstractOptProblemBSplineR1toR2.prototype.compute_gradient_f0 = function (spline) {
        var result = [];
        var n = spline.freeControlPoints.length;
        for (var i = 0; i < n; i += 1) {
            result.push(spline.freeControlPoints[i].x - this._target.freeControlPoints[i].x);
        }
        for (var i = 0; i < n; i += 1) {
            result.push(spline.freeControlPoints[i].y - this._target.freeControlPoints[i].y);
        }
        return result;
    };
    AbstractOptProblemBSplineR1toR2.prototype.compute_f0 = function (gradient_f0) {
        var result = 0;
        var n = gradient_f0.length;
        for (var i = 0; i < n; i += 1) {
            result += Math.pow(gradient_f0[i], 2);
        }
        return 0.5 * result;
    };
    AbstractOptProblemBSplineR1toR2.prototype.compute_curvatureExtremaConstraints = function (curvatureDerivativeNumerator, constraintsSign, inactiveConstraints) {
        var result = [];
        for (var i = 0, j = 0, n = constraintsSign.length; i < n; i += 1) {
            if (i === inactiveConstraints[j]) {
                j += 1;
            }
            else {
                result.push(curvatureDerivativeNumerator[i] * constraintsSign[i]);
            }
        }
        return result;
    };
    AbstractOptProblemBSplineR1toR2.prototype.compute_inflectionConstraints = function (curvatureNumerator, constraintsSign, inactiveConstraints) {
        var result = [];
        for (var i = 0, j = 0, n = constraintsSign.length; i < n; i += 1) {
            if (i === inactiveConstraints[j]) {
                j += 1;
            }
            else {
                result.push(curvatureNumerator[i] * constraintsSign[i]);
            }
        }
        return result;
    };
    // curvatureNumerator(h4: BernsteinDecompositionR1toR1): number[] {
    //     return h4.flattenControlPointsArray();
    AbstractOptProblemBSplineR1toR2.prototype.curvatureNumerator = function () {
        return this._analyticHighOrderCurveDerivatives.h4.flattenControlPointsArray();
    };
    // curvatureDerivativeNumerator(   h1: BernsteinDecompositionR1toR1, 
    //                                 h2: BernsteinDecompositionR1toR1, 
    //                                 h3: BernsteinDecompositionR1toR1, 
    //                                 h4: BernsteinDecompositionR1toR1): number[] {
    //     const g = (h1.multiply(h2)).subtract(h3.multiply(h4).multiplyByScalar(3));
    AbstractOptProblemBSplineR1toR2.prototype.curvatureDerivativeNumerator = function () {
        var g = (this._analyticHighOrderCurveDerivatives.h1.multiply(this._analyticHighOrderCurveDerivatives.h2)).subtract(this._analyticHighOrderCurveDerivatives.h3.multiply(this._analyticHighOrderCurveDerivatives.h4).multiplyByScalar(3));
        return g.flattenControlPointsArray();
    };
    AbstractOptProblemBSplineR1toR2.prototype.curvatureDerivativeNumeratorPreviousIteration = function () {
        var g = (this._previousAnalyticHighOrderCurveDerivatives.h1.multiply(this._previousAnalyticHighOrderCurveDerivatives.h2)).subtract(this._previousAnalyticHighOrderCurveDerivatives.h3.multiply(this._previousAnalyticHighOrderCurveDerivatives.h4).multiplyByScalar(3));
        return g.flattenControlPointsArray();
    };
    AbstractOptProblemBSplineR1toR2.prototype.computeConstraintsSign = function (controlPoints) {
        var result = [];
        for (var i = 0, n = controlPoints.length; i < n; i += 1) {
            if (controlPoints[i] > 0) {
                result.push(-1);
            }
            else {
                result.push(1);
            }
        }
        return result;
    };
    AbstractOptProblemBSplineR1toR2.prototype.compute_f = function (curvatureNumerator, inflectionConstraintsSign, inflectionInactiveConstraints, curvatureDerivativeNumerator, curvatureExtremaConstraintsSign, curvatureExtremaInactiveConstraints) {
        var f = [];
        if (this._shapeSpaceDiffEventsStructure.activeControlInflections && this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            var r1 = this.compute_curvatureExtremaConstraints(curvatureDerivativeNumerator, curvatureExtremaConstraintsSign, curvatureExtremaInactiveConstraints);
            var r2 = this.compute_inflectionConstraints(curvatureNumerator, inflectionConstraintsSign, inflectionInactiveConstraints);
            f = r1.concat(r2);
        }
        else if (this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            f = this.compute_curvatureExtremaConstraints(curvatureDerivativeNumerator, curvatureExtremaConstraintsSign, curvatureExtremaInactiveConstraints);
        }
        else if (this._shapeSpaceDiffEventsStructure.activeControlInflections) {
            f = this.compute_inflectionConstraints(curvatureNumerator, inflectionConstraintsSign, inflectionInactiveConstraints);
        }
        else {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "compute_f", "active control set to none: unable to compute f.");
            warning.logMessageToConsole();
            f[0] = 0;
        }
        return f;
    };
    // compute_gradient_f( e: ExpensiveComputationResults,
    //                     inflectionConstraintsSign: number[],
    AbstractOptProblemBSplineR1toR2.prototype.compute_gradient_f = function (inflectionConstraintsSign, inflectionInactiveConstraints, curvatureExtremaConstraintsSign, curvatureExtremaInactiveConstraints) {
        if (this._shapeSpaceDiffEventsStructure.activeControlInflections && this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // const m1 = this.compute_curvatureExtremaConstraints_gradient(e, curvatureExtremaConstraintsSign, curvatureExtremaInactiveConstraints)
            // const m2 = this.compute_inflectionConstraints_gradient(e, inflectionConstraintsSign, inflectionInactiveConstraints)
            var m1 = this.compute_curvatureExtremaConstraints_gradient(curvatureExtremaConstraintsSign, curvatureExtremaInactiveConstraints);
            var m2 = this.compute_inflectionConstraints_gradient(inflectionConstraintsSign, inflectionInactiveConstraints);
            var _a = __read(m1.shape, 2), row_m1 = _a[0], n = _a[1];
            var _b = __read(m2.shape, 1), row_m2 = _b[0];
            var m = row_m1 + row_m2;
            var result = new DenseMatrix_1.DenseMatrix(m, n);
            for (var i = 0; i < row_m1; i += 1) {
                for (var j = 0; j < n; j += 1) {
                    result.set(i, j, m1.get(i, j));
                }
            }
            for (var i = 0; i < row_m2; i += 1) {
                for (var j = 0; j < n; j += 1) {
                    result.set(row_m1 + i, j, m2.get(i, j));
                }
            }
            return result;
        }
        else if (this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // return this.compute_curvatureExtremaConstraints_gradient(e, curvatureExtremaConstraintsSign, curvatureExtremaInactiveConstraints)
            return this.compute_curvatureExtremaConstraints_gradient(curvatureExtremaConstraintsSign, curvatureExtremaInactiveConstraints);
            // JCL modif temporaire pour debuter integration OptProblemBSplineR1toR2
        }
        else if (this._shapeSpaceDiffEventsStructure.activeControlInflections) {
            // return this.compute_inflectionConstraints_gradient(e, inflectionConstraintsSign, inflectionInactiveConstraints)
            return this.compute_inflectionConstraints_gradient(inflectionConstraintsSign, inflectionInactiveConstraints);
        }
        else {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "compute_gradient_f", "active control set to none: unable to compute gradients of f.");
            warning.logMessageToConsole();
            var result = new DenseMatrix_1.DenseMatrix(1, 1);
            return result;
        }
    };
    AbstractOptProblemBSplineR1toR2.prototype.update = function (spline) {
        // let e: ExpensiveComputationResults = this.initExpansiveComputations();
        this._analyticHighOrderCurveDerivatives = this.initExpansiveComputations();
        this._spline = spline.clone();
        this.computeBasisFunctionsDerivatives();
        this._numberOfIndependentVariables = this._spline.freeControlPoints.length * 2;
        this._gradient_f0 = this.compute_gradient_f0(this._spline);
        this._f0 = this.compute_f0(this._gradient_f0);
        this._hessian_f0 = DiagonalMatrix_1.identityMatrix(this._numberOfIndependentVariables);
        if (this._shapeSpaceDiffEventsStructure.activeControlInflections || this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // e = this.expensiveComputation(this._spline);
            this._analyticHighOrderCurveDerivatives = this.expensiveComputation(this._spline);
            // this._curvatureNumeratorCP = this.curvatureNumerator(e.h4);
            this._curvatureNumeratorCP = this.curvatureNumerator();
            this._inflectionTotalNumberOfConstraints = this._curvatureNumeratorCP.length;
            this.inflectionConstraintsSign = this.computeConstraintsSign(this._curvatureNumeratorCP);
            this.constraintType = ConstraintType.inflection;
            this._inflectionInactiveConstraints = this.computeInactiveConstraints(this._curvatureNumeratorCP);
            this.inflectionNumberOfActiveConstraints = this._curvatureNumeratorCP.length - this.inflectionInactiveConstraints.length;
        }
        if (this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // this._curvatureDerivativeNumeratorCP = this.curvatureDerivativeNumerator(e.h1, e.h2, e.h3, e.h4);
            this._curvatureDerivativeNumeratorCP = this.curvatureDerivativeNumerator();
            this._curvatureExtremaTotalNumberOfConstraints = this._curvatureDerivativeNumeratorCP.length;
            this._curvatureExtremaConstraintsSign = this.computeConstraintsSign(this._curvatureDerivativeNumeratorCP);
            this.constraintType = ConstraintType.curvatureExtrema;
            this._curvatureExtremaInactiveConstraints = this.computeInactiveConstraints(this._curvatureDerivativeNumeratorCP);
            this.curvatureExtremaNumberOfActiveConstraints = this._curvatureDerivativeNumeratorCP.length - this.curvatureExtremaInactiveConstraints.length;
        }
        this._f = this.compute_f(this._curvatureNumeratorCP, this.inflectionConstraintsSign, this._inflectionInactiveConstraints, this._curvatureDerivativeNumeratorCP, this._curvatureExtremaConstraintsSign, this._curvatureExtremaInactiveConstraints);
        // this._gradient_f = this.compute_gradient_f(e, this.inflectionConstraintsSign, this._inflectionInactiveConstraints, this._curvatureExtremaConstraintsSign, this._curvatureExtremaInactiveConstraints)
        this._gradient_f = this.compute_gradient_f(this.inflectionConstraintsSign, this._inflectionInactiveConstraints, this._curvatureExtremaConstraintsSign, this._curvatureExtremaInactiveConstraints);
    };
    AbstractOptProblemBSplineR1toR2.prototype.init = function (spline) {
        this._analyticHighOrderCurveDerivatives = this.initExpansiveComputations();
        this._previousAnalyticHighOrderCurveDerivatives = this.initExpansiveComputations();
        // this._previousAnalyticHighOrderCurveDerivatives = this.expensiveComputation(spline);
    };
    return AbstractOptProblemBSplineR1toR2;
}());
exports.AbstractOptProblemBSplineR1toR2 = AbstractOptProblemBSplineR1toR2;
function convertStepToVector2d(step) {
    var n = step.length / 2;
    var result = [];
    for (var i = 0; i < n; i += 1) {
        result.push(new Vector2d_1.Vector2d(step[i], step[n + i]));
    }
    return result;
}
exports.convertStepToVector2d = convertStepToVector2d;
function deepCopyAnalyticHighOrderCurveDerivatives(analyticHighOrderCurveDerivatives) {
    var bdsxu = analyticHighOrderCurveDerivatives.bdsxu.clone();
    var bdsyu = analyticHighOrderCurveDerivatives.bdsyu.clone();
    var bdsxuu = analyticHighOrderCurveDerivatives.bdsxuu.clone();
    var bdsyuu = analyticHighOrderCurveDerivatives.bdsyuu.clone();
    var bdsxuuu = analyticHighOrderCurveDerivatives.bdsxuuu.clone();
    var bdsyuuu = analyticHighOrderCurveDerivatives.bdsyuuu.clone();
    var h1 = analyticHighOrderCurveDerivatives.h1.clone();
    var h2 = analyticHighOrderCurveDerivatives.h2.clone();
    var h3 = analyticHighOrderCurveDerivatives.h3.clone();
    var h4 = analyticHighOrderCurveDerivatives.h4.clone();
    return {
        bdsxu: bdsxu,
        bdsyu: bdsyu,
        bdsxuu: bdsxuu,
        bdsyuu: bdsyuu,
        bdsxuuu: bdsxuuu,
        bdsyuuu: bdsyuuu,
        h1: h1,
        h2: h2,
        h3: h3,
        h4: h4
    };
}
exports.deepCopyAnalyticHighOrderCurveDerivatives = deepCopyAnalyticHighOrderCurveDerivatives;


/***/ }),

/***/ "./src/bsplineOptimizationProblems/OptProblemOpenBSplineR1toR2.ts":
/*!************************************************************************!*\
  !*** ./src/bsplineOptimizationProblems/OptProblemOpenBSplineR1toR2.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace = exports.OptProblemOpenBSplineR1toR2WithWeigthingFactorsDedicatedToCubics = exports.OptProblemOpenBSplineR1toR2NoInactiveConstraints = exports.OptProblemOpenBSplineR1toR2WithWeigthingFactorsNoInactiveConstraints = exports.OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities = exports.OptProblemOPenBSplineR1toR2WithWeigthingFactors = exports.OptProblemOpenBSplineR1toR2 = exports.WEIGHT_AT_EXTREMITIES = exports.DEFAULT_WEIGHT = exports.CONSTRAINT_BOUND_THRESHOLD = exports.eventMove = void 0;
var MathVectorBasicOperations_1 = __webpack_require__(/*! ../linearAlgebra/MathVectorBasicOperations */ "./src/linearAlgebra/MathVectorBasicOperations.ts");
var BSplineR1toR1_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR1 */ "./src/newBsplines/BSplineR1toR1.ts");
var DiagonalMatrix_1 = __webpack_require__(/*! ../linearAlgebra/DiagonalMatrix */ "./src/linearAlgebra/DiagonalMatrix.ts");
var DenseMatrix_1 = __webpack_require__(/*! ../linearAlgebra/DenseMatrix */ "./src/linearAlgebra/DenseMatrix.ts");
var SymmetricMatrix_1 = __webpack_require__(/*! ../linearAlgebra/SymmetricMatrix */ "./src/linearAlgebra/SymmetricMatrix.ts");
var NeighboringEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/NeighboringEvents */ "./src/sequenceOfDifferentialEvents/NeighboringEvents.ts");
var BSplineR1toR2DifferentialProperties_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2DifferentialProperties */ "./src/newBsplines/BSplineR1toR2DifferentialProperties.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var PolygonWithVerticesR1_1 = __webpack_require__(/*! ../containers/PolygonWithVerticesR1 */ "./src/containers/PolygonWithVerticesR1.ts");
var OscillatingPolygonWithVerticesR1_1 = __webpack_require__(/*! ../containers/OscillatingPolygonWithVerticesR1 */ "./src/containers/OscillatingPolygonWithVerticesR1.ts");
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var DifferentialEventVariation_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/DifferentialEventVariation */ "./src/sequenceOfDifferentialEvents/DifferentialEventVariation.ts");
var AbstractOptProblemBSplineR1toR2_1 = __webpack_require__(/*! ./AbstractOptProblemBSplineR1toR2 */ "./src/bsplineOptimizationProblems/AbstractOptProblemBSplineR1toR2.ts");
var ShapeSpaceBoundaryEnforcer_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/ShapeSpaceBoundaryEnforcer */ "./src/curveShapeSpaceNavigation/ShapeSpaceBoundaryEnforcer.ts");
var eventMove;
(function (eventMove) {
    eventMove[eventMove["still"] = 0] = "still";
    eventMove[eventMove["moveToKnotLR"] = 1] = "moveToKnotLR";
    eventMove[eventMove["moveAwayFromKnotRL"] = 2] = "moveAwayFromKnotRL";
    eventMove[eventMove["moveToKnotRL"] = 3] = "moveToKnotRL";
    eventMove[eventMove["moveAwayFromKnotLR"] = 4] = "moveAwayFromKnotLR";
    eventMove[eventMove["atKnot"] = 5] = "atKnot";
})(eventMove = exports.eventMove || (exports.eventMove = {}));
var transitionCP;
(function (transitionCP) {
    transitionCP[transitionCP["negativeToPositive"] = 0] = "negativeToPositive";
    transitionCP[transitionCP["positiveToNegative"] = 1] = "positiveToNegative";
    transitionCP[transitionCP["none"] = 2] = "none";
})(transitionCP || (transitionCP = {}));
var DEVIATION_FROM_KNOT = 0.25;
exports.CONSTRAINT_BOUND_THRESHOLD = 1.0e-7;
exports.DEFAULT_WEIGHT = 1;
exports.WEIGHT_AT_EXTREMITIES = 10;
var OptProblemOpenBSplineR1toR2 = /** @class */ (function (_super) {
    __extends(OptProblemOpenBSplineR1toR2, _super);
    function OptProblemOpenBSplineR1toR2(splineInitial, shapeSpaceDiffEventsStructure) {
        var _this = _super.call(this, splineInitial, shapeSpaceDiffEventsStructure) || this;
        _this.isComputingHessian = false;
        _this.Dh5xx = [];
        _this.Dh6_7xy = [];
        _this.Dh8_9xx = [];
        _this.Dh10_11xy = [];
        // let e: ExpensiveComputationResults = this.initExpansiveComputations();
        _this._analyticHighOrderCurveDerivatives = _this.initExpansiveComputations();
        // e = this.expensiveComputation(this._spline);
        _this._analyticHighOrderCurveDerivatives = _this.expensiveComputation(_this._spline);
        if (_this._shapeSpaceDiffEventsStructure.activeControlInflections || _this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // this._curvatureNumeratorCP = this.curvatureNumerator(e.h4);
            _this._curvatureNumeratorCP = _this.curvatureNumerator();
            _this._inflectionTotalNumberOfConstraints = _this._curvatureNumeratorCP.length;
            _this.inflectionConstraintsSign = _this.computeConstraintsSign(_this._curvatureNumeratorCP);
            _this.constraintType = AbstractOptProblemBSplineR1toR2_1.ConstraintType.inflection;
            _this._inflectionInactiveConstraints = _this.computeInactiveConstraints(_this._curvatureNumeratorCP);
            _this.inflectionNumberOfActiveConstraints = _this._curvatureNumeratorCP.length - _this.inflectionInactiveConstraints.length;
        }
        if (_this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // this._curvatureDerivativeNumeratorCP = this.curvatureDerivativeNumerator(e.h1, e.h2, e.h3, e.h4);
            _this._curvatureDerivativeNumeratorCP = _this.curvatureDerivativeNumerator();
            _this._curvatureExtremaTotalNumberOfConstraints = _this._curvatureDerivativeNumeratorCP.length;
            _this._curvatureExtremaConstraintsSign = _this.computeConstraintsSign(_this._curvatureDerivativeNumeratorCP);
            _this.constraintType = AbstractOptProblemBSplineR1toR2_1.ConstraintType.curvatureExtrema;
            _this._curvatureExtremaInactiveConstraints = _this.computeInactiveConstraints(_this._curvatureDerivativeNumeratorCP);
            _this.curvatureExtremaNumberOfActiveConstraints = _this._curvatureDerivativeNumeratorCP.length - _this.curvatureExtremaInactiveConstraints.length;
        }
        _this._f = _this.compute_f(_this._curvatureNumeratorCP, _this.inflectionConstraintsSign, _this._inflectionInactiveConstraints, _this._curvatureDerivativeNumeratorCP, _this._curvatureExtremaConstraintsSign, _this._curvatureExtremaInactiveConstraints);
        // this._gradient_f = this.compute_gradient_f(e, this.inflectionConstraintsSign, this._inflectionInactiveConstraints,
        //     this._curvatureExtremaConstraintsSign, this._curvatureExtremaInactiveConstraints);
        _this._gradient_f = _this.compute_gradient_f(_this.inflectionConstraintsSign, _this._inflectionInactiveConstraints, _this._curvatureExtremaConstraintsSign, _this._curvatureExtremaInactiveConstraints);
        if (_this.isComputingHessian) {
            var e = _this.expensiveComputation(_this.spline);
            _this.prepareForHessianComputation(_this.dBasisFunctions_du, _this.d2BasisFunctions_du2, _this.d3BasisFunctions_du3);
            _this._hessian_f = _this.compute_hessian_f(e.bdsxu, e.bdsyu, e.bdsxuu, e.bdsyuu, e.bdsxuuu, e.bdsyuuu, e.h1, e.h2, e.h3, e.h4, _this.curvatureExtremaConstraintsSign, _this.curvatureExtremaInactiveConstraints);
        }
        _this.nbZeros = [];
        _this.curvatureDerivativeBuffer = [];
        return _this;
    }
    Object.defineProperty(OptProblemOpenBSplineR1toR2.prototype, "f", {
        get: function () {
            if (MathVectorBasicOperations_1.containsNaN(this._f)) {
                throw new Error("OptimizationProblem_BSpline_R1_to_R2 contains Nan in its f vector");
            }
            return this._f;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OptProblemOpenBSplineR1toR2.prototype, "spline", {
        get: function () {
            return this._spline;
        },
        set: function (spline) {
            this._spline = spline;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OptProblemOpenBSplineR1toR2.prototype, "previousSpline", {
        get: function () {
            return this._previousSpline;
        },
        enumerable: false,
        configurable: true
    });
    OptProblemOpenBSplineR1toR2.prototype.bSplineR1toR1Factory = function (controlPoints, knots) {
        return new BSplineR1toR1_1.BSplineR1toR1(controlPoints, knots);
    };
    OptProblemOpenBSplineR1toR2.prototype.computeBasisFunctionsDerivatives = function () {
        var n = this.spline.controlPoints.length;
        this._numberOfIndependentVariables = n * 2;
        var diracControlPoints = MathVectorBasicOperations_1.zeroVector(n);
        var secondOrderSplineDerivatives = [];
        this.dBasisFunctions_du = [];
        this.d2BasisFunctions_du2 = [];
        this.d3BasisFunctions_du3 = [];
        if (this._shapeSpaceDiffEventsStructure.activeControlInflections || this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            for (var i = 0; i < n; i += 1) {
                diracControlPoints[i] = 1;
                var s = new BSplineR1toR1_1.BSplineR1toR1(diracControlPoints.slice(), this.spline.knots.slice());
                var su = s.derivative();
                var suu = su.derivative();
                secondOrderSplineDerivatives.push(suu);
                var suBDecomp = su.bernsteinDecomposition();
                var suuBDecomp = suu.bernsteinDecomposition();
                this.dBasisFunctions_du.push(suBDecomp);
                this.d2BasisFunctions_du2.push(suuBDecomp);
                diracControlPoints[i] = 0;
            }
        }
        if (this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            var diracControlPoints_1 = MathVectorBasicOperations_1.zeroVector(n);
            for (var i = 0; i < n; i += 1) {
                diracControlPoints_1[i] = 1;
                var suuu = secondOrderSplineDerivatives[i].derivative();
                var suuuBDecomp = suuu.bernsteinDecomposition();
                this.d3BasisFunctions_du3.push(suuuBDecomp);
                diracControlPoints_1[i] = 0;
            }
        }
    };
    OptProblemOpenBSplineR1toR2.prototype.computeSignChangeIntervals = function (constraintsSign) {
        var signChangesIntervals = [];
        var previousSign = constraintsSign[0];
        for (var i = 1, n = constraintsSign.length; i < n; i += 1) {
            if (previousSign !== constraintsSign[i]) {
                signChangesIntervals.push(i - 1);
            }
            previousSign = constraintsSign[i];
        }
        return signChangesIntervals;
    };
    OptProblemOpenBSplineR1toR2.prototype.inactivateConstraintsAtCurveEXtremities = function (controlPoints, inactiveConstraints) {
        if (inactiveConstraints.indexOf(0) === -1)
            inactiveConstraints.splice(0, 0, 0);
        if (inactiveConstraints.indexOf(controlPoints.length - 1) === -1)
            inactiveConstraints.push(controlPoints.length - 1);
    };
    /**
     * Some contraints are set inactive to allowed the point of curvature extrema to slide along the curve.
     * A curvature extremum or an inflection is located between two coefficient of different signs.
     * For the general case, the smallest coefficient in absolute value is chosen to be free.
     * For the specific case of two successive sign changes, the coefficient in the middle is chosen.
     *
     * @param constraintsSign The vector of sign for the constraints: sign f_i <= 0
     * @param controlPoints The vector of value of the function: f_i
     */
    OptProblemOpenBSplineR1toR2.prototype.computeInactiveConstraints = function (controlPoints) {
        this.checkConstraintTypeConsistency(controlPoints);
        var result = this.extractVerticesLocallyClosestToZero(controlPoints);
        return result;
    };
    OptProblemOpenBSplineR1toR2.prototype.extractVerticesLocallyClosestToZero = function (controlPoints) {
        var e_1, _a;
        var indicesConstraints = [];
        var polygon = new PolygonWithVerticesR1_1.PolygonWithVerticesR1(controlPoints);
        var oscillatingPolygons = polygon.extractOscillatingPolygons();
        if (oscillatingPolygons.length !== 0) {
            var oscillatingPolygonsWithAdjacency = OscillatingPolygonWithVerticesR1_1.extractAdjacentOscillatingPolygons(oscillatingPolygons);
            try {
                for (var oscillatingPolygonsWithAdjacency_1 = __values(oscillatingPolygonsWithAdjacency), oscillatingPolygonsWithAdjacency_1_1 = oscillatingPolygonsWithAdjacency_1.next(); !oscillatingPolygonsWithAdjacency_1_1.done; oscillatingPolygonsWithAdjacency_1_1 = oscillatingPolygonsWithAdjacency_1.next()) {
                    var oscillatingPolyWithAdj = oscillatingPolygonsWithAdjacency_1_1.value;
                    if (oscillatingPolyWithAdj.oscillatingPolygons[0].closestVertexAtBeginning.index !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE) {
                        indicesConstraints.push(oscillatingPolyWithAdj.oscillatingPolygons[0].closestVertexAtBeginning.index);
                    }
                    if (oscillatingPolyWithAdj.oscillatingPolygons.length !== 1) {
                        for (var connectionIndex = 0; connectionIndex < (oscillatingPolyWithAdj.oscillatingPolygons.length - 1); connectionIndex++) {
                            var compatibleConstraint = oscillatingPolyWithAdj.getClosestVertexToZeroAtConnection(connectionIndex);
                            if (compatibleConstraint.index !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE && indicesConstraints[indicesConstraints.length - 1] !== compatibleConstraint.index) {
                                indicesConstraints.push(compatibleConstraint.index);
                            }
                            else {
                                var indexEnd = oscillatingPolyWithAdj.oscillatingPolygons[connectionIndex].closestVertexAtEnd.index;
                                if (indexEnd !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE && indicesConstraints[indicesConstraints.length - 1] !== indexEnd) {
                                    indicesConstraints.push(oscillatingPolyWithAdj.oscillatingPolygons[connectionIndex].closestVertexAtEnd.index);
                                }
                                var indexBgng = oscillatingPolyWithAdj.oscillatingPolygons[connectionIndex + 1].closestVertexAtBeginning.index;
                                if (indexBgng !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE && indicesConstraints[indicesConstraints.length - 1] !== indexBgng) {
                                    indicesConstraints.push(indexBgng);
                                }
                            }
                        }
                    }
                    var nbOscillatingPolygons = oscillatingPolyWithAdj.oscillatingPolygons.length;
                    var index = oscillatingPolyWithAdj.oscillatingPolygons[nbOscillatingPolygons - 1].closestVertexAtEnd.index;
                    if (index !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE && indicesConstraints[indicesConstraints.length - 1] !== index) {
                        indicesConstraints.push(index);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (oscillatingPolygonsWithAdjacency_1_1 && !oscillatingPolygonsWithAdjacency_1_1.done && (_a = oscillatingPolygonsWithAdjacency_1.return)) _a.call(oscillatingPolygonsWithAdjacency_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return indicesConstraints;
    };
    OptProblemOpenBSplineR1toR2.prototype.checkConstraintTypeConsistency = function (controlPoints) {
        var valid = false;
        if (controlPoints.length === this._inflectionTotalNumberOfConstraints && this.constraintType === AbstractOptProblemBSplineR1toR2_1.ConstraintType.inflection) {
            valid = true;
        }
        else if (controlPoints.length === this._curvatureExtremaTotalNumberOfConstraints && this.constraintType === AbstractOptProblemBSplineR1toR2_1.ConstraintType.curvatureExtrema) {
            valid = true;
        }
        if (!valid) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkConstraintTypeConsistency", "The number of constraints to analyse is not consistent with the type of constraint prescribed: please check.");
            error.logMessageToConsole();
        }
    };
    OptProblemOpenBSplineR1toR2.prototype.g = function () {
        // const e = this.expensiveComputation(this.spline);
        // return this.curvatureDerivativeNumerator(e.h1, e.h2, e.h3, e.h4);
        this._analyticHighOrderCurveDerivatives = this.expensiveComputation(this.spline);
        return this.curvatureDerivativeNumerator();
    };
    OptProblemOpenBSplineR1toR2.prototype.gradient_g = function () {
        var e = this.expensiveComputation(this.spline);
        return this.gradient_curvatureDerivativeNumerator(e.bdsxu, e.bdsyu, e.bdsxuu, e.bdsyuu, e.bdsxuuu, e.bdsyuuu, e.h1, e.h2, e.h3, e.h4);
    };
    OptProblemOpenBSplineR1toR2.prototype.gradient_curvatureDerivativeNumerator = function (sxu, syu, sxuu, syuu, sxuuu, syuuu, h1, h2, h3, h4) {
        var dgx = [];
        var dgy = [];
        var m = this.spline.controlPoints.length;
        var n = this.curvatureExtremaTotalNumberOfConstraints;
        var result = new DenseMatrix_1.DenseMatrix(n, 2 * m);
        for (var i = 0; i < m; i += 1) {
            var h5 = this.dBasisFunctions_du[i].multiply(sxu);
            var h6 = this.dBasisFunctions_du[i].multiply(syuuu);
            var h7 = syu.multiply(this.d3BasisFunctions_du3[i]).multiplyByScalar(-1);
            var h8 = this.dBasisFunctions_du[i].multiply(sxuu);
            var h9 = sxu.multiply(this.d2BasisFunctions_du2[i]);
            var h10 = this.dBasisFunctions_du[i].multiply(syuu);
            var h11 = syu.multiply(this.d2BasisFunctions_du2[i]).multiplyByScalar(-1);
            dgx.push((h5.multiply(h2).multiplyByScalar(2)).add(h1.multiply(h6.add(h7))).add(((((h8.add(h9)).multiply(h4))).add((h10.add(h11)).multiply(h3))).multiplyByScalar(-3)));
        }
        for (var i = 0; i < m; i += 1) {
            var h5 = this.dBasisFunctions_du[i].multiply(syu);
            var h6 = this.dBasisFunctions_du[i].multiply(sxuuu).multiplyByScalar(-1);
            var h7 = sxu.multiply(this.d3BasisFunctions_du3[i]);
            var h8 = this.dBasisFunctions_du[i].multiply(syuu);
            var h9 = syu.multiply(this.d2BasisFunctions_du2[i]);
            var h10 = this.dBasisFunctions_du[i].multiply(sxuu).multiplyByScalar(-1);
            var h11 = sxu.multiply(this.d2BasisFunctions_du2[i]);
            dgy.push((h5.multiply(h2).multiplyByScalar(2)).add(h1.multiply(h6.add(h7))).add(((((h8.add(h9)).multiply(h4))).add((h10.add(h11)).multiply(h3))).multiplyByScalar(-3)));
        }
        for (var i = 0; i < m; i += 1) {
            var cpx = dgx[i].flattenControlPointsArray();
            var cpy = dgy[i].flattenControlPointsArray();
            for (var j = 0; j < n; j += 1) {
                result.set(j, i, cpx[j]);
                result.set(j, m + i, cpy[j]);
            }
        }
        return result;
    };
    // compute_curvatureExtremaConstraints_gradient( e: ExpensiveComputationResults,
    //                                                 constraintsSign: number[], 
    //                                                 inactiveConstraints: number[]): DenseMatrix {
    OptProblemOpenBSplineR1toR2.prototype.compute_curvatureExtremaConstraints_gradient = function (constraintsSign, inactiveConstraints) {
        // const sxu = e.bdsxu
        // const sxuu = e.bdsxuu
        // const sxuuu = e.bdsxuuu
        // const syu = e.bdsyu
        // const syuu = e.bdsyuu
        // const syuuu = e.bdsyuuu
        // const h1 = e.h1
        // const h2 = e.h2
        // const h3 = e.h3
        // const h4 = e.h4
        var sxu = this._analyticHighOrderCurveDerivatives.bdsxu;
        var sxuu = this._analyticHighOrderCurveDerivatives.bdsxuu;
        var sxuuu = this._analyticHighOrderCurveDerivatives.bdsxuuu;
        var syu = this._analyticHighOrderCurveDerivatives.bdsyu;
        var syuu = this._analyticHighOrderCurveDerivatives.bdsyuu;
        var syuuu = this._analyticHighOrderCurveDerivatives.bdsyuuu;
        var h1 = this._analyticHighOrderCurveDerivatives.h1;
        var h2 = this._analyticHighOrderCurveDerivatives.h2;
        var h3 = this._analyticHighOrderCurveDerivatives.h3;
        var h4 = this._analyticHighOrderCurveDerivatives.h4;
        var dgx = [];
        var dgy = [];
        var controlPointsLength = this.spline.controlPoints.length;
        var totalNumberOfConstraints = this.curvatureExtremaTotalNumberOfConstraints;
        var degree = this.spline.degree;
        for (var i = 0; i < controlPointsLength; i += 1) {
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(controlPointsLength - degree, i + 1);
            var h1_subset = h1.subset(start, lessThan);
            var h2_subset = h2.subset(start, lessThan);
            var h3_subset = h3.subset(start, lessThan);
            var h4_subset = h4.subset(start, lessThan);
            var h5 = this.dBasisFunctions_du[i].multiplyRange(sxu, start, lessThan);
            var h6 = this.dBasisFunctions_du[i].multiplyRange(syuuu, start, lessThan);
            var h7 = syu.multiplyRange(this.d3BasisFunctions_du3[i], start, lessThan).multiplyByScalar(-1);
            var h8 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan);
            var h9 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h11 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan).multiplyByScalar(-1);
            dgx.push((h5.multiply(h2_subset).multiplyByScalar(2)).add(h1_subset.multiply(h6.add(h7))).add(((((h8.add(h9)).multiply(h4_subset))).add((h10.add(h11)).multiply(h3_subset))).multiplyByScalar(-3)));
        }
        for (var i = 0; i < controlPointsLength; i += 1) {
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(controlPointsLength - degree, i + 1);
            var h1_subset = h1.subset(start, lessThan);
            var h2_subset = h2.subset(start, lessThan);
            var h3_subset = h3.subset(start, lessThan);
            var h4_subset = h4.subset(start, lessThan);
            var h5 = this.dBasisFunctions_du[i].multiplyRange(syu, start, lessThan);
            var h6 = this.dBasisFunctions_du[i].multiplyRange(sxuuu, start, lessThan).multiplyByScalar(-1);
            var h7 = sxu.multiplyRange(this.d3BasisFunctions_du3[i], start, lessThan);
            var h8 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h9 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan).multiplyByScalar(-1);
            var h11 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            dgy.push((h5.multiply(h2_subset).multiplyByScalar(2)).add(h1_subset.multiply(h6.add(h7))).add(((((h8.add(h9)).multiply(h4_subset))).add((h10.add(h11)).multiply(h3_subset))).multiplyByScalar(-3)));
        }
        var result = new DenseMatrix_1.DenseMatrix(totalNumberOfConstraints - inactiveConstraints.length, 2 * controlPointsLength);
        for (var i = 0; i < controlPointsLength; i += 1) {
            var cpx = dgx[i].flattenControlPointsArray();
            var cpy = dgy[i].flattenControlPointsArray();
            var start = Math.max(0, i - degree) * (4 * degree - 5);
            var lessThan = Math.min(controlPointsLength - degree, i + 1) * (4 * degree - 5);
            var deltaj = 0;
            for (var i_1 = 0; i_1 < inactiveConstraints.length; i_1 += 1) {
                if (inactiveConstraints[i_1] >= start) {
                    break;
                }
                deltaj += 1;
            }
            for (var j = start; j < lessThan; j += 1) {
                if (j === inactiveConstraints[deltaj]) {
                    deltaj += 1;
                }
                else {
                    result.set(j - deltaj, i, cpx[j - start] * constraintsSign[j]);
                    result.set(j - deltaj, controlPointsLength + i, cpy[j - start] * constraintsSign[j]);
                }
            }
        }
        return result;
    };
    OptProblemOpenBSplineR1toR2.prototype.compute_curvatureExtremaConstraints_gradientPreviousIteration = function (constraintsSign, inactiveConstraints) {
        var sxu = this._previousAnalyticHighOrderCurveDerivatives.bdsxu;
        var sxuu = this._previousAnalyticHighOrderCurveDerivatives.bdsxuu;
        var sxuuu = this._previousAnalyticHighOrderCurveDerivatives.bdsxuuu;
        var syu = this._previousAnalyticHighOrderCurveDerivatives.bdsyu;
        var syuu = this._previousAnalyticHighOrderCurveDerivatives.bdsyuu;
        var syuuu = this._previousAnalyticHighOrderCurveDerivatives.bdsyuuu;
        var h1 = this._previousAnalyticHighOrderCurveDerivatives.h1;
        var h2 = this._previousAnalyticHighOrderCurveDerivatives.h2;
        var h3 = this._previousAnalyticHighOrderCurveDerivatives.h3;
        var h4 = this._previousAnalyticHighOrderCurveDerivatives.h4;
        var dgx = [];
        var dgy = [];
        var controlPointsLength = this.spline.controlPoints.length;
        var totalNumberOfConstraints = this.curvatureExtremaTotalNumberOfConstraints;
        var degree = this.spline.degree;
        for (var i = 0; i < controlPointsLength; i += 1) {
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(controlPointsLength - degree, i + 1);
            var h1_subset = h1.subset(start, lessThan);
            var h2_subset = h2.subset(start, lessThan);
            var h3_subset = h3.subset(start, lessThan);
            var h4_subset = h4.subset(start, lessThan);
            var h5 = this.dBasisFunctions_du[i].multiplyRange(sxu, start, lessThan);
            var h6 = this.dBasisFunctions_du[i].multiplyRange(syuuu, start, lessThan);
            var h7 = syu.multiplyRange(this.d3BasisFunctions_du3[i], start, lessThan).multiplyByScalar(-1);
            var h8 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan);
            var h9 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h11 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan).multiplyByScalar(-1);
            dgx.push((h5.multiply(h2_subset).multiplyByScalar(2)).add(h1_subset.multiply(h6.add(h7))).add(((((h8.add(h9)).multiply(h4_subset))).add((h10.add(h11)).multiply(h3_subset))).multiplyByScalar(-3)));
        }
        for (var i = 0; i < controlPointsLength; i += 1) {
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(controlPointsLength - degree, i + 1);
            var h1_subset = h1.subset(start, lessThan);
            var h2_subset = h2.subset(start, lessThan);
            var h3_subset = h3.subset(start, lessThan);
            var h4_subset = h4.subset(start, lessThan);
            var h5 = this.dBasisFunctions_du[i].multiplyRange(syu, start, lessThan);
            var h6 = this.dBasisFunctions_du[i].multiplyRange(sxuuu, start, lessThan).multiplyByScalar(-1);
            var h7 = sxu.multiplyRange(this.d3BasisFunctions_du3[i], start, lessThan);
            var h8 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h9 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan).multiplyByScalar(-1);
            var h11 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            dgy.push((h5.multiply(h2_subset).multiplyByScalar(2)).add(h1_subset.multiply(h6.add(h7))).add(((((h8.add(h9)).multiply(h4_subset))).add((h10.add(h11)).multiply(h3_subset))).multiplyByScalar(-3)));
        }
        var result = new DenseMatrix_1.DenseMatrix(totalNumberOfConstraints - inactiveConstraints.length, 2 * controlPointsLength);
        for (var i = 0; i < controlPointsLength; i += 1) {
            var cpx = dgx[i].flattenControlPointsArray();
            var cpy = dgy[i].flattenControlPointsArray();
            var start = Math.max(0, i - degree) * (4 * degree - 5);
            var lessThan = Math.min(controlPointsLength - degree, i + 1) * (4 * degree - 5);
            var deltaj = 0;
            for (var i_2 = 0; i_2 < inactiveConstraints.length; i_2 += 1) {
                if (inactiveConstraints[i_2] >= start) {
                    break;
                }
                deltaj += 1;
            }
            for (var j = start; j < lessThan; j += 1) {
                if (j === inactiveConstraints[deltaj]) {
                    deltaj += 1;
                }
                else {
                    result.set(j - deltaj, i, cpx[j - start] * constraintsSign[j]);
                    result.set(j - deltaj, controlPointsLength + i, cpy[j - start] * constraintsSign[j]);
                }
            }
        }
        return result;
    };
    OptProblemOpenBSplineR1toR2.prototype.traceCurvatureExtrema = function () {
        var curvatureExtrema_gradientsPrevious = [];
        var curvatureDerivative_gradientUPrevious = [];
        var knotsCurvatureDerivNumerator = this._shapeSpaceDiffEventsStructure.curveShapeSpaceNavigator.navigationState.curveAnalyserCurrentCurve.curvatureDerivativeNumerator.knots;
        var gradient_curvatureExtremaPrevious = this.compute_curvatureExtremaConstraints_gradientPreviousIteration(this.curvatureExtremaConstraintsSign, []);
        var curvatureDerivativePrevious = this.bSplineR1toR1Factory(this.curvatureDerivativeNumeratorPreviousIteration(), knotsCurvatureDerivNumerator);
        // let curvatureDerivativePrevious = new BSplineR1toR1(this.curvatureDerivativeNumeratorPreviousIteration(), knotsCurvatureDerivNumerator);
        var zerosCuratureDerivPrevious = curvatureDerivativePrevious.zeros();
        var curvatureDerivative = this.bSplineR1toR1Factory(this.curvatureDerivativeNumerator(), knotsCurvatureDerivNumerator);
        var zerosCuratureDeriv = curvatureDerivative.zeros();
        var curveDP = new BSplineR1toR2DifferentialProperties_1.BSplineR1toR2DifferentialProperties(this.previousSpline);
        var curvatureDeriv = curveDP.curvatureDerivativeNumerator();
        var zerosCDeriv = curvatureDeriv.zeros();
        console.log("zeros from BSplineDifProp = " + zerosCDeriv);
        var curveDPcurrent = new BSplineR1toR2DifferentialProperties_1.BSplineR1toR2DifferentialProperties(this.spline);
        var curvatureDerivCurrent = curveDPcurrent.curvatureDerivativeNumerator();
        var zerosCDerivCurrent = curvatureDerivCurrent.zeros();
        console.log("zeros current from BSplineDifProp = " + zerosCDerivCurrent);
        if (this.nbZeros.length < 2) {
            this.nbZeros.push(zerosCuratureDerivPrevious.length);
            this.curvatureDerivativeBuffer.push(curvatureDerivativePrevious);
        }
        else if (this.nbZeros.length === 2) {
            this.nbZeros.splice(0, 1);
            this.curvatureDerivativeBuffer.splice(0, 1);
            this.nbZeros.push(zerosCuratureDerivPrevious.length);
            this.curvatureDerivativeBuffer.push(curvatureDerivativePrevious);
        }
        console.log("estimate variations of zeros during optim iteration. nb zeros = " + zerosCuratureDerivPrevious.length);
        console.log("spline previous = " + JSON.stringify(this.previousSpline.controlPoints));
        console.log("spline current = " + JSON.stringify(this.spline.controlPoints));
        if (zerosCuratureDerivPrevious.length === 2 && zerosCuratureDeriv.length === 0) {
            // console.log("nbZ[0] = "+this.nbZeros[0]+" Bvert = "+this.curvatureDerivativeBuffer[0].controlPoints+" nbZ[1] = "+this.nbZeros[1]+" Bvert = "+this.curvatureDerivativeBuffer[1].controlPoints);
            console.log("B[0] = " + curvatureDerivative.evaluate(zerosCuratureDerivPrevious[0]) + " B[1] = " + curvatureDerivative.evaluate(zerosCuratureDerivPrevious[1]));
            if (curvatureDerivative.evaluate(zerosCuratureDerivPrevious[0]) < 0.0 && curvatureDerivative.evaluate(zerosCuratureDerivPrevious[1]) < 0.0) {
                console.log("Two curvature extrema have merged");
            }
        }
        var curvatureSecondDerivativePrevious = curvatureDerivativePrevious.derivative();
        for (var i = 0; i < zerosCuratureDerivPrevious.length; i++) {
            console.log("zero location[ " + i + " ] = " + zerosCuratureDerivPrevious[i]);
            curvatureDerivative_gradientUPrevious.push(curvatureSecondDerivativePrevious.evaluate(zerosCuratureDerivPrevious[i]));
            if (gradient_curvatureExtremaPrevious.shape[0] !== this._shapeSpaceDiffEventsStructure.curveShapeSpaceNavigator.navigationState.curveAnalyserCurrentCurve.curvatureDerivativeNumerator.controlPoints.length) {
                console.log('inconsistent sizes of control polygons !!');
            }
            var curvatureExtrema_gradientperCPComponent = [];
            for (var k = 0; k < gradient_curvatureExtremaPrevious.shape[1]; k++) {
                var gradient = [];
                for (var j = 0; j < gradient_curvatureExtremaPrevious.shape[0]; j++) {
                    gradient.push(gradient_curvatureExtremaPrevious.get(j, k));
                }
                var spline = new BSplineR1toR1_1.BSplineR1toR1(gradient, knotsCurvatureDerivNumerator);
                curvatureExtrema_gradientperCPComponent.push(spline.evaluate(zerosCuratureDerivPrevious[i]));
            }
            curvatureExtrema_gradientsPrevious.push(curvatureExtrema_gradientperCPComponent);
        }
        var flattenedCPsplinePrevious = this.previousSpline.flattenControlPointsArray();
        var flattenedCPsplineUpdated = this.spline.flattenControlPointsArray();
        var curvatureDerivativeVariationWrtCP = [];
        var variationCP = [];
        for (var i = 0; i < flattenedCPsplinePrevious.length; i++) {
            variationCP.push(flattenedCPsplineUpdated[i] - flattenedCPsplinePrevious[i]);
        }
        for (var i = 0; i < curvatureExtrema_gradientsPrevious.length; i++) {
            var gradient = 0.0;
            for (var j = 0; j < curvatureExtrema_gradientsPrevious[i].length; j++) {
                gradient = gradient + curvatureExtrema_gradientsPrevious[i][j] * variationCP[j];
            }
            curvatureDerivativeVariationWrtCP.push(gradient);
        }
        var zerosVariations = [];
        for (var i = 0; i < curvatureDerivativeVariationWrtCP.length; i++) {
            console.log("sum variation B(u) wrt CP at [" + i + "]= " + curvatureDerivativeVariationWrtCP[i] + " gradientUprevious = " + curvatureDerivative_gradientUPrevious[i]);
            zerosVariations.push(-(curvatureDerivativeVariationWrtCP[i]) / curvatureDerivative_gradientUPrevious[i]);
        }
        var zerosPreviousCurve = [0.0];
        var zerosEstimated = [0.0];
        for (var i = 0; i < zerosCuratureDerivPrevious.length; i++) {
            var zeroLoc = zerosCuratureDerivPrevious[i];
            zerosPreviousCurve.push(zeroLoc);
            console.log("estimated zero from previous iter location[ " + i + " ] = " + (zeroLoc + zerosVariations[i]) + " variation = " + zerosVariations[i]);
            zerosEstimated.push(zeroLoc + zerosVariations[i]);
        }
        zerosPreviousCurve.push(1.0);
        zerosEstimated.push(1.0);
        for (var i = 1; i < zerosPreviousCurve.length; i++) {
            var interval = (zerosPreviousCurve[i] - zerosPreviousCurve[i - 1]);
            var intervalEstimated = (zerosEstimated[i] - zerosEstimated[i - 1]);
            var intervalVariation = intervalEstimated - interval;
            if (intervalEstimated < 0.0)
                console.log("estimated interval[ " + i + " ] with zeros crossing");
            if (intervalEstimated < interval)
                console.log("interval[ " + i + " ]" + " shrinks: " + intervalVariation);
            if (intervalEstimated > interval)
                console.log("interval[ " + i + " ]" + " expands: " + intervalVariation);
        }
    };
    // compute_inflectionConstraints_gradient( e: ExpensiveComputationResults,
    //                                         constraintsSign: number[], 
    //                                         inactiveConstraints: number[]): DenseMatrix {
    OptProblemOpenBSplineR1toR2.prototype.compute_inflectionConstraints_gradient = function (constraintsSign, inactiveConstraints) {
        // const sxu = e.bdsxu
        // const sxuu = e.bdsxuu
        // const syu = e.bdsyu
        // const syuu = e.bdsyuu
        var sxu = this._analyticHighOrderCurveDerivatives.bdsxu;
        var sxuu = this._analyticHighOrderCurveDerivatives.bdsxuu;
        var syu = this._analyticHighOrderCurveDerivatives.bdsyu;
        var syuu = this._analyticHighOrderCurveDerivatives.bdsyuu;
        var dgx = [];
        var dgy = [];
        var controlPointsLength = this.spline.controlPoints.length;
        var degree = this.spline.degree;
        for (var i = 0; i < controlPointsLength; i += 1) {
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(controlPointsLength - degree, i + 1);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h11 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan).multiplyByScalar(-1);
            dgx.push((h10.add(h11)));
        }
        for (var i = 0; i < controlPointsLength; i += 1) {
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(controlPointsLength - degree, i + 1);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan).multiplyByScalar(-1);
            var h11 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            dgy.push(h10.add(h11));
        }
        var totalNumberOfConstraints = this.inflectionConstraintsSign.length;
        var result = new DenseMatrix_1.DenseMatrix(totalNumberOfConstraints - inactiveConstraints.length, 2 * controlPointsLength);
        for (var i = 0; i < controlPointsLength; i += 1) {
            var cpx = dgx[i].flattenControlPointsArray();
            var cpy = dgy[i].flattenControlPointsArray();
            var start = Math.max(0, i - degree) * (2 * degree - 2);
            var lessThan = Math.min(controlPointsLength - degree, i + 1) * (2 * degree - 2);
            var deltaj = 0;
            for (var i_3 = 0; i_3 < inactiveConstraints.length; i_3 += 1) {
                if (inactiveConstraints[i_3] >= start) {
                    break;
                }
                deltaj += 1;
            }
            for (var j = start; j < lessThan; j += 1) {
                if (j === inactiveConstraints[deltaj]) {
                    deltaj += 1;
                }
                else {
                    result.set(j - deltaj, i, cpx[j - start] * constraintsSign[j]);
                    result.set(j - deltaj, controlPointsLength + i, cpy[j - start] * constraintsSign[j]);
                }
            }
        }
        return result;
    };
    OptProblemOpenBSplineR1toR2.prototype.compute_inflectionConstraints_gradientPreviousIteration = function (constraintsSign, inactiveConstraints) {
        var sxu = this._previousAnalyticHighOrderCurveDerivatives.bdsxu;
        var sxuu = this._previousAnalyticHighOrderCurveDerivatives.bdsxuu;
        var syu = this._previousAnalyticHighOrderCurveDerivatives.bdsyu;
        var syuu = this._previousAnalyticHighOrderCurveDerivatives.bdsyuu;
        var dgx = [];
        var dgy = [];
        var controlPointsLength = this.spline.controlPoints.length;
        var degree = this.spline.degree;
        for (var i = 0; i < controlPointsLength; i += 1) {
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(controlPointsLength - degree, i + 1);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h11 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan).multiplyByScalar(-1);
            dgx.push((h10.add(h11)));
        }
        for (var i = 0; i < controlPointsLength; i += 1) {
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(controlPointsLength - degree, i + 1);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan).multiplyByScalar(-1);
            var h11 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            dgy.push(h10.add(h11));
        }
        var totalNumberOfConstraints = this.inflectionConstraintsSign.length;
        var result = new DenseMatrix_1.DenseMatrix(totalNumberOfConstraints - inactiveConstraints.length, 2 * controlPointsLength);
        for (var i = 0; i < controlPointsLength; i += 1) {
            var cpx = dgx[i].flattenControlPointsArray();
            var cpy = dgy[i].flattenControlPointsArray();
            var start = Math.max(0, i - degree) * (2 * degree - 2);
            var lessThan = Math.min(controlPointsLength - degree, i + 1) * (2 * degree - 2);
            var deltaj = 0;
            for (var i_4 = 0; i_4 < inactiveConstraints.length; i_4 += 1) {
                if (inactiveConstraints[i_4] >= start) {
                    break;
                }
                deltaj += 1;
            }
            for (var j = start; j < lessThan; j += 1) {
                if (j === inactiveConstraints[deltaj]) {
                    deltaj += 1;
                }
                else {
                    result.set(j - deltaj, i, cpx[j - start] * constraintsSign[j]);
                    result.set(j - deltaj, controlPointsLength + i, cpy[j - start] * constraintsSign[j]);
                }
            }
        }
        return result;
    };
    OptProblemOpenBSplineR1toR2.prototype.compute_hessian_f = function (sxu, syu, sxuu, syuu, sxuuu, syuuu, h1, h2, h3, h4, constraintsSign, inactiveConstraints) {
        var n = this.spline.controlPoints.length;
        var result = [];
        var h5x = [];
        var h5y = [];
        var h6x = [];
        var h6y = [];
        var h7x = [];
        var h7y = [];
        var h8x = [];
        var h8y = [];
        var h9x = [];
        var h9y = [];
        var h10x = [];
        var h10y = [];
        var h11x = [];
        var h11y = [];
        var hessian_gxx = [];
        var hessian_gyy = [];
        var hessian_gxy = [];
        for (var i = 0; i < n; i += 1) {
            hessian_gxx.push([]);
            hessian_gyy.push([]);
            hessian_gxy.push([]);
        }
        for (var i = 0; i < n; i += 1) {
            h5x.push(this.dBasisFunctions_du[i].multiply(sxu));
            h6x.push(this.dBasisFunctions_du[i].multiply(syuuu));
            h7x.push(syu.multiply(this.d3BasisFunctions_du3[i]).multiplyByScalar(-1));
            h8x.push(this.dBasisFunctions_du[i].multiply(sxuu));
            h9x.push(sxu.multiply(this.d2BasisFunctions_du2[i]));
            h10x.push(this.dBasisFunctions_du[i].multiply(syuu));
            h11x.push(syu.multiply(this.d2BasisFunctions_du2[i]).multiplyByScalar(-1));
        }
        for (var i = 0; i < n; i += 1) {
            h5y.push(this.dBasisFunctions_du[i].multiply(syu));
            h6y.push(this.dBasisFunctions_du[i].multiply(sxuuu).multiplyByScalar(-1));
            h7y.push(sxu.multiply(this.d3BasisFunctions_du3[i]));
            h8y.push(this.dBasisFunctions_du[i].multiply(syuu));
            h9y.push(syu.multiply(this.d2BasisFunctions_du2[i]));
            h10y.push(this.dBasisFunctions_du[i].multiply(sxuu).multiplyByScalar(-1));
            h11y.push(sxu.multiply(this.d2BasisFunctions_du2[i]));
        }
        for (var i = 0; i < n; i += 1) {
            for (var j = 0; j <= i; j += 1) {
                var term1 = this.Dh5xx[i][j].multiply(h2).multiplyByScalar(2);
                var term2xx = ((h5x[j].multiply(h6x[i].add(h7x[i]))).add(h5x[i].multiply((h6x[j].add(h7x[j]))))).multiplyByScalar(2);
                var term2yy = ((h5y[j].multiply(h6y[i].add(h7y[i]))).add(h5y[i].multiply((h6y[j].add(h7y[j]))))).multiplyByScalar(2);
                // term3 = 0
                var term4 = this.Dh8_9xx[i][j].multiply(h4).multiplyByScalar(-3);
                var term5xx = (((h8x[j].add(h9x[j])).multiply(h10x[i].add(h11x[i]))).add((h8x[i].add(h9x[i])).multiply((h10x[j].add(h11x[j]))))).multiplyByScalar(-3);
                var term5yy = (((h8y[j].add(h9y[j])).multiply(h10y[i].add(h11y[i]))).add((h8y[i].add(h9y[i])).multiply((h10y[j].add(h11y[j]))))).multiplyByScalar(-3);
                // term 6 = 0
                hessian_gxx[i][j] = (term1.add(term2xx).add(term4).add(term5xx)).flattenControlPointsArray();
                hessian_gyy[i][j] = (term1.add(term2yy).add(term4).add(term5yy)).flattenControlPointsArray();
            }
        }
        for (var i = 1; i < n; i += 1) {
            for (var j = 0; j < i; j += 1) {
                // term1 = 0
                var term2xy = ((h5x[j].multiply(h6y[i].add(h7y[i]))).add(h5y[i].multiply((h6x[j].add(h7x[j]))))).multiplyByScalar(2);
                var term3 = this.Dh6_7xy[j][i].multiply(h1).multiplyByScalar(-1); //Dh_6_7xy is antisymmetric
                // term4 = 0
                var term5xy = (((h8x[j].add(h9x[j])).multiply((h10y[i].add(h11y[i])))).add((h8y[i].add(h9y[i])).multiply((h10x[j].add(h11x[j]))))).multiplyByScalar(-3);
                var term6 = this.Dh10_11xy[j][i].multiply(h3).multiplyByScalar(3); //Dh_10_11xy is antisymmetric
                hessian_gxy[i][j] = (term2xy.add(term3).add(term5xy).add(term6)).flattenControlPointsArray();
            }
        }
        for (var i = 0; i < n; i += 1) {
            for (var j = i + 1; j < n; j += 1) {
                // term1 = 0
                var term2xy = ((h5x[j].multiply((h6y[i].add(h7y[i])))).add(h5y[i].multiply((h6x[j].add(h7x[j]))))).multiplyByScalar(2);
                var term3 = this.Dh6_7xy[i][j].multiply(h1); //Dh_6_7xy is antisymmetric
                // term4 = 0
                var term5xy = (((h8x[j].add(h9x[j])).multiply((h10y[i].add(h11y[i])))).add((h8y[i].add(h9y[i])).multiply((h10x[j].add(h11x[j]))))).multiplyByScalar(-3);
                var term6 = this.Dh10_11xy[i][j].multiply(h3).multiplyByScalar(-3); //Dh_10_11xy is antisymmetric
                hessian_gxy[i][j] = (term2xy.add(term3).add(term5xy).add(term6)).flattenControlPointsArray();
            }
        }
        for (var i = 0; i < n; i += 1) {
            // term1 = 0
            var term2xy = ((h5x[i].multiply(h6y[i].add(h7y[i]))).add(h5y[i].multiply((h6x[i].add(h7x[i]))))).multiplyByScalar(2);
            //const term3 = this.Dh6_7xy[i][i].multiply(h1)
            // term3 = 0
            // term4 = 0
            var term5xy = (((h8y[i].add(h9y[i])).multiply((h10x[i].add(h11x[i])))).add((h8x[i].add(h9x[i])).multiply(h10y[i].add(h11y[i])))).multiplyByScalar(-3);
            // term6 = 0
            hessian_gxy[i][i] = (term2xy.add(term5xy)).flattenControlPointsArray();
        }
        var deltak = 0;
        for (var k = 0; k < constraintsSign.length; k += 1) {
            if (k === inactiveConstraints[deltak]) {
                deltak += 1;
            }
            else {
                var m = new SymmetricMatrix_1.SymmetricMatrix(2 * n);
                for (var i = 0; i < n; i += 1) {
                    for (var j = 0; j <= i; j += 1) {
                        m.set(i, j, hessian_gxx[i][j][k] * constraintsSign[k]);
                        m.set(n + i, n + j, hessian_gyy[i][j][k] * constraintsSign[k]);
                    }
                }
                for (var i = 0; i < n; i += 1) {
                    for (var j = 0; j < n; j += 1) {
                        m.set(n + i, j, hessian_gxy[i][j][k] * constraintsSign[k]);
                    }
                }
                result.push(m);
            }
        }
        return result;
    };
    OptProblemOpenBSplineR1toR2.prototype.prepareForHessianComputation = function (Dsu, Dsuu, Dsuuu) {
        var n = this.spline.controlPoints.length;
        for (var i = 0; i < n; i += 1) {
            this.Dh5xx.push([]);
            this.Dh6_7xy.push([]);
            this.Dh8_9xx.push([]);
            this.Dh10_11xy.push([]);
        }
        for (var i = 0; i < n; i += 1) {
            for (var j = 0; j <= i; j += 1) {
                this.Dh5xx[i][j] = Dsu[i].multiply(Dsu[j]);
            }
        }
        for (var i = 0; i < n; i += 1) {
            for (var j = 0; j < n; j += 1) {
                this.Dh6_7xy[i][j] = (Dsu[i].multiply(Dsuuu[j])).subtract(Dsu[j].multiply(Dsuuu[i]));
            }
        }
        for (var i = 0; i < n; i += 1) {
            for (var j = 0; j <= i; j += 1) {
                this.Dh8_9xx[i][j] = (Dsu[i].multiply(Dsuu[j])).add(Dsu[j].multiply(Dsuu[i]));
            }
        }
        for (var i = 0; i < n; i += 1) {
            for (var j = 0; j < n; j += 1) {
                this.Dh10_11xy[i][j] = (Dsu[i].multiply(Dsuu[j])).subtract(Dsu[j].multiply(Dsuu[i]));
            }
        }
    };
    OptProblemOpenBSplineR1toR2.prototype.setTargetSpline = function (spline) {
        this._target = spline.clone();
        this._gradient_f0 = this.compute_gradient_f0(this.spline);
        this._f0 = this.compute_f0(this.gradient_f0);
    };
    return OptProblemOpenBSplineR1toR2;
}(AbstractOptProblemBSplineR1toR2_1.AbstractOptProblemBSplineR1toR2));
exports.OptProblemOpenBSplineR1toR2 = OptProblemOpenBSplineR1toR2;
var OptProblemOPenBSplineR1toR2WithWeigthingFactors = /** @class */ (function (_super) {
    __extends(OptProblemOPenBSplineR1toR2WithWeigthingFactors, _super);
    function OptProblemOPenBSplineR1toR2WithWeigthingFactors(splineInitial, shapeSpaceDiffEventsStructure) {
        var _this = _super.call(this, splineInitial, shapeSpaceDiffEventsStructure) || this;
        _this.weigthingFactors = [];
        for (var i = 0; i < _this.spline.controlPoints.length * 2; i += 1) {
            _this.weigthingFactors.push(exports.DEFAULT_WEIGHT);
        }
        return _this;
    }
    Object.defineProperty(OptProblemOPenBSplineR1toR2WithWeigthingFactors.prototype, "f0", {
        get: function () {
            var result = 0;
            var n = this._gradient_f0.length;
            for (var i = 0; i < n; i += 1) {
                result += Math.pow(this._gradient_f0[i], 2) * this.weigthingFactors[i];
            }
            return 0.5 * result;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OptProblemOPenBSplineR1toR2WithWeigthingFactors.prototype, "gradient_f0", {
        get: function () {
            var result = [];
            var n = this._gradient_f0.length;
            for (var i = 0; i < n; i += 1) {
                result.push(this._gradient_f0[i] * this.weigthingFactors[i]);
            }
            return result;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OptProblemOPenBSplineR1toR2WithWeigthingFactors.prototype, "hessian_f0", {
        get: function () {
            var n = this._gradient_f0.length;
            var result = new DiagonalMatrix_1.DiagonalMatrix(n);
            for (var i = 0; i < n; i += 1) {
                result.set(i, i, this.weigthingFactors[i]);
            }
            return result;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * The objective function value: f0(x + step)
     */
    OptProblemOPenBSplineR1toR2WithWeigthingFactors.prototype.f0Step = function (step) {
        var splineTemp = this._spline.clone();
        splineTemp = splineTemp.moveControlPoints(AbstractOptProblemBSplineR1toR2_1.convertStepToVector2d(step));
        var gradient = this.compute_gradient_f0(splineTemp);
        var n = gradient.length;
        var result = 0;
        for (var i = 0; i < n; i += 1) {
            result += Math.pow(gradient[i], 2) * this.weigthingFactors[i];
        }
        return 0.5 * result;
    };
    OptProblemOPenBSplineR1toR2WithWeigthingFactors.prototype.setWeightingFactor = function () {
        this.weigthingFactors[0] = exports.WEIGHT_AT_EXTREMITIES;
        this.weigthingFactors[this._spline.controlPoints.length] = exports.WEIGHT_AT_EXTREMITIES;
        this.weigthingFactors[this._spline.controlPoints.length - 1] = exports.WEIGHT_AT_EXTREMITIES;
        this.weigthingFactors[this._spline.controlPoints.length * 2 - 1] = exports.WEIGHT_AT_EXTREMITIES;
    };
    return OptProblemOPenBSplineR1toR2WithWeigthingFactors;
}(OptProblemOpenBSplineR1toR2));
exports.OptProblemOPenBSplineR1toR2WithWeigthingFactors = OptProblemOPenBSplineR1toR2WithWeigthingFactors;
var OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities = /** @class */ (function (_super) {
    __extends(OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities, _super);
    function OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities(splineInitial, shapeSpaceDiffEventsStructure) {
        var _this = _super.call(this, splineInitial, shapeSpaceDiffEventsStructure) || this;
        _this._shapeSpaceBoundaryEnforcer = new ShapeSpaceBoundaryEnforcer_1.NestedShapeSpacesBoundaryEnforcerOpenCurve();
        var e = _this.initExpansiveComputations();
        e = _this.expensiveComputation(_this._spline);
        if (_this._shapeSpaceDiffEventsStructure.activeControlInflections || _this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            _this.constraintType = AbstractOptProblemBSplineR1toR2_1.ConstraintType.inflection;
            _this._inflectionInactiveConstraints = _this.computeInactiveConstraints(_this._curvatureNumeratorCP);
            _this.inflectionNumberOfActiveConstraints = _this._curvatureNumeratorCP.length - _this.inflectionInactiveConstraints.length;
        }
        if (_this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            _this.constraintType = AbstractOptProblemBSplineR1toR2_1.ConstraintType.curvatureExtrema;
            _this._curvatureExtremaInactiveConstraints = _this.computeInactiveConstraints(_this._curvatureDerivativeNumeratorCP);
            _this.curvatureExtremaNumberOfActiveConstraints = _this._curvatureDerivativeNumeratorCP.length - _this.curvatureExtremaInactiveConstraints.length;
        }
        _this._f = _this.compute_f(_this._curvatureNumeratorCP, _this.inflectionConstraintsSign, _this.inflectionInactiveConstraints, _this._curvatureDerivativeNumeratorCP, _this.curvatureExtremaConstraintsSign, _this.curvatureExtremaInactiveConstraints);
        // this.checkConstraintConsistency();
        // this._gradient_f = this.compute_gradient_f(e, this.inflectionConstraintsSign, this.inflectionInactiveConstraints,
        //     this.curvatureExtremaConstraintsSign, this.curvatureExtremaInactiveConstraints);
        _this._gradient_f = _this.compute_gradient_f(_this.inflectionConstraintsSign, _this.inflectionInactiveConstraints, _this.curvatureExtremaConstraintsSign, _this.curvatureExtremaInactiveConstraints);
        return _this;
    }
    Object.defineProperty(OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities.prototype, "shapeSpaceBoundaryEnforcer", {
        get: function () {
            return this._shapeSpaceBoundaryEnforcer;
        },
        enumerable: false,
        configurable: true
    });
    OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities.prototype.computeInactiveConstraints = function (controlPoints) {
        var _a;
        this.checkConstraintTypeConsistency(controlPoints);
        var inactiveConstraints = this.extractVerticesLocallyClosestToZero(controlPoints);
        if (!((_a = this._shapeSpaceBoundaryEnforcer) === null || _a === void 0 ? void 0 : _a.isActive())) {
            this.inactivateConstraintsAtCurveEXtremities(controlPoints, inactiveConstraints);
        }
        else if (this._shapeSpaceBoundaryEnforcer.isCurvatureExtTransitionAtExtremity() && this.constraintType === AbstractOptProblemBSplineR1toR2_1.ConstraintType.curvatureExtrema
            && inactiveConstraints.length > 0) {
            if (inactiveConstraints.indexOf(0) !== -1)
                inactiveConstraints.splice(inactiveConstraints.indexOf(0), 1);
            if (inactiveConstraints.indexOf(this._curvatureExtremaTotalNumberOfConstraints - 1) !== -1)
                inactiveConstraints.splice(inactiveConstraints.indexOf(this._curvatureExtremaTotalNumberOfConstraints - 1), 1);
        }
        else if (this._shapeSpaceBoundaryEnforcer.isInflectionTransitionAtExtremity() && this.constraintType === AbstractOptProblemBSplineR1toR2_1.ConstraintType.inflection
            && inactiveConstraints.length > 0) {
            if (inactiveConstraints.indexOf(0) !== -1)
                inactiveConstraints.splice(inactiveConstraints.indexOf(0), 1);
            if (inactiveConstraints.indexOf(this._inflectionTotalNumberOfConstraints - 1) !== -1)
                inactiveConstraints.splice(inactiveConstraints.indexOf(this._inflectionTotalNumberOfConstraints - 1), 1);
        }
        console.log("Optim EventMonitoringAtExtremities. inactive constraints" + inactiveConstraints);
        return inactiveConstraints;
    };
    OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities.prototype.step = function (deltaX) {
        var checked = true;
        // if(this._previousAnalyticHighOrderCurveDerivatives.bdsxu.flattenControlPointsArray().length === 0) {
        //     this._analyticHighOrderCurveDerivatives = this.expensiveComputation(this._spline);
        // }
        // this._previousAnalyticHighOrderCurveDerivatives = deepCopyAnalyticHighOrderCurveDerivatives(this._analyticHighOrderCurveDerivatives);
        // let e: ExpensiveComputationResults = this.initExpansiveComputations();
        this._analyticHighOrderCurveDerivatives = this.initExpansiveComputations();
        var curvatureNumerator = [];
        var curvatureDerivativeNumerator = [];
        // this._previousSpline = this._spline.clone();
        if (this._shapeSpaceBoundaryEnforcer.isActive()) {
            this._inflectionInactiveConstraints = [];
            this._curvatureExtremaInactiveConstraints = [];
        }
        this._spline = this.spline.moveControlPoints(AbstractOptProblemBSplineR1toR2_1.convertStepToVector2d(deltaX));
        this._gradient_f0 = this.compute_gradient_f0(this._spline);
        this._f0 = this.compute_f0(this._gradient_f0);
        // e = this.expensiveComputation(this._spline);
        this._analyticHighOrderCurveDerivatives = this.expensiveComputation(this._spline);
        this.traceCurvatureExtrema();
        this._previousAnalyticHighOrderCurveDerivatives = this.initExpansiveComputations();
        if (this._shapeSpaceDiffEventsStructure.activeControlInflections || this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // curvatureNumerator = this.curvatureNumerator(e.h4);
            curvatureNumerator = this.curvatureNumerator();
            this.inflectionConstraintsSign = this.computeConstraintsSign(curvatureNumerator);
            this.constraintType = AbstractOptProblemBSplineR1toR2_1.ConstraintType.inflection;
            if (!this._shapeSpaceBoundaryEnforcer.isActive())
                this._inflectionInactiveConstraints = this.computeInactiveConstraints(curvatureNumerator);
            this.inflectionNumberOfActiveConstraints = curvatureNumerator.length - this.inflectionInactiveConstraints.length;
        }
        if (this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // curvatureDerivativeNumerator = this.curvatureDerivativeNumerator(e.h1, e.h2, e.h3, e.h4);
            curvatureDerivativeNumerator = this.curvatureDerivativeNumerator();
            this._curvatureExtremaConstraintsSign = this.computeConstraintsSign(curvatureDerivativeNumerator);
            this.constraintType = AbstractOptProblemBSplineR1toR2_1.ConstraintType.curvatureExtrema;
            if (!this._shapeSpaceBoundaryEnforcer.isActive())
                this._curvatureExtremaInactiveConstraints = this.computeInactiveConstraints(curvatureDerivativeNumerator);
            this.curvatureExtremaNumberOfActiveConstraints = curvatureDerivativeNumerator.length - this.curvatureExtremaInactiveConstraints.length;
        }
        this._curvatureNumeratorCP = curvatureNumerator;
        this._curvatureDerivativeNumeratorCP = curvatureDerivativeNumerator;
        //console.log("step : inactive cst start: " + inactiveCurvatureConstraintsAtStart + " updated " + this.curvatureExtremaInactiveConstraints + " infl " + this.inflectionInactiveConstraints + " cst sgn " + this.curvatureExtremaConstraintsSign)
        console.log("step : inactive cst: " + this.curvatureExtremaInactiveConstraints + " cst sgn " + this.curvatureExtremaConstraintsSign);
        this._f = this.compute_f(this._curvatureNumeratorCP, this.inflectionConstraintsSign, this.inflectionInactiveConstraints, this._curvatureDerivativeNumeratorCP, this.curvatureExtremaConstraintsSign, this.curvatureExtremaInactiveConstraints);
        // this._gradient_f = this.compute_gradient_f(e, this.inflectionConstraintsSign, this.inflectionInactiveConstraints, this.curvatureExtremaConstraintsSign, this.curvatureExtremaInactiveConstraints);
        this._gradient_f = this.compute_gradient_f(this.inflectionConstraintsSign, this.inflectionInactiveConstraints, this.curvatureExtremaConstraintsSign, this.curvatureExtremaInactiveConstraints);
        if (this.isComputingHessian) {
            // this._hessian_f = this.compute_hessian_f(e.bdsxu, e.bdsyu, e.bdsxuu, e.bdsyuu,e.bdsxuuu, e.bdsyuuu, e.h1, e.h2, e.h3, e.h4, this.curvatureExtremaConstraintsSign, this.curvatureExtremaInactiveConstraints)
            this._hessian_f = this.compute_hessian_f(this._analyticHighOrderCurveDerivatives.bdsxu, this._analyticHighOrderCurveDerivatives.bdsyu, this._analyticHighOrderCurveDerivatives.bdsxuu, this._analyticHighOrderCurveDerivatives.bdsyuu, this._analyticHighOrderCurveDerivatives.bdsxuuu, this._analyticHighOrderCurveDerivatives.bdsyuuu, this._analyticHighOrderCurveDerivatives.h1, this._analyticHighOrderCurveDerivatives.h2, this._analyticHighOrderCurveDerivatives.h3, this._analyticHighOrderCurveDerivatives.h4, this.curvatureExtremaConstraintsSign, this.curvatureExtremaInactiveConstraints);
        }
        return checked;
    };
    OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities.prototype.update = function (spline) {
        this._spline = spline.clone();
        this.computeBasisFunctionsDerivatives();
        this._numberOfIndependentVariables = this._spline.freeControlPoints.length * 2;
        this._gradient_f0 = this.compute_gradient_f0(this._spline);
        this._f0 = this.compute_f0(this._gradient_f0);
        this._hessian_f0 = DiagonalMatrix_1.identityMatrix(this._numberOfIndependentVariables);
        this._inflectionInactiveConstraints = [];
        this._curvatureExtremaInactiveConstraints = [];
        // let e: ExpensiveComputationResults = this.initExpansiveComputations();
        this._analyticHighOrderCurveDerivatives = this.initExpansiveComputations();
        // e = this.expensiveComputation(this._spline);
        this._analyticHighOrderCurveDerivatives = this.expensiveComputation(this._spline);
        if (this._shapeSpaceDiffEventsStructure.activeControlInflections || this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // this._curvatureNumeratorCP = this.curvatureNumerator(e.h4);
            this._curvatureNumeratorCP = this.curvatureNumerator();
            this._inflectionTotalNumberOfConstraints = this._curvatureNumeratorCP.length;
            this.inflectionConstraintsSign = this.computeConstraintsSign(this._curvatureNumeratorCP);
            this.constraintType = AbstractOptProblemBSplineR1toR2_1.ConstraintType.inflection;
            this._inflectionInactiveConstraints = this.computeInactiveConstraints(this._curvatureNumeratorCP);
            this.inflectionNumberOfActiveConstraints = this._curvatureNumeratorCP.length - this.inflectionInactiveConstraints.length;
        }
        if (this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // this._curvatureDerivativeNumeratorCP = this.curvatureDerivativeNumerator(e.h1, e.h2, e.h3, e.h4);
            this._curvatureDerivativeNumeratorCP = this.curvatureDerivativeNumerator();
            this._curvatureExtremaTotalNumberOfConstraints = this._curvatureDerivativeNumeratorCP.length;
            this._curvatureExtremaConstraintsSign = this.computeConstraintsSign(this._curvatureDerivativeNumeratorCP);
            this.constraintType = AbstractOptProblemBSplineR1toR2_1.ConstraintType.curvatureExtrema;
            this._curvatureExtremaInactiveConstraints = this.computeInactiveConstraints(this._curvatureDerivativeNumeratorCP);
            this.curvatureExtremaNumberOfActiveConstraints = this._curvatureDerivativeNumeratorCP.length - this.curvatureExtremaInactiveConstraints.length;
        }
        console.log("optim curv ext inactive constraints: " + this.curvatureExtremaInactiveConstraints);
        console.log("optim inflection inactive constraints: " + this.inflectionInactiveConstraints);
        this._f = this.compute_f(this._curvatureNumeratorCP, this.inflectionConstraintsSign, this.inflectionInactiveConstraints, this._curvatureDerivativeNumeratorCP, this.curvatureExtremaConstraintsSign, this.curvatureExtremaInactiveConstraints);
        // this.checkConstraintConsistency();
        // this._gradient_f = this.compute_gradient_f(e, this.inflectionConstraintsSign, this._inflectionInactiveConstraints, this._curvatureExtremaConstraintsSign, this._curvatureExtremaInactiveConstraints)
        this._gradient_f = this.compute_gradient_f(this.inflectionConstraintsSign, this._inflectionInactiveConstraints, this._curvatureExtremaConstraintsSign, this._curvatureExtremaInactiveConstraints);
    };
    return OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities;
}(OptProblemOPenBSplineR1toR2WithWeigthingFactors));
exports.OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities = OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities;
var OptProblemOpenBSplineR1toR2WithWeigthingFactorsNoInactiveConstraints = /** @class */ (function (_super) {
    __extends(OptProblemOpenBSplineR1toR2WithWeigthingFactorsNoInactiveConstraints, _super);
    function OptProblemOpenBSplineR1toR2WithWeigthingFactorsNoInactiveConstraints(splineInitial, shapeSpaceDiffEventsStructure) {
        return _super.call(this, splineInitial, shapeSpaceDiffEventsStructure) || this;
    }
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsNoInactiveConstraints.prototype.computeInactiveConstraints = function (curvatureDerivativeNumerator) {
        return [];
    };
    return OptProblemOpenBSplineR1toR2WithWeigthingFactorsNoInactiveConstraints;
}(OptProblemOPenBSplineR1toR2WithWeigthingFactors));
exports.OptProblemOpenBSplineR1toR2WithWeigthingFactorsNoInactiveConstraints = OptProblemOpenBSplineR1toR2WithWeigthingFactorsNoInactiveConstraints;
var OptProblemOpenBSplineR1toR2NoInactiveConstraints = /** @class */ (function (_super) {
    __extends(OptProblemOpenBSplineR1toR2NoInactiveConstraints, _super);
    function OptProblemOpenBSplineR1toR2NoInactiveConstraints(splineInitial, shapeSpaceDiffEventsStructure) {
        return _super.call(this, splineInitial, shapeSpaceDiffEventsStructure) || this;
    }
    OptProblemOpenBSplineR1toR2NoInactiveConstraints.prototype.computeInactiveConstraints = function (curvatureDerivativeNumerator) {
        return [];
    };
    return OptProblemOpenBSplineR1toR2NoInactiveConstraints;
}(OptProblemOpenBSplineR1toR2));
exports.OptProblemOpenBSplineR1toR2NoInactiveConstraints = OptProblemOpenBSplineR1toR2NoInactiveConstraints;
/* JCL 2020/10/06 derive a class to process cubics with specific desactivation constraint process at discontinuities of B(u) */
var OptProblemOpenBSplineR1toR2WithWeigthingFactorsDedicatedToCubics = /** @class */ (function (_super) {
    __extends(OptProblemOpenBSplineR1toR2WithWeigthingFactorsDedicatedToCubics, _super);
    function OptProblemOpenBSplineR1toR2WithWeigthingFactorsDedicatedToCubics(splineInitial, shapeSpaceDiffEventsStructure) {
        return _super.call(this, splineInitial, shapeSpaceDiffEventsStructure) || this;
    }
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsDedicatedToCubics.prototype.computeControlPointsClosestToZeroForCubics = function (signChangesIntervals, controlPoints) {
        var result = [];
        for (var i = 0, n = signChangesIntervals.length; i < n; i += 1) {
            if (i < n - 1 && signChangesIntervals[i] + 1 === signChangesIntervals[i + 1]) {
                result.push(signChangesIntervals[i] + 1);
                i += 1;
            }
            else {
                if (Math.pow(controlPoints[signChangesIntervals[i]], 2) < Math.pow(controlPoints[signChangesIntervals[i] + 1], 2)) {
                    result.push(signChangesIntervals[i]);
                }
                else {
                    result.push(signChangesIntervals[i] + 1);
                }
            }
        }
        //console.log("degree: " + this.spline.degree + " nbKnot: " + this.spline.distinctKnots().length)
        /* JCL 2020/10/02 modification as alternative to sliding mechanism */
        if (this.spline.degree === 3 && controlPoints.length === (this.spline.getDistinctKnots().length - 1) * 7) {
            var n = Math.trunc(controlPoints.length / 7);
            console.log("degree: " + this.spline.degree + " nbCP: " + controlPoints.length);
            for (var j = 1; j < n; j += 1) {
                if (controlPoints[6 * j] * controlPoints[6 * j + 1] < 0) {
                    //console.log("CP: " + controlPoints)
                    if (result.indexOf(6 * j) > 0 && result.indexOf(6 * j + 1) < 0) {
                        result.push(6 * j + 1);
                    }
                    else if (result.indexOf(6 * j) < 0 && result.indexOf(6 * j + 1) > 0) {
                        result.push(6 * j);
                    }
                }
            }
            result.sort(function (a, b) { return (a - b); });
        }
        return result;
    };
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsDedicatedToCubics.prototype.addInactiveConstraintsForInflections = function (list, controlPoints) {
        var result = [];
        for (var i = 0, n = list.length; i < n; i += 1) {
            if (list[i] !== 0 && controlPoints[list[i] - 1] === controlPoints[list[i]]) {
                if (i == 0) {
                    result.push(list[i] - 1);
                }
                if (i !== 0 && list[i - 1] !== list[i] - 1) {
                    result.push(list[i] - 1);
                }
            }
            result.push(list[i]);
            if (list[i] !== controlPoints.length - 2 && controlPoints[list[i]] === controlPoints[list[i] + 1]) {
                if (i == list.length - 1) {
                    result.push(list[i] + 1);
                }
                if (i !== list.length - 1 && list[i + 1] !== list[i] + 1) {
                    result.push(list[i] + 1);
                }
            }
        }
        return result;
    };
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsDedicatedToCubics.prototype.computeInactiveConstraints = function (controlPoints) {
        var constraintsSign = this.computeConstraintsSign(controlPoints);
        var signChangesIntervals = this.computeSignChangeIntervals(constraintsSign);
        var controlPointsClosestToZero = this.computeControlPointsClosestToZeroForCubics(signChangesIntervals, controlPoints);
        var result = this.addInactiveConstraintsForInflections(controlPointsClosestToZero, controlPoints);
        return result;
    };
    return OptProblemOpenBSplineR1toR2WithWeigthingFactorsDedicatedToCubics;
}(OptProblemOPenBSplineR1toR2WithWeigthingFactors));
exports.OptProblemOpenBSplineR1toR2WithWeigthingFactorsDedicatedToCubics = OptProblemOpenBSplineR1toR2WithWeigthingFactorsDedicatedToCubics;
var OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace = /** @class */ (function (_super) {
    __extends(OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace, _super);
    function OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace(splineInitial, shapeSpaceDiffEventsStructure, navigationCurveModel) {
        var _this = _super.call(this, splineInitial, shapeSpaceDiffEventsStructure) || this;
        _this.curveAnalyzerCurrentCurve = navigationCurveModel.curveAnalyserCurrentCurve;
        _this.curveAnalyzerOptimizedCurve = navigationCurveModel.curveAnalyserOptimizedCurve;
        _this._diffEventsVariation = new DifferentialEventVariation_1.DiffrentialEventVariation(_this.curveAnalyzerCurrentCurve, _this.curveAnalyzerOptimizedCurve);
        _this._shapeSpaceBoundaryEnforcer = new ShapeSpaceBoundaryEnforcer_1.StrictShapeSpacesBoundaryEnforcerOpenCurve();
        _this._iteratedCurves = [];
        _this.updateConstraintBound = true;
        _this.revertCurvatureExtremaConstraints = [];
        _this.revertInflectionsConstraints = [];
        var e = _this.initExpansiveComputations();
        e = _this.expensiveComputation(_this._spline);
        if (_this._shapeSpaceDiffEventsStructure.activeControlInflections || _this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            _this.constraintType = AbstractOptProblemBSplineR1toR2_1.ConstraintType.inflection;
            _this._inflectionInactiveConstraints = _this.computeInactiveConstraints(_this._curvatureNumeratorCP);
            _this.inflectionNumberOfActiveConstraints = _this._curvatureNumeratorCP.length - _this.inflectionInactiveConstraints.length;
        }
        for (var i = 0; i < _this._curvatureNumeratorCP.length; i += 1) {
            _this.revertInflectionsConstraints.push(1);
        }
        _this.inflectionsConstraintsBounds = MathVectorBasicOperations_1.zeroVector(_this._curvatureNumeratorCP.length);
        if (_this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            _this.constraintType = AbstractOptProblemBSplineR1toR2_1.ConstraintType.curvatureExtrema;
            _this._curvatureExtremaInactiveConstraints = _this.computeInactiveConstraints(_this._curvatureDerivativeNumeratorCP);
            _this.curvatureExtremaNumberOfActiveConstraints = _this._curvatureDerivativeNumeratorCP.length - _this.curvatureExtremaInactiveConstraints.length;
        }
        _this.controlPointsFunctionBInit = _this._curvatureDerivativeNumeratorCP;
        _this.curvatureExtremaConstraintBounds = MathVectorBasicOperations_1.zeroVector(_this._curvatureDerivativeNumeratorCP.length);
        for (var i = 0; i < _this._curvatureDerivativeNumeratorCP.length; i += 1) {
            _this.revertCurvatureExtremaConstraints.push(1);
        }
        _this.clearInequalityChanges();
        _this.clearConstraintBoundsUpdate();
        _this.revertInequalitiesWithinRangeOfLocalExtremum();
        _this.updateConstraintBoundsWithinRangeOfLocalExtremum();
        console.log("optim inactive curv ext constraints: " + _this.curvatureExtremaInactiveConstraints);
        console.log("optim inactive inflection constraints: " + _this.inflectionInactiveConstraints);
        _this._f = _this.compute_f(_this._curvatureNumeratorCP, _this.inflectionConstraintsSign, _this.inflectionInactiveConstraints, _this._curvatureDerivativeNumeratorCP, _this.curvatureExtremaConstraintsSign, _this.curvatureExtremaInactiveConstraints);
        _this.checkConstraintConsistency();
        // this._gradient_f = this.compute_gradient_f(e, this.inflectionConstraintsSign, this.inflectionInactiveConstraints,
        //     this.curvatureExtremaConstraintsSign, this.curvatureExtremaInactiveConstraints);
        _this._gradient_f = _this.compute_gradient_f(_this.inflectionConstraintsSign, _this.inflectionInactiveConstraints, _this.curvatureExtremaConstraintsSign, _this.curvatureExtremaInactiveConstraints);
        return _this;
        // if (this.isComputingHessian) {
        //     this.prepareForHessianComputation(this.dBasisFunctions_du, this.d2BasisFunctions_du2, this.d3BasisFunctions_du3)
        //     this._hessian_f = this.compute_hessian_f(e.bdsxu, e.bdsyu, e.bdsxuu, e.bdsyuu,e.bdsxuuu, e.bdsyuuu, e.h1, e.h2, e.h3, e.h4, this.curvatureExtremaConstraintsSign, this.curvatureExtremaInactiveConstraints)
        // }
    }
    Object.defineProperty(OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype, "diffEventsVariation", {
        get: function () {
            return this._diffEventsVariation;
        },
        set: function (diffEventsVariation) {
            this._diffEventsVariation = diffEventsVariation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype, "iteratedCurves", {
        get: function () {
            return this._iteratedCurves;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype, "shapeSpaceBoundaryEnforcer", {
        get: function () {
            return this._shapeSpaceBoundaryEnforcer;
        },
        enumerable: false,
        configurable: true
    });
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype.clearIteratedCurves = function () {
        this._iteratedCurves = [];
    };
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype.checkConstraintConsistency = function () {
        var e_2, _a, e_3, _b, e_4, _c, e_5, _d;
        /* JCL 08/03/2021 Add test to check the consistency of the constraints values.
            As the reference optimization problem is set up, each active constraint is an inequality strictly negative.
            Consequently, each active constraint value must be negative. */
        var constraintType;
        (function (constraintType) {
            constraintType[constraintType["curvatureExtremum"] = 0] = "curvatureExtremum";
            constraintType[constraintType["inflexion"] = 1] = "inflexion";
            constraintType[constraintType["none"] = 2] = "none";
        })(constraintType || (constraintType = {}));
        ;
        var invalidConstraints = [];
        for (var i = 0; i < this._f.length; i += 1) {
            if (this._f[i] > 0.0) {
                var typeC = void 0;
                var indexC = void 0;
                if (this._shapeSpaceDiffEventsStructure.activeControlInflections && this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
                    typeC = constraintType.curvatureExtremum;
                    indexC = i;
                    if (i < this.curvatureExtremaNumberOfActiveConstraints) {
                        try {
                            for (var _e = (e_2 = void 0, __values(this.curvatureExtremaInactiveConstraints)), _g = _e.next(); !_g.done; _g = _e.next()) {
                                var constraintIndex = _g.value;
                                if (i > constraintIndex)
                                    indexC = indexC + 1;
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_g && !_g.done && (_a = _e.return)) _a.call(_e);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                    else {
                        indexC = i - this.curvatureExtremaNumberOfActiveConstraints;
                        typeC = constraintType.inflexion;
                        try {
                            for (var _h = (e_3 = void 0, __values(this.inflectionInactiveConstraints)), _j = _h.next(); !_j.done; _j = _h.next()) {
                                var constraintIndex = _j.value;
                                if (i > constraintIndex)
                                    indexC = indexC + 1;
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                    }
                }
                else if (this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
                    typeC = constraintType.curvatureExtremum;
                    indexC = i;
                    try {
                        for (var _k = (e_4 = void 0, __values(this.curvatureExtremaInactiveConstraints)), _l = _k.next(); !_l.done; _l = _k.next()) {
                            var constraintIndex = _l.value;
                            if (i > constraintIndex)
                                indexC = indexC + 1;
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                }
                else if (this._shapeSpaceDiffEventsStructure.activeControlInflections) {
                    typeC = constraintType.inflexion;
                    indexC = i;
                    try {
                        for (var _m = (e_5 = void 0, __values(this.inflectionInactiveConstraints)), _o = _m.next(); !_o.done; _o = _m.next()) {
                            var constraintIndex = _o.value;
                            if (i > constraintIndex)
                                indexC = indexC + 1;
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                }
                else {
                    typeC = constraintType.none;
                    indexC = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
                    var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "checkConstraintConsistency", "No active control set. There should be no constraint.");
                    warning.logMessageToConsole();
                }
                invalidConstraints.push({ value: this._f[i], type: typeC, index: indexC });
            }
        }
        if (invalidConstraints.length > 0) {
            var message = "Inconsistent constraints. Constraints value must be negative. " + JSON.stringify(invalidConstraints);
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkConstraintConsistency", message);
            error.logMessageToConsole();
        }
    };
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype.inactivateConstraintClosestToZero = function (controlPoints, inactiveConstraints) {
        var polygonOfCtrlPts = new PolygonWithVerticesR1_1.PolygonWithVerticesR1(controlPoints);
        var globalExtremumOffAxis = polygonOfCtrlPts.extractClosestLocalExtremmumToAxis().index;
        if (globalExtremumOffAxis !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE) {
            inactiveConstraints.push(globalExtremumOffAxis);
            inactiveConstraints.sort(function (a, b) { return (a - b); });
        }
    };
    // inactivateConstraintsAtCurveEXtremities(controlPoints: number[], inactiveConstraints: number[]): void {
    //     if(inactiveConstraints.indexOf(0) === -1) inactiveConstraints.splice(0, 0, 0);
    //     if(inactiveConstraints.indexOf(controlPoints.length - 1) === -1) inactiveConstraints.push(controlPoints.length - 1);
    // }
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype.inactivateConstraintsWithinRangeOfLocalExtremum = function (inactiveConstraints) {
        if (this._diffEventsVariation === undefined || this._diffEventsVariation.neighboringEvents.length === 0) {
            return;
        }
        else if ((this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaDisappear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaAppear)
            // && this.constraintType === ConstraintType.curvatureExtrema && this.updateConstraintBound) {
            && this.constraintType === AbstractOptProblemBSplineR1toR2_1.ConstraintType.curvatureExtrema) {
            var upperBound = this._diffEventsVariation.span;
            var lowerBound = this._diffEventsVariation.span - this._diffEventsVariation.rangeOfInfluence;
            for (var j = lowerBound; j < upperBound + 1; j += 1) {
                if (inactiveConstraints.indexOf(j) !== -1)
                    inactiveConstraints.splice(inactiveConstraints.indexOf(j), 1);
            }
        }
        else if ((this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryDisappear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryDisappear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryAppear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryAppear)
            && this.constraintType === AbstractOptProblemBSplineR1toR2_1.ConstraintType.curvatureExtrema) {
            if (this._shapeSpaceBoundaryEnforcer.curvExtremumEventAtExtremity.start || this._shapeSpaceBoundaryEnforcer.curvExtremumEventAtExtremity.end) {
                // if(this.shapeSpaceBoundaryConstraintsCurvExtrema.length > 0) {
                if (this._shapeSpaceBoundaryEnforcer.curvExtremumEventAtExtremity.start) {
                    if (inactiveConstraints.length > 0 && inactiveConstraints.indexOf(0) !== -1)
                        inactiveConstraints.splice(inactiveConstraints.indexOf(0), 1);
                }
                else if (this._shapeSpaceBoundaryEnforcer.curvExtremumEventAtExtremity.end) {
                    if (inactiveConstraints.length > 0 && inactiveConstraints.indexOf(this._curvatureExtremaTotalNumberOfConstraints - 1) !== -1)
                        inactiveConstraints.splice(inactiveConstraints.indexOf(this._curvatureExtremaTotalNumberOfConstraints - 1), 1);
                }
                /* JCL 08/03/2021 Add constraint modifications to curvature extrema appearing based on a non null optimum value of B(u) */
                if (this._diffEventsVariation.extremumValueOpt !== 0.0 && this._diffEventsVariation.CPvariations !== undefined) {
                    /* to be added: the interval span to be processed */
                    for (var i = 1; i < this._curvatureExtremaTotalNumberOfConstraints - 1; i += 1) {
                        if (inactiveConstraints.length > 0 && inactiveConstraints.indexOf(i) !== -1)
                            inactiveConstraints.splice(inactiveConstraints.indexOf(i), 1);
                    }
                }
            }
            else
                console.log("Null content of shapeSpaceBoundaryConstraintsCurvExtrema.");
        }
        else if ((this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryDisappear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryDisappear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryAppear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryAppear)
            && this.constraintType === AbstractOptProblemBSplineR1toR2_1.ConstraintType.inflection) {
            if (this._shapeSpaceBoundaryEnforcer.inflectionEventAtExtremity.start || this._shapeSpaceBoundaryEnforcer.inflectionEventAtExtremity.end) {
                // if(this.shapeSpaceBoundaryConstraintsInflections.length > 0) {
                if (this._shapeSpaceBoundaryEnforcer.inflectionEventAtExtremity.start) {
                    if (inactiveConstraints.length > 0 && inactiveConstraints.indexOf(0) !== -1)
                        inactiveConstraints.splice(inactiveConstraints.indexOf(0), 1);
                }
                else if (this._shapeSpaceBoundaryEnforcer.inflectionEventAtExtremity.end) {
                    if (inactiveConstraints.length > 0 && inactiveConstraints.indexOf(this._inflectionTotalNumberOfConstraints - 1) !== -1)
                        inactiveConstraints.splice(inactiveConstraints.indexOf(this._inflectionTotalNumberOfConstraints - 1), 1);
                }
                /* JCL something to do with this._diffEventsVariation for A(u) extrema ? */
            }
        }
    };
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype.clearInequalityChanges = function () {
        var e_6, _a, e_7, _b;
        if (this.constraintType === AbstractOptProblemBSplineR1toR2_1.ConstraintType.curvatureExtrema) {
            try {
                for (var _c = __values(this._curvatureDerivativeNumeratorCP), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var controlPoint = _d.value;
                    this.revertCurvatureExtremaConstraints[controlPoint] = 1;
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        else if (this.constraintType === AbstractOptProblemBSplineR1toR2_1.ConstraintType.inflection) {
            try {
                for (var _e = __values(this._curvatureNumeratorCP), _g = _e.next(); !_g.done; _g = _e.next()) {
                    var controlPoint = _g.value;
                    this.revertCurvatureExtremaConstraints[controlPoint] = 1;
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "clearInequalityChanges", "Current constraint type is not compatible with the inequalities changes.");
            error.logMessageToConsole();
        }
    };
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype.clearConstraintBoundsUpdate = function () {
        var e_8, _a, e_9, _b;
        if (this.constraintType === AbstractOptProblemBSplineR1toR2_1.ConstraintType.curvatureExtrema) {
            try {
                for (var _c = __values(this._curvatureDerivativeNumeratorCP), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var controlPoint = _d.value;
                    this.curvatureExtremaConstraintBounds[controlPoint] = 0;
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        else if (this.constraintType === AbstractOptProblemBSplineR1toR2_1.ConstraintType.inflection) {
            try {
                for (var _e = __values(this._curvatureNumeratorCP), _g = _e.next(); !_g.done; _g = _e.next()) {
                    var controlPoint = _g.value;
                    this.curvatureExtremaConstraintBounds[controlPoint] = 0;
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "clearConstraintBoundsUpdate", "Current constraint type is not compatible with the constraint bounds update.");
            error.logMessageToConsole();
        }
    };
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype.revertInequalitiesWithinRangeOfLocalExtremum = function () {
        if (this._diffEventsVariation.neighboringEvents.length === 0) {
            return;
        }
        else if ((this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaDisappear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaAppear)
            && this.constraintType === AbstractOptProblemBSplineR1toR2_1.ConstraintType.curvatureExtrema && (this.updateConstraintBound || this._shapeSpaceBoundaryEnforcer.hasNewEvent())) {
            var upperBound = this._diffEventsVariation.span;
            var lowerBound = this._diffEventsVariation.span - this._diffEventsVariation.rangeOfInfluence;
            for (var i = lowerBound + 1; i < upperBound; i += 1) {
                if (this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaDisappear) {
                    if (this.controlPointsFunctionBInit[i] < 0 && this._diffEventsVariation.extremumValue > 0
                        && this._diffEventsVariation.extremumValueOpt < 0)
                        this.revertCurvatureExtremaConstraints[i] = -1;
                    if (this.controlPointsFunctionBInit[i] > 0 && this._diffEventsVariation.extremumValue < 0
                        && this._diffEventsVariation.extremumValueOpt > 0)
                        this.revertCurvatureExtremaConstraints[i] = -1;
                }
                else if (this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaAppear) {
                    if (this.controlPointsFunctionBInit[i] < 0 && this._diffEventsVariation.extremumValue > 0
                        && this._diffEventsVariation.extremumValueOpt < 0)
                        this.revertCurvatureExtremaConstraints[i] = -1;
                    if (this.controlPointsFunctionBInit[i] > 0 && this._diffEventsVariation.extremumValue < 0
                        && this._diffEventsVariation.extremumValueOpt > 0) {
                        if (this._diffEventsVariation.CPvariations[i] > 0) {
                            this.revertCurvatureExtremaConstraints[i] = 1;
                        }
                        else {
                            this.revertCurvatureExtremaConstraints[i] = -1;
                        }
                    }
                }
            }
        }
        else if ((this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryDisappear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryDisappear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryAppear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryAppear)
            && this.constraintType === AbstractOptProblemBSplineR1toR2_1.ConstraintType.curvatureExtrema) {
            if (this._shapeSpaceBoundaryEnforcer.curvExtremumEventAtExtremity.start || this._shapeSpaceBoundaryEnforcer.curvExtremumEventAtExtremity.end) {
                // if(this.shapeSpaceBoundaryConstraintsCurvExtrema.length > 0) {
                if (this._shapeSpaceBoundaryEnforcer.curvExtremumEventAtExtremity.start) {
                    this.revertCurvatureExtremaConstraints[0] = 1;
                }
                if (this._shapeSpaceBoundaryEnforcer.curvExtremumEventAtExtremity.end) {
                    this.revertCurvatureExtremaConstraints[this._curvatureExtremaTotalNumberOfConstraints - 1] = 1;
                }
                if (this._diffEventsVariation.extremumValueOpt !== 0.0 && this._diffEventsVariation.CPvariations !== undefined) {
                    /* to be added: the interval span to be processed */
                    for (var i = 1; i < this._curvatureExtremaTotalNumberOfConstraints - 1; i += 1) {
                        this.revertCurvatureExtremaConstraints[i] = 1;
                        if (this._diffEventsVariation.extremumValueOpt > 0.0 && this.controlPointsFunctionBInit[i] > 0.0) {
                            if (this._diffEventsVariation.CPvariations[i] > 0.0) {
                                this.revertCurvatureExtremaConstraints[i] = -1;
                            }
                            else {
                                this.revertCurvatureExtremaConstraints[i] = -1;
                            }
                        }
                    }
                }
            }
        }
        else if ((this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryDisappear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryDisappear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryAppear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryAppear)
            && this.constraintType === AbstractOptProblemBSplineR1toR2_1.ConstraintType.inflection) {
            if (this._shapeSpaceBoundaryEnforcer.inflectionEventAtExtremity.start || this._shapeSpaceBoundaryEnforcer.inflectionEventAtExtremity.end) {
                // if(this.shapeSpaceBoundaryConstraintsInflections.length > 0) {
                if (this._shapeSpaceBoundaryEnforcer.inflectionEventAtExtremity.start) {
                    this.revertInflectionsConstraints[0] = 1;
                }
                if (this._shapeSpaceBoundaryEnforcer.inflectionEventAtExtremity.end) {
                    this.revertInflectionsConstraints[this._inflectionTotalNumberOfConstraints - 1] = 1;
                }
                // if(this._diffEventsVariation.extremumValueOpt !== 0.0 && this._diffEventsVariation.CPvariations !== undefined) {
                //     /* to be added: the interval span to be processed */
                //     for(let i = 1; i < this._inflectionTotalNumberOfConstraints - 1; i+= 1){
                //         this.revertInflectionsConstraints[i] = 1;
                //         if(this._diffEventsVariation.extremumValueOpt > 0.0 && this.controlPointsFunctionBInit[i] > 0.0) {
                //             if(this._diffEventsVariation.CPvariations[i] > 0.0) {
                //                 this.revertInflectionsConstraints[i] = -1;
                //             } else {
                //                 this.revertInflectionsConstraints[i] = -1;
                //             }
                //         }
                //     }
                // }
            }
        }
    };
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype.updateConstraintBoundsWithinRangeOfLocalExtremum = function () {
        if (this._diffEventsVariation.neighboringEvents.length === 0) {
            return;
        }
        else if ((this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaDisappear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaAppear)
            && this.constraintType === AbstractOptProblemBSplineR1toR2_1.ConstraintType.curvatureExtrema && (this.updateConstraintBound || this._shapeSpaceBoundaryEnforcer.hasNewEvent())) {
            var upperBound = this._diffEventsVariation.span;
            var lowerBound = this._diffEventsVariation.span - this._diffEventsVariation.rangeOfInfluence;
            for (var i = lowerBound + 1; i < upperBound; i += 1) {
                if (this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaAppear) {
                    if (this.controlPointsFunctionBInit[i] > 0 && this._diffEventsVariation.extremumValue < 0
                        && this._diffEventsVariation.extremumValueOpt > 0) {
                        if (this._diffEventsVariation.CPvariations[i] > 0) {
                            this.curvatureExtremaConstraintBounds[i] = this.controlPointsFunctionBInit[i] + (this._diffEventsVariation.CPvariations[i] * this._diffEventsVariation.extremumValue) / (this._diffEventsVariation.extremumValueOpt - this._diffEventsVariation.extremumValue);
                        }
                        else {
                            this.curvatureExtremaConstraintBounds[i] = this.controlPointsFunctionBInit[i] + exports.CONSTRAINT_BOUND_THRESHOLD;
                        }
                    }
                }
            }
            if (this._shapeSpaceBoundaryEnforcer.hasNewEvent()) {
                this.curvatureExtremaConstraintBounds[0] = 0;
                for (var i = 1; i < this._curvatureExtremaTotalNumberOfConstraints; i += 1) {
                    if (this.curveAnalyzerCurrentCurve.curvatureDerivativeNumerator.controlPoints[i] > 0) {
                        this.curvatureExtremaConstraintBounds[i] = this.curveAnalyzerCurrentCurve.curvatureDerivativeNumerator.controlPoints[i] - exports.CONSTRAINT_BOUND_THRESHOLD;
                    }
                    else {
                        this.curvatureExtremaConstraintBounds[i] = 0;
                    }
                }
            }
        }
        else if ((this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryDisappear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryDisappear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryAppear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryAppear)
            && this.constraintType === AbstractOptProblemBSplineR1toR2_1.ConstraintType.curvatureExtrema) {
            if (this._shapeSpaceBoundaryEnforcer.curvExtremumEventAtExtremity.start || this._shapeSpaceBoundaryEnforcer.curvExtremumEventAtExtremity.end) {
                // if(this.shapeSpaceBoundaryConstraintsCurvExtrema.length > 0) {
                if (this._shapeSpaceBoundaryEnforcer.curvExtremumEventAtExtremity.start) {
                    // this.curvatureExtremaConstraintBounds[0] = this.controlPointsFunctionBInit[0] + CONSTRAINT_BOUND_THRESHOLD;
                    this.curvatureExtremaConstraintBounds[0] = 0;
                }
                if (this._shapeSpaceBoundaryEnforcer.curvExtremumEventAtExtremity.end) {
                    this.curvatureExtremaConstraintBounds[this._curvatureExtremaTotalNumberOfConstraints - 1] = 0;
                }
                if (this._diffEventsVariation.extremumValueOpt !== 0.0 && this._diffEventsVariation.CPvariations !== undefined) {
                    /* to be added: the interval span to be processed */
                    for (var i = 1; i < this._curvatureExtremaTotalNumberOfConstraints - 1; i += 1) {
                        this.curvatureExtremaConstraintBounds[i] = 0;
                        if (this._diffEventsVariation.extremumValueOpt > 0.0 && this.controlPointsFunctionBInit[i] > 0.0) {
                            if (this._diffEventsVariation.CPvariations[i] > 0.0) {
                                this.curvatureExtremaConstraintBounds[i] = this.controlPointsFunctionBInit[i] + this._diffEventsVariation.CPvariations[i];
                            }
                            else {
                                this.curvatureExtremaConstraintBounds[i] = this.controlPointsFunctionBInit[i] + exports.CONSTRAINT_BOUND_THRESHOLD;
                            }
                        }
                        else if (this._diffEventsVariation.extremumValueOpt < 0.0 && this.controlPointsFunctionBInit[i] < 0.0) {
                            if (this._diffEventsVariation.CPvariations[i] < 0.0) {
                                this.curvatureExtremaConstraintBounds[i] = this.controlPointsFunctionBInit[i] + this._diffEventsVariation.CPvariations[i];
                            }
                            else {
                                this.curvatureExtremaConstraintBounds[i] = this.controlPointsFunctionBInit[i] + exports.CONSTRAINT_BOUND_THRESHOLD;
                            }
                        }
                    }
                }
            }
        }
        else if ((this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryDisappear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryDisappear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryAppear
            || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryAppear)
            && this.constraintType === AbstractOptProblemBSplineR1toR2_1.ConstraintType.inflection) {
            if (this._shapeSpaceBoundaryEnforcer.inflectionEventAtExtremity.start || this._shapeSpaceBoundaryEnforcer.inflectionEventAtExtremity.end) {
                // if(this.shapeSpaceBoundaryConstraintsInflections.length > 0) {
                if (this._shapeSpaceBoundaryEnforcer.inflectionEventAtExtremity.start) {
                    // this.curvatureExtremaConstraintBounds[0] = this.controlPointsFunctionBInit[0] + CONSTRAINT_BOUND_THRESHOLD;
                    this.inflectionsConstraintsBounds[0] = 0;
                }
                if (this._shapeSpaceBoundaryEnforcer.inflectionEventAtExtremity.end) {
                    this.inflectionsConstraintsBounds[this._inflectionTotalNumberOfConstraints - 1] = 0;
                }
                // if(this._diffEventsVariation.extremumValueOpt !== 0.0 && this._diffEventsVariation.CPvariations !== undefined) {
                //     /* to be added: the interval span to be processed */
                //     for(let i = 1; i < this._curvatureExtremaTotalNumberOfConstraints - 1; i+= 1){
                //         this.curvatureExtremaConstraintBounds[i] = 0;
                //         if(this._diffEventsVariation.extremumValueOpt > 0.0 && this.controlPointsFunctionBInit[i] > 0.0) {
                //             if(this._diffEventsVariation.CPvariations[i] > 0.0) {
                //                 this.curvatureExtremaConstraintBounds[i] = this.controlPointsFunctionBInit[i] + this._diffEventsVariation.CPvariations[i];
                //             } else {
                //                 this.curvatureExtremaConstraintBounds[i] = this.controlPointsFunctionBInit[i] + CONSTRAINT_BOUND_THRESHOLD;
                //             }
                //         } else if(this._diffEventsVariation.extremumValueOpt < 0.0 && this.controlPointsFunctionBInit[i] < 0.0) {
                //             if(this._diffEventsVariation.CPvariations[i] < 0.0) {
                //                 this.curvatureExtremaConstraintBounds[i] = this.controlPointsFunctionBInit[i] + this._diffEventsVariation.CPvariations[i];
                //             } else {
                //                 this.curvatureExtremaConstraintBounds[i] = this.controlPointsFunctionBInit[i] + CONSTRAINT_BOUND_THRESHOLD;
                //             }
                //         }
                //     }
                // }
            }
        }
    };
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype.computeInactiveConstraints = function (controlPoints) {
        this.checkConstraintTypeConsistency(controlPoints);
        var inactiveConstraints = this.extractVerticesLocallyClosestToZero(controlPoints);
        this.inactivateConstraintClosestToZero(controlPoints, inactiveConstraints);
        this.inactivateConstraintsAtCurveEXtremities(controlPoints, inactiveConstraints);
        this.inactivateConstraintsWithinRangeOfLocalExtremum(inactiveConstraints);
        return inactiveConstraints;
    };
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype.compute_curvatureExtremaConstraints = function (curvatureDerivativeNumerator, constraintsSign, inactiveConstraints) {
        var result = [];
        if (this._diffEventsVariation === undefined)
            return result;
        for (var i = 0, j = 0, n = constraintsSign.length; i < n; i += 1) {
            if (i === inactiveConstraints[j]) {
                j += 1;
            }
            else {
                result.push((curvatureDerivativeNumerator[i] - this.curvatureExtremaConstraintBounds[i]) * constraintsSign[i] * this.revertCurvatureExtremaConstraints[i]);
            }
        }
        return result;
    };
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype.compute_inflectionConstraints = function (curvatureNumerator, constraintsSign, inactiveConstraints) {
        var result = [];
        if (this._diffEventsVariation === undefined)
            return result;
        for (var i = 0, j = 0, n = constraintsSign.length; i < n; i += 1) {
            if (i === inactiveConstraints[j]) {
                j += 1;
            }
            else {
                result.push((curvatureNumerator[i] - this.inflectionsConstraintsBounds[i]) * constraintsSign[i] * this.revertInflectionsConstraints[i]);
            }
        }
        return result;
    };
    // compute_curvatureExtremaConstraints_gradient( e: ExpensiveComputationResults,
    //                                             constraintsSign: number[], 
    //                                             inactiveConstraints: number[]): DenseMatrix {
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype.compute_curvatureExtremaConstraints_gradient = function (constraintsSign, inactiveConstraints) {
        // const sxu = e.bdsxu
        // const sxuu = e.bdsxuu
        // const sxuuu = e.bdsxuuu
        // const syu = e.bdsyu
        // const syuu = e.bdsyuu
        // const syuuu = e.bdsyuuu
        // const h1 = e.h1
        // const h2 = e.h2
        // const h3 = e.h3
        // const h4 = e.h4
        var sxu = this._analyticHighOrderCurveDerivatives.bdsxu;
        var sxuu = this._analyticHighOrderCurveDerivatives.bdsxuu;
        var sxuuu = this._analyticHighOrderCurveDerivatives.bdsxuuu;
        var syu = this._analyticHighOrderCurveDerivatives.bdsyu;
        var syuu = this._analyticHighOrderCurveDerivatives.bdsyuu;
        var syuuu = this._analyticHighOrderCurveDerivatives.bdsyuuu;
        var h1 = this._analyticHighOrderCurveDerivatives.h1;
        var h2 = this._analyticHighOrderCurveDerivatives.h2;
        var h3 = this._analyticHighOrderCurveDerivatives.h3;
        var h4 = this._analyticHighOrderCurveDerivatives.h4;
        var dgx = [];
        var dgy = [];
        var controlPointsLength = this.spline.controlPoints.length;
        var totalNumberOfConstraints = this.curvatureExtremaTotalNumberOfConstraints;
        var degree = this.spline.degree;
        for (var i = 0; i < controlPointsLength; i += 1) {
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(controlPointsLength - degree, i + 1);
            var h1_subset = h1.subset(start, lessThan);
            var h2_subset = h2.subset(start, lessThan);
            var h3_subset = h3.subset(start, lessThan);
            var h4_subset = h4.subset(start, lessThan);
            var h5 = this.dBasisFunctions_du[i].multiplyRange(sxu, start, lessThan);
            var h6 = this.dBasisFunctions_du[i].multiplyRange(syuuu, start, lessThan);
            var h7 = syu.multiplyRange(this.d3BasisFunctions_du3[i], start, lessThan).multiplyByScalar(-1);
            var h8 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan);
            var h9 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h11 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan).multiplyByScalar(-1);
            dgx.push((h5.multiply(h2_subset).multiplyByScalar(2)).add(h1_subset.multiply(h6.add(h7))).add(((((h8.add(h9)).multiply(h4_subset))).add((h10.add(h11)).multiply(h3_subset))).multiplyByScalar(-3)));
        }
        for (var i = 0; i < controlPointsLength; i += 1) {
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(controlPointsLength - degree, i + 1);
            var h1_subset = h1.subset(start, lessThan);
            var h2_subset = h2.subset(start, lessThan);
            var h3_subset = h3.subset(start, lessThan);
            var h4_subset = h4.subset(start, lessThan);
            var h5 = this.dBasisFunctions_du[i].multiplyRange(syu, start, lessThan);
            var h6 = this.dBasisFunctions_du[i].multiplyRange(sxuuu, start, lessThan).multiplyByScalar(-1);
            var h7 = sxu.multiplyRange(this.d3BasisFunctions_du3[i], start, lessThan);
            var h8 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h9 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan).multiplyByScalar(-1);
            var h11 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            dgy.push((h5.multiply(h2_subset).multiplyByScalar(2)).add(h1_subset.multiply(h6.add(h7))).add(((((h8.add(h9)).multiply(h4_subset))).add((h10.add(h11)).multiply(h3_subset))).multiplyByScalar(-3)));
        }
        var result = new DenseMatrix_1.DenseMatrix(totalNumberOfConstraints - inactiveConstraints.length, 2 * controlPointsLength);
        if (this._diffEventsVariation === undefined)
            return result;
        for (var i = 0; i < controlPointsLength; i += 1) {
            var cpx = dgx[i].flattenControlPointsArray();
            var cpy = dgy[i].flattenControlPointsArray();
            var start = Math.max(0, i - degree) * (4 * degree - 5);
            var lessThan = Math.min(controlPointsLength - degree, i + 1) * (4 * degree - 5);
            var deltaj = 0;
            for (var i_5 = 0; i_5 < inactiveConstraints.length; i_5 += 1) {
                if (inactiveConstraints[i_5] >= start) {
                    break;
                }
                deltaj += 1;
            }
            for (var j = start; j < lessThan; j += 1) {
                if (j === inactiveConstraints[deltaj]) {
                    deltaj += 1;
                }
                else {
                    result.set(j - deltaj, i, cpx[j - start] * constraintsSign[j] * this.revertCurvatureExtremaConstraints[j]);
                    result.set(j - deltaj, controlPointsLength + i, cpy[j - start] * constraintsSign[j] * this.revertCurvatureExtremaConstraints[j]);
                }
            }
        }
        return result;
    };
    // compute_inflectionConstraints_gradient( e: ExpensiveComputationResults,
    //     constraintsSign: number[], 
    //     inactiveConstraints: number[]): DenseMatrix {
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype.compute_inflectionConstraints_gradient = function (constraintsSign, inactiveConstraints) {
        // const sxu = e.bdsxu
        // const sxuu = e.bdsxuu
        // const syu = e.bdsyu
        // const syuu = e.bdsyuu
        var sxu = this._analyticHighOrderCurveDerivatives.bdsxu;
        var sxuu = this._analyticHighOrderCurveDerivatives.bdsxuu;
        var syu = this._analyticHighOrderCurveDerivatives.bdsyu;
        var syuu = this._analyticHighOrderCurveDerivatives.bdsyuu;
        var dgx = [];
        var dgy = [];
        var controlPointsLength = this.spline.controlPoints.length;
        var degree = this.spline.degree;
        for (var i = 0; i < controlPointsLength; i += 1) {
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(controlPointsLength - degree, i + 1);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h11 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan).multiplyByScalar(-1);
            dgx.push((h10.add(h11)));
        }
        for (var i = 0; i < controlPointsLength; i += 1) {
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(controlPointsLength - degree, i + 1);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan).multiplyByScalar(-1);
            var h11 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            dgy.push(h10.add(h11));
        }
        var totalNumberOfConstraints = this.inflectionConstraintsSign.length;
        var result = new DenseMatrix_1.DenseMatrix(totalNumberOfConstraints - inactiveConstraints.length, 2 * controlPointsLength);
        if (this._diffEventsVariation === undefined)
            return result;
        for (var i = 0; i < controlPointsLength; i += 1) {
            var cpx = dgx[i].flattenControlPointsArray();
            var cpy = dgy[i].flattenControlPointsArray();
            var start = Math.max(0, i - degree) * (2 * degree - 2);
            var lessThan = Math.min(controlPointsLength - degree, i + 1) * (2 * degree - 2);
            var deltaj = 0;
            for (var i_6 = 0; i_6 < inactiveConstraints.length; i_6 += 1) {
                if (inactiveConstraints[i_6] >= start) {
                    break;
                }
                deltaj += 1;
            }
            for (var j = start; j < lessThan; j += 1) {
                if (j === inactiveConstraints[deltaj]) {
                    deltaj += 1;
                }
                else {
                    result.set(j - deltaj, i, cpx[j - start] * constraintsSign[j] * this.revertInflectionsConstraints[j]);
                    result.set(j - deltaj, controlPointsLength + i, cpy[j - start] * constraintsSign[j] * this.revertInflectionsConstraints[j]);
                }
            }
        }
        return result;
    };
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype.compute_f = function (curvatureNumerator, inflectionConstraintsSign, inflectionInactiveConstraints, curvatureDerivativeNumerator, curvatureExtremaConstraintsSign, curvatureExtremaInactiveConstraints) {
        var f = [];
        if (this._shapeSpaceDiffEventsStructure.activeControlInflections && this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            var r1 = this.compute_curvatureExtremaConstraints(curvatureDerivativeNumerator, curvatureExtremaConstraintsSign, curvatureExtremaInactiveConstraints);
            // console.log(" compute_fGN: " + this.curvatureExtremaConstraintBounds + " modifSignConstraints: " + this.revertCurvatureExtremaConstraints + " r1: " + r1)
            var r2 = this.compute_inflectionConstraints(curvatureNumerator, inflectionConstraintsSign, inflectionInactiveConstraints);
            f = r1.concat(r2);
        }
        else if (this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            f = this.compute_curvatureExtremaConstraints(curvatureDerivativeNumerator, curvatureExtremaConstraintsSign, curvatureExtremaInactiveConstraints);
            // console.log(" compute_fGN: " + this.curvatureExtremaConstraintBounds + " modifSignConstraints: " + this.revertCurvatureExtremaConstraints + " f: " + f)
        }
        else if (this._shapeSpaceDiffEventsStructure.activeControlInflections) {
            f = this.compute_inflectionConstraints(curvatureNumerator, inflectionConstraintsSign, inflectionInactiveConstraints);
        }
        return f;
    };
    // compute_gradient_f( e: ExpensiveComputationResults,
    //                     inflectionConstraintsSign: number[],
    //                     inflectionInactiveConstraints: number[],
    //                     curvatureExtremaConstraintsSign: number[], 
    //                     curvatureExtremaInactiveConstraints: number[]): DenseMatrix {
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype.compute_gradient_f = function (inflectionConstraintsSign, inflectionInactiveConstraints, curvatureExtremaConstraintsSign, curvatureExtremaInactiveConstraints) {
        if (this._shapeSpaceDiffEventsStructure.activeControlInflections && this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // const m1 = this.compute_curvatureExtremaConstraints_gradient(e, curvatureExtremaConstraintsSign, curvatureExtremaInactiveConstraints);
            var m1 = this.compute_curvatureExtremaConstraints_gradient(curvatureExtremaConstraintsSign, curvatureExtremaInactiveConstraints);
            // console.log(" grad_fGN: " + curvatureExtremaConstraintsSign + " modifSignConstraints: " + this.revertCurvatureExtremaConstraints + " m1: " + m1)
            // const m2 = this.compute_inflectionConstraints_gradient(e, inflectionConstraintsSign, inflectionInactiveConstraints)
            var m2 = this.compute_inflectionConstraints_gradient(inflectionConstraintsSign, inflectionInactiveConstraints);
            var _a = __read(m1.shape, 2), row_m1 = _a[0], n = _a[1];
            var _b = __read(m2.shape, 1), row_m2 = _b[0];
            var m = row_m1 + row_m2;
            var result = new DenseMatrix_1.DenseMatrix(m, n);
            for (var i = 0; i < row_m1; i += 1) {
                for (var j = 0; j < n; j += 1) {
                    result.set(i, j, m1.get(i, j));
                }
            }
            for (var i = 0; i < row_m2; i += 1) {
                for (var j = 0; j < n; j += 1) {
                    result.set(row_m1 + i, j, m2.get(i, j));
                }
            }
            return result;
        }
        else if (this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // return this.compute_curvatureExtremaConstraints_gradient(e, curvatureExtremaConstraintsSign, curvatureExtremaInactiveConstraints);
            return this.compute_curvatureExtremaConstraints_gradient(curvatureExtremaConstraintsSign, curvatureExtremaInactiveConstraints);
        }
        else if (this._shapeSpaceDiffEventsStructure.activeControlInflections) {
            // return this.compute_inflectionConstraints_gradient(e, inflectionConstraintsSign, inflectionInactiveConstraints)
            return this.compute_inflectionConstraints_gradient(inflectionConstraintsSign, inflectionInactiveConstraints);
        }
        else {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "compute_gradient_f", "active control set to none: unable to compute gradients of f.");
            warning.logMessageToConsole();
            var result = new DenseMatrix_1.DenseMatrix(1, 1);
            return result;
        }
    };
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype.step = function (deltaX) {
        var e_10, _a, e_11, _b;
        var checked = true;
        var inactiveCurvatureConstraintsAtStart = this.curvatureExtremaInactiveConstraints;
        // let e: ExpensiveComputationResults = this.initExpansiveComputations();
        this._analyticHighOrderCurveDerivatives = this.initExpansiveComputations();
        var curvatureNumerator = [];
        var curvatureDerivativeNumerator = [];
        var curvatureDerivativeEXtrema = [];
        var curvatureDerivativeEXtremaUpdated = [];
        if (this._shapeSpaceBoundaryEnforcer.isActive()) {
            this._inflectionInactiveConstraints = [];
            this._curvatureExtremaInactiveConstraints = [];
        }
        // if(this.neighboringEvent.event === NeighboringEventsType.neighboringCurvatureExtremaDisappear || this.neighboringEvent.event === NeighboringEventsType.neighboringCurvatureExtremaAppear) {
        if (this.diffEventsVariation.neighboringEvents.length > 0) {
            if (this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaDisappear || this._diffEventsVariation.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaAppear) {
                var splineDP = new BSplineR1toR2DifferentialProperties_1.BSplineR1toR2DifferentialProperties(this.spline);
                var functionB = splineDP.curvatureDerivativeNumerator();
                var curvatureExtremaLocations = functionB.zeros();
                var functionBderivativeExtrema = functionB.derivative().zeros();
                try {
                    for (var functionBderivativeExtrema_1 = __values(functionBderivativeExtrema), functionBderivativeExtrema_1_1 = functionBderivativeExtrema_1.next(); !functionBderivativeExtrema_1_1.done; functionBderivativeExtrema_1_1 = functionBderivativeExtrema_1.next()) {
                        var extLoc = functionBderivativeExtrema_1_1.value;
                        curvatureDerivativeEXtrema.push(functionB.evaluate(extLoc));
                    }
                }
                catch (e_10_1) { e_10 = { error: e_10_1 }; }
                finally {
                    try {
                        if (functionBderivativeExtrema_1_1 && !functionBderivativeExtrema_1_1.done && (_a = functionBderivativeExtrema_1.return)) _a.call(functionBderivativeExtrema_1);
                    }
                    finally { if (e_10) throw e_10.error; }
                }
                var splineCurrent = this.spline.clone();
                this._spline = this.spline.moveControlPoints(AbstractOptProblemBSplineR1toR2_1.convertStepToVector2d(deltaX));
                var splineDPupdated = new BSplineR1toR2DifferentialProperties_1.BSplineR1toR2DifferentialProperties(this.spline);
                var functionBupdated = splineDPupdated.curvatureDerivativeNumerator();
                var curvatureExtremaLocationsUpdated = functionBupdated.zeros();
                var functionBderivativeExtremaUpdated = functionBupdated.derivative().zeros();
                try {
                    for (var functionBderivativeExtremaUpdated_1 = __values(functionBderivativeExtremaUpdated), functionBderivativeExtremaUpdated_1_1 = functionBderivativeExtremaUpdated_1.next(); !functionBderivativeExtremaUpdated_1_1.done; functionBderivativeExtremaUpdated_1_1 = functionBderivativeExtremaUpdated_1.next()) {
                        var extLoc = functionBderivativeExtremaUpdated_1_1.value;
                        curvatureDerivativeEXtremaUpdated.push(functionBupdated.evaluate(extLoc));
                    }
                }
                catch (e_11_1) { e_11 = { error: e_11_1 }; }
                finally {
                    try {
                        if (functionBderivativeExtremaUpdated_1_1 && !functionBderivativeExtremaUpdated_1_1.done && (_b = functionBderivativeExtremaUpdated_1.return)) _b.call(functionBderivativeExtremaUpdated_1);
                    }
                    finally { if (e_11) throw e_11.error; }
                }
                if (curvatureExtremaLocationsUpdated.length !== curvatureExtremaLocations.length) {
                    checked = false;
                    // this.spline = splineCurrent
                    console.log("extrema current: " + curvatureExtremaLocations + " extrema updated: " + curvatureExtremaLocationsUpdated);
                    this._iteratedCurves.pop();
                    return checked;
                }
                else {
                    this._iteratedCurves.push(this.spline);
                }
            }
            else {
                this._spline = this.spline.moveControlPoints(AbstractOptProblemBSplineR1toR2_1.convertStepToVector2d(deltaX));
            }
        }
        else {
            this._spline = this.spline.moveControlPoints(AbstractOptProblemBSplineR1toR2_1.convertStepToVector2d(deltaX));
            this._iteratedCurves.push(this.spline);
        }
        this._gradient_f0 = this.compute_gradient_f0(this._spline);
        this._f0 = this.compute_f0(this._gradient_f0);
        if (this._shapeSpaceDiffEventsStructure.activeControlInflections || this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // e = this.expensiveComputation(this._spline);
            this._analyticHighOrderCurveDerivatives = this.expensiveComputation(this._spline);
            // curvatureNumerator = this.curvatureNumerator(e.h4);
            curvatureNumerator = this.curvatureNumerator();
            this.inflectionConstraintsSign = this.computeConstraintsSign(curvatureNumerator);
            this.constraintType = AbstractOptProblemBSplineR1toR2_1.ConstraintType.inflection;
            // this._inflectionInactiveConstraints = this.computeInactiveConstraintsGN(curvatureNumerator)
            if (!this._shapeSpaceBoundaryEnforcer.isActive())
                this._inflectionInactiveConstraints = this.computeInactiveConstraints(curvatureNumerator);
            this.inflectionNumberOfActiveConstraints = curvatureNumerator.length - this.inflectionInactiveConstraints.length;
            // if(this.updateConstraintBound) {
            //     this.clearInequalityChanges();
            //     this.clearConstraintBoundsUpdate();
            //     this.revertInequalitiesWithinRangeOfLocalExtremum();
            //     this.updateConstraintBoundsWithinRangeOfLocalExtremum();
            // }
        }
        if (this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // curvatureDerivativeNumerator = this.curvatureDerivativeNumerator(e.h1, e.h2, e.h3, e.h4);
            curvatureDerivativeNumerator = this.curvatureDerivativeNumerator();
            this._curvatureExtremaConstraintsSign = this.computeConstraintsSign(curvatureDerivativeNumerator);
            this.constraintType = AbstractOptProblemBSplineR1toR2_1.ConstraintType.curvatureExtrema;
            // this._curvatureExtremaInactiveConstraints = this.computeInactiveConstraintsGN(g)
            if (!this._shapeSpaceBoundaryEnforcer.isActive())
                this._curvatureExtremaInactiveConstraints = this.computeInactiveConstraints(curvatureDerivativeNumerator);
            this.curvatureExtremaNumberOfActiveConstraints = curvatureDerivativeNumerator.length - this.curvatureExtremaInactiveConstraints.length;
        }
        if (this.updateConstraintBound) {
            this.clearInequalityChanges();
            this.clearConstraintBoundsUpdate();
            this.revertInequalitiesWithinRangeOfLocalExtremum();
            this.updateConstraintBoundsWithinRangeOfLocalExtremum();
        }
        //console.log("step : inactive cst start: " + inactiveCurvatureConstraintsAtStart + " updated " + this.curvatureExtremaInactiveConstraints + " infl " + this.inflectionInactiveConstraints + " cst sgn " + this.curvatureExtremaConstraintsSign)
        console.log("step : inactive cst: " + this.curvatureExtremaInactiveConstraints + " revert " + this.revertCurvatureExtremaConstraints
            + " cst sgn " + this.curvatureExtremaConstraintsSign + " bound " + this.curvatureExtremaConstraintBounds
            + " update status " + this.updateConstraintBound + " extB " + curvatureDerivativeEXtrema + " extBUpdt " + curvatureDerivativeEXtremaUpdated);
        this.updateConstraintBound = false;
        this._f = this.compute_f(curvatureNumerator, this.inflectionConstraintsSign, this.inflectionInactiveConstraints, curvatureDerivativeNumerator, this.curvatureExtremaConstraintsSign, this.curvatureExtremaInactiveConstraints);
        // this._gradient_f = this.compute_gradient_f(e, this.inflectionConstraintsSign, this.inflectionInactiveConstraints, this.curvatureExtremaConstraintsSign, this.curvatureExtremaInactiveConstraints);
        this._gradient_f = this.compute_gradient_f(this.inflectionConstraintsSign, this.inflectionInactiveConstraints, this.curvatureExtremaConstraintsSign, this.curvatureExtremaInactiveConstraints);
        if (this.isComputingHessian) {
            // this._hessian_f = this.compute_hessian_f(e.bdsxu, e.bdsyu, e.bdsxuu, e.bdsyuu,e.bdsxuuu, e.bdsyuuu, e.h1, e.h2, e.h3, e.h4, this.curvatureExtremaConstraintsSign, this.curvatureExtremaInactiveConstraints)
            this._hessian_f = this.compute_hessian_f(this._analyticHighOrderCurveDerivatives.bdsxu, this._analyticHighOrderCurveDerivatives.bdsyu, this._analyticHighOrderCurveDerivatives.bdsxuu, this._analyticHighOrderCurveDerivatives.bdsyuu, this._analyticHighOrderCurveDerivatives.bdsxuuu, this._analyticHighOrderCurveDerivatives.bdsyuuu, this._analyticHighOrderCurveDerivatives.h1, this._analyticHighOrderCurveDerivatives.h2, this._analyticHighOrderCurveDerivatives.h3, this._analyticHighOrderCurveDerivatives.h4, this.curvatureExtremaConstraintsSign, this.curvatureExtremaInactiveConstraints);
        }
        return checked;
    };
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype.update = function (spline) {
        // let e: ExpensiveComputationResults = this.initExpansiveComputations();
        this._analyticHighOrderCurveDerivatives = this.initExpansiveComputations();
        this._spline = spline.clone();
        this.computeBasisFunctionsDerivatives();
        this._numberOfIndependentVariables = this._spline.freeControlPoints.length * 2;
        this._gradient_f0 = this.compute_gradient_f0(this._spline);
        this._f0 = this.compute_f0(this._gradient_f0);
        this._hessian_f0 = DiagonalMatrix_1.identityMatrix(this._numberOfIndependentVariables);
        this._inflectionInactiveConstraints = [];
        this._curvatureExtremaInactiveConstraints = [];
        this.curveAnalyzerCurrentCurve = this._diffEventsVariation.curveAnalyser1;
        this.curveAnalyzerOptimizedCurve = this._diffEventsVariation.curveAnalyser2;
        if (this._shapeSpaceDiffEventsStructure.activeControlInflections || this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // e = this.expensiveComputation(this._spline);
            this._analyticHighOrderCurveDerivatives = this.expensiveComputation(this._spline);
            // this._curvatureNumeratorCP = this.curvatureNumerator(e.h4);
            this._curvatureNumeratorCP = this.curvatureNumerator();
            this._inflectionTotalNumberOfConstraints = this._curvatureNumeratorCP.length;
            this.inflectionConstraintsSign = this.computeConstraintsSign(this._curvatureNumeratorCP);
            this.constraintType = AbstractOptProblemBSplineR1toR2_1.ConstraintType.inflection;
            if (!this._shapeSpaceBoundaryEnforcer.hasNewEvent())
                this._inflectionInactiveConstraints = this.computeInactiveConstraints(this._curvatureNumeratorCP);
            this.inflectionNumberOfActiveConstraints = this._curvatureNumeratorCP.length - this.inflectionInactiveConstraints.length;
        }
        if (this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // this._curvatureDerivativeNumeratorCP = this.curvatureDerivativeNumerator(e.h1, e.h2, e.h3, e.h4);
            this._curvatureDerivativeNumeratorCP = this.curvatureDerivativeNumerator();
            this._curvatureExtremaTotalNumberOfConstraints = this._curvatureDerivativeNumeratorCP.length;
            this._curvatureExtremaConstraintsSign = this.computeConstraintsSign(this._curvatureDerivativeNumeratorCP);
            this.constraintType = AbstractOptProblemBSplineR1toR2_1.ConstraintType.curvatureExtrema;
            if (!this._shapeSpaceBoundaryEnforcer.hasNewEvent())
                this._curvatureExtremaInactiveConstraints = this.computeInactiveConstraints(this._curvatureDerivativeNumeratorCP);
            this.curvatureExtremaNumberOfActiveConstraints = this._curvatureDerivativeNumeratorCP.length - this.curvatureExtremaInactiveConstraints.length;
        }
        this.controlPointsFunctionBInit = this._curvatureDerivativeNumeratorCP;
        // if(this.neighboringEvent.event !== NeighboringEventsType.none) console.log("B(u) control points at init:" + this.currentCurvatureExtremaControPoints)
        this.curvatureExtremaConstraintBounds = MathVectorBasicOperations_1.zeroVector(this._curvatureDerivativeNumeratorCP.length);
        for (var i = 0; i < this._curvatureDerivativeNumeratorCP.length; i += 1) {
            this.revertCurvatureExtremaConstraints[i] = 1;
        }
        this.clearInequalityChanges();
        this.clearConstraintBoundsUpdate();
        this.revertInequalitiesWithinRangeOfLocalExtremum();
        this.updateConstraintBoundsWithinRangeOfLocalExtremum();
        console.log("optim curv ext inactive constraints: " + this.curvatureExtremaInactiveConstraints);
        console.log("optim inflection inactive constraints: " + this.inflectionInactiveConstraints);
        this._f = this.compute_f(this._curvatureNumeratorCP, this.inflectionConstraintsSign, this.inflectionInactiveConstraints, this._curvatureDerivativeNumeratorCP, this.curvatureExtremaConstraintsSign, this.curvatureExtremaInactiveConstraints);
        this.checkConstraintConsistency();
        // this._gradient_f = this.compute_gradient_f(e, this.inflectionConstraintsSign, this._inflectionInactiveConstraints, this._curvatureExtremaConstraintsSign, this._curvatureExtremaInactiveConstraints)
        this._gradient_f = this.compute_gradient_f(this.inflectionConstraintsSign, this._inflectionInactiveConstraints, this._curvatureExtremaConstraintsSign, this._curvatureExtremaInactiveConstraints);
    };
    OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace.prototype.cancelEvent = function () {
        /* JCL attention clearVariation n'est pas strictement equivalent aux operations ci-dessus*/
        this._diffEventsVariation.clearVariation();
        // this._diffEventsVariation.neighboringEvents = [];
        //const e = this.expensiveComputation(this.spline)  
        //const g = this.curvatureDerivativeNumerator(e.h1, e.h2, e.h3, e.h4)
        this.curvatureExtremaConstraintBounds = MathVectorBasicOperations_1.zeroVector(this.curvatureExtremaConstraintBounds.length);
        for (var i = 0; i < this.revertCurvatureExtremaConstraints.length; i += 1) {
            this.revertCurvatureExtremaConstraints[i] = 1;
        }
        var delta = MathVectorBasicOperations_1.zeroVector(this.spline.controlPoints.length * 2);
        this.step(delta);
        this.checkConstraintConsistency();
    };
    return OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace;
}(OptProblemOPenBSplineR1toR2WithWeigthingFactors));
exports.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace = OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace;


/***/ }),

/***/ "./src/bsplineOptimizationProblems/OptProblemPeriodicBSplineR1toR2.ts":
/*!****************************************************************************!*\
  !*** ./src/bsplineOptimizationProblems/OptProblemPeriodicBSplineR1toR2.ts ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OptProblemPeriodicBSplineR1toR2NoInactiveConstraints = exports.OptProblemPeriodicBSplineR1toR2 = void 0;
var MathVectorBasicOperations_1 = __webpack_require__(/*! ../linearAlgebra/MathVectorBasicOperations */ "./src/linearAlgebra/MathVectorBasicOperations.ts");
var PeriodicBSplineR1toR1_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR1 */ "./src/newBsplines/PeriodicBSplineR1toR1.ts");
var DenseMatrix_1 = __webpack_require__(/*! ../linearAlgebra/DenseMatrix */ "./src/linearAlgebra/DenseMatrix.ts");
var AbstractOptProblemBSplineR1toR2_1 = __webpack_require__(/*! ./AbstractOptProblemBSplineR1toR2 */ "./src/bsplineOptimizationProblems/AbstractOptProblemBSplineR1toR2.ts");
var OptProblemPeriodicBSplineR1toR2 = /** @class */ (function (_super) {
    __extends(OptProblemPeriodicBSplineR1toR2, _super);
    function OptProblemPeriodicBSplineR1toR2(splineInitial, shapeSpaceDiffEventsStructure) {
        var _this = _super.call(this, splineInitial, shapeSpaceDiffEventsStructure) || this;
        // let e: ExpensiveComputationResults = this.initExpansiveComputations();
        _this._analyticHighOrderCurveDerivatives = _this.initExpansiveComputations();
        if (_this._shapeSpaceDiffEventsStructure.activeControlInflections || _this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // e = this.expensiveComputation(this._spline);
            _this._analyticHighOrderCurveDerivatives = _this.expensiveComputation(_this._spline);
            // this._curvatureNumeratorCP = this.curvatureNumerator(e.h4);
            _this._curvatureNumeratorCP = _this.curvatureNumerator();
            _this._inflectionTotalNumberOfConstraints = _this._curvatureNumeratorCP.length;
            _this.inflectionConstraintsSign = _this.computeConstraintsSign(_this._curvatureNumeratorCP);
            _this.constraintType = AbstractOptProblemBSplineR1toR2_1.ConstraintType.inflection;
            _this._inflectionInactiveConstraints = _this.computeInactiveConstraints(_this._curvatureNumeratorCP);
            _this.inflectionNumberOfActiveConstraints = _this._curvatureNumeratorCP.length - _this.inflectionInactiveConstraints.length;
        }
        if (_this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
            // this._curvatureDerivativeNumeratorCP = this.curvatureDerivativeNumerator(e.h1, e.h2, e.h3, e.h4);
            _this._curvatureDerivativeNumeratorCP = _this.curvatureDerivativeNumerator();
            _this._curvatureExtremaTotalNumberOfConstraints = _this._curvatureDerivativeNumeratorCP.length;
            _this._curvatureExtremaConstraintsSign = _this.computeConstraintsSign(_this._curvatureDerivativeNumeratorCP);
            _this.constraintType = AbstractOptProblemBSplineR1toR2_1.ConstraintType.curvatureExtrema;
            _this._curvatureExtremaInactiveConstraints = _this.computeInactiveConstraints(_this._curvatureDerivativeNumeratorCP);
            _this.curvatureExtremaNumberOfActiveConstraints = _this._curvatureDerivativeNumeratorCP.length - _this.curvatureExtremaInactiveConstraints.length;
        }
        _this._f = _this.compute_f(_this._curvatureNumeratorCP, _this.inflectionConstraintsSign, _this._inflectionInactiveConstraints, _this._curvatureDerivativeNumeratorCP, _this._curvatureExtremaConstraintsSign, _this._curvatureExtremaInactiveConstraints);
        // this._gradient_f = this.compute_gradient_f(e, this.inflectionConstraintsSign, this._inflectionInactiveConstraints,
        //     this._curvatureExtremaConstraintsSign, this._curvatureExtremaInactiveConstraints);
        _this._gradient_f = _this.compute_gradient_f(_this.inflectionConstraintsSign, _this._inflectionInactiveConstraints, _this._curvatureExtremaConstraintsSign, _this._curvatureExtremaInactiveConstraints);
        return _this;
    }
    Object.defineProperty(OptProblemPeriodicBSplineR1toR2.prototype, "spline", {
        get: function () {
            return this._spline;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OptProblemPeriodicBSplineR1toR2.prototype, "previousSpline", {
        get: function () {
            return this._previousSpline;
        },
        enumerable: false,
        configurable: true
    });
    OptProblemPeriodicBSplineR1toR2.prototype.bSplineR1toR1Factory = function (controlPoints, knots) {
        return new PeriodicBSplineR1toR1_1.PeriodicBSplineR1toR1(controlPoints, knots);
    };
    OptProblemPeriodicBSplineR1toR2.prototype.setTargetSpline = function (spline) {
        this._target = spline.clone();
        this._gradient_f0 = this.compute_gradient_f0(this.spline);
        this._f0 = this.compute_f0(this._gradient_f0);
    };
    /**
     * Some contraints are set inactive to allowed the point of inflection or curvature extrema
     * to slide along the curve.
     **/
    OptProblemPeriodicBSplineR1toR2.prototype.computeInactiveConstraints = function (controlPoints) {
        var controlPointsSequences = this.extractChangingSignControlPointsSequences(controlPoints);
        var result = this.extractControlPointsClosestToZero(controlPointsSequences);
        var firstCP = controlPoints[0];
        var lastCP = controlPoints[controlPoints.length - 1];
        if (firstCP * lastCP <= 0) {
            if (Math.pow(firstCP, 2) <= Math.pow(lastCP, 2)) {
                if (result[0] != 0) {
                    result = [0].concat(result);
                }
            }
            else {
                if (result[result.length - 1] != controlPoints.length - 1) {
                    result.push(controlPoints.length - 1);
                }
            }
        }
        return result;
    };
    OptProblemPeriodicBSplineR1toR2.prototype.extractChangingSignControlPointsSequences = function (controlPoints) {
        var result = [];
        var successiveControlPoints = [];
        var i = 1;
        while (i < controlPoints.length) {
            successiveControlPoints = [];
            if (controlPoints[i - 1] * controlPoints[i] <= 0) {
                successiveControlPoints.push({ index: i - 1, value: controlPoints[i - 1] });
                successiveControlPoints.push({ index: i, value: controlPoints[i] });
                i += 1;
                while (controlPoints[i - 1] * controlPoints[i] <= 0) {
                    successiveControlPoints.push({ index: i, value: controlPoints[i] });
                    i += 1;
                }
                result.push(successiveControlPoints);
            }
            i += 1;
        }
        return result;
    };
    OptProblemPeriodicBSplineR1toR2.prototype.extractControlPointsClosestToZero = function (polygonSegments) {
        var e_1, _a, e_2, _b;
        var result = [];
        try {
            for (var polygonSegments_1 = __values(polygonSegments), polygonSegments_1_1 = polygonSegments_1.next(); !polygonSegments_1_1.done; polygonSegments_1_1 = polygonSegments_1.next()) {
                var polygonSegment = polygonSegments_1_1.value;
                var s = this.removeBiggest(polygonSegment);
                try {
                    for (var s_1 = (e_2 = void 0, __values(s)), s_1_1 = s_1.next(); !s_1_1.done; s_1_1 = s_1.next()) {
                        var iv = s_1_1.value;
                        result.push(iv.index);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (s_1_1 && !s_1_1.done && (_b = s_1.return)) _b.call(s_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (polygonSegments_1_1 && !polygonSegments_1_1.done && (_a = polygonSegments_1.return)) _a.call(polygonSegments_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result;
    };
    OptProblemPeriodicBSplineR1toR2.prototype.removeBiggest = function (controlPointsSequence) {
        var result = controlPointsSequence.slice();
        var maxIndex = 0;
        for (var i = 1; i < controlPointsSequence.length; i += 1) {
            if (Math.pow(controlPointsSequence[i].value, 2) > Math.pow(controlPointsSequence[maxIndex].value, 2)) {
                maxIndex = i;
            }
        }
        result.splice(maxIndex, 1);
        return result;
    };
    // compute_curvatureExtremaConstraints_gradient( e: ExpensiveComputationResults,
    //                                             constraintsSign: number[], 
    //                                             inactiveConstraints: number[]) {
    OptProblemPeriodicBSplineR1toR2.prototype.compute_curvatureExtremaConstraints_gradient = function (constraintsSign, inactiveConstraints) {
        var e_3, _a, e_4, _b;
        // const sxu = e.bdsxu
        // const sxuu = e.bdsxuu
        // const sxuuu = e.bdsxuuu
        // const syu = e.bdsyu
        // const syuu = e.bdsyuu
        // const syuuu = e.bdsyuuu
        // const h1 = e.h1
        // const h2 = e.h2
        // const h3 = e.h3
        // const h4 = e.h4
        var sxu = this._analyticHighOrderCurveDerivatives.bdsxu;
        var sxuu = this._analyticHighOrderCurveDerivatives.bdsxuu;
        var sxuuu = this._analyticHighOrderCurveDerivatives.bdsxuuu;
        var syu = this._analyticHighOrderCurveDerivatives.bdsyu;
        var syuu = this._analyticHighOrderCurveDerivatives.bdsyuu;
        var syuuu = this._analyticHighOrderCurveDerivatives.bdsyuuu;
        var h1 = this._analyticHighOrderCurveDerivatives.h1;
        var h2 = this._analyticHighOrderCurveDerivatives.h2;
        var h3 = this._analyticHighOrderCurveDerivatives.h3;
        var h4 = this._analyticHighOrderCurveDerivatives.h4;
        var dgx = [];
        var dgy = [];
        var periodicControlPointsLength = this.spline.freeControlPoints.length;
        var totalNumberOfConstraints = constraintsSign.length;
        var degree = this.spline.degree;
        for (var i = 0; i < periodicControlPointsLength; i += 1) {
            // moved control point : i
            // periodicControlPointsLength = n - degree (it is necessery to add degree cyclic control points, if we do not count them we have n - degree control points)
            // Bernstein Decomposition index : [max(0, i - degree), min(n - degree, i + 1)]
            // N_{j, d} is zero outside [u_{j}, u_{j + d + 1} )
            // Dsu[j] = (N_{j, d})_u
            // in terms of the set of Bernstein Decomposition N_{j, d} = 0 outside [max(0, i - d), min(n - d, i + 1)]
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(periodicControlPointsLength, i + 1);
            var h1_subset = h1.subset(start, lessThan);
            var h2_subset = h2.subset(start, lessThan);
            var h3_subset = h3.subset(start, lessThan);
            var h4_subset = h4.subset(start, lessThan);
            var h5 = this.dBasisFunctions_du[i].multiplyRange(sxu, start, lessThan);
            var h6 = this.dBasisFunctions_du[i].multiplyRange(syuuu, start, lessThan);
            var h7 = syu.multiplyRange(this.d3BasisFunctions_du3[i], start, lessThan).multiplyByScalar(-1);
            var h8 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan);
            var h9 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h11 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan).multiplyByScalar(-1);
            dgx.push((h5.multiply(h2_subset).multiplyByScalar(2)).add(h1_subset.multiply(h6.add(h7))).add((((h8.add(h9)).multiply(h4_subset)).add((h10.add(h11)).multiply(h3_subset))).multiplyByScalar(-3)));
        }
        for (var i = 0; i < periodicControlPointsLength; i += 1) {
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(periodicControlPointsLength, i + 1);
            var h1_subset = h1.subset(start, lessThan);
            var h2_subset = h2.subset(start, lessThan);
            var h3_subset = h3.subset(start, lessThan);
            var h4_subset = h4.subset(start, lessThan);
            var h5 = this.dBasisFunctions_du[i].multiplyRange(syu, start, lessThan);
            var h6 = this.dBasisFunctions_du[i].multiplyRange(sxuuu, start, lessThan).multiplyByScalar(-1);
            var h7 = sxu.multiplyRange(this.d3BasisFunctions_du3[i], start, lessThan);
            var h8 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h9 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan).multiplyByScalar(-1);
            var h11 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            dgy.push((h5.multiply(h2_subset).multiplyByScalar(2)).add(h1_subset.multiply(h6.add(h7))).add((((h8.add(h9)).multiply(h4_subset)).add((h10.add(h11)).multiply(h3_subset))).multiplyByScalar(-3)));
        }
        var result = new DenseMatrix_1.DenseMatrix(totalNumberOfConstraints - inactiveConstraints.length, 2 * periodicControlPointsLength);
        for (var i = 0; i < periodicControlPointsLength; i += 1) {
            var cpx = dgx[i].flattenControlPointsArray();
            var cpy = dgy[i].flattenControlPointsArray();
            var start = Math.max(0, i - degree) * (4 * degree - 5);
            var lessThan = Math.min(periodicControlPointsLength, i + 1) * (4 * degree - 5);
            var deltaj = 0;
            try {
                for (var inactiveConstraints_1 = (e_3 = void 0, __values(inactiveConstraints)), inactiveConstraints_1_1 = inactiveConstraints_1.next(); !inactiveConstraints_1_1.done; inactiveConstraints_1_1 = inactiveConstraints_1.next()) {
                    var inactiveConstraint = inactiveConstraints_1_1.value;
                    if (inactiveConstraint >= start) {
                        break;
                    }
                    deltaj += 1;
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (inactiveConstraints_1_1 && !inactiveConstraints_1_1.done && (_a = inactiveConstraints_1.return)) _a.call(inactiveConstraints_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            for (var j = start; j < lessThan; j += 1) {
                if (j === inactiveConstraints[deltaj]) {
                    deltaj += 1;
                }
                else {
                    result.set(j - deltaj, i, cpx[j - start] * constraintsSign[j]);
                    result.set(j - deltaj, periodicControlPointsLength + i, cpy[j - start] * constraintsSign[j]);
                }
            }
        }
        //Adding periodic term inside the Matrix
        // The effect of the first control points over the constraints at the end
        for (var i = 0; i < degree; i += 1) {
            // moved control point : i
            // Bernstein Decomposition index : [max(0, i - degree), min(n - degree, i + 1)]
            // N_{j, d} is zero outside [u_{j}, u_{j + d + 1} )
            // Dsu[j] = (N_{j, d})_u
            // in terms of the set of Bernstein Decomposition N_{j, d} = 0 outside [max(0, i - d), min(n - d, i + 1)]
            var start = i - degree + periodicControlPointsLength;
            var lessThan = periodicControlPointsLength;
            var h1_subset = h1.subset(start, lessThan);
            var h2_subset = h2.subset(start, lessThan);
            var h3_subset = h3.subset(start, lessThan);
            var h4_subset = h4.subset(start, lessThan);
            var h5 = this.dBasisFunctions_du[i].multiplyRange(sxu, start, lessThan);
            var h6 = this.dBasisFunctions_du[i].multiplyRange(syuuu, start, lessThan);
            var h7 = syu.multiplyRange(this.d3BasisFunctions_du3[i], start, lessThan).multiplyByScalar(-1);
            var h8 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan);
            var h9 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h11 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan).multiplyByScalar(-1);
            dgx.push((h5.multiply(h2_subset).multiplyByScalar(2)).add(h1_subset.multiply(h6.add(h7))).add((((h8.add(h9)).multiply(h4_subset)).add((h10.add(h11)).multiply(h3_subset))).multiplyByScalar(-3)));
        }
        for (var i = 0; i < degree; i += 1) {
            var start = i - degree + periodicControlPointsLength;
            var lessThan = periodicControlPointsLength;
            var h1_subset = h1.subset(start, lessThan);
            var h2_subset = h2.subset(start, lessThan);
            var h3_subset = h3.subset(start, lessThan);
            var h4_subset = h4.subset(start, lessThan);
            var h5 = this.dBasisFunctions_du[i].multiplyRange(syu, start, lessThan);
            var h6 = this.dBasisFunctions_du[i].multiplyRange(sxuuu, start, lessThan).multiplyByScalar(-1);
            var h7 = sxu.multiplyRange(this.d3BasisFunctions_du3[i], start, lessThan);
            var h8 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h9 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan).multiplyByScalar(-1);
            var h11 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            dgy.push((h5.multiply(h2_subset).multiplyByScalar(2)).add(h1_subset.multiply(h6.add(h7))).add((((h8.add(h9)).multiply(h4_subset)).add((h10.add(h11)).multiply(h3_subset))).multiplyByScalar(-3)));
        }
        for (var i = periodicControlPointsLength; i < periodicControlPointsLength + degree; i += 1) {
            // index i : moved control point + periodicControlPointsLength
            var cpx = dgx[i].flattenControlPointsArray();
            var cpy = dgy[i].flattenControlPointsArray();
            var start = (i - degree) * (4 * degree - 5);
            var lessThan = (periodicControlPointsLength) * (4 * degree - 5);
            var deltaj = 0;
            try {
                for (var inactiveConstraints_2 = (e_4 = void 0, __values(inactiveConstraints)), inactiveConstraints_2_1 = inactiveConstraints_2.next(); !inactiveConstraints_2_1.done; inactiveConstraints_2_1 = inactiveConstraints_2.next()) {
                    var inactiveConstraint = inactiveConstraints_2_1.value;
                    if (inactiveConstraint >= start) {
                        break;
                    }
                    deltaj += 1;
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (inactiveConstraints_2_1 && !inactiveConstraints_2_1.done && (_b = inactiveConstraints_2.return)) _b.call(inactiveConstraints_2);
                }
                finally { if (e_4) throw e_4.error; }
            }
            for (var j = start; j < lessThan; j += 1) {
                if (j === inactiveConstraints[deltaj]) {
                    deltaj += 1;
                }
                else {
                    result.set(j - deltaj, i - periodicControlPointsLength, cpx[j - start] * constraintsSign[j]);
                    result.set(j - deltaj, i, cpy[j - start] * constraintsSign[j]);
                }
            }
        }
        return result;
    };
    OptProblemPeriodicBSplineR1toR2.prototype.compute_curvatureExtremaConstraints_gradientPreviousIteration = function (constraintsSign, inactiveConstraints) {
        var e_5, _a, e_6, _b;
        var sxu = this._previousAnalyticHighOrderCurveDerivatives.bdsxu;
        var sxuu = this._previousAnalyticHighOrderCurveDerivatives.bdsxuu;
        var sxuuu = this._previousAnalyticHighOrderCurveDerivatives.bdsxuuu;
        var syu = this._previousAnalyticHighOrderCurveDerivatives.bdsyu;
        var syuu = this._previousAnalyticHighOrderCurveDerivatives.bdsyuu;
        var syuuu = this._previousAnalyticHighOrderCurveDerivatives.bdsyuuu;
        var h1 = this._previousAnalyticHighOrderCurveDerivatives.h1;
        var h2 = this._previousAnalyticHighOrderCurveDerivatives.h2;
        var h3 = this._previousAnalyticHighOrderCurveDerivatives.h3;
        var h4 = this._previousAnalyticHighOrderCurveDerivatives.h4;
        var dgx = [];
        var dgy = [];
        var periodicControlPointsLength = this.spline.freeControlPoints.length;
        var totalNumberOfConstraints = constraintsSign.length;
        var degree = this.spline.degree;
        for (var i = 0; i < periodicControlPointsLength; i += 1) {
            // moved control point : i
            // periodicControlPointsLength = n - degree (it is necessery to add degree cyclic control points, if we do not count them we have n - degree control points)
            // Bernstein Decomposition index : [max(0, i - degree), min(n - degree, i + 1)]
            // N_{j, d} is zero outside [u_{j}, u_{j + d + 1} )
            // Dsu[j] = (N_{j, d})_u
            // in terms of the set of Bernstein Decomposition N_{j, d} = 0 outside [max(0, i - d), min(n - d, i + 1)]
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(periodicControlPointsLength, i + 1);
            var h1_subset = h1.subset(start, lessThan);
            var h2_subset = h2.subset(start, lessThan);
            var h3_subset = h3.subset(start, lessThan);
            var h4_subset = h4.subset(start, lessThan);
            var h5 = this.dBasisFunctions_du[i].multiplyRange(sxu, start, lessThan);
            var h6 = this.dBasisFunctions_du[i].multiplyRange(syuuu, start, lessThan);
            var h7 = syu.multiplyRange(this.d3BasisFunctions_du3[i], start, lessThan).multiplyByScalar(-1);
            var h8 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan);
            var h9 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h11 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan).multiplyByScalar(-1);
            dgx.push((h5.multiply(h2_subset).multiplyByScalar(2)).add(h1_subset.multiply(h6.add(h7))).add((((h8.add(h9)).multiply(h4_subset)).add((h10.add(h11)).multiply(h3_subset))).multiplyByScalar(-3)));
        }
        for (var i = 0; i < periodicControlPointsLength; i += 1) {
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(periodicControlPointsLength, i + 1);
            var h1_subset = h1.subset(start, lessThan);
            var h2_subset = h2.subset(start, lessThan);
            var h3_subset = h3.subset(start, lessThan);
            var h4_subset = h4.subset(start, lessThan);
            var h5 = this.dBasisFunctions_du[i].multiplyRange(syu, start, lessThan);
            var h6 = this.dBasisFunctions_du[i].multiplyRange(sxuuu, start, lessThan).multiplyByScalar(-1);
            var h7 = sxu.multiplyRange(this.d3BasisFunctions_du3[i], start, lessThan);
            var h8 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h9 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan).multiplyByScalar(-1);
            var h11 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            dgy.push((h5.multiply(h2_subset).multiplyByScalar(2)).add(h1_subset.multiply(h6.add(h7))).add((((h8.add(h9)).multiply(h4_subset)).add((h10.add(h11)).multiply(h3_subset))).multiplyByScalar(-3)));
        }
        var result = new DenseMatrix_1.DenseMatrix(totalNumberOfConstraints - inactiveConstraints.length, 2 * periodicControlPointsLength);
        for (var i = 0; i < periodicControlPointsLength; i += 1) {
            var cpx = dgx[i].flattenControlPointsArray();
            var cpy = dgy[i].flattenControlPointsArray();
            var start = Math.max(0, i - degree) * (4 * degree - 5);
            var lessThan = Math.min(periodicControlPointsLength, i + 1) * (4 * degree - 5);
            var deltaj = 0;
            try {
                for (var inactiveConstraints_3 = (e_5 = void 0, __values(inactiveConstraints)), inactiveConstraints_3_1 = inactiveConstraints_3.next(); !inactiveConstraints_3_1.done; inactiveConstraints_3_1 = inactiveConstraints_3.next()) {
                    var inactiveConstraint = inactiveConstraints_3_1.value;
                    if (inactiveConstraint >= start) {
                        break;
                    }
                    deltaj += 1;
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (inactiveConstraints_3_1 && !inactiveConstraints_3_1.done && (_a = inactiveConstraints_3.return)) _a.call(inactiveConstraints_3);
                }
                finally { if (e_5) throw e_5.error; }
            }
            for (var j = start; j < lessThan; j += 1) {
                if (j === inactiveConstraints[deltaj]) {
                    deltaj += 1;
                }
                else {
                    result.set(j - deltaj, i, cpx[j - start] * constraintsSign[j]);
                    result.set(j - deltaj, periodicControlPointsLength + i, cpy[j - start] * constraintsSign[j]);
                }
            }
        }
        //Adding periodic term inside the Matrix
        // The effect of the first control points over the constraints at the end
        for (var i = 0; i < degree; i += 1) {
            // moved control point : i
            // Bernstein Decomposition index : [max(0, i - degree), min(n - degree, i + 1)]
            // N_{j, d} is zero outside [u_{j}, u_{j + d + 1} )
            // Dsu[j] = (N_{j, d})_u
            // in terms of the set of Bernstein Decomposition N_{j, d} = 0 outside [max(0, i - d), min(n - d, i + 1)]
            var start = i - degree + periodicControlPointsLength;
            var lessThan = periodicControlPointsLength;
            var h1_subset = h1.subset(start, lessThan);
            var h2_subset = h2.subset(start, lessThan);
            var h3_subset = h3.subset(start, lessThan);
            var h4_subset = h4.subset(start, lessThan);
            var h5 = this.dBasisFunctions_du[i].multiplyRange(sxu, start, lessThan);
            var h6 = this.dBasisFunctions_du[i].multiplyRange(syuuu, start, lessThan);
            var h7 = syu.multiplyRange(this.d3BasisFunctions_du3[i], start, lessThan).multiplyByScalar(-1);
            var h8 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan);
            var h9 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h11 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan).multiplyByScalar(-1);
            dgx.push((h5.multiply(h2_subset).multiplyByScalar(2)).add(h1_subset.multiply(h6.add(h7))).add((((h8.add(h9)).multiply(h4_subset)).add((h10.add(h11)).multiply(h3_subset))).multiplyByScalar(-3)));
        }
        for (var i = 0; i < degree; i += 1) {
            var start = i - degree + periodicControlPointsLength;
            var lessThan = periodicControlPointsLength;
            var h1_subset = h1.subset(start, lessThan);
            var h2_subset = h2.subset(start, lessThan);
            var h3_subset = h3.subset(start, lessThan);
            var h4_subset = h4.subset(start, lessThan);
            var h5 = this.dBasisFunctions_du[i].multiplyRange(syu, start, lessThan);
            var h6 = this.dBasisFunctions_du[i].multiplyRange(sxuuu, start, lessThan).multiplyByScalar(-1);
            var h7 = sxu.multiplyRange(this.d3BasisFunctions_du3[i], start, lessThan);
            var h8 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h9 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan).multiplyByScalar(-1);
            var h11 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            dgy.push((h5.multiply(h2_subset).multiplyByScalar(2)).add(h1_subset.multiply(h6.add(h7))).add((((h8.add(h9)).multiply(h4_subset)).add((h10.add(h11)).multiply(h3_subset))).multiplyByScalar(-3)));
        }
        for (var i = periodicControlPointsLength; i < periodicControlPointsLength + degree; i += 1) {
            // index i : moved control point + periodicControlPointsLength
            var cpx = dgx[i].flattenControlPointsArray();
            var cpy = dgy[i].flattenControlPointsArray();
            var start = (i - degree) * (4 * degree - 5);
            var lessThan = (periodicControlPointsLength) * (4 * degree - 5);
            var deltaj = 0;
            try {
                for (var inactiveConstraints_4 = (e_6 = void 0, __values(inactiveConstraints)), inactiveConstraints_4_1 = inactiveConstraints_4.next(); !inactiveConstraints_4_1.done; inactiveConstraints_4_1 = inactiveConstraints_4.next()) {
                    var inactiveConstraint = inactiveConstraints_4_1.value;
                    if (inactiveConstraint >= start) {
                        break;
                    }
                    deltaj += 1;
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (inactiveConstraints_4_1 && !inactiveConstraints_4_1.done && (_b = inactiveConstraints_4.return)) _b.call(inactiveConstraints_4);
                }
                finally { if (e_6) throw e_6.error; }
            }
            for (var j = start; j < lessThan; j += 1) {
                if (j === inactiveConstraints[deltaj]) {
                    deltaj += 1;
                }
                else {
                    result.set(j - deltaj, i - periodicControlPointsLength, cpx[j - start] * constraintsSign[j]);
                    result.set(j - deltaj, i, cpy[j - start] * constraintsSign[j]);
                }
            }
        }
        return result;
    };
    // compute_inflectionConstraints_gradient( e: ExpensiveComputationResults,
    //                                         constraintsSign: number[], 
    //                                         inactiveConstraints: number[]) {
    OptProblemPeriodicBSplineR1toR2.prototype.compute_inflectionConstraints_gradient = function (constraintsSign, inactiveConstraints) {
        var e_7, _a, e_8, _b;
        // const sxu = e.bdsxu
        // const sxuu = e.bdsxuu
        // const syu = e.bdsyu
        // const syuu = e.bdsyuu
        var sxu = this._analyticHighOrderCurveDerivatives.bdsxu;
        var sxuu = this._analyticHighOrderCurveDerivatives.bdsxuu;
        var syu = this._analyticHighOrderCurveDerivatives.bdsyu;
        var syuu = this._analyticHighOrderCurveDerivatives.bdsyuu;
        var dgx = [];
        var dgy = [];
        var periodicControlPointsLength = this.spline.freeControlPoints.length;
        var degree = this.spline.degree;
        for (var i = 0; i < periodicControlPointsLength; i += 1) {
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(periodicControlPointsLength, i + 1);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h11 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan).multiplyByScalar(-1);
            dgx.push((h10.add(h11)));
        }
        for (var i = 0; i < periodicControlPointsLength; i += 1) {
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(periodicControlPointsLength, i + 1);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan).multiplyByScalar(-1);
            var h11 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            dgy.push(h10.add(h11));
        }
        var totalNumberOfConstraints = this.inflectionConstraintsSign.length;
        var result = new DenseMatrix_1.DenseMatrix(totalNumberOfConstraints - inactiveConstraints.length, 2 * periodicControlPointsLength);
        for (var i = 0; i < periodicControlPointsLength; i += 1) {
            var cpx = dgx[i].flattenControlPointsArray();
            var cpy = dgy[i].flattenControlPointsArray();
            var start = Math.max(0, i - degree) * (2 * degree - 2);
            var lessThan = Math.min(periodicControlPointsLength, i + 1) * (2 * degree - 2);
            var deltaj = 0;
            try {
                for (var inactiveConstraints_5 = (e_7 = void 0, __values(inactiveConstraints)), inactiveConstraints_5_1 = inactiveConstraints_5.next(); !inactiveConstraints_5_1.done; inactiveConstraints_5_1 = inactiveConstraints_5.next()) {
                    var inactiveConstraint = inactiveConstraints_5_1.value;
                    if (inactiveConstraint >= start) {
                        break;
                    }
                    deltaj += 1;
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (inactiveConstraints_5_1 && !inactiveConstraints_5_1.done && (_a = inactiveConstraints_5.return)) _a.call(inactiveConstraints_5);
                }
                finally { if (e_7) throw e_7.error; }
            }
            for (var j = start; j < lessThan; j += 1) {
                if (j === inactiveConstraints[deltaj]) {
                    deltaj += 1;
                }
                else {
                    result.set(j - deltaj, i, cpx[j - start] * constraintsSign[j]);
                    result.set(j - deltaj, periodicControlPointsLength + i, cpy[j - start] * constraintsSign[j]);
                }
            }
        }
        //Adding periodic term inside the Matrix
        // The effect of the first control points over the constraints at the end
        for (var i = 0; i < degree; i += 1) {
            // moved control point : i
            // Bernstein Decomposition index : [max(0, i - degree), min(n - degree, i + 1)]
            // N_{j, d} is zero outside [u_{j}, u_{j + d + 1} )
            // Dsu[j] = (N_{j, d})_u
            // in terms of the set of Bernstein Decomposition N_{j, d} = 0 outside [max(0, i - d), min(n - d, i + 1)]
            var start = i - degree + periodicControlPointsLength;
            var lessThan = periodicControlPointsLength;
            var h10 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h11 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan).multiplyByScalar(-1);
            dgx.push((h10.add(h11)));
        }
        for (var i = 0; i < degree; i += 1) {
            var start = i - degree + periodicControlPointsLength;
            var lessThan = periodicControlPointsLength;
            var h10 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan).multiplyByScalar(-1);
            var h11 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            dgy.push(h10.add(h11));
        }
        for (var i = periodicControlPointsLength; i < periodicControlPointsLength + degree; i += 1) {
            // index i : moved control point + periodicControlPointsLength
            var cpx = dgx[i].flattenControlPointsArray();
            var cpy = dgy[i].flattenControlPointsArray();
            var start = Math.max(0, i - degree) * (2 * degree - 2);
            var lessThan = (periodicControlPointsLength) * (2 * degree - 2);
            var deltaj = 0;
            try {
                for (var inactiveConstraints_6 = (e_8 = void 0, __values(inactiveConstraints)), inactiveConstraints_6_1 = inactiveConstraints_6.next(); !inactiveConstraints_6_1.done; inactiveConstraints_6_1 = inactiveConstraints_6.next()) {
                    var inactiveConstraint = inactiveConstraints_6_1.value;
                    if (inactiveConstraint >= start) {
                        break;
                    }
                    deltaj += 1;
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (inactiveConstraints_6_1 && !inactiveConstraints_6_1.done && (_b = inactiveConstraints_6.return)) _b.call(inactiveConstraints_6);
                }
                finally { if (e_8) throw e_8.error; }
            }
            for (var j = start; j < lessThan; j += 1) {
                if (j === inactiveConstraints[deltaj]) {
                    deltaj += 1;
                }
                else {
                    result.set(j - deltaj, i - periodicControlPointsLength, cpx[j - start] * constraintsSign[j]);
                    result.set(j - deltaj, i, cpy[j - start] * constraintsSign[j]);
                }
            }
        }
        return result;
    };
    OptProblemPeriodicBSplineR1toR2.prototype.compute_inflectionConstraints_gradientPreviousIteration = function (constraintsSign, inactiveConstraints) {
        var e_9, _a, e_10, _b;
        var sxu = this._previousAnalyticHighOrderCurveDerivatives.bdsxu;
        var sxuu = this._previousAnalyticHighOrderCurveDerivatives.bdsxuu;
        var syu = this._previousAnalyticHighOrderCurveDerivatives.bdsyu;
        var syuu = this._previousAnalyticHighOrderCurveDerivatives.bdsyuu;
        var dgx = [];
        var dgy = [];
        var periodicControlPointsLength = this.spline.freeControlPoints.length;
        var degree = this.spline.degree;
        for (var i = 0; i < periodicControlPointsLength; i += 1) {
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(periodicControlPointsLength, i + 1);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h11 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan).multiplyByScalar(-1);
            dgx.push((h10.add(h11)));
        }
        for (var i = 0; i < periodicControlPointsLength; i += 1) {
            var start = Math.max(0, i - degree);
            var lessThan = Math.min(periodicControlPointsLength, i + 1);
            var h10 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan).multiplyByScalar(-1);
            var h11 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            dgy.push(h10.add(h11));
        }
        var totalNumberOfConstraints = this.inflectionConstraintsSign.length;
        var result = new DenseMatrix_1.DenseMatrix(totalNumberOfConstraints - inactiveConstraints.length, 2 * periodicControlPointsLength);
        for (var i = 0; i < periodicControlPointsLength; i += 1) {
            var cpx = dgx[i].flattenControlPointsArray();
            var cpy = dgy[i].flattenControlPointsArray();
            var start = Math.max(0, i - degree) * (2 * degree - 2);
            var lessThan = Math.min(periodicControlPointsLength, i + 1) * (2 * degree - 2);
            var deltaj = 0;
            try {
                for (var inactiveConstraints_7 = (e_9 = void 0, __values(inactiveConstraints)), inactiveConstraints_7_1 = inactiveConstraints_7.next(); !inactiveConstraints_7_1.done; inactiveConstraints_7_1 = inactiveConstraints_7.next()) {
                    var inactiveConstraint = inactiveConstraints_7_1.value;
                    if (inactiveConstraint >= start) {
                        break;
                    }
                    deltaj += 1;
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (inactiveConstraints_7_1 && !inactiveConstraints_7_1.done && (_a = inactiveConstraints_7.return)) _a.call(inactiveConstraints_7);
                }
                finally { if (e_9) throw e_9.error; }
            }
            for (var j = start; j < lessThan; j += 1) {
                if (j === inactiveConstraints[deltaj]) {
                    deltaj += 1;
                }
                else {
                    result.set(j - deltaj, i, cpx[j - start] * constraintsSign[j]);
                    result.set(j - deltaj, periodicControlPointsLength + i, cpy[j - start] * constraintsSign[j]);
                }
            }
        }
        //Adding periodic term inside the Matrix
        // The effect of the first control points over the constraints at the end
        for (var i = 0; i < degree; i += 1) {
            // moved control point : i
            // Bernstein Decomposition index : [max(0, i - degree), min(n - degree, i + 1)]
            // N_{j, d} is zero outside [u_{j}, u_{j + d + 1} )
            // Dsu[j] = (N_{j, d})_u
            // in terms of the set of Bernstein Decomposition N_{j, d} = 0 outside [max(0, i - d), min(n - d, i + 1)]
            var start = i - degree + periodicControlPointsLength;
            var lessThan = periodicControlPointsLength;
            var h10 = this.dBasisFunctions_du[i].multiplyRange(syuu, start, lessThan);
            var h11 = syu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan).multiplyByScalar(-1);
            dgx.push((h10.add(h11)));
        }
        for (var i = 0; i < degree; i += 1) {
            var start = i - degree + periodicControlPointsLength;
            var lessThan = periodicControlPointsLength;
            var h10 = this.dBasisFunctions_du[i].multiplyRange(sxuu, start, lessThan).multiplyByScalar(-1);
            var h11 = sxu.multiplyRange(this.d2BasisFunctions_du2[i], start, lessThan);
            dgy.push(h10.add(h11));
        }
        for (var i = periodicControlPointsLength; i < periodicControlPointsLength + degree; i += 1) {
            // index i : moved control point + periodicControlPointsLength
            var cpx = dgx[i].flattenControlPointsArray();
            var cpy = dgy[i].flattenControlPointsArray();
            var start = Math.max(0, i - degree) * (2 * degree - 2);
            var lessThan = (periodicControlPointsLength) * (2 * degree - 2);
            var deltaj = 0;
            try {
                for (var inactiveConstraints_8 = (e_10 = void 0, __values(inactiveConstraints)), inactiveConstraints_8_1 = inactiveConstraints_8.next(); !inactiveConstraints_8_1.done; inactiveConstraints_8_1 = inactiveConstraints_8.next()) {
                    var inactiveConstraint = inactiveConstraints_8_1.value;
                    if (inactiveConstraint >= start) {
                        break;
                    }
                    deltaj += 1;
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (inactiveConstraints_8_1 && !inactiveConstraints_8_1.done && (_b = inactiveConstraints_8.return)) _b.call(inactiveConstraints_8);
                }
                finally { if (e_10) throw e_10.error; }
            }
            for (var j = start; j < lessThan; j += 1) {
                if (j === inactiveConstraints[deltaj]) {
                    deltaj += 1;
                }
                else {
                    result.set(j - deltaj, i - periodicControlPointsLength, cpx[j - start] * constraintsSign[j]);
                    result.set(j - deltaj, i, cpy[j - start] * constraintsSign[j]);
                }
            }
        }
        return result;
    };
    OptProblemPeriodicBSplineR1toR2.prototype.computeBasisFunctionsDerivatives = function () {
        var n = this.spline.controlPoints.length;
        var m = this.spline.freeControlPoints.length;
        this._numberOfIndependentVariables = m * 2;
        var diracControlPoints = MathVectorBasicOperations_1.zeroVector(n);
        this.dBasisFunctions_du = [];
        this.d2BasisFunctions_du2 = [];
        this.d3BasisFunctions_du3 = [];
        for (var i = 0; i < m; i += 1) {
            diracControlPoints[i] = 1;
            if (i < (n - m)) {
                // the condition (n-m) enables to take into account the multiplicity of the knot at the boundary of the curve interval u=0
                diracControlPoints[m + i] = 1;
            }
            var basisFunction = this.bSplineR1toR1Factory(diracControlPoints.slice(), this.spline.knots.slice());
            var dBasisFunction_du = basisFunction.derivative();
            var d2BasisFunction_du2 = dBasisFunction_du.derivative();
            var d3BasisFunction_du3 = d2BasisFunction_du2.derivative();
            this.dBasisFunctions_du.push(dBasisFunction_du.bernsteinDecomposition());
            this.d2BasisFunctions_du2.push(d2BasisFunction_du2.bernsteinDecomposition());
            this.d3BasisFunctions_du3.push(d3BasisFunction_du3.bernsteinDecomposition());
            diracControlPoints[i] = 0;
            if (i < (n - m)) {
                diracControlPoints[m + i] = 0;
            }
        }
    };
    return OptProblemPeriodicBSplineR1toR2;
}(AbstractOptProblemBSplineR1toR2_1.AbstractOptProblemBSplineR1toR2));
exports.OptProblemPeriodicBSplineR1toR2 = OptProblemPeriodicBSplineR1toR2;
var OptProblemPeriodicBSplineR1toR2NoInactiveConstraints = /** @class */ (function (_super) {
    __extends(OptProblemPeriodicBSplineR1toR2NoInactiveConstraints, _super);
    function OptProblemPeriodicBSplineR1toR2NoInactiveConstraints(splineInitial, shapeSpaceDiffEventsStructure) {
        return _super.call(this, splineInitial, shapeSpaceDiffEventsStructure) || this;
    }
    OptProblemPeriodicBSplineR1toR2NoInactiveConstraints.prototype.computeInactiveConstraints = function (controlPoints) {
        return [];
    };
    return OptProblemPeriodicBSplineR1toR2NoInactiveConstraints;
}(OptProblemPeriodicBSplineR1toR2));
exports.OptProblemPeriodicBSplineR1toR2NoInactiveConstraints = OptProblemPeriodicBSplineR1toR2NoInactiveConstraints;


/***/ }),

/***/ "./src/bsplineOptimizationProblems/OptimizationProblemCtrlParameters.ts":
/*!******************************************************************************!*\
  !*** ./src/bsplineOptimizationProblems/OptimizationProblemCtrlParameters.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Set of optimizer parameters used to monitor the behavior and type of optimizer used during the shape navigation process
 * @_activeOptimizer : true if an optimizer is effectivzly active during the navigation process
 * @_updateConstraintsBounds : true if the bounds set on inequalities constraints of the optimizer can be modified
 * to force an optimized to stick to the boundary of a shape space
 * @_reverseConstraints : reverse the inequalities of some constraints when crossing shape space boundaries
 * @_useWeights : true if the optimizer use weights to reduce the rigid body displacements of the curve
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OptimizationProblemCtrlParameters = void 0;
var OptimizationProblemCtrlParameters = /** @class */ (function () {
    function OptimizationProblemCtrlParameters(activeOptimizer, updateConstraintBounds) {
        this._activeOptimizer = false;
        this._updateConstraintsBounds = false;
        this._reverseConstraints = false;
        this._useWeights = false;
        if (activeOptimizer !== undefined) {
            this._activeOptimizer = activeOptimizer;
        }
        if (updateConstraintBounds !== undefined) {
            this._updateConstraintsBounds = updateConstraintBounds;
        }
    }
    Object.defineProperty(OptimizationProblemCtrlParameters.prototype, "optimizerStatus", {
        get: function () {
            return this._activeOptimizer;
        },
        set: function (activeOptimizer) {
            this._activeOptimizer = activeOptimizer;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OptimizationProblemCtrlParameters.prototype, "updateConstraintBounds", {
        get: function () {
            return this._updateConstraintsBounds;
        },
        set: function (activateUpdate) {
            this._updateConstraintsBounds = activateUpdate;
        },
        enumerable: false,
        configurable: true
    });
    return OptimizationProblemCtrlParameters;
}());
exports.OptimizationProblemCtrlParameters = OptimizationProblemCtrlParameters;


/***/ }),

/***/ "./src/chartcontrollers/AbsCurvatureSceneController.ts":
/*!*************************************************************!*\
  !*** ./src/chartcontrollers/AbsCurvatureSceneController.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbsCurvatureSceneController = void 0;
var BSplineR1toR1_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR1 */ "./src/newBsplines/BSplineR1toR1.ts");
var BSplineR1toR2_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2 */ "./src/newBsplines/BSplineR1toR2.ts");
var BSplineR1toR2DifferentialProperties_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2DifferentialProperties */ "./src/newBsplines/BSplineR1toR2DifferentialProperties.ts");
var ChartSceneController_1 = __webpack_require__(/*! ./ChartSceneController */ "./src/chartcontrollers/ChartSceneController.ts");
var PeriodicBSplineR1toR2DifferentialProperties_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR2DifferentialProperties */ "./src/newBsplines/PeriodicBSplineR1toR2DifferentialProperties.ts");
var PeriodicBSplineR1toR2withOpenKnotSequence_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence */ "./src/newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var AbsCurvatureSceneController = /** @class */ (function () {
    function AbsCurvatureSceneController(chartController) {
        this.chartController = chartController;
        this.POINT_SEQUENCE_SIZE = ChartSceneController_1.NB_CURVE_POINTS;
        this.splineNumerator = new BSplineR1toR1_1.BSplineR1toR1([0, 1, 0], [0, 0, 0, 1, 1, 1]).convertTocurve();
        this.splineDenominator = new BSplineR1toR1_1.BSplineR1toR1([0, 1, 0], [0, 0, 0, 1, 1, 1]).convertTocurve();
    }
    AbsCurvatureSceneController.prototype.update = function (message) {
        if (message instanceof BSplineR1toR2_1.BSplineR1toR2) {
            this.splineNumerator = new BSplineR1toR2DifferentialProperties_1.BSplineR1toR2DifferentialProperties(message).curvatureNumerator().convertTocurve();
            this.splineDenominator = new BSplineR1toR2DifferentialProperties_1.BSplineR1toR2DifferentialProperties(message).curvatureDenominator().convertTocurve();
        }
        else if (message instanceof PeriodicBSplineR1toR2withOpenKnotSequence_1.PeriodicBSplineR1toR2withOpenKnotSequence) {
            this.splineNumerator = new PeriodicBSplineR1toR2DifferentialProperties_1.PeriodicBSplineR1toR2DifferentialProperties(message).curvatureNumerator().convertTocurve();
            this.splineDenominator = new PeriodicBSplineR1toR2DifferentialProperties_1.PeriodicBSplineR1toR2DifferentialProperties(message).curvatureDenominator().convertTocurve();
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "update", "inconsistent class name to update the chart.");
            error.logMessageToConsole();
        }
        var points = this.pointSequenceOnSpline();
        this.chartController.dataCleanUp();
        this.chartController.addCurvePointDataset(ChartSceneController_1.CHART_AXES_NAMES[3], points, { red: 0, green: 200, blue: 0, alpha: 0.5 });
        this.chartController.setChartLabel(ChartSceneController_1.CHART_TITLES[3]);
        this.chartController.setYaxisScale(ChartSceneController_1.CHART_AXIS_SCALE[1]);
        this.chartController.drawChart();
    };
    AbsCurvatureSceneController.prototype.reset = function (message) {
        var points = [];
        var curvePoints = [];
        this.chartController.addPolylineDataset(ChartSceneController_1.DATASET_NAMES[1], points);
        this.chartController.addCurvePointDataset(ChartSceneController_1.CHART_AXES_NAMES[ChartSceneController_1.CHART_AXES_NAMES.length - 1], curvePoints, { red: 100, green: 0, blue: 0, alpha: 0.5 });
        this.chartController.setChartLabel(ChartSceneController_1.CHART_TITLES[ChartSceneController_1.CHART_TITLES.length - 1]);
        this.chartController.setYaxisScale(ChartSceneController_1.CHART_AXIS_SCALE[0]);
        this.chartController.drawChart();
    };
    AbsCurvatureSceneController.prototype.pointSequenceOnSpline = function () {
        var start = this.splineNumerator.knots[this.splineNumerator.degree];
        var end = this.splineNumerator.knots[this.splineNumerator.knots.length - this.splineNumerator.degree - 1];
        var result = [];
        for (var i = 0; i < this.POINT_SEQUENCE_SIZE; i += 1) {
            var pointNumerator = this.splineNumerator.evaluate(i / (this.POINT_SEQUENCE_SIZE - 1) * (end - start) + start);
            var pointDenominator = this.splineDenominator.evaluate(i / (this.POINT_SEQUENCE_SIZE - 1) * (end - start) + start);
            var point = pointNumerator;
            point.y = point.y / Math.pow(pointDenominator.y, (3 / 2));
            point.y = Math.abs(point.y);
            result.push(point);
        }
        return result;
    };
    return AbsCurvatureSceneController;
}());
exports.AbsCurvatureSceneController = AbsCurvatureSceneController;


/***/ }),

/***/ "./src/chartcontrollers/ChartContentState.ts":
/*!***************************************************!*\
  !*** ./src/chartcontrollers/ChartContentState.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChartFunctionBsqrtScaled = exports.ChartAbsCurvatureCrv = exports.ChartCurvatureCrv = exports.ChartFunctionB = exports.ChartFunctionA = exports.ChartWithNoFunction = exports.ChartContentState = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var AbsCurvatureSceneController_1 = __webpack_require__(/*! ./AbsCurvatureSceneController */ "./src/chartcontrollers/AbsCurvatureSceneController.ts");
var CurvatureSceneController_1 = __webpack_require__(/*! ./CurvatureSceneController */ "./src/chartcontrollers/CurvatureSceneController.ts");
var FunctionASceneController_1 = __webpack_require__(/*! ./FunctionASceneController */ "./src/chartcontrollers/FunctionASceneController.ts");
var FunctionBSceneController_1 = __webpack_require__(/*! ./FunctionBSceneController */ "./src/chartcontrollers/FunctionBSceneController.ts");
var FunctionBSceneControllerSqrtScaled_1 = __webpack_require__(/*! ./FunctionBSceneControllerSqrtScaled */ "./src/chartcontrollers/FunctionBSceneControllerSqrtScaled.ts");
var NoFunctionSceneController_1 = __webpack_require__(/*! ./NoFunctionSceneController */ "./src/chartcontrollers/NoFunctionSceneController.ts");
var ChartContentState = /** @class */ (function () {
    function ChartContentState(chartSceneController, chartController) {
        this.chartSceneController = chartSceneController;
        this.chartController = chartController;
    }
    ChartContentState.prototype.setChartSceneController = function (chartSceneController) {
        this.chartSceneController = chartSceneController;
    };
    ChartContentState.prototype.setChartWithNoFunction = function () {
        this.chartSceneController.changeChartContentState(this.chartController, new ChartWithNoFunction(this.chartSceneController, this.chartController));
    };
    ChartContentState.prototype.setChartWithFunctionA = function () {
        this.chartSceneController.changeChartContentState(this.chartController, new ChartFunctionA(this.chartSceneController, this.chartController));
    };
    ChartContentState.prototype.setChartWithFunctionB = function () {
        this.chartSceneController.changeChartContentState(this.chartController, new ChartFunctionB(this.chartSceneController, this.chartController));
    };
    ChartContentState.prototype.setChartWithCurvatureCrv = function () {
        this.chartSceneController.changeChartContentState(this.chartController, new ChartCurvatureCrv(this.chartSceneController, this.chartController));
    };
    ChartContentState.prototype.setChartWithAbsCurvature = function () {
        this.chartSceneController.changeChartContentState(this.chartController, new ChartAbsCurvatureCrv(this.chartSceneController, this.chartController));
    };
    ChartContentState.prototype.setChartWithFunctionBsqrtScaled = function () {
        this.chartSceneController.changeChartContentState(this.chartController, new ChartFunctionBsqrtScaled(this.chartSceneController, this.chartController));
    };
    return ChartContentState;
}());
exports.ChartContentState = ChartContentState;
var ChartWithNoFunction = /** @class */ (function (_super) {
    __extends(ChartWithNoFunction, _super);
    function ChartWithNoFunction(chartSceneController, chartController) {
        var _this = _super.call(this, chartSceneController, chartController) || this;
        var chartObservedBySceneController = new NoFunctionSceneController_1.NoFunctionSceneController(_this.chartController);
        var index = _this.chartSceneController.chartControllers.indexOf(_this.chartController);
        _this.chartSceneController.curveObservers[index] = chartObservedBySceneController;
        _this.chartSceneController.addCurveObserver(chartObservedBySceneController);
        return _this;
    }
    ChartWithNoFunction.prototype.setChartWithNoFunction = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "setChartWithNoFunction", "no state change to perform there.");
        warning.logMessageToConsole();
    };
    return ChartWithNoFunction;
}(ChartContentState));
exports.ChartWithNoFunction = ChartWithNoFunction;
var ChartFunctionA = /** @class */ (function (_super) {
    __extends(ChartFunctionA, _super);
    function ChartFunctionA(chartSceneController, chartController) {
        var _this = _super.call(this, chartSceneController, chartController) || this;
        var chartObservedBySceneController = new FunctionASceneController_1.FunctionASceneController(_this.chartController);
        var index = _this.chartSceneController.chartControllers.indexOf(_this.chartController);
        _this.chartSceneController.curveObservers[index] = chartObservedBySceneController;
        _this.chartSceneController.addCurveObserver(chartObservedBySceneController);
        return _this;
    }
    ChartFunctionA.prototype.setChartWithFunctionA = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "setChartWithFunctionA", "no state change to perform there.");
        warning.logMessageToConsole();
    };
    return ChartFunctionA;
}(ChartContentState));
exports.ChartFunctionA = ChartFunctionA;
var ChartFunctionB = /** @class */ (function (_super) {
    __extends(ChartFunctionB, _super);
    function ChartFunctionB(chartSceneController, chartController) {
        var _this = _super.call(this, chartSceneController, chartController) || this;
        var chartObservedBySceneController = new FunctionBSceneController_1.FunctionBSceneController(_this.chartController);
        var index = _this.chartSceneController.chartControllers.indexOf(_this.chartController);
        _this.chartSceneController.curveObservers[index] = chartObservedBySceneController;
        _this.chartSceneController.addCurveObserver(chartObservedBySceneController);
        return _this;
    }
    ChartFunctionB.prototype.setChartWithFunctionB = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "setChartWithFunctionB", "no state change to perform there.");
        warning.logMessageToConsole();
    };
    return ChartFunctionB;
}(ChartContentState));
exports.ChartFunctionB = ChartFunctionB;
var ChartCurvatureCrv = /** @class */ (function (_super) {
    __extends(ChartCurvatureCrv, _super);
    function ChartCurvatureCrv(chartSceneController, chartController) {
        var _this = _super.call(this, chartSceneController, chartController) || this;
        var chartObservedBySceneController = new CurvatureSceneController_1.CurvatureSceneController(_this.chartController);
        var index = _this.chartSceneController.chartControllers.indexOf(_this.chartController);
        _this.chartSceneController.curveObservers[index] = chartObservedBySceneController;
        _this.chartSceneController.addCurveObserver(chartObservedBySceneController);
        return _this;
    }
    ChartCurvatureCrv.prototype.setChartWithCurvatureCrv = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "setChartWithCurvatureCrv", "no state change to perform there.");
        warning.logMessageToConsole();
    };
    return ChartCurvatureCrv;
}(ChartContentState));
exports.ChartCurvatureCrv = ChartCurvatureCrv;
var ChartAbsCurvatureCrv = /** @class */ (function (_super) {
    __extends(ChartAbsCurvatureCrv, _super);
    function ChartAbsCurvatureCrv(chartSceneController, chartController) {
        var _this = _super.call(this, chartSceneController, chartController) || this;
        var chartObservedBySceneController = new AbsCurvatureSceneController_1.AbsCurvatureSceneController(_this.chartController);
        var index = _this.chartSceneController.chartControllers.indexOf(_this.chartController);
        _this.chartSceneController.curveObservers[index] = chartObservedBySceneController;
        _this.chartSceneController.addCurveObserver(chartObservedBySceneController);
        return _this;
    }
    ChartAbsCurvatureCrv.prototype.setChartWithAbsCurvature = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "setChartWithAbsCurvature", "no state change to perform there.");
        warning.logMessageToConsole();
    };
    return ChartAbsCurvatureCrv;
}(ChartContentState));
exports.ChartAbsCurvatureCrv = ChartAbsCurvatureCrv;
var ChartFunctionBsqrtScaled = /** @class */ (function (_super) {
    __extends(ChartFunctionBsqrtScaled, _super);
    function ChartFunctionBsqrtScaled(chartSceneController, chartController) {
        var _this = _super.call(this, chartSceneController, chartController) || this;
        var chartObservedBySceneController = new FunctionBSceneControllerSqrtScaled_1.FunctionBSceneControllerSqrtScaled(_this.chartController);
        var index = _this.chartSceneController.chartControllers.indexOf(_this.chartController);
        _this.chartSceneController.curveObservers[index] = chartObservedBySceneController;
        _this.chartSceneController.addCurveObserver(chartObservedBySceneController);
        return _this;
    }
    ChartFunctionBsqrtScaled.prototype.setChartWithFunctionBsqrtScaled = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "setChartWithFunctionBsqrtScaled", "no state change to perform there.");
        warning.logMessageToConsole();
    };
    return ChartFunctionBsqrtScaled;
}(ChartContentState));
exports.ChartFunctionBsqrtScaled = ChartFunctionBsqrtScaled;


/***/ }),

/***/ "./src/chartcontrollers/ChartController.ts":
/*!*************************************************!*\
  !*** ./src/chartcontrollers/ChartController.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChartController = void 0;
var chart_js_1 = __webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/Chart.js");
var ChartSceneController_1 = __webpack_require__(/*! ./ChartSceneController */ "./src/chartcontrollers/ChartSceneController.ts");
var ChartController = /** @class */ (function () {
    function ChartController(chartTitle, canvasContext, chartHeight, chartWidth, chartXaxisLabel) {
        var _a;
        this.chartTitle = chartTitle;
        this.canvasContext = canvasContext;
        this.chartHeight = chartHeight;
        this.chartWidth = chartWidth;
        this.chartXaxisLabel = chartXaxisLabel;
        this.dataCP = [];
        this.dataSpline = [];
        this.datasetPolylineLabel = '';
        this.datasetCurveLabel = '';
        this.colorSpline = '';
        this.yAxisScale = ChartSceneController_1.CHART_AXIS_SCALE[0];
        if (chartXaxisLabel)
            this.chartXaxisLabel = chartXaxisLabel;
        else
            this.chartXaxisLabel = ChartSceneController_1.CHART_X_AXIS_NAME;
        this.chart = new chart_js_1.Chart(canvasContext, {
            type: 'scatter',
            data: {
                datasets: [{
                        label: ChartSceneController_1.DATASET_NAMES[1],
                        data: [{
                                x: 0,
                                y: 0
                            }],
                        fill: false,
                        lineTension: 0,
                        showLine: true
                    }]
            },
            options: {
                title: {
                    display: true,
                    text: chartTitle
                },
                scales: {
                    xAxes: [{
                            type: ChartSceneController_1.CHART_AXIS_SCALE[0],
                            position: 'bottom',
                            scaleLabel: {
                                display: true,
                                labelString: this.chartXaxisLabel
                            }
                        }],
                    yAxes: [{
                            type: this.yAxisScale
                        }]
                },
                animation: {
                    duration: 0
                }
            }
        });
        this.canvasElementChart = (_a = this.chart.canvas) === null || _a === void 0 ? void 0 : _a.parentNode;
        this.canvasElementChart.style.height = chartHeight;
        this.canvasElementChart.style.width = chartWidth;
    }
    ChartController.prototype.addPolylineDataset = function (datasetLabel, dataPoints) {
        var _this = this;
        this.datasetPolylineLabel = datasetLabel;
        this.dataCP = [];
        dataPoints.forEach(function (element) {
            _this.dataCP.push({ x: element.x, y: element.y });
        });
    };
    ChartController.prototype.addCurvePointDataset = function (datasetLabel, curvePoints, color) {
        var _this = this;
        this.datasetCurveLabel = datasetLabel;
        var curveColor = 'rgba(';
        var colorCode = color.red.toString() + ', ' + color.green.toString() + ', ' + color.blue.toString() + ', ' + color.alpha.toString();
        this.colorSpline = curveColor.concat(colorCode, ')');
        this.dataSpline = [];
        curvePoints.forEach(function (element) {
            _this.dataSpline.push({ x: element.x, y: element.y });
        });
    };
    ChartController.prototype.setChartLabel = function (chartLabel) {
        this.chartTitle = chartLabel;
    };
    ChartController.prototype.setYaxisScale = function (scaleType) {
        this.yAxisScale = scaleType;
    };
    ChartController.prototype.dataCleanUp = function () {
        this.dataCP = [];
        this.dataSpline = [];
    };
    ChartController.prototype.drawChart = function () {
        if (this.dataCP.length === 0) {
            this.chart.data.datasets = [{
                    label: this.datasetCurveLabel,
                    data: this.dataSpline,
                    fill: false,
                    showLine: true,
                    pointRadius: 0,
                    borderColor: this.colorSpline
                }];
        }
        else {
            this.chart.data.datasets = [{
                    label: this.datasetPolylineLabel,
                    data: this.dataCP,
                    fill: false,
                    lineTension: 0,
                    showLine: true
                },
                {
                    label: this.datasetCurveLabel,
                    data: this.dataSpline,
                    fill: false,
                    showLine: true,
                    pointRadius: 0,
                    borderColor: this.colorSpline
                }];
        }
        this.chart.options = {
            title: {
                display: true,
                text: this.chartTitle
            },
            scales: {
                xAxes: [{
                        type: ChartSceneController_1.CHART_AXIS_SCALE[0],
                        position: 'bottom',
                        scaleLabel: {
                            display: true,
                            labelString: this.chartXaxisLabel
                        }
                    }],
                yAxes: [{
                        type: this.yAxisScale
                    }]
            },
            animation: {
                duration: 0
            }
        };
        this.chart.update();
    };
    ChartController.prototype.destroy = function () {
        this.chart.destroy();
    };
    return ChartController;
}());
exports.ChartController = ChartController;


/***/ }),

/***/ "./src/chartcontrollers/ChartSceneController.ts":
/*!******************************************************!*\
  !*** ./src/chartcontrollers/ChartSceneController.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChartSceneController = exports.CHART_AXIS_SCALE = exports.DATASET_NAMES = exports.CHART_X_AXIS_NAME = exports.CHART_AXES_NAMES = exports.CHART_TITLES = exports.CHART_WIDTH = exports.CHART_HEIGHT = exports.NB_CURVE_POINTS = exports.MAX_NB_CHARTS = void 0;
var ChartDescriptorQueueItem_1 = __webpack_require__(/*! ../containers/ChartDescriptorQueueItem */ "./src/containers/ChartDescriptorQueueItem.ts");
var Queue_1 = __webpack_require__(/*! ../containers/Queue */ "./src/containers/Queue.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ChartContentState_1 = __webpack_require__(/*! ./ChartContentState */ "./src/chartcontrollers/ChartContentState.ts");
var ChartController_1 = __webpack_require__(/*! ./ChartController */ "./src/chartcontrollers/ChartController.ts");
var NoFunctionSceneController_1 = __webpack_require__(/*! ./NoFunctionSceneController */ "./src/chartcontrollers/NoFunctionSceneController.ts");
exports.MAX_NB_CHARTS = 3;
exports.NB_CURVE_POINTS = 100;
exports.CHART_HEIGHT = '600px';
exports.CHART_WIDTH = '700px';
exports.CHART_TITLES = ["Function A(u)",
    "Function B(u)",
    "Curvature of curve",
    "Absolute value of curvature of curve",
    "Function (+/-) sqrt[abs(B(u))]",
    "Graph tbd"];
exports.CHART_AXES_NAMES = ["Function A",
    "Function B",
    "Curvature",
    "Abs curvature",
    "(+/-) sqrt[abs(B(u))]",
    "tbd"];
exports.CHART_X_AXIS_NAME = "u parameter";
exports.DATASET_NAMES = ["Control Polygon", "tbd"];
exports.CHART_AXIS_SCALE = ["linear", "logarithmic"];
var ChartSceneController = /** @class */ (function () {
    function ChartSceneController(chartRenderingContext, shapeNavigableCurve) {
        this.chartRenderingContext = chartRenderingContext;
        this.shapeNavigableCurve = shapeNavigableCurve;
        this._curveModel = shapeNavigableCurve.curveCategory.curveModel;
        this._uncheckedChart = "";
        this._curveObservers = [];
        this.checkRenderingContext();
        this._chartControllers = [];
        this.chartContent = [];
        this.freeChartsQueue = new Queue_1.QueueChartController(exports.MAX_NB_CHARTS);
        this.chartsDescriptorsQueue = new Queue_1.QueueChartDescriptor(exports.MAX_NB_CHARTS);
        this.defaultChartTitles = [];
        this.generateDefaultChartNames();
        this.init();
    }
    Object.defineProperty(ChartSceneController.prototype, "curveObservers", {
        get: function () {
            return this._curveObservers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChartSceneController.prototype, "chartControllers", {
        get: function () {
            return this._chartControllers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChartSceneController.prototype, "uncheckedChart", {
        get: function () {
            return this._uncheckedChart;
        },
        set: function (chartTitle) {
            this._uncheckedChart = chartTitle;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChartSceneController.prototype, "curveModel", {
        set: function (curveModel) {
            this._curveModel = curveModel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChartSceneController.prototype, "curveObserver", {
        set: function (curveObservers) {
            this._curveObservers = curveObservers;
        },
        enumerable: false,
        configurable: true
    });
    ChartSceneController.prototype.resetUncheckedChart = function () {
        this._uncheckedChart = "";
    };
    ChartSceneController.prototype.generateDefaultChartNames = function () {
        for (var i = 0; i < exports.MAX_NB_CHARTS; i++) {
            this.defaultChartTitles.push('Graph' + (i + 1) + ' tbd');
        }
    };
    ChartSceneController.prototype.changeChartContentState = function (chartController, chartContent) {
        for (var i = 0; i < exports.MAX_NB_CHARTS; i++) {
            if (this.chartControllers[i] === chartController)
                this.chartContent[i] = chartContent;
        }
    };
    ChartSceneController.prototype.init = function () {
        for (var i = 0; i < exports.MAX_NB_CHARTS; i++) {
            if (this.chartControllers.length === exports.MAX_NB_CHARTS) {
                this.chartControllers[i].destroy();
            }
            this.chartControllers.push(new ChartController_1.ChartController(this.defaultChartTitles[i], this.chartRenderingContext[i], exports.CHART_HEIGHT, exports.CHART_WIDTH));
            this._curveObservers.push(new NoFunctionSceneController_1.NoFunctionSceneController(this.chartControllers[this.chartControllers.length - 1]));
            this.chartContent.push(new ChartContentState_1.ChartWithNoFunction(this, this.chartControllers[i]));
            var queueItem = new ChartDescriptorQueueItem_1.ChartDescriptorQueueItem(this.chartControllers[this.chartControllers.length - 1], this.defaultChartTitles[i], this._curveObservers[this._curveObservers.length - 1]);
            this.freeChartsQueue.enqueue(queueItem.chartController);
            this.chartsDescriptorsQueue.enqueue(queueItem);
        }
    };
    ChartSceneController.prototype.restart = function (curveModel) {
        var _this = this;
        this._curveModel = curveModel;
        this._uncheckedChart = "";
        this._curveObservers = [];
        this.checkRenderingContext();
        this._chartControllers = [];
        this.chartContent = [];
        this.freeChartsQueue = new Queue_1.QueueChartController(exports.MAX_NB_CHARTS);
        this.chartsDescriptorsQueue = new Queue_1.QueueChartDescriptor(exports.MAX_NB_CHARTS);
        this.defaultChartTitles = [];
        this.generateDefaultChartNames();
        this.init();
        this._curveObservers.forEach(function (element) {
            element.update(_this._curveModel.spline);
        });
    };
    ChartSceneController.prototype.switchChartState = function (chartTitle, indexCtrlr) {
        var chartIndex = exports.CHART_TITLES.indexOf(chartTitle);
        if (chartIndex !== -1) {
            switch (chartIndex) {
                case 0: {
                    this.chartContent[indexCtrlr].setChartWithFunctionA();
                    break;
                }
                case 1: {
                    this.chartContent[indexCtrlr].setChartWithFunctionB();
                    break;
                }
                case 2: {
                    this.chartContent[indexCtrlr].setChartWithCurvatureCrv();
                    break;
                }
                case 3: {
                    this.chartContent[indexCtrlr].setChartWithAbsCurvature();
                    break;
                }
                case 4: {
                    this.chartContent[indexCtrlr].setChartWithFunctionBsqrtScaled();
                    break;
                }
            }
        }
        else {
            this.chartContent[indexCtrlr].setChartWithNoFunction();
        }
        var queueItem = new ChartDescriptorQueueItem_1.ChartDescriptorQueueItem(this.chartControllers[indexCtrlr], chartTitle, this._curveObservers[indexCtrlr]);
        if (exports.CHART_TITLES.indexOf(chartTitle) === -1) {
            this.chartsDescriptorsQueue.enqueue(queueItem);
        }
        else {
            this.chartsDescriptorsQueue.insertAtController(this.chartControllers[indexCtrlr], queueItem);
        }
    };
    ChartSceneController.prototype.resetChartToDefaultChart = function (chartTitle, currentQueueItem) {
        var index = this.chartsDescriptorsQueue.indexOfFromTitle(chartTitle);
        this.chartsDescriptorsQueue.extractAt(index);
        this.enqueueAndReorderFreeCharts(currentQueueItem.chartController);
        var chartOberserver = currentQueueItem.curveObserver;
        if (chartOberserver !== undefined) {
            this.removeCurveObserver(chartOberserver);
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "resetChartToDefaultChart", "Undefined chartObserver. Impossible to process graphs correctly.");
            error.logMessageToConsole();
        }
        var indexCtrlr = this.chartControllers.indexOf(currentQueueItem.chartController);
        chartTitle = this.defaultChartTitles[indexCtrlr];
        this._uncheckedChart = chartTitle;
        this.switchChartState(chartTitle, indexCtrlr);
    };
    ChartSceneController.prototype.addChartAtADefaultChartPlace = function (chartTitle) {
        var chartController = this.freeChartsQueue.dequeue();
        if (chartController !== undefined) {
            var indexCtrlr = this.chartControllers.indexOf(chartController);
            var currentQueueItem = this.chartsDescriptorsQueue.findItemFromChartController(chartController);
            if (currentQueueItem !== undefined) {
                var chartOberserver = currentQueueItem.curveObserver;
                this._uncheckedChart = currentQueueItem.chartTitle;
                if (chartOberserver !== undefined) {
                    this.removeCurveObserver(chartOberserver);
                }
                else {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "addChartAtADefaultChartPlace", "Undefined chartObserver. Impossible to process graphs correctly.");
                    error.logMessageToConsole();
                }
            }
            this.switchChartState(chartTitle, indexCtrlr);
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "addChartAtADefaultChartPlace", "Undefined ChartController. Impossible to process graphs correctly.");
            error.logMessageToConsole();
        }
    };
    ChartSceneController.prototype.addChartInPlaceOfTheOldestOne = function (chartTitle) {
        var item = this.chartsDescriptorsQueue.get(0);
        if (item !== undefined) {
            this._uncheckedChart = item.chartTitle;
            var chartController = item.chartController;
            var indexCtrlr = this.chartControllers.indexOf(chartController);
            var chartOberserver = item.curveObserver;
            if (chartOberserver !== undefined) {
                this.removeCurveObserver(chartOberserver);
            }
            else {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "addChartInPlaceOfTheOldestOne", "Undefined chartObserver. Impossible to process graphs correctly.");
                error.logMessageToConsole();
            }
            this.switchChartState(chartTitle, indexCtrlr);
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "addChartInPlaceOfTheOldestOne", "Undefined ChartController. Queue content is inconsistent.");
            error.logMessageToConsole();
        }
    };
    ChartSceneController.prototype.addChart = function (chartTitle) {
        var currentQueueItem = this.chartsDescriptorsQueue.findItemFromTitle(chartTitle);
        if (currentQueueItem !== undefined) {
            this.resetChartToDefaultChart(chartTitle, currentQueueItem);
        }
        else {
            if (this.freeChartsQueue.length() > 0) {
                this.addChartAtADefaultChartPlace(chartTitle);
            }
            else {
                this.addChartInPlaceOfTheOldestOne(chartTitle);
            }
        }
    };
    ChartSceneController.prototype.reorderFreeCharts = function (chartController, indexCtrlr) {
        var i = this.freeChartsQueue.length() - 2;
        var insert = false;
        while (i >= 0) {
            var chartCtrlr = this.freeChartsQueue.at(i);
            var index = this.chartControllers.indexOf(chartCtrlr);
            if (index < indexCtrlr) {
                this.freeChartsQueue.insertAt(i, chartController);
                insert = true;
            }
            i--;
        }
        if (!insert)
            this.freeChartsQueue.insertAt(0, chartController);
    };
    ChartSceneController.prototype.enqueueAndReorderFreeCharts = function (chartController) {
        var lastChartCtrlr = this.freeChartsQueue.getLast();
        if (lastChartCtrlr !== undefined) {
            var indexCtrlr = this.chartControllers.indexOf(chartController);
            var indexLast = this.chartControllers.indexOf(lastChartCtrlr);
            if (indexCtrlr > indexLast) {
                this.freeChartsQueue.enqueue(chartController);
            }
            else {
                if (this.freeChartsQueue.length() === 1) {
                    this.freeChartsQueue.insertAt(0, chartController);
                }
                else {
                    this.reorderFreeCharts(chartController, indexCtrlr);
                }
            }
        }
        else {
            this.freeChartsQueue.enqueue(chartController);
        }
    };
    ChartSceneController.prototype.checkRenderingContext = function () {
        if (this.chartRenderingContext.length !== exports.MAX_NB_CHARTS) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkRenderingContext", "Inconsistent number of rendering contexts. Must be equal to MAX_NB_GRAPHS.");
            error.logMessageToConsole();
        }
        else {
            for (var i = 0; i < exports.MAX_NB_CHARTS; i++) {
                if (this.chartRenderingContext[i] === null) {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkRenderingContext", "Rendering context of graph" + (i + 1) + " is null. Impossible to process graphs correctly.");
                    error.logMessageToConsole();
                }
            }
        }
    };
    ChartSceneController.prototype.addCurveObserver = function (curveObserver) {
        if (this._curveModel !== undefined) {
            curveObserver.update(this._curveModel.spline);
            this._curveModel.registerObserver(curveObserver, "curve");
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "addCurveObserver", "Unable to attach a curve observer to the current curve. Undefined curve model.");
            error.logMessageToConsole();
        }
    };
    ChartSceneController.prototype.removeCurveObserver = function (curveObserver) {
        if (this._curveModel !== undefined) {
            curveObserver.update(this._curveModel.spline);
            this._curveModel.removeObserver(curveObserver, "curve");
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "removeCurveObserver", "Unable to detach a curve observer to the current curve. Undefined curve model.");
            error.logMessageToConsole();
        }
    };
    ChartSceneController.prototype.update = function () {
        this._curveModel = this.shapeNavigableCurve.curveCategory.curveModel;
        this._uncheckedChart = "";
        this._curveObservers = [];
        this._chartControllers = [];
        this.chartContent = [];
        this.freeChartsQueue = new Queue_1.QueueChartController(exports.MAX_NB_CHARTS);
        this.chartsDescriptorsQueue = new Queue_1.QueueChartDescriptor(exports.MAX_NB_CHARTS);
        this.defaultChartTitles = [];
        this.generateDefaultChartNames();
        this.init();
        console.log("need to update chartSceneController");
    };
    return ChartSceneController;
}());
exports.ChartSceneController = ChartSceneController;


/***/ }),

/***/ "./src/chartcontrollers/CurvatureSceneController.ts":
/*!**********************************************************!*\
  !*** ./src/chartcontrollers/CurvatureSceneController.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurvatureSceneController = void 0;
var BSplineR1toR1_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR1 */ "./src/newBsplines/BSplineR1toR1.ts");
var BSplineR1toR2_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2 */ "./src/newBsplines/BSplineR1toR2.ts");
var BSplineR1toR2DifferentialProperties_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2DifferentialProperties */ "./src/newBsplines/BSplineR1toR2DifferentialProperties.ts");
var ChartSceneController_1 = __webpack_require__(/*! ./ChartSceneController */ "./src/chartcontrollers/ChartSceneController.ts");
var PeriodicBSplineR1toR2withOpenKnotSequence_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence */ "./src/newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence.ts");
var PeriodicBSplineR1toR2DifferentialProperties_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR2DifferentialProperties */ "./src/newBsplines/PeriodicBSplineR1toR2DifferentialProperties.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var CurvatureSceneController = /** @class */ (function () {
    function CurvatureSceneController(chartController) {
        this.chartController = chartController;
        this.POINT_SEQUENCE_SIZE = ChartSceneController_1.NB_CURVE_POINTS;
        this.splineNumerator = new BSplineR1toR1_1.BSplineR1toR1([0, 1, 0], [0, 0, 0, 1, 1, 1]).convertTocurve();
        this.splineDenominator = new BSplineR1toR1_1.BSplineR1toR1([0, 1, 0], [0, 0, 0, 1, 1, 1]).convertTocurve();
    }
    CurvatureSceneController.prototype.update = function (message) {
        if (message instanceof BSplineR1toR2_1.BSplineR1toR2) {
            this.splineNumerator = new BSplineR1toR2DifferentialProperties_1.BSplineR1toR2DifferentialProperties(message).curvatureNumerator().convertTocurve();
            this.splineDenominator = new BSplineR1toR2DifferentialProperties_1.BSplineR1toR2DifferentialProperties(message).curvatureDenominator().convertTocurve();
        }
        else if (message instanceof PeriodicBSplineR1toR2withOpenKnotSequence_1.PeriodicBSplineR1toR2withOpenKnotSequence) {
            this.splineNumerator = new PeriodicBSplineR1toR2DifferentialProperties_1.PeriodicBSplineR1toR2DifferentialProperties(message).curvatureNumerator().convertTocurve();
            this.splineDenominator = new PeriodicBSplineR1toR2DifferentialProperties_1.PeriodicBSplineR1toR2DifferentialProperties(message).curvatureDenominator().convertTocurve();
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "update", "inconsistent class name to update the chart.");
            error.logMessageToConsole();
        }
        var points = this.pointSequenceOnSpline();
        this.chartController.dataCleanUp();
        this.chartController.addCurvePointDataset(ChartSceneController_1.CHART_AXES_NAMES[2], points, { red: 0, green: 200, blue: 0, alpha: 0.5 });
        this.chartController.setChartLabel(ChartSceneController_1.CHART_TITLES[2]);
        this.chartController.setYaxisScale(ChartSceneController_1.CHART_AXIS_SCALE[0]);
        this.chartController.drawChart();
    };
    CurvatureSceneController.prototype.reset = function (message) {
        var points = [];
        var curvePoints = [];
        this.chartController.addPolylineDataset(ChartSceneController_1.DATASET_NAMES[1], points);
        this.chartController.addCurvePointDataset(ChartSceneController_1.CHART_AXES_NAMES[ChartSceneController_1.CHART_AXES_NAMES.length - 1], curvePoints, { red: 100, green: 0, blue: 0, alpha: 0.5 });
        this.chartController.setChartLabel(ChartSceneController_1.CHART_TITLES[ChartSceneController_1.CHART_TITLES.length - 1]);
        this.chartController.setYaxisScale(ChartSceneController_1.CHART_AXIS_SCALE[0]);
        this.chartController.drawChart();
    };
    CurvatureSceneController.prototype.pointSequenceOnSpline = function () {
        var start = this.splineNumerator.knots[this.splineNumerator.degree];
        var end = this.splineNumerator.knots[this.splineNumerator.knots.length - this.splineNumerator.degree - 1];
        var result = [];
        for (var i = 0; i < this.POINT_SEQUENCE_SIZE; i += 1) {
            var pointNumerator = this.splineNumerator.evaluate(i / (this.POINT_SEQUENCE_SIZE - 1) * (end - start) + start);
            var pointDenominator = this.splineDenominator.evaluate(i / (this.POINT_SEQUENCE_SIZE - 1) * (end - start) + start);
            var point = pointNumerator;
            point.y = point.y / Math.pow(pointDenominator.y, (3 / 2));
            result.push(point);
        }
        return result;
    };
    return CurvatureSceneController;
}());
exports.CurvatureSceneController = CurvatureSceneController;


/***/ }),

/***/ "./src/chartcontrollers/FunctionASceneController.ts":
/*!**********************************************************!*\
  !*** ./src/chartcontrollers/FunctionASceneController.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FunctionASceneController = void 0;
var BSplineR1toR1_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR1 */ "./src/newBsplines/BSplineR1toR1.ts");
var BSplineR1toR2_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2 */ "./src/newBsplines/BSplineR1toR2.ts");
var BSplineR1toR2DifferentialProperties_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2DifferentialProperties */ "./src/newBsplines/BSplineR1toR2DifferentialProperties.ts");
var ChartSceneController_1 = __webpack_require__(/*! ./ChartSceneController */ "./src/chartcontrollers/ChartSceneController.ts");
var PeriodicBSplineR1toR2withOpenKnotSequence_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence */ "./src/newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence.ts");
var PeriodicBSplineR1toR2DifferentialProperties_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR2DifferentialProperties */ "./src/newBsplines/PeriodicBSplineR1toR2DifferentialProperties.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var FunctionASceneController = /** @class */ (function () {
    function FunctionASceneController(chartController) {
        this.chartController = chartController;
        this.POINT_SEQUENCE_SIZE = ChartSceneController_1.NB_CURVE_POINTS;
        this.spline = new BSplineR1toR1_1.BSplineR1toR1([0, 1, 0], [0, 0, 0, 1, 1, 1]).convertTocurve();
    }
    FunctionASceneController.prototype.update = function (message) {
        if (message instanceof BSplineR1toR2_1.BSplineR1toR2) {
            this.spline = new BSplineR1toR2DifferentialProperties_1.BSplineR1toR2DifferentialProperties(message).curvatureNumerator().convertTocurve();
        }
        else if (message instanceof PeriodicBSplineR1toR2withOpenKnotSequence_1.PeriodicBSplineR1toR2withOpenKnotSequence) {
            this.spline = new PeriodicBSplineR1toR2DifferentialProperties_1.PeriodicBSplineR1toR2DifferentialProperties(message).curvatureNumerator().convertTocurve();
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "update", "inconsistent class name to update the chart.");
            error.logMessageToConsole();
        }
        var points = this.pointSequenceOnSpline();
        this.chartController.dataCleanUp();
        this.chartController.addPolylineDataset(ChartSceneController_1.DATASET_NAMES[0], this.spline.controlPoints);
        this.chartController.addCurvePointDataset(ChartSceneController_1.CHART_AXES_NAMES[0], points, { red: 200, green: 0, blue: 0, alpha: 0.5 });
        this.chartController.setChartLabel(ChartSceneController_1.CHART_TITLES[0]);
        this.chartController.setYaxisScale(ChartSceneController_1.CHART_AXIS_SCALE[0]);
        this.chartController.drawChart();
    };
    FunctionASceneController.prototype.reset = function (message) {
        console.log("reset chart FunctionA");
        var points = [];
        var curvePoints = [];
        this.chartController.addPolylineDataset(ChartSceneController_1.DATASET_NAMES[1], points);
        this.chartController.addCurvePointDataset(ChartSceneController_1.CHART_AXES_NAMES[ChartSceneController_1.CHART_AXES_NAMES.length - 1], curvePoints, { red: 100, green: 0, blue: 0, alpha: 0.5 });
        this.chartController.setChartLabel(ChartSceneController_1.CHART_TITLES[ChartSceneController_1.CHART_TITLES.length - 1]);
        this.chartController.setYaxisScale(ChartSceneController_1.CHART_AXIS_SCALE[0]);
        this.chartController.drawChart();
    };
    FunctionASceneController.prototype.pointSequenceOnSpline = function () {
        var start = this.spline.knots[this.spline.degree];
        var end = this.spline.knots[this.spline.knots.length - this.spline.degree - 1];
        var result = [];
        for (var i = 0; i < this.POINT_SEQUENCE_SIZE; i += 1) {
            var point = this.spline.evaluate(i / (this.POINT_SEQUENCE_SIZE - 1) * (end - start) + start);
            result.push(point);
        }
        return result;
    };
    return FunctionASceneController;
}());
exports.FunctionASceneController = FunctionASceneController;


/***/ }),

/***/ "./src/chartcontrollers/FunctionBSceneController.ts":
/*!**********************************************************!*\
  !*** ./src/chartcontrollers/FunctionBSceneController.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FunctionBSceneController = void 0;
var BSplineR1toR2_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2 */ "./src/newBsplines/BSplineR1toR2.ts");
var BSplineR1toR1_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR1 */ "./src/newBsplines/BSplineR1toR1.ts");
var BSplineR1toR2DifferentialProperties_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2DifferentialProperties */ "./src/newBsplines/BSplineR1toR2DifferentialProperties.ts");
var ChartSceneController_1 = __webpack_require__(/*! ./ChartSceneController */ "./src/chartcontrollers/ChartSceneController.ts");
var PeriodicBSplineR1toR2withOpenKnotSequence_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence */ "./src/newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence.ts");
var PeriodicBSplineR1toR2DifferentialProperties_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR2DifferentialProperties */ "./src/newBsplines/PeriodicBSplineR1toR2DifferentialProperties.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var FunctionBSceneController = /** @class */ (function () {
    function FunctionBSceneController(chartController) {
        this.chartController = chartController;
        this.POINT_SEQUENCE_SIZE = ChartSceneController_1.NB_CURVE_POINTS;
        this.spline = new BSplineR1toR1_1.BSplineR1toR1([0, 1, 0], [0, 0, 0, 1, 1, 1]).convertTocurve();
    }
    FunctionBSceneController.prototype.update = function (message) {
        if (message instanceof BSplineR1toR2_1.BSplineR1toR2) {
            this.spline = new BSplineR1toR2DifferentialProperties_1.BSplineR1toR2DifferentialProperties(message).curvatureDerivativeNumerator().convertTocurve();
        }
        else if (message instanceof PeriodicBSplineR1toR2withOpenKnotSequence_1.PeriodicBSplineR1toR2withOpenKnotSequence) {
            this.spline = new PeriodicBSplineR1toR2DifferentialProperties_1.PeriodicBSplineR1toR2DifferentialProperties(message).curvatureDerivativeNumerator().convertTocurve();
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "update", "inconsistent class name to update the chart.");
            error.logMessageToConsole();
        }
        var points = this.pointSequenceOnSpline();
        this.chartController.dataCleanUp();
        this.chartController.addPolylineDataset(ChartSceneController_1.DATASET_NAMES[0], this.spline.controlPoints);
        this.chartController.addCurvePointDataset(ChartSceneController_1.CHART_AXES_NAMES[1], points, { red: 0, green: 0, blue: 200, alpha: 0.5 });
        this.chartController.setChartLabel(ChartSceneController_1.CHART_TITLES[1]);
        this.chartController.setYaxisScale(ChartSceneController_1.CHART_AXIS_SCALE[0]);
        this.chartController.drawChart();
    };
    FunctionBSceneController.prototype.reset = function (message) {
        var points = [];
        var curvePoints = [];
        this.chartController.addPolylineDataset(ChartSceneController_1.DATASET_NAMES[1], points);
        this.chartController.addCurvePointDataset(ChartSceneController_1.CHART_AXES_NAMES[ChartSceneController_1.CHART_AXES_NAMES.length - 1], curvePoints, { red: 100, green: 0, blue: 0, alpha: 0.5 });
        this.chartController.setChartLabel(ChartSceneController_1.CHART_TITLES[ChartSceneController_1.CHART_TITLES.length - 1]);
        this.chartController.setYaxisScale(ChartSceneController_1.CHART_AXIS_SCALE[0]);
        this.chartController.drawChart();
    };
    FunctionBSceneController.prototype.pointSequenceOnSpline = function () {
        var start = this.spline.knots[this.spline.degree];
        var end = this.spline.knots[this.spline.knots.length - this.spline.degree - 1];
        var result = [];
        for (var i = 0; i < this.POINT_SEQUENCE_SIZE; i += 1) {
            var point = this.spline.evaluate(i / (this.POINT_SEQUENCE_SIZE - 1) * (end - start) + start);
            result.push(point);
        }
        return result;
    };
    return FunctionBSceneController;
}());
exports.FunctionBSceneController = FunctionBSceneController;


/***/ }),

/***/ "./src/chartcontrollers/FunctionBSceneControllerSqrtScaled.ts":
/*!********************************************************************!*\
  !*** ./src/chartcontrollers/FunctionBSceneControllerSqrtScaled.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FunctionBSceneControllerSqrtScaled = void 0;
var BSplineR1toR2_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2 */ "./src/newBsplines/BSplineR1toR2.ts");
var BSplineR1toR1_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR1 */ "./src/newBsplines/BSplineR1toR1.ts");
var BSplineR1toR2DifferentialProperties_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2DifferentialProperties */ "./src/newBsplines/BSplineR1toR2DifferentialProperties.ts");
var ChartSceneController_1 = __webpack_require__(/*! ./ChartSceneController */ "./src/chartcontrollers/ChartSceneController.ts");
var PeriodicBSplineR1toR2DifferentialProperties_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR2DifferentialProperties */ "./src/newBsplines/PeriodicBSplineR1toR2DifferentialProperties.ts");
var PeriodicBSplineR1toR2withOpenKnotSequence_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence */ "./src/newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var FunctionBSceneControllerSqrtScaled = /** @class */ (function () {
    function FunctionBSceneControllerSqrtScaled(chartController) {
        this.chartController = chartController;
        this.POINT_SEQUENCE_SIZE = ChartSceneController_1.NB_CURVE_POINTS;
        this.spline = new BSplineR1toR1_1.BSplineR1toR1([0, 1, 0], [0, 0, 0, 1, 1, 1]).convertTocurve();
    }
    FunctionBSceneControllerSqrtScaled.prototype.update = function (message) {
        if (message instanceof BSplineR1toR2_1.BSplineR1toR2) {
            this.spline = new BSplineR1toR2DifferentialProperties_1.BSplineR1toR2DifferentialProperties(message).curvatureDerivativeNumerator().convertTocurve();
        }
        else if (message instanceof PeriodicBSplineR1toR2withOpenKnotSequence_1.PeriodicBSplineR1toR2withOpenKnotSequence) {
            this.spline = new PeriodicBSplineR1toR2DifferentialProperties_1.PeriodicBSplineR1toR2DifferentialProperties(message).curvatureDerivativeNumerator().convertTocurve();
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "update", "inconsistent class name to update the chart.");
            error.logMessageToConsole();
        }
        var points = this.pointSequenceOnSpline();
        points.forEach(function (element) {
            /* apply a non linear transformation to graphically emphasize the behavior of function B around 0 */
            if (element.y < 0.0) {
                element.y = -Math.sqrt(Math.abs(element.y));
            }
            else {
                element.y = Math.sqrt(element.y);
            }
        });
        this.chartController.dataCleanUp();
        this.chartController.addCurvePointDataset(ChartSceneController_1.CHART_AXES_NAMES[4], points, { red: 0, green: 0, blue: 200, alpha: 0.5 });
        this.chartController.setChartLabel(ChartSceneController_1.CHART_TITLES[4]);
        this.chartController.setYaxisScale(ChartSceneController_1.CHART_AXIS_SCALE[0]);
        this.chartController.drawChart();
    };
    FunctionBSceneControllerSqrtScaled.prototype.reset = function (message) {
        var points = [];
        var curvePoints = [];
        this.chartController.addPolylineDataset(ChartSceneController_1.DATASET_NAMES[1], points);
        this.chartController.addCurvePointDataset(ChartSceneController_1.CHART_AXES_NAMES[ChartSceneController_1.CHART_AXES_NAMES.length - 1], curvePoints, { red: 100, green: 0, blue: 0, alpha: 0.5 });
        this.chartController.setChartLabel(ChartSceneController_1.CHART_TITLES[ChartSceneController_1.CHART_TITLES.length - 1]);
        this.chartController.setYaxisScale(ChartSceneController_1.CHART_AXIS_SCALE[0]);
        this.chartController.drawChart();
    };
    FunctionBSceneControllerSqrtScaled.prototype.pointSequenceOnSpline = function () {
        var start = this.spline.knots[this.spline.degree];
        var end = this.spline.knots[this.spline.knots.length - this.spline.degree - 1];
        var result = [];
        for (var i = 0; i < this.POINT_SEQUENCE_SIZE; i += 1) {
            var point = this.spline.evaluate(i / (this.POINT_SEQUENCE_SIZE - 1) * (end - start) + start);
            result.push(point);
        }
        return result;
    };
    return FunctionBSceneControllerSqrtScaled;
}());
exports.FunctionBSceneControllerSqrtScaled = FunctionBSceneControllerSqrtScaled;


/***/ }),

/***/ "./src/chartcontrollers/NoFunctionSceneController.ts":
/*!***********************************************************!*\
  !*** ./src/chartcontrollers/NoFunctionSceneController.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NoFunctionSceneController = void 0;
var Vector2d_1 = __webpack_require__(/*! ../mathVector/Vector2d */ "./src/mathVector/Vector2d.ts");
var ChartSceneController_1 = __webpack_require__(/*! ./ChartSceneController */ "./src/chartcontrollers/ChartSceneController.ts");
var NoFunctionSceneController = /** @class */ (function () {
    function NoFunctionSceneController(chartController) {
        this.chartController = chartController;
    }
    NoFunctionSceneController.prototype.update = function (message) {
        var points = [];
        points.push(new Vector2d_1.Vector2d(0.0, 0.0));
        this.chartController.dataCleanUp();
        this.chartController.addCurvePointDataset(ChartSceneController_1.CHART_AXES_NAMES[ChartSceneController_1.CHART_AXES_NAMES.length - 1], points, { red: 0, green: 0, blue: 0, alpha: 0.5 });
        this.chartController.setChartLabel(ChartSceneController_1.CHART_TITLES[ChartSceneController_1.CHART_TITLES.length - 1]);
        this.chartController.setYaxisScale(ChartSceneController_1.CHART_AXIS_SCALE[0]);
        this.chartController.drawChart();
    };
    NoFunctionSceneController.prototype.reset = function (message) {
        var points = [];
        var curvePoints = [];
        this.chartController.addPolylineDataset(ChartSceneController_1.DATASET_NAMES[1], points);
        this.chartController.addCurvePointDataset(ChartSceneController_1.CHART_AXES_NAMES[ChartSceneController_1.CHART_AXES_NAMES.length - 1], curvePoints, { red: 0, green: 0, blue: 0, alpha: 0.5 });
        this.chartController.setChartLabel(ChartSceneController_1.CHART_TITLES[ChartSceneController_1.CHART_TITLES.length - 1]);
        this.chartController.setYaxisScale(ChartSceneController_1.CHART_AXIS_SCALE[0]);
        this.chartController.drawChart();
    };
    return NoFunctionSceneController;
}());
exports.NoFunctionSceneController = NoFunctionSceneController;


/***/ }),

/***/ "./src/containers/AbstractPolygonWithVerticesR1.ts":
/*!*********************************************************!*\
  !*** ./src/containers/AbstractPolygonWithVerticesR1.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractPolygonWithVerticesR1 = void 0;
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var VertexR1_1 = __webpack_require__(/*! ./VertexR1 */ "./src/containers/VertexR1.ts");
var AbstractPolygonWithVerticesR1 = /** @class */ (function () {
    function AbstractPolygonWithVerticesR1() {
    }
    Object.defineProperty(AbstractPolygonWithVerticesR1.prototype, "vertices", {
        get: function () {
            return this._vertices.slice();
        },
        enumerable: false,
        configurable: true
    });
    AbstractPolygonWithVerticesR1.prototype.length = function () {
        return this._vertices.length;
    };
    AbstractPolygonWithVerticesR1.prototype.getFirstIndex = function () {
        if (this._vertices.length > 0) {
            return this._vertices[0].index;
        }
        else {
            return ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
        }
    };
    AbstractPolygonWithVerticesR1.prototype.getVertexAt = function (index) {
        var e_1, _a;
        var result = new VertexR1_1.VertexR1(ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE, 0.0);
        try {
            for (var _b = __values(this._vertices), _c = _b.next(); !_c.done; _c = _b.next()) {
                var vertex = _c.value;
                if (vertex.index === index)
                    result = new VertexR1_1.VertexR1(vertex.index, vertex.value);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result;
    };
    AbstractPolygonWithVerticesR1.prototype.getValues = function () {
        var e_2, _a;
        var result = [];
        try {
            for (var _b = __values(this._vertices), _c = _b.next(); !_c.done; _c = _b.next()) {
                var vertex = _c.value;
                result.push(vertex.value);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return result;
    };
    AbstractPolygonWithVerticesR1.prototype.extend = function (vertex) {
        this._vertices.push(vertex);
        this.checkConsistency();
    };
    AbstractPolygonWithVerticesR1.prototype.extendWithNewValue = function (value) {
        var newIndex = this.getFirstIndex() + this._vertices.length;
        var newVertex = new VertexR1_1.VertexR1(newIndex, value);
        this._vertices.push(newVertex);
        this.checkConsistency();
    };
    return AbstractPolygonWithVerticesR1;
}());
exports.AbstractPolygonWithVerticesR1 = AbstractPolygonWithVerticesR1;


/***/ }),

/***/ "./src/containers/AdjacentOscillatingPolygons.ts":
/*!*******************************************************!*\
  !*** ./src/containers/AdjacentOscillatingPolygons.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AdjacentOscillatingPolygons = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var VertexR1_1 = __webpack_require__(/*! ./VertexR1 */ "./src/containers/VertexR1.ts");
var AdjacentOscillatingPolygons = /** @class */ (function () {
    function AdjacentOscillatingPolygons(oscillatingPolygons) {
        this._oscillatingPolygons = oscillatingPolygons;
        this._closestVertex = new VertexR1_1.VertexR1(ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE, 0.0);
        this._indexOscillatingPolygon = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
        this.checkConsistency();
        this.getClosestVertexToZero();
    }
    Object.defineProperty(AdjacentOscillatingPolygons.prototype, "oscillatingPolygons", {
        get: function () {
            return this._oscillatingPolygons;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdjacentOscillatingPolygons.prototype, "closestVertex", {
        get: function () {
            return this._closestVertex;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdjacentOscillatingPolygons.prototype, "indexOscillatingPolygon", {
        get: function () {
            return this._indexOscillatingPolygon;
        },
        enumerable: false,
        configurable: true
    });
    AdjacentOscillatingPolygons.prototype.checkConsistency = function () {
        for (var i = 0; i < this._oscillatingPolygons.length - 1; i++) {
            var firstIndex1 = this._oscillatingPolygons[i].getFirstIndex();
            var lastVertex1 = this._oscillatingPolygons[i].getVertexAt(firstIndex1 + this._oscillatingPolygons[i].length() - 1);
            var firstIndex2 = this._oscillatingPolygons[i + 1].getFirstIndex();
            var firstVertex2 = this._oscillatingPolygons[i + 1].getVertexAt(firstIndex2);
            if (lastVertex1.checkIndex() !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE && firstVertex2.checkIndex() !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE) {
                if ((lastVertex1.index + 1) !== firstVertex2.index) {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkConsistency", "Indices of contiguous oscillating polygons are not in strict increasing order.");
                    error.logMessageToConsole();
                }
                else {
                    if (lastVertex1.value * firstVertex2.value <= 0.0) {
                        var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkConsistency", "Extreme vertices ordinates are not of same sign.");
                        error.logMessageToConsole();
                    }
                }
            }
            else {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkConsistency", "Inconsistent indices of extreme vertices of oscillating polygons.");
                error.logMessageToConsole();
            }
        }
    };
    AdjacentOscillatingPolygons.prototype.getClosestVertexToZeroAtConnection = function (index) {
        var closestVertex = new VertexR1_1.VertexR1(ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE, 0.0);
        var firstIndex = this._oscillatingPolygons[index].getFirstIndex();
        var lastIndex = firstIndex + this._oscillatingPolygons[index].length() - 1;
        if (this._oscillatingPolygons[index].closestVertexAtEnd.index === lastIndex) {
            closestVertex = this._oscillatingPolygons[index].closestVertexAtEnd;
            if (this._oscillatingPolygons[index + 1].closestVertexAtBeginning.index !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE &&
                this._oscillatingPolygons[index + 1].closestVertexAtBeginning.index === this._oscillatingPolygons[index + 1].getFirstIndex()) {
                if (Math.pow(closestVertex.value, 2) > Math.pow(this._oscillatingPolygons[index + 1].closestVertexAtBeginning.value, 2)) {
                    closestVertex = this._oscillatingPolygons[index + 1].closestVertexAtBeginning;
                }
            }
            else {
                closestVertex = new VertexR1_1.VertexR1(ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE, 0.0);
            }
        }
        else if (this._oscillatingPolygons[index].closestVertexAtEnd.index === ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE) {
            if (this._oscillatingPolygons[index + 1].closestVertexAtBeginning.index !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE) {
                closestVertex = this._oscillatingPolygons[index + 1].closestVertexAtBeginning;
            }
        }
        return closestVertex;
    };
    AdjacentOscillatingPolygons.prototype.getClosestVertexToZero = function () {
        if (this._oscillatingPolygons.length === 1) {
            return;
        }
        this.findFirstVertex();
        var closestVertex = Math.pow(this._closestVertex.value, 2);
        for (var i = 1; i < this._oscillatingPolygons.length; i++) {
            if (this._oscillatingPolygons[i].closestVertexAtEnd.index !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE && i < (this._oscillatingPolygons.length - 1)) {
                if (Math.pow(this._oscillatingPolygons[i].closestVertexAtEnd.value, 2) < closestVertex) {
                    closestVertex = Math.pow(this._oscillatingPolygons[i].closestVertexAtEnd.value, 2);
                    this._closestVertex = this._oscillatingPolygons[i].closestVertexAtEnd;
                    this._indexOscillatingPolygon = i;
                }
            }
            if (this._oscillatingPolygons[i].closestVertexAtBeginning.index !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE) {
                if (Math.pow(this._oscillatingPolygons[i].closestVertexAtBeginning.value, 2) < closestVertex) {
                    closestVertex = Math.pow(this._oscillatingPolygons[i].closestVertexAtBeginning.value, 2);
                    this._closestVertex = this._oscillatingPolygons[i].closestVertexAtBeginning;
                    this._indexOscillatingPolygon = i;
                }
            }
        }
    };
    AdjacentOscillatingPolygons.prototype.findFirstVertex = function () {
        this._closestVertex = this._oscillatingPolygons[0].closestVertexAtEnd;
        this._indexOscillatingPolygon = 0;
        if (this._closestVertex.index !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE) {
            return;
        }
        else {
            this._indexOscillatingPolygon = 1;
            if (this._oscillatingPolygons[1].closestVertexAtBeginning.index !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE) {
                this._closestVertex = this._oscillatingPolygons[1].closestVertexAtBeginning;
            }
            else if (this._oscillatingPolygons[1].closestVertexAtEnd.index !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE) {
                this._closestVertex = this._oscillatingPolygons[1].closestVertexAtEnd;
            }
            else {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "findFirstVertex", "Inconsistent content of closestVertexAtBeginning and closestVertexAtEnd for oscillating polygon 1.");
                error.logMessageToConsole();
            }
        }
    };
    return AdjacentOscillatingPolygons;
}());
exports.AdjacentOscillatingPolygons = AdjacentOscillatingPolygons;


/***/ }),

/***/ "./src/containers/ChartDescriptorQueueItem.ts":
/*!****************************************************!*\
  !*** ./src/containers/ChartDescriptorQueueItem.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChartDescriptorQueueItem = void 0;
var ChartDescriptorQueueItem = /** @class */ (function () {
    function ChartDescriptorQueueItem(chartController, chartName, curveObserver) {
        this._chartController = chartController;
        this._charTitle = chartName;
        if (curveObserver !== undefined)
            this._curveObserver = curveObserver;
        else
            this._curveObserver = undefined;
    }
    Object.defineProperty(ChartDescriptorQueueItem.prototype, "chartController", {
        get: function () {
            return this._chartController;
        },
        set: function (chartController) {
            this._chartController = chartController;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChartDescriptorQueueItem.prototype, "chartTitle", {
        get: function () {
            return this._charTitle;
        },
        set: function (chartTitle) {
            this._charTitle = chartTitle;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChartDescriptorQueueItem.prototype, "curveObserver", {
        get: function () {
            return this._curveObserver;
        },
        set: function (curveObserver) {
            this._curveObserver = curveObserver;
        },
        enumerable: false,
        configurable: true
    });
    return ChartDescriptorQueueItem;
}());
exports.ChartDescriptorQueueItem = ChartDescriptorQueueItem;


/***/ }),

/***/ "./src/containers/OscillatingPolygonWithVerticesR1.ts":
/*!************************************************************!*\
  !*** ./src/containers/OscillatingPolygonWithVerticesR1.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.extractAdjacentOscillatingPolygons = exports.OscillatingPolygonWithVerticesR1 = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var AbstractPolygonWithVerticesR1_1 = __webpack_require__(/*! ./AbstractPolygonWithVerticesR1 */ "./src/containers/AbstractPolygonWithVerticesR1.ts");
var AdjacentOscillatingPolygons_1 = __webpack_require__(/*! ./AdjacentOscillatingPolygons */ "./src/containers/AdjacentOscillatingPolygons.ts");
var VertexR1_1 = __webpack_require__(/*! ./VertexR1 */ "./src/containers/VertexR1.ts");
var OscillatingPolygonWithVerticesR1 = /** @class */ (function (_super) {
    __extends(OscillatingPolygonWithVerticesR1, _super);
    function OscillatingPolygonWithVerticesR1(polygon) {
        var _this = _super.call(this) || this;
        _this._vertices = [];
        var firstIndex = polygon.getFirstIndex();
        var upperBound = polygon.getFirstIndex() + polygon.length();
        for (var vertex = firstIndex; vertex < upperBound; vertex++) {
            _this._vertices.push(new VertexR1_1.VertexR1(polygon.getVertexAt(vertex).index, polygon.getVertexAt(vertex).value));
        }
        _this._closestVertexAtBeginning = new VertexR1_1.VertexR1(ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE, 0.0);
        _this._closestVertexAtEnd = new VertexR1_1.VertexR1(ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE, 0.0);
        _this.checkConsistency();
        _this.extractControlPtsClosestToZeroAtExtremities();
        return _this;
    }
    Object.defineProperty(OscillatingPolygonWithVerticesR1.prototype, "closestVertexAtBeginning", {
        get: function () {
            return this._closestVertexAtBeginning;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OscillatingPolygonWithVerticesR1.prototype, "closestVertexAtEnd", {
        get: function () {
            return this._closestVertexAtEnd;
        },
        enumerable: false,
        configurable: true
    });
    OscillatingPolygonWithVerticesR1.prototype.checkConsistency = function () {
        var e_1, _a;
        var code = 0;
        if (this._vertices.length > 1) {
            var previousIndex = this._vertices[0].index;
            var previousValue = this._vertices[0].value;
            var vertices = this._vertices.slice(1);
            try {
                for (var vertices_1 = __values(vertices), vertices_1_1 = vertices_1.next(); !vertices_1_1.done; vertices_1_1 = vertices_1.next()) {
                    var vertex = vertices_1_1.value;
                    if ((vertex.index - previousIndex) !== 1) {
                        var error = new ErrorLoging_1.WarningLog(this.constructor.name, "checkConsistency", "Inconsistent sequence of indices values.");
                        error.logMessageToConsole();
                        code = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
                        return code;
                    }
                    else if (vertex.value * previousValue > 0) {
                        var error = new ErrorLoging_1.WarningLog(this.constructor.name, "checkConsistency", "Vertices values are not oscillating.");
                        error.logMessageToConsole();
                        code = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
                    }
                    previousIndex = vertex.index;
                    previousValue = vertex.value;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (vertices_1_1 && !vertices_1_1.done && (_a = vertices_1.return)) _a.call(vertices_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            var error = new ErrorLoging_1.WarningLog(this.constructor.name, "checkConsistency", "Cannot process an oscillating polygon with less than two vertices.");
            error.logMessageToConsole();
            code = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
        }
        return code;
    };
    OscillatingPolygonWithVerticesR1.prototype.extractControlPtClosestToZeroAtExtremityEvenNbEdges = function (index) {
        if (index !== this.getFirstIndex() && index !== this.getVertexAt(this.getFirstIndex() + this.length() - 1).index) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "extractControlPtClosestToZeroAtExtremityEvenNbEdges", "Current vertex index is not at an extremity of the polygon.");
            error.logMessageToConsole();
            return new VertexR1_1.VertexR1(ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE, 0.0);
        }
        var vertex1 = this.getVertexAt(index);
        var vertex2;
        if (index === this.getFirstIndex()) {
            vertex2 = this.getVertexAt(index + 1);
        }
        else {
            vertex2 = this.getVertexAt(index - 1);
        }
        if (Math.pow(vertex1.value, 2) > Math.pow(vertex2.value, 2)) {
            return vertex2;
        }
        else {
            return vertex1;
        }
    };
    OscillatingPolygonWithVerticesR1.prototype.extractControlPtClosestToZeroAtExtremityOddNbEdges = function () {
        var firstIndex = this.getFirstIndex();
        var vertex1 = this.getVertexAt(firstIndex);
        var lastIndex = firstIndex + this.length() - 1;
        var vertex2 = this.getVertexAt(lastIndex);
        if (Math.pow(vertex1.value, 2) > Math.pow(vertex2.value, 2)) {
            this._closestVertexAtEnd = vertex2;
        }
        else {
            this._closestVertexAtBeginning = vertex1;
        }
    };
    OscillatingPolygonWithVerticesR1.prototype.extractControlPtsClosestToZeroAtExtremities = function () {
        var firstIndex = this.getFirstIndex();
        var lastIndex = firstIndex + this.length() - 1;
        if ((this.length() - 1) % 2 === 0) {
            this._closestVertexAtBeginning = this.extractControlPtClosestToZeroAtExtremityEvenNbEdges(firstIndex);
            this._closestVertexAtEnd = this.extractControlPtClosestToZeroAtExtremityEvenNbEdges(lastIndex);
        }
        else {
            this.extractControlPtClosestToZeroAtExtremityOddNbEdges();
        }
    };
    return OscillatingPolygonWithVerticesR1;
}(AbstractPolygonWithVerticesR1_1.AbstractPolygonWithVerticesR1));
exports.OscillatingPolygonWithVerticesR1 = OscillatingPolygonWithVerticesR1;
function extractAdjacentOscillatingPolygons(oscillatingPolygons) {
    var adjacentPolygons = [];
    for (var i = 0; i < oscillatingPolygons.length; i++) {
        var polygons = [];
        if ((i + 1) < oscillatingPolygons.length) {
            if (oscillatingPolygons[i].vertices[oscillatingPolygons[i].vertices.length - 1].index + 1 === oscillatingPolygons[i + 1].vertices[0].index) {
                polygons.push(oscillatingPolygons[i]);
                polygons.push(oscillatingPolygons[i + 1]);
                i += 1;
                if ((i + 1) < oscillatingPolygons.length) {
                    while (oscillatingPolygons[i].vertices[oscillatingPolygons[i].vertices.length - 1].index + 1 === oscillatingPolygons[i + 1].vertices[0].index) {
                        polygons.push(oscillatingPolygons[i + 1]);
                        i += 1;
                        if ((i + 1) === oscillatingPolygons.length) {
                            i += 1;
                            break;
                        }
                    }
                }
            }
            else {
                polygons.push(oscillatingPolygons[i]);
            }
        }
        else {
            polygons.push(oscillatingPolygons[i]);
        }
        adjacentPolygons.push(new AdjacentOscillatingPolygons_1.AdjacentOscillatingPolygons(polygons));
    }
    return adjacentPolygons;
}
exports.extractAdjacentOscillatingPolygons = extractAdjacentOscillatingPolygons;


/***/ }),

/***/ "./src/containers/PolygonWithVerticesR1.ts":
/*!*************************************************!*\
  !*** ./src/containers/PolygonWithVerticesR1.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.extractOscillatingPolygons = exports.PolygonWithVerticesR1 = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var MathVectorBasicOperations_1 = __webpack_require__(/*! ../linearAlgebra/MathVectorBasicOperations */ "./src/linearAlgebra/MathVectorBasicOperations.ts");
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var VertexR1_1 = __webpack_require__(/*! ./VertexR1 */ "./src/containers/VertexR1.ts");
var OscillatingPolygonWithVerticesR1_1 = __webpack_require__(/*! ./OscillatingPolygonWithVerticesR1 */ "./src/containers/OscillatingPolygonWithVerticesR1.ts");
var AbstractPolygonWithVerticesR1_1 = __webpack_require__(/*! ./AbstractPolygonWithVerticesR1 */ "./src/containers/AbstractPolygonWithVerticesR1.ts");
var PolygonWithVerticesR1 = /** @class */ (function (_super) {
    __extends(PolygonWithVerticesR1, _super);
    function PolygonWithVerticesR1(points, startIndex) {
        var e_1, _a;
        var _this = _super.call(this) || this;
        _this._vertices = [];
        _this._localPositiveMinima = [];
        _this._localNegativeMaxima = [];
        var index;
        if (startIndex !== undefined) {
            index = startIndex;
            if (startIndex < 0) {
                var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Cannot create a polygon with vertices with a start index negative");
                error.logMessageToConsole();
            }
        }
        else {
            index = 0;
        }
        try {
            for (var points_1 = __values(points), points_1_1 = points_1.next(); !points_1_1.done; points_1_1 = points_1.next()) {
                var point = points_1_1.value;
                _this._vertices.push(new VertexR1_1.VertexR1(index, point));
                index++;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (points_1_1 && !points_1_1.done && (_a = points_1.return)) _a.call(points_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return _this;
    }
    Object.defineProperty(PolygonWithVerticesR1.prototype, "localPositiveMinima", {
        get: function () {
            return this._localPositiveMinima.slice();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PolygonWithVerticesR1.prototype, "localNegativeMaxima", {
        get: function () {
            return this._localNegativeMaxima.slice();
        },
        enumerable: false,
        configurable: true
    });
    PolygonWithVerticesR1.prototype.checkConsistency = function () {
        var e_2, _a;
        var code = 0;
        if (this._vertices.length > 1) {
            var previousIndex = this._vertices[0].index;
            var vertices = this._vertices.slice(1);
            try {
                for (var vertices_1 = __values(vertices), vertices_1_1 = vertices_1.next(); !vertices_1_1.done; vertices_1_1 = vertices_1.next()) {
                    var vertex = vertices_1_1.value;
                    if ((vertex.index - previousIndex) !== 1) {
                        var error = new ErrorLoging_1.WarningLog(this.constructor.name, "checkConsistency", "Inconsistent sequence of indices values.");
                        error.logMessageToConsole();
                        code = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
                        return code;
                    }
                    previousIndex = vertex.index;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (vertices_1_1 && !vertices_1_1.done && (_a = vertices_1.return)) _a.call(vertices_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return code;
    };
    PolygonWithVerticesR1.prototype.clear = function () {
        this._vertices = [];
        this._localPositiveMinima = [];
        this._localNegativeMaxima = [];
    };
    PolygonWithVerticesR1.prototype.deepCopy = function () {
        var firstIndex = this.getFirstIndex();
        var polygon;
        if (firstIndex !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE) {
            polygon = new PolygonWithVerticesR1(this.getValues(), this.getFirstIndex());
            polygon._localNegativeMaxima = this._localNegativeMaxima.slice();
            polygon._localPositiveMinima = this._localPositiveMinima.slice();
            this.checkConsistency();
        }
        else {
            polygon = new PolygonWithVerticesR1([]);
            polygon._vertices.push(new VertexR1_1.VertexR1(ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE, 0.0));
        }
        return polygon;
    };
    PolygonWithVerticesR1.prototype.sortLocalExtrema = function (localExtrema) {
        localExtrema.sort(function (a, b) {
            if (a.value > b.value) {
                return 1;
            }
            if (a.value < b.value) {
                return -1;
            }
            return 0;
        });
        var sortedExtrema = localExtrema.slice();
        return sortedExtrema;
    };
    PolygonWithVerticesR1.prototype.extractLocalPositiveMinima = function () {
        this._localPositiveMinima = [];
        for (var i = 0; i < this._vertices.length - 2; i += 1) {
            if (MathVectorBasicOperations_1.sign(this._vertices[i].value) === 1 && MathVectorBasicOperations_1.sign(this._vertices[i + 1].value) === 1 && MathVectorBasicOperations_1.sign(this._vertices[i + 2].value) === 1) {
                if (this._vertices[i].value > this._vertices[i + 1].value && this._vertices[i + 1].value < this._vertices[i + 2].value) {
                    this._localPositiveMinima.push(new VertexR1_1.VertexR1((i + 1), this._vertices[i + 1].value));
                }
            }
        }
    };
    PolygonWithVerticesR1.prototype.extractLocalNegativeMaxima = function () {
        this._localNegativeMaxima = [];
        for (var i = 0; i < this._vertices.length - 2; i += 1) {
            if (MathVectorBasicOperations_1.sign(this._vertices[i].value) === -1 && MathVectorBasicOperations_1.sign(this._vertices[i + 1].value) === -1 && MathVectorBasicOperations_1.sign(this._vertices[i + 2].value) === -1) {
                if (this._vertices[i].value < this._vertices[i + 1].value && this._vertices[i + 1].value > this._vertices[i + 2].value) {
                    this._localNegativeMaxima.push(new VertexR1_1.VertexR1((i + 1), this._vertices[i + 1].value));
                }
            }
        }
    };
    PolygonWithVerticesR1.prototype.extractClosestLocalExtremmumToAxis = function () {
        var localExtremum = new VertexR1_1.VertexR1(ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE, 0.0);
        var smallestPositiveMinimum = new VertexR1_1.VertexR1(ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE, 0.0);
        var largestNegativeMaximum = new VertexR1_1.VertexR1(ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE, 0.0);
        this.extractLocalPositiveMinima();
        if (this._localPositiveMinima.length > 0) {
            smallestPositiveMinimum = this.sortLocalExtrema(this._localPositiveMinima)[0];
        }
        this.extractLocalNegativeMaxima();
        if (this._localNegativeMaxima.length > 0) {
            largestNegativeMaximum = this.sortLocalExtrema(this._localNegativeMaxima)[this._localNegativeMaxima.length - 1];
        }
        if (smallestPositiveMinimum.index !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE && largestNegativeMaximum.index !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE && Math.abs(smallestPositiveMinimum.value) > Math.abs(largestNegativeMaximum.value)) {
            return largestNegativeMaximum;
        }
        else if (smallestPositiveMinimum.index !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE && largestNegativeMaximum.index !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE) {
            return smallestPositiveMinimum;
        }
        else if (smallestPositiveMinimum.index !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE) {
            return smallestPositiveMinimum;
        }
        else if (largestNegativeMaximum.index !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE) {
            return largestNegativeMaximum;
        }
        else
            return localExtremum;
    };
    PolygonWithVerticesR1.prototype.extractOscillatingPolygons = function () {
        var result = [];
        if (this._vertices.length > 1) {
            var i = 1;
            while (i < this._vertices.length) {
                if (this._vertices[i - 1].value * this._vertices[i].value <= 0.0) {
                    var firstEdge = [this._vertices[i - 1].value, this._vertices[i].value];
                    var oscillatingPolygon = new PolygonWithVerticesR1(firstEdge, (i - 1));
                    i += 1;
                    if (i < (this._vertices.length - 1)) {
                        while (this._vertices[i - 1].value * this._vertices[i].value <= 0.0) {
                            oscillatingPolygon.extend(this._vertices[i]);
                            i += 1;
                            if (i === this._vertices.length)
                                break;
                        }
                    }
                    result.push(new OscillatingPolygonWithVerticesR1_1.OscillatingPolygonWithVerticesR1(oscillatingPolygon));
                }
                i += 1;
            }
        }
        return result;
    };
    return PolygonWithVerticesR1;
}(AbstractPolygonWithVerticesR1_1.AbstractPolygonWithVerticesR1));
exports.PolygonWithVerticesR1 = PolygonWithVerticesR1;
function extractOscillatingPolygons(controlPoints) {
    var result = [];
    if (controlPoints.length > 1) {
        var i = 1;
        while (i < controlPoints.length) {
            if (controlPoints[i - 1] * controlPoints[i] <= 0.0) {
                var firstEdge = [controlPoints[i - 1], controlPoints[i]];
                var oscillatingPolygon = new PolygonWithVerticesR1(firstEdge, (i - 1));
                i += 1;
                if (i < (controlPoints.length - 1)) {
                    while (controlPoints[i - 1] * controlPoints[i] <= 0.0) {
                        oscillatingPolygon.extendWithNewValue(controlPoints[i]);
                        i += 1;
                        if (i === controlPoints.length)
                            break;
                    }
                }
                result.push(new OscillatingPolygonWithVerticesR1_1.OscillatingPolygonWithVerticesR1(oscillatingPolygon));
            }
            i += 1;
        }
    }
    return result;
}
exports.extractOscillatingPolygons = extractOscillatingPolygons;


/***/ }),

/***/ "./src/containers/Queue.ts":
/*!*********************************!*\
  !*** ./src/containers/Queue.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.QueueChartDescriptor = exports.QueueChartController = void 0;
var ChartSceneController_1 = __webpack_require__(/*! ../chartcontrollers/ChartSceneController */ "./src/chartcontrollers/ChartSceneController.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ChartDescriptorQueueItem_1 = __webpack_require__(/*! ./ChartDescriptorQueueItem */ "./src/containers/ChartDescriptorQueueItem.ts");
var Queue = /** @class */ (function () {
    function Queue(size) {
        this.size = size;
        this.items = [];
    }
    Queue.prototype.enqueue = function (newItem) {
        if (this.items.length < this.size) {
            this.items.push(newItem);
            return undefined;
        }
        else {
            var removedItem = this.items.shift();
            this.items.push(newItem);
            return removedItem;
        }
    };
    Queue.prototype.dequeue = function () {
        if (this.items.length === 0) {
            return undefined;
        }
        else {
            return this.items.shift();
        }
    };
    Queue.prototype.length = function () {
        return this.items.length;
    };
    Queue.prototype.getLast = function () {
        if (this.items.length === 0) {
            return undefined;
        }
        else {
            return this.items[this.items.length - 1];
        }
    };
    Queue.prototype.at = function (index) {
        return this.items[index];
    };
    Queue.prototype.insertAt = function (index, item) {
        this.items.splice(index, 0, item);
    };
    return Queue;
}());
var QueueChartController = /** @class */ (function (_super) {
    __extends(QueueChartController, _super);
    function QueueChartController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return QueueChartController;
}(Queue));
exports.QueueChartController = QueueChartController;
var QueueChartDescriptor = /** @class */ (function (_super) {
    __extends(QueueChartDescriptor, _super);
    function QueueChartDescriptor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    QueueChartDescriptor.prototype.extract = function (item) {
        var index = this.items.indexOf(item);
        if (index !== -1) {
            this.items.splice(index, 1);
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, " extract ", "the item does not exists in the queue.");
            error.logMessageToConsole();
        }
    };
    QueueChartDescriptor.prototype.extractAt = function (index) {
        if (index >= 0 && index < this.items.length) {
            this.items.splice(index, 1);
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, " extractAt ", "the index is out of range.");
            error.logMessageToConsole();
        }
    };
    QueueChartDescriptor.prototype.get = function (index) {
        if (index < 0 && index > this.size) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "get", " index out of range.");
            error.logMessageToConsole();
        }
        var title = this.items[index].chartTitle;
        var chartCtrl = this.items[index].chartController;
        var crvObsr = this.items[index].curveObserver;
        return new ChartDescriptorQueueItem_1.ChartDescriptorQueueItem(chartCtrl, title, crvObsr);
    };
    QueueChartDescriptor.prototype.insertAtController = function (chartController, itemToInsert) {
        var e_1, _a;
        var location = -1;
        for (var i = 0; i < this.items.length; i++) {
            if (this.items[i].chartController === chartController) {
                location = i;
            }
        }
        if (location !== -1) {
            this.extractAt(location);
            var existChart = [];
            var noChart = [];
            try {
                for (var _b = __values(this.items), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    if (ChartSceneController_1.CHART_TITLES.indexOf(item.chartTitle) !== -1) {
                        existChart.push(item);
                    }
                    else {
                        noChart.push(item);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            var newItems_1 = [];
            existChart.forEach(function (element) { newItems_1.push(element); });
            newItems_1.push(itemToInsert);
            noChart.forEach(function (element) { newItems_1.push(element); });
            this.items = newItems_1;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "insertAtController", " inconsistent location of the queue item to be removed.");
            error.logMessageToConsole();
        }
    };
    QueueChartDescriptor.prototype.findItemFromTitle = function (title) {
        var e_2, _a;
        try {
            for (var _b = __values(this.items), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                if (item.chartTitle === title) {
                    return new ChartDescriptorQueueItem_1.ChartDescriptorQueueItem(item.chartController, item.chartTitle, item.curveObserver);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return undefined;
    };
    QueueChartDescriptor.prototype.findItemFromChartController = function (chartController) {
        var e_3, _a;
        try {
            for (var _b = __values(this.items), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                if (item.chartController === chartController) {
                    return new ChartDescriptorQueueItem_1.ChartDescriptorQueueItem(item.chartController, item.chartTitle, item.curveObserver);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return undefined;
    };
    QueueChartDescriptor.prototype.indexOfFromTitle = function (title) {
        for (var item = 0; item < this.items.length; item++) {
            if (this.items[item].chartTitle === title) {
                return item;
            }
        }
        return -1;
    };
    return QueueChartDescriptor;
}(Queue));
exports.QueueChartDescriptor = QueueChartDescriptor;


/***/ }),

/***/ "./src/containers/VertexR1.ts":
/*!************************************!*\
  !*** ./src/containers/VertexR1.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VertexR1 = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var VertexR1 = /** @class */ (function () {
    function VertexR1(index, value) {
        this._index = index;
        this._value = value;
    }
    Object.defineProperty(VertexR1.prototype, "index", {
        get: function () {
            return this._index;
        },
        set: function (index) {
            this._index = index;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VertexR1.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
        },
        enumerable: false,
        configurable: true
    });
    VertexR1.prototype.checkIndex = function () {
        var code = 0;
        if (this._index < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "checkIndex", "Inconsistent vertex index");
            warning.logMessageToConsole();
            code = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
        }
        return code;
    };
    return VertexR1;
}());
exports.VertexR1 = VertexR1;


/***/ }),

/***/ "./src/controllers/CurveConstraintSelectionState.ts":
/*!**********************************************************!*\
  !*** ./src/controllers/CurveConstraintSelectionState.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HandleConstraintAtPoint1Point2ConstraintState = exports.HandleConstraintAtPoint1NoConstraintPoint2ConstraintState = exports.HandleConstraintAtPoint1ConstraintPoint2NoConstraintState = exports.HandleConstraintAtPoint1Point2NoConstraintState = exports.CurveConstraintSelectionState = void 0;
var ShapeNavigableCurve_1 = __webpack_require__(/*! ../shapeNavigableCurve/ShapeNavigableCurve */ "./src/shapeNavigableCurve/ShapeNavigableCurve.ts");
var CurveConstraintStrategy_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/CurveConstraintStrategy */ "./src/curveShapeSpaceNavigation/CurveConstraintStrategy.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var CurveConstraintSelectionState = /** @class */ (function () {
    function CurveConstraintSelectionState(context) {
        this.curveSceneController = context;
        this.shapeNavigableCurve = this.curveSceneController.shapeNavigableCurve;
        this.curveShapeSpaceNavigator = this.curveSceneController.curveShapeSpaceNavigator;
        this.curveConstraints = this.shapeNavigableCurve.curveConstraints;
    }
    CurveConstraintSelectionState.prototype.setContext = function (context) {
        this.curveSceneController = context;
    };
    return CurveConstraintSelectionState;
}());
exports.CurveConstraintSelectionState = CurveConstraintSelectionState;
var HandleConstraintAtPoint1Point2NoConstraintState = /** @class */ (function (_super) {
    __extends(HandleConstraintAtPoint1Point2NoConstraintState, _super);
    function HandleConstraintAtPoint1Point2NoConstraintState(context) {
        var _this = _super.call(this, context) || this;
        var crvConstraintAtExtremitiesStgy = new CurveConstraintStrategy_1.CurveConstraintNoConstraint(_this.shapeNavigableCurve.curveConstraints);
        _this.curveConstraints.setConstraint(crvConstraintAtExtremitiesStgy);
        _this.shapeNavigableCurve.changeCurveConstraintStrategy(crvConstraintAtExtremitiesStgy);
        return _this;
    }
    HandleConstraintAtPoint1Point2NoConstraintState.prototype.handleCurveConstraintAtPoint1 = function (selectedPoint) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint1', ' call to HandleConstraintAtPoint1ConstraintPoint2NoConstraintState');
        warning.logMessageToConsole();
        if (this.shapeNavigableCurve.clampedPoints[0] !== ShapeNavigableCurve_1.NO_CONSTRAINT && this.shapeNavigableCurve.clampedPoints[1] !== ShapeNavigableCurve_1.NO_CONSTRAINT) {
            var warning_1 = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint1', ' inconsistent configuration of clamped points !');
            warning_1.logMessageToConsole();
        }
        else {
            this.shapeNavigableCurve.clampedPoints[0] = selectedPoint;
            this.curveSceneController.clampedControlPointView.updateSelectedPoints(selectedPoint);
        }
        this.curveSceneController.curveConstraintTransitionTo(new HandleConstraintAtPoint1ConstraintPoint2NoConstraintState(this.curveSceneController));
    };
    HandleConstraintAtPoint1Point2NoConstraintState.prototype.handleCurveConstraintAtPoint2 = function (selectedPoint) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint2', ' call to HandleConstraintAtPoint1NoConstraintPoint2ConstraintState');
        warning.logMessageToConsole();
        if (this.shapeNavigableCurve.clampedPoints[0] !== ShapeNavigableCurve_1.NO_CONSTRAINT && this.shapeNavigableCurve.clampedPoints[1] !== ShapeNavigableCurve_1.NO_CONSTRAINT) {
            var warning_2 = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint2', ' inconsistent configuration of clamped points !');
            warning_2.logMessageToConsole();
        }
        else {
            this.shapeNavigableCurve.clampedPoints[1] = selectedPoint;
            this.curveSceneController.clampedControlPointView.updateSelectedPoints(selectedPoint);
        }
        this.curveSceneController.curveConstraintTransitionTo(new HandleConstraintAtPoint1NoConstraintPoint2ConstraintState(this.curveSceneController));
    };
    return HandleConstraintAtPoint1Point2NoConstraintState;
}(CurveConstraintSelectionState));
exports.HandleConstraintAtPoint1Point2NoConstraintState = HandleConstraintAtPoint1Point2NoConstraintState;
var HandleConstraintAtPoint1ConstraintPoint2NoConstraintState = /** @class */ (function (_super) {
    __extends(HandleConstraintAtPoint1ConstraintPoint2NoConstraintState, _super);
    function HandleConstraintAtPoint1ConstraintPoint2NoConstraintState(context) {
        var _this = _super.call(this, context) || this;
        var crvConstraintAtExtremitiesStgy = new CurveConstraintStrategy_1.CurveConstraintClampedFirstControlPoint(_this.shapeNavigableCurve.curveConstraints);
        _this.curveConstraints.setConstraint(crvConstraintAtExtremitiesStgy);
        _this.shapeNavigableCurve.changeCurveConstraintStrategy(crvConstraintAtExtremitiesStgy);
        return _this;
    }
    HandleConstraintAtPoint1ConstraintPoint2NoConstraintState.prototype.handleCurveConstraintAtPoint1 = function (selectedPoint) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint1', ' call to HandleConstraintAtPoint1Point2NoConstraintState');
        warning.logMessageToConsole();
        var indexClampedPoint = this.shapeNavigableCurve.clampedPoints.findIndex(function (element) { return element == selectedPoint; });
        if (this.shapeNavigableCurve.clampedPoints[0] === ShapeNavigableCurve_1.NO_CONSTRAINT || this.shapeNavigableCurve.clampedPoints[1] !== ShapeNavigableCurve_1.NO_CONSTRAINT) {
            var warning_3 = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint1', ' inconsistent configuration of clamped points !');
            warning_3.logMessageToConsole();
        }
        else if (indexClampedPoint === -1) {
            var warning_4 = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint1', ' clamped point selection is incorrect !');
            warning_4.logMessageToConsole();
        }
        else {
            this.shapeNavigableCurve.clampedPoints[0] = ShapeNavigableCurve_1.NO_CONSTRAINT;
            this.curveSceneController.clampedControlPointView.updateSelectedPoints(selectedPoint);
        }
        this.curveSceneController.curveConstraintTransitionTo(new HandleConstraintAtPoint1Point2NoConstraintState(this.curveSceneController));
    };
    HandleConstraintAtPoint1ConstraintPoint2NoConstraintState.prototype.handleCurveConstraintAtPoint2 = function (selectedPoint) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint2', ' call to HandleConstraintAtPoint1Point2ConstraintState');
        warning.logMessageToConsole();
        if (this.shapeNavigableCurve.clampedPoints[0] === ShapeNavigableCurve_1.NO_CONSTRAINT || this.shapeNavigableCurve.clampedPoints[1] !== ShapeNavigableCurve_1.NO_CONSTRAINT) {
            var warning_5 = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint2', ' inconsistent configuration of clamped points !');
            warning_5.logMessageToConsole();
        }
        else {
            this.shapeNavigableCurve.clampedPoints[1] = selectedPoint;
            this.curveSceneController.clampedControlPointView.updateSelectedPoints(selectedPoint);
        }
        this.curveSceneController.curveConstraintTransitionTo(new HandleConstraintAtPoint1Point2ConstraintState(this.curveSceneController));
    };
    return HandleConstraintAtPoint1ConstraintPoint2NoConstraintState;
}(CurveConstraintSelectionState));
exports.HandleConstraintAtPoint1ConstraintPoint2NoConstraintState = HandleConstraintAtPoint1ConstraintPoint2NoConstraintState;
var HandleConstraintAtPoint1NoConstraintPoint2ConstraintState = /** @class */ (function (_super) {
    __extends(HandleConstraintAtPoint1NoConstraintPoint2ConstraintState, _super);
    function HandleConstraintAtPoint1NoConstraintPoint2ConstraintState(context) {
        var _this = _super.call(this, context) || this;
        var crvConstraintAtExtremitiesStgy = new CurveConstraintStrategy_1.CurveConstraintClampedLastControlPoint(_this.shapeNavigableCurve.curveConstraints);
        _this.curveConstraints.setConstraint(crvConstraintAtExtremitiesStgy);
        _this.shapeNavigableCurve.changeCurveConstraintStrategy(crvConstraintAtExtremitiesStgy);
        return _this;
    }
    HandleConstraintAtPoint1NoConstraintPoint2ConstraintState.prototype.handleCurveConstraintAtPoint1 = function (selectedPoint) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint1', ' call to HandleConstraintAtPoint1Point2ConstraintState');
        warning.logMessageToConsole();
        if (this.shapeNavigableCurve.clampedPoints[0] !== ShapeNavigableCurve_1.NO_CONSTRAINT || this.shapeNavigableCurve.clampedPoints[1] === ShapeNavigableCurve_1.NO_CONSTRAINT) {
            var warning_6 = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint1', ' inconsistent configuration of clamped points !');
            warning_6.logMessageToConsole();
        }
        else {
            this.shapeNavigableCurve.clampedPoints[0] = selectedPoint;
            this.curveSceneController.clampedControlPointView.updateSelectedPoints(selectedPoint);
        }
        this.curveSceneController.curveConstraintTransitionTo(new HandleConstraintAtPoint1Point2ConstraintState(this.curveSceneController));
    };
    HandleConstraintAtPoint1NoConstraintPoint2ConstraintState.prototype.handleCurveConstraintAtPoint2 = function (selectedPoint) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint2', ' call to HandleConstraintAtPoint1Point2NoConstraintState');
        warning.logMessageToConsole();
        var indexClampedPoint = this.shapeNavigableCurve.clampedPoints.findIndex(function (element) { return element == selectedPoint; });
        if (this.shapeNavigableCurve.clampedPoints[0] !== ShapeNavigableCurve_1.NO_CONSTRAINT || this.shapeNavigableCurve.clampedPoints[1] === ShapeNavigableCurve_1.NO_CONSTRAINT) {
            var warning_7 = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint2', ' inconsistent configuration of clamped points !');
            warning_7.logMessageToConsole();
        }
        else if (indexClampedPoint === -1) {
            var warning_8 = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint2', ' clamped point selection is incorrect !');
            warning_8.logMessageToConsole();
        }
        else {
            this.shapeNavigableCurve.clampedPoints[1] = ShapeNavigableCurve_1.NO_CONSTRAINT;
            this.curveSceneController.clampedControlPointView.updateSelectedPoints(selectedPoint);
        }
        this.curveSceneController.curveConstraintTransitionTo(new HandleConstraintAtPoint1Point2NoConstraintState(this.curveSceneController));
    };
    return HandleConstraintAtPoint1NoConstraintPoint2ConstraintState;
}(CurveConstraintSelectionState));
exports.HandleConstraintAtPoint1NoConstraintPoint2ConstraintState = HandleConstraintAtPoint1NoConstraintPoint2ConstraintState;
var HandleConstraintAtPoint1Point2ConstraintState = /** @class */ (function (_super) {
    __extends(HandleConstraintAtPoint1Point2ConstraintState, _super);
    function HandleConstraintAtPoint1Point2ConstraintState(context) {
        var _this = _super.call(this, context) || this;
        var crvConstraintAtExtremitiesStgy = new CurveConstraintStrategy_1.CurveConstraintClampedFirstAndLastControlPoint(_this.shapeNavigableCurve.curveConstraints);
        _this.curveConstraints.setConstraint(crvConstraintAtExtremitiesStgy);
        _this.shapeNavigableCurve.changeCurveConstraintStrategy(crvConstraintAtExtremitiesStgy);
        return _this;
    }
    HandleConstraintAtPoint1Point2ConstraintState.prototype.handleCurveConstraintAtPoint1 = function (selectedPoint) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint1', ' call to HandleConstraintAtPoint1NoConstraintPoint2ConstraintState');
        warning.logMessageToConsole();
        var indexClampedPoint = this.shapeNavigableCurve.clampedPoints.findIndex(function (element) { return element == selectedPoint; });
        if (this.shapeNavigableCurve.clampedPoints[0] === ShapeNavigableCurve_1.NO_CONSTRAINT || this.shapeNavigableCurve.clampedPoints[1] === ShapeNavigableCurve_1.NO_CONSTRAINT) {
            var warning_9 = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint1', ' inconsistent configuration of clamped points !');
            warning_9.logMessageToConsole();
        }
        else if (indexClampedPoint === -1) {
            var warning_10 = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint1', ' clamped point selection is incorrect !');
            warning_10.logMessageToConsole();
        }
        else {
            this.shapeNavigableCurve.clampedPoints[0] = ShapeNavigableCurve_1.NO_CONSTRAINT;
            this.curveSceneController.clampedControlPointView.updateSelectedPoints(selectedPoint);
        }
        this.curveSceneController.curveConstraintTransitionTo(new HandleConstraintAtPoint1NoConstraintPoint2ConstraintState(this.curveSceneController));
    };
    HandleConstraintAtPoint1Point2ConstraintState.prototype.handleCurveConstraintAtPoint2 = function (selectedPoint) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint2', ' call to HandleConstraintAtPoint1ConstraintPoint2NoConstraintState');
        warning.logMessageToConsole();
        var indexClampedPoint = this.shapeNavigableCurve.clampedPoints.findIndex(function (element) { return element == selectedPoint; });
        if (this.shapeNavigableCurve.clampedPoints[0] === ShapeNavigableCurve_1.NO_CONSTRAINT || this.shapeNavigableCurve.clampedPoints[1] === ShapeNavigableCurve_1.NO_CONSTRAINT) {
            var warning_11 = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint2', ' inconsistent configuration of clamped points !');
            warning_11.logMessageToConsole();
        }
        else if (indexClampedPoint === -1) {
            var warning_12 = new ErrorLoging_1.WarningLog(this.constructor.name, 'handleCurveConstraintAtPoint2', ' clamped point selection is incorrect !');
            warning_12.logMessageToConsole();
        }
        else {
            this.shapeNavigableCurve.clampedPoints[1] = ShapeNavigableCurve_1.NO_CONSTRAINT;
            this.curveSceneController.clampedControlPointView.updateSelectedPoints(selectedPoint);
        }
        this.curveSceneController.curveConstraintTransitionTo(new HandleConstraintAtPoint1ConstraintPoint2NoConstraintState(this.curveSceneController));
    };
    return HandleConstraintAtPoint1Point2ConstraintState;
}(CurveConstraintSelectionState));
exports.HandleConstraintAtPoint1Point2ConstraintState = HandleConstraintAtPoint1Point2ConstraintState;


/***/ }),

/***/ "./src/controllers/CurveControlState.ts":
/*!**********************************************!*\
  !*** ./src/controllers/CurveControlState.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HandleNoDiffEventSlidingState = exports.HandleInflectionsAndCurvatureExtremaSlidingState = exports.HandleCurvatureExtremaSlidingState = exports.HandleInflectionsSlidingState = exports.HandleNoDiffEventNoSlidingState = exports.HandleInflectionsAndCurvatureExtremaNoSlidingState = exports.HandleCurvatureExtremaNoSlidingState = exports.HandleInflectionsNoSlidingState = exports.CurveControlState = void 0;
var ClosedCurveDifferentialEventsExtractor_1 = __webpack_require__(/*! ../curveShapeSpaceAnalysis/ClosedCurveDifferentialEventsExtractor */ "./src/curveShapeSpaceAnalysis/ClosedCurveDifferentialEventsExtractor.ts");
var ClosedCurveDifferentialEventsExtractorWithoutSequence_1 = __webpack_require__(/*! ../curveShapeSpaceAnalysis/ClosedCurveDifferentialEventsExtractorWithoutSequence */ "./src/curveShapeSpaceAnalysis/ClosedCurveDifferentialEventsExtractorWithoutSequence.ts");
var OpenCurveDifferentialEventsExtractor_1 = __webpack_require__(/*! ../curveShapeSpaceAnalysis/OpenCurveDifferentialEventsExtractor */ "./src/curveShapeSpaceAnalysis/OpenCurveDifferentialEventsExtractor.ts");
var OpenCurveDifferentialEventsExtractorWithoutSequence_1 = __webpack_require__(/*! ../curveShapeSpaceAnalysis/OpenCurveDifferentialEventsExtractorWithoutSequence */ "./src/curveShapeSpaceAnalysis/OpenCurveDifferentialEventsExtractorWithoutSequence.ts");
var NavigationCurveModel_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/NavigationCurveModel */ "./src/curveShapeSpaceNavigation/NavigationCurveModel.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ClosedCurveModel_1 = __webpack_require__(/*! ../newModels/ClosedCurveModel */ "./src/newModels/ClosedCurveModel.ts");
var CurveModel_1 = __webpack_require__(/*! ../newModels/CurveModel */ "./src/newModels/CurveModel.ts");
var CurveShapeMonitoringStrategy_1 = __webpack_require__(/*! ./CurveShapeMonitoringStrategy */ "./src/controllers/CurveShapeMonitoringStrategy.ts");
var CurveControlState = /** @class */ (function () {
    function CurveControlState(curveShapeSpaceNavigator) {
        this.curveShapeSpaceNavigator = curveShapeSpaceNavigator;
        this.shapeSpaceDiffEventsStructure = this.curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure;
        this.shapeNavigableCurve = this.curveShapeSpaceNavigator.shapeNavigableCurve;
        this._curveControlParamChange = true;
    }
    Object.defineProperty(CurveControlState.prototype, "curveControlParamChange", {
        get: function () {
            return this._curveControlParamChange;
        },
        set: function (curveControlParamChange) {
            this._curveControlParamChange = curveControlParamChange;
        },
        enumerable: false,
        configurable: true
    });
    return CurveControlState;
}());
exports.CurveControlState = CurveControlState;
var HandleInflectionsNoSlidingState = /** @class */ (function (_super) {
    __extends(HandleInflectionsNoSlidingState, _super);
    function HandleInflectionsNoSlidingState(curveShapeSpaceNavigator) {
        var _this = _super.call(this, curveShapeSpaceNavigator) || this;
        _this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer = true;
        _this.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema = false;
        _this.shapeSpaceDiffEventsStructure.activeControlInflections = true;
        _this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents = false;
        var curveToAnalyze = _this.shapeNavigableCurve.curveCategory.curveModel;
        if (curveToAnalyze instanceof CurveModel_1.CurveModel) {
            _this.shapeNavigableCurve.curveCategory.curveModel.removeObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
            _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents = new OpenCurveDifferentialEventsExtractor_1.OpenCurveDifferentialEventsExtractor(curveToAnalyze.spline);
            _this.shapeNavigableCurve.curveCategory.curveModel.registerObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
        }
        else if (curveToAnalyze instanceof ClosedCurveModel_1.ClosedCurveModel) {
            _this.shapeNavigableCurve.curveCategory.curveModel.removeObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
            _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents = new ClosedCurveDifferentialEventsExtractor_1.ClosedCurveDifferentialEventsExtractor(curveToAnalyze.spline);
            _this.shapeNavigableCurve.curveCategory.curveModel.registerObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "inconsistent object type. Cannot configure shape space.");
            error.logMessageToConsole();
        }
        _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEventsLocations = _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents.crvDiffEventsLocations;
        _this.monitorCurveShape();
        return _this;
    }
    HandleInflectionsNoSlidingState.prototype.handleInflections = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleNoDiffEventNoSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleInflectionsNoSlidingState.prototype.handleCurvatureExtrema = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleInflectionsAndCurvatureExtremaNoSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleInflectionsNoSlidingState.prototype.handleSliding = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleInflectionsSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleInflectionsNoSlidingState.prototype.monitorCurveShape = function () {
        this.curveShapeSpaceNavigator.curveControlState = this;
        this.curveShapeSpaceNavigator.navigationCurveModel.curveControlState = this;
        if (this.curveShapeSpaceNavigator.navigationCurveModel instanceof NavigationCurveModel_1.OpenCurveShapeSpaceNavigator) {
            this.curveShapeSpaceNavigator.navigationCurveModel.changeCurveShapeMonitoring(new CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategyWithInflexionsNoSliding(this.curveShapeSpaceNavigator.navigationCurveModel));
        }
        else if (this.curveShapeSpaceNavigator.navigationCurveModel instanceof NavigationCurveModel_1.ClosedCurveShapeSpaceNavigator) {
            this.curveShapeSpaceNavigator.navigationCurveModel.changeCurveShapeMonitoring(new CurveShapeMonitoringStrategy_1.CCurveShapeMonitoringStrategyWithInflexionsNoSliding(this.curveShapeSpaceNavigator.navigationCurveModel));
        }
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "monitorCurveUsingDifferentialEvents", " activeNavigationWithOptimizer : " + this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer
            + " activeControlCurvatureExtrema: " + this.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema
            + " activeControlInflections: " + this.shapeSpaceDiffEventsStructure.activeControlInflections
            + " slidingDifferentialEvents: " + this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents);
        warning.logMessageToConsole();
    };
    return HandleInflectionsNoSlidingState;
}(CurveControlState));
exports.HandleInflectionsNoSlidingState = HandleInflectionsNoSlidingState;
var HandleCurvatureExtremaNoSlidingState = /** @class */ (function (_super) {
    __extends(HandleCurvatureExtremaNoSlidingState, _super);
    function HandleCurvatureExtremaNoSlidingState(curveShapeSpaceNavigator) {
        var _this = _super.call(this, curveShapeSpaceNavigator) || this;
        _this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer = true;
        _this.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema = true;
        _this.shapeSpaceDiffEventsStructure.activeControlInflections = false;
        _this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents = false;
        var curveToAnalyze = _this.shapeNavigableCurve.curveCategory.curveModel;
        if (curveToAnalyze instanceof CurveModel_1.CurveModel) {
            _this.shapeNavigableCurve.curveCategory.curveModel.removeObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
            _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents = new OpenCurveDifferentialEventsExtractor_1.OpenCurveDifferentialEventsExtractor(curveToAnalyze.spline);
            _this.shapeNavigableCurve.curveCategory.curveModel.registerObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
        }
        else if (curveToAnalyze instanceof ClosedCurveModel_1.ClosedCurveModel) {
            _this.shapeNavigableCurve.curveCategory.curveModel.removeObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
            _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents = new ClosedCurveDifferentialEventsExtractor_1.ClosedCurveDifferentialEventsExtractor(curveToAnalyze.spline);
            _this.shapeNavigableCurve.curveCategory.curveModel.registerObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "inconsistent object type. Cannot configure shape space.");
            error.logMessageToConsole();
        }
        _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEventsLocations = _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents.crvDiffEventsLocations;
        _this.monitorCurveShape();
        return _this;
    }
    HandleCurvatureExtremaNoSlidingState.prototype.handleInflections = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleInflectionsAndCurvatureExtremaNoSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleCurvatureExtremaNoSlidingState.prototype.handleCurvatureExtrema = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleNoDiffEventNoSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleCurvatureExtremaNoSlidingState.prototype.handleSliding = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleCurvatureExtremaSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleCurvatureExtremaNoSlidingState.prototype.monitorCurveShape = function () {
        this.curveShapeSpaceNavigator.curveControlState = this;
        this.curveShapeSpaceNavigator.navigationCurveModel.curveControlState = this;
        if (this.curveShapeSpaceNavigator.navigationCurveModel instanceof NavigationCurveModel_1.OpenCurveShapeSpaceNavigator) {
            this.curveShapeSpaceNavigator.navigationCurveModel.changeCurveShapeMonitoring(new CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding(this.curveShapeSpaceNavigator.navigationCurveModel));
        }
        else if (this.curveShapeSpaceNavigator.navigationCurveModel instanceof NavigationCurveModel_1.ClosedCurveShapeSpaceNavigator) {
            this.curveShapeSpaceNavigator.navigationCurveModel.changeCurveShapeMonitoring(new CurveShapeMonitoringStrategy_1.CCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding(this.curveShapeSpaceNavigator.navigationCurveModel));
        }
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "monitorCurveUsingDifferentialEvents", " activeNavigationWithOptimizer : " + this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer
            + " activeControlCurvatureExtrema: " + this.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema
            + " activeControlInflections: " + this.shapeSpaceDiffEventsStructure.activeControlInflections
            + " slidingDifferentialEvents: " + this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents);
        warning.logMessageToConsole();
    };
    return HandleCurvatureExtremaNoSlidingState;
}(CurveControlState));
exports.HandleCurvatureExtremaNoSlidingState = HandleCurvatureExtremaNoSlidingState;
var HandleInflectionsAndCurvatureExtremaNoSlidingState = /** @class */ (function (_super) {
    __extends(HandleInflectionsAndCurvatureExtremaNoSlidingState, _super);
    function HandleInflectionsAndCurvatureExtremaNoSlidingState(curveShapeSpaceNavigator) {
        var _this = _super.call(this, curveShapeSpaceNavigator) || this;
        _this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer = true;
        _this.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema = true;
        _this.shapeSpaceDiffEventsStructure.activeControlInflections = true;
        _this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents = false;
        var curveToAnalyze = _this.shapeNavigableCurve.curveCategory.curveModel;
        if (curveToAnalyze instanceof CurveModel_1.CurveModel) {
            _this.shapeNavigableCurve.curveCategory.curveModel.removeObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
            _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents = new OpenCurveDifferentialEventsExtractor_1.OpenCurveDifferentialEventsExtractor(curveToAnalyze.spline);
            _this.shapeNavigableCurve.curveCategory.curveModel.registerObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
        }
        else if (curveToAnalyze instanceof ClosedCurveModel_1.ClosedCurveModel) {
            _this.shapeNavigableCurve.curveCategory.curveModel.removeObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
            _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents = new ClosedCurveDifferentialEventsExtractor_1.ClosedCurveDifferentialEventsExtractor(curveToAnalyze.spline);
            _this.shapeNavigableCurve.curveCategory.curveModel.registerObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "inconsistent object type. Cannot configure shape space.");
            error.logMessageToConsole();
        }
        _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEventsLocations = _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents.crvDiffEventsLocations;
        _this.monitorCurveShape();
        return _this;
    }
    HandleInflectionsAndCurvatureExtremaNoSlidingState.prototype.handleInflections = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleCurvatureExtremaNoSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleInflectionsAndCurvatureExtremaNoSlidingState.prototype.handleCurvatureExtrema = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleInflectionsNoSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleInflectionsAndCurvatureExtremaNoSlidingState.prototype.handleSliding = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleInflectionsAndCurvatureExtremaSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleInflectionsAndCurvatureExtremaNoSlidingState.prototype.monitorCurveShape = function () {
        this.curveShapeSpaceNavigator.curveControlState = this;
        this.curveShapeSpaceNavigator.navigationCurveModel.curveControlState = this;
        if (this.curveShapeSpaceNavigator.navigationCurveModel instanceof NavigationCurveModel_1.OpenCurveShapeSpaceNavigator) {
            this.curveShapeSpaceNavigator.navigationCurveModel.changeCurveShapeMonitoring(new CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding(this.curveShapeSpaceNavigator.navigationCurveModel));
        }
        else if (this.curveShapeSpaceNavigator.navigationCurveModel instanceof NavigationCurveModel_1.ClosedCurveShapeSpaceNavigator) {
            this.curveShapeSpaceNavigator.navigationCurveModel.changeCurveShapeMonitoring(new CurveShapeMonitoringStrategy_1.CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding(this.curveShapeSpaceNavigator.navigationCurveModel));
        }
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "monitorCurveUsingDifferentialEvents", " activeNavigationWithOptimizer : " + this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer
            + " activeControlCurvatureExtrema: " + this.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema
            + " activeControlInflections: " + this.shapeSpaceDiffEventsStructure.activeControlInflections
            + " slidingDifferentialEvents: " + this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents);
        warning.logMessageToConsole();
    };
    return HandleInflectionsAndCurvatureExtremaNoSlidingState;
}(CurveControlState));
exports.HandleInflectionsAndCurvatureExtremaNoSlidingState = HandleInflectionsAndCurvatureExtremaNoSlidingState;
var HandleNoDiffEventNoSlidingState = /** @class */ (function (_super) {
    __extends(HandleNoDiffEventNoSlidingState, _super);
    function HandleNoDiffEventNoSlidingState(curveShapeSpaceNavigator) {
        var _this = _super.call(this, curveShapeSpaceNavigator) || this;
        _this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer = false;
        _this.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema = false;
        _this.shapeSpaceDiffEventsStructure.activeControlInflections = false;
        _this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents = false;
        var curveToAnalyze = _this.shapeNavigableCurve.curveCategory.curveModel;
        if (curveToAnalyze instanceof CurveModel_1.CurveModel) {
            if (_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents instanceof OpenCurveDifferentialEventsExtractorWithoutSequence_1.OpenCurveDifferentialEventsExtractorWithoutSequence) {
                // It is the initialization phase and this curve differential event extractor has been already set up when creating the OpenCurve
                var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, "constructor", "curve differential event extractor has been already set up. No new creation");
                warning.logMessageToConsole();
            }
            else {
                _this.shapeNavigableCurve.curveCategory.curveModel.removeObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
                _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents = new OpenCurveDifferentialEventsExtractorWithoutSequence_1.OpenCurveDifferentialEventsExtractorWithoutSequence(curveToAnalyze.spline);
                _this.shapeNavigableCurve.curveCategory.curveModel.registerObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
            }
        }
        else if (curveToAnalyze instanceof ClosedCurveModel_1.ClosedCurveModel) {
            _this.shapeNavigableCurve.curveCategory.curveModel.removeObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
            _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents = new ClosedCurveDifferentialEventsExtractorWithoutSequence_1.ClosedCurveDifferentialEventsExtractorWithoutSequence(curveToAnalyze.spline);
            _this.shapeNavigableCurve.curveCategory.curveModel.registerObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "inconsistent object type. Cannot configure shape space.");
            error.logMessageToConsole();
        }
        _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEventsLocations = _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents.crvDiffEventsLocations;
        _this.monitorCurveShape();
        return _this;
    }
    HandleNoDiffEventNoSlidingState.prototype.handleInflections = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleInflectionsNoSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleNoDiffEventNoSlidingState.prototype.handleCurvatureExtrema = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleCurvatureExtremaNoSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleNoDiffEventNoSlidingState.prototype.handleSliding = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleNoDiffEventSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleNoDiffEventNoSlidingState.prototype.monitorCurveShape = function () {
        this.curveShapeSpaceNavigator.curveControlState = this;
        this.curveShapeSpaceNavigator.navigationCurveModel.curveControlState = this;
        if (this.curveShapeSpaceNavigator.navigationCurveModel instanceof NavigationCurveModel_1.OpenCurveShapeSpaceNavigator) {
            this.curveShapeSpaceNavigator.navigationCurveModel.changeCurveShapeMonitoring(new CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategyWithNoDiffEventNoSliding(this.curveShapeSpaceNavigator.navigationCurveModel));
        }
        else if (this.curveShapeSpaceNavigator.navigationCurveModel instanceof NavigationCurveModel_1.ClosedCurveShapeSpaceNavigator) {
            this.curveShapeSpaceNavigator.navigationCurveModel.changeCurveShapeMonitoring(new CurveShapeMonitoringStrategy_1.CCurveShapeMonitoringStrategyWithNoDiffEventNoSliding(this.curveShapeSpaceNavigator.navigationCurveModel));
        }
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "monitorCurveUsingDifferentialEvents", " activeNavigationWithOptimizer : " + this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer
            + " activeControlCurvatureExtrema: " + this.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema
            + " activeControlInflections: " + this.shapeSpaceDiffEventsStructure.activeControlInflections
            + " slidingDifferentialEvents: " + this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents);
        warning.logMessageToConsole();
    };
    return HandleNoDiffEventNoSlidingState;
}(CurveControlState));
exports.HandleNoDiffEventNoSlidingState = HandleNoDiffEventNoSlidingState;
var HandleInflectionsSlidingState = /** @class */ (function (_super) {
    __extends(HandleInflectionsSlidingState, _super);
    function HandleInflectionsSlidingState(curveShapeSpaceNavigator) {
        var _this = _super.call(this, curveShapeSpaceNavigator) || this;
        _this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer = true;
        _this.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema = false;
        _this.shapeSpaceDiffEventsStructure.activeControlInflections = true;
        _this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents = true;
        var curveToAnalyze = _this.shapeNavigableCurve.curveCategory.curveModel;
        if (curveToAnalyze instanceof CurveModel_1.CurveModel) {
            _this.shapeNavigableCurve.curveCategory.curveModel.removeObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
            _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents = new OpenCurveDifferentialEventsExtractor_1.OpenCurveDifferentialEventsExtractor(curveToAnalyze.spline);
            _this.shapeNavigableCurve.curveCategory.curveModel.registerObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
        }
        else if (curveToAnalyze instanceof ClosedCurveModel_1.ClosedCurveModel) {
            _this.shapeNavigableCurve.curveCategory.curveModel.removeObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
            _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents = new ClosedCurveDifferentialEventsExtractor_1.ClosedCurveDifferentialEventsExtractor(curveToAnalyze.spline);
            _this.shapeNavigableCurve.curveCategory.curveModel.registerObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "inconsistent object type. Cannot configure shape space.");
            error.logMessageToConsole();
        }
        _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEventsLocations = _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents.crvDiffEventsLocations;
        _this.monitorCurveShape();
        return _this;
    }
    HandleInflectionsSlidingState.prototype.handleInflections = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleNoDiffEventSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleInflectionsSlidingState.prototype.handleCurvatureExtrema = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleInflectionsAndCurvatureExtremaSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleInflectionsSlidingState.prototype.handleSliding = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleInflectionsNoSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleInflectionsSlidingState.prototype.monitorCurveShape = function () {
        this.curveShapeSpaceNavigator.curveControlState = this;
        this.curveShapeSpaceNavigator.navigationCurveModel.curveControlState = this;
        if (this.curveShapeSpaceNavigator.navigationCurveModel instanceof NavigationCurveModel_1.OpenCurveShapeSpaceNavigator) {
            this.curveShapeSpaceNavigator.navigationCurveModel.changeCurveShapeMonitoring(new CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategyWithInflexionsSliding(this.curveShapeSpaceNavigator.navigationCurveModel));
        }
        else if (this.curveShapeSpaceNavigator.navigationCurveModel instanceof NavigationCurveModel_1.ClosedCurveShapeSpaceNavigator) {
            this.curveShapeSpaceNavigator.navigationCurveModel.changeCurveShapeMonitoring(new CurveShapeMonitoringStrategy_1.CCurveShapeMonitoringStrategyWithInflexionsSliding(this.curveShapeSpaceNavigator.navigationCurveModel));
        }
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "monitorCurveUsingDifferentialEvents", " activeNavigationWithOptimizer : " + this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer
            + " activeControlCurvatureExtrema: " + this.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema
            + " activeControlInflections: " + this.shapeSpaceDiffEventsStructure.activeControlInflections
            + " slidingDifferentialEvents: " + this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents);
        warning.logMessageToConsole();
    };
    return HandleInflectionsSlidingState;
}(CurveControlState));
exports.HandleInflectionsSlidingState = HandleInflectionsSlidingState;
var HandleCurvatureExtremaSlidingState = /** @class */ (function (_super) {
    __extends(HandleCurvatureExtremaSlidingState, _super);
    function HandleCurvatureExtremaSlidingState(curveShapeSpaceNavigator) {
        var _this = _super.call(this, curveShapeSpaceNavigator) || this;
        _this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer = true;
        _this.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema = true;
        _this.shapeSpaceDiffEventsStructure.activeControlInflections = false;
        _this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents = true;
        var curveToAnalyze = _this.shapeNavigableCurve.curveCategory.curveModel;
        if (curveToAnalyze instanceof CurveModel_1.CurveModel) {
            _this.shapeNavigableCurve.curveCategory.curveModel.removeObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
            _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents = new OpenCurveDifferentialEventsExtractor_1.OpenCurveDifferentialEventsExtractor(curveToAnalyze.spline);
            _this.shapeNavigableCurve.curveCategory.curveModel.registerObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
        }
        else if (curveToAnalyze instanceof ClosedCurveModel_1.ClosedCurveModel) {
            _this.shapeNavigableCurve.curveCategory.curveModel.removeObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
            _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents = new ClosedCurveDifferentialEventsExtractor_1.ClosedCurveDifferentialEventsExtractor(curveToAnalyze.spline);
            _this.shapeNavigableCurve.curveCategory.curveModel.registerObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "inconsistent object type. Cannot configure shape space.");
            error.logMessageToConsole();
        }
        _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEventsLocations = _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents.crvDiffEventsLocations;
        _this.monitorCurveShape();
        return _this;
    }
    HandleCurvatureExtremaSlidingState.prototype.handleInflections = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleInflectionsAndCurvatureExtremaSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleCurvatureExtremaSlidingState.prototype.handleCurvatureExtrema = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleNoDiffEventSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleCurvatureExtremaSlidingState.prototype.handleSliding = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleCurvatureExtremaNoSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleCurvatureExtremaSlidingState.prototype.monitorCurveShape = function () {
        this.curveShapeSpaceNavigator.curveControlState = this;
        this.curveShapeSpaceNavigator.navigationCurveModel.curveControlState = this;
        if (this.curveShapeSpaceNavigator.navigationCurveModel instanceof NavigationCurveModel_1.OpenCurveShapeSpaceNavigator) {
            this.curveShapeSpaceNavigator.navigationCurveModel.changeCurveShapeMonitoring(new CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategyWithCurvatureExtremaSliding(this.curveShapeSpaceNavigator.navigationCurveModel));
        }
        else if (this.curveShapeSpaceNavigator.navigationCurveModel instanceof NavigationCurveModel_1.ClosedCurveShapeSpaceNavigator) {
            this.curveShapeSpaceNavigator.navigationCurveModel.changeCurveShapeMonitoring(new CurveShapeMonitoringStrategy_1.CCurveShapeMonitoringStrategyWithCurvatureExtremaSliding(this.curveShapeSpaceNavigator.navigationCurveModel));
        }
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "monitorCurveUsingDifferentialEvents", " activeNavigationWithOptimizer : " + this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer
            + " activeControlCurvatureExtrema: " + this.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema
            + " activeControlInflections: " + this.shapeSpaceDiffEventsStructure.activeControlInflections
            + " slidingDifferentialEvents: " + this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents);
        warning.logMessageToConsole();
    };
    return HandleCurvatureExtremaSlidingState;
}(CurveControlState));
exports.HandleCurvatureExtremaSlidingState = HandleCurvatureExtremaSlidingState;
var HandleInflectionsAndCurvatureExtremaSlidingState = /** @class */ (function (_super) {
    __extends(HandleInflectionsAndCurvatureExtremaSlidingState, _super);
    function HandleInflectionsAndCurvatureExtremaSlidingState(curveShapeSpaceNavigator) {
        var _this = _super.call(this, curveShapeSpaceNavigator) || this;
        _this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer = true;
        _this.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema = true;
        _this.shapeSpaceDiffEventsStructure.activeControlInflections = true;
        _this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents = true;
        var curveToAnalyze = _this.shapeNavigableCurve.curveCategory.curveModel;
        if (curveToAnalyze instanceof CurveModel_1.CurveModel) {
            _this.shapeNavigableCurve.curveCategory.curveModel.removeObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
            _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents = new OpenCurveDifferentialEventsExtractor_1.OpenCurveDifferentialEventsExtractor(curveToAnalyze.spline);
            _this.shapeNavigableCurve.curveCategory.curveModel.registerObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
        }
        else if (curveToAnalyze instanceof ClosedCurveModel_1.ClosedCurveModel) {
            _this.shapeNavigableCurve.curveCategory.curveModel.removeObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
            _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents = new ClosedCurveDifferentialEventsExtractor_1.ClosedCurveDifferentialEventsExtractor(curveToAnalyze.spline);
            _this.shapeNavigableCurve.curveCategory.curveModel.registerObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "inconsistent object type. Cannot configure shape space.");
            error.logMessageToConsole();
        }
        _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEventsLocations = _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents.crvDiffEventsLocations;
        _this.monitorCurveShape();
        return _this;
    }
    HandleInflectionsAndCurvatureExtremaSlidingState.prototype.handleInflections = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleCurvatureExtremaSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleInflectionsAndCurvatureExtremaSlidingState.prototype.handleCurvatureExtrema = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleInflectionsSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleInflectionsAndCurvatureExtremaSlidingState.prototype.handleSliding = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleInflectionsAndCurvatureExtremaNoSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleInflectionsAndCurvatureExtremaSlidingState.prototype.monitorCurveShape = function () {
        this.curveShapeSpaceNavigator.curveControlState = this;
        this.curveShapeSpaceNavigator.navigationCurveModel.curveControlState = this;
        if (this.curveShapeSpaceNavigator.navigationCurveModel instanceof NavigationCurveModel_1.OpenCurveShapeSpaceNavigator) {
            this.curveShapeSpaceNavigator.navigationCurveModel.changeCurveShapeMonitoring(new CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding(this.curveShapeSpaceNavigator.navigationCurveModel));
        }
        else if (this.curveShapeSpaceNavigator.navigationCurveModel instanceof NavigationCurveModel_1.ClosedCurveShapeSpaceNavigator) {
            this.curveShapeSpaceNavigator.navigationCurveModel.changeCurveShapeMonitoring(new CurveShapeMonitoringStrategy_1.CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding(this.curveShapeSpaceNavigator.navigationCurveModel));
        }
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "monitorCurveUsingDifferentialEvents", " activeNavigationWithOptimizer : " + this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer
            + " activeControlCurvatureExtrema: " + this.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema
            + " activeControlInflections: " + this.shapeSpaceDiffEventsStructure.activeControlInflections
            + " slidingDifferentialEvents: " + this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents);
        warning.logMessageToConsole();
    };
    return HandleInflectionsAndCurvatureExtremaSlidingState;
}(CurveControlState));
exports.HandleInflectionsAndCurvatureExtremaSlidingState = HandleInflectionsAndCurvatureExtremaSlidingState;
var HandleNoDiffEventSlidingState = /** @class */ (function (_super) {
    __extends(HandleNoDiffEventSlidingState, _super);
    function HandleNoDiffEventSlidingState(curveShapeSpaceNavigator) {
        var _this = _super.call(this, curveShapeSpaceNavigator) || this;
        _this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer = false;
        _this.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema = false;
        _this.shapeSpaceDiffEventsStructure.activeControlInflections = false;
        // The sliding state cannot be active when control of inflections and curvature extrema are deactivated
        _this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents = false;
        var curveToAnalyze = _this.shapeNavigableCurve.curveCategory.curveModel;
        if (curveToAnalyze instanceof CurveModel_1.CurveModel) {
            _this.shapeNavigableCurve.curveCategory.curveModel.removeObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
            _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents = new OpenCurveDifferentialEventsExtractorWithoutSequence_1.OpenCurveDifferentialEventsExtractorWithoutSequence(curveToAnalyze.spline);
            _this.shapeNavigableCurve.curveCategory.curveModel.registerObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
        }
        else if (curveToAnalyze instanceof ClosedCurveModel_1.ClosedCurveModel) {
            _this.shapeNavigableCurve.curveCategory.curveModel.removeObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
            _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents = new ClosedCurveDifferentialEventsExtractorWithoutSequence_1.ClosedCurveDifferentialEventsExtractorWithoutSequence(curveToAnalyze.spline);
            _this.shapeNavigableCurve.curveCategory.curveModel.registerObserver(_this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents, "control points");
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "inconsistent object type. Cannot configure shape space.");
            error.logMessageToConsole();
        }
        _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEventsLocations = _this.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents.crvDiffEventsLocations;
        _this.monitorCurveShape();
        return _this;
    }
    HandleNoDiffEventSlidingState.prototype.handleInflections = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleInflectionsSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleNoDiffEventSlidingState.prototype.handleCurvatureExtrema = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleCurvatureExtremaSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleNoDiffEventSlidingState.prototype.handleSliding = function () {
        this.curveShapeSpaceNavigator.transitionTo(new HandleNoDiffEventNoSlidingState(this.curveShapeSpaceNavigator));
        if (this._curveControlParamChange) {
            this.shapeNavigableCurve.notifyObservers();
            this._curveControlParamChange = false;
        }
    };
    HandleNoDiffEventSlidingState.prototype.monitorCurveShape = function () {
        this.curveShapeSpaceNavigator.curveControlState = this;
        this.curveShapeSpaceNavigator.navigationCurveModel.curveControlState = this;
        if (this.curveShapeSpaceNavigator.navigationCurveModel instanceof NavigationCurveModel_1.OpenCurveShapeSpaceNavigator) {
            this.curveShapeSpaceNavigator.navigationCurveModel.changeCurveShapeMonitoring(new CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategyWithNoDiffEventSliding(this.curveShapeSpaceNavigator.navigationCurveModel));
        }
        else if (this.curveShapeSpaceNavigator.navigationCurveModel instanceof NavigationCurveModel_1.ClosedCurveShapeSpaceNavigator) {
            this.curveShapeSpaceNavigator.navigationCurveModel.changeCurveShapeMonitoring(new CurveShapeMonitoringStrategy_1.CCurveShapeMonitoringStrategyWithNoDiffEventSliding(this.curveShapeSpaceNavigator.navigationCurveModel));
        }
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "monitorCurveUsingDifferentialEvents", " activeNavigationWithOptimizer : " + this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer
            + " activeControlCurvatureExtrema: " + this.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema
            + " activeControlInflections: " + this.shapeSpaceDiffEventsStructure.activeControlInflections
            + " slidingDifferentialEvents: " + this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents);
        warning.logMessageToConsole();
    };
    return HandleNoDiffEventSlidingState;
}(CurveControlState));
exports.HandleNoDiffEventSlidingState = HandleNoDiffEventSlidingState;


/***/ }),

/***/ "./src/controllers/CurveSceneController.ts":
/*!*************************************************!*\
  !*** ./src/controllers/CurveSceneController.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurveSceneController = void 0;
var CurveModel_1 = __webpack_require__(/*! ../newModels/CurveModel */ "./src/newModels/CurveModel.ts");
var ControlPointsView_1 = __webpack_require__(/*! ../views/ControlPointsView */ "./src/views/ControlPointsView.ts");
var ControlPolygonView_1 = __webpack_require__(/*! ../views/ControlPolygonView */ "./src/views/ControlPolygonView.ts");
var CurveView_1 = __webpack_require__(/*! ../views/CurveView */ "./src/views/CurveView.ts");
var ClickButtonView_1 = __webpack_require__(/*! ../views/ClickButtonView */ "./src/views/ClickButtonView.ts");
var CurvatureExtremaView_1 = __webpack_require__(/*! ../views/CurvatureExtremaView */ "./src/views/CurvatureExtremaView.ts");
var InflectionsView_1 = __webpack_require__(/*! ../views/InflectionsView */ "./src/views/InflectionsView.ts");
var TransitionCurvatureExtremaView_1 = __webpack_require__(/*! ../views/TransitionCurvatureExtremaView */ "./src/views/TransitionCurvatureExtremaView.ts");
var CurveKnotsView_1 = __webpack_require__(/*! ../views/CurveKnotsView */ "./src/views/CurveKnotsView.ts");
var ClampedControlPointView_1 = __webpack_require__(/*! ../views/ClampedControlPointView */ "./src/views/ClampedControlPointView.ts");
var ShapeNavigableCurve_1 = __webpack_require__(/*! ../shapeNavigableCurve/ShapeNavigableCurve */ "./src/shapeNavigableCurve/ShapeNavigableCurve.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var CurveConstraintSelectionState_1 = __webpack_require__(/*! ./CurveConstraintSelectionState */ "./src/controllers/CurveConstraintSelectionState.ts");
var ClosedCurveModel_1 = __webpack_require__(/*! ../newModels/ClosedCurveModel */ "./src/newModels/ClosedCurveModel.ts");
var CurveModelObserver_1 = __webpack_require__(/*! ../models/CurveModelObserver */ "./src/models/CurveModelObserver.ts");
var HighlightedControlPolygonView_1 = __webpack_require__(/*! ../views/HighlightedControlPolygonView */ "./src/views/HighlightedControlPolygonView.ts");
var CurveSceneControllerInteractionStrategy_1 = __webpack_require__(/*! ./CurveSceneControllerInteractionStrategy */ "./src/controllers/CurveSceneControllerInteractionStrategy.ts");
var PhantomCurveView_1 = __webpack_require__(/*! ../views/PhantomCurveView */ "./src/views/PhantomCurveView.ts");
var SelectedSlipOutOfShapeSpaceCurvExtremView_1 = __webpack_require__(/*! ../views/SelectedSlipOutOfShapeSpaceCurvExtremView */ "./src/views/SelectedSlipOutOfShapeSpaceCurvExtremView.ts");
var SelectedSlipOutOfShapeSpaceInflectionView_1 = __webpack_require__(/*! ../views/SelectedSlipOutOfShapeSpaceInflectionView */ "./src/views/SelectedSlipOutOfShapeSpaceInflectionView.ts");
var SelectedEnteringShapeSpaceCurvExtremView_1 = __webpack_require__(/*! ../views/SelectedEnteringShapeSpaceCurvExtremView */ "./src/views/SelectedEnteringShapeSpaceCurvExtremView.ts");
var SelectedEnteringShapeSpaceInflectionView_1 = __webpack_require__(/*! ../views/SelectedEnteringShapeSpaceInflectionView */ "./src/views/SelectedEnteringShapeSpaceInflectionView.ts");
// Margin expressed in pixel size
var MARGIN_WINDOW_CANVAS = 150;
// Window background color setting
var BACKGROUND_RED_COLOR = 0.3;
var BACKGROUND_GREEN_COLOR = 0.3;
var BACKGROUND_BLUE_COLOR = 0.3;
var BACKGROUND_ALPHA = 1.0;
var CurveSceneController = /** @class */ (function () {
    function CurveSceneController(canvas, gl, curveModelDefinitionEventListener, shapeSpaceNavigationEventListener) {
        this.canvas = canvas;
        this.gl = gl;
        this._selectedControlPoint = null;
        this._shapeNavigableCurve = curveModelDefinitionEventListener.shapeNavigableCurve;
        this.curveModel = this._shapeNavigableCurve.curveCategory.curveModel;
        this._controlOfKnotInsertion = false;
        this._curveShapeSpaceNavigator = shapeSpaceNavigationEventListener.curveShapeSpaceNavigator;
        this.curveModelDifferentialEventsExtractor = this._shapeNavigableCurve.curveCategory.curveModelDifferentialEvents;
        this._curveDiffEventsLocations = this.curveModelDifferentialEventsExtractor.crvDiffEventsLocations;
        this._controlPointsView = new ControlPointsView_1.ControlPointsView(this.gl, this.curveModel.spline);
        this.controlPolygonView = new ControlPolygonView_1.ControlPolygonView(this.gl, this.curveModel.spline);
        this.curveView = new CurveView_1.CurveView(this.gl, this.curveModel.spline);
        this._insertKnotButtonView = new ClickButtonView_1.ClickButtonView(this.gl);
        this.curvatureExtremaView = new CurvatureExtremaView_1.CurvatureExtremaView(this.gl, this._curveDiffEventsLocations);
        this.transitionCurvatureExtremaView = new TransitionCurvatureExtremaView_1.TransitionCurvatureExtremaView(this.gl, this._curveDiffEventsLocations);
        this.inflectionsView = new InflectionsView_1.InflectionsView(this.gl, this._curveDiffEventsLocations);
        this.curveKnotsView = new CurveKnotsView_1.CurveKnotsView(this.gl, this.curveModel.spline);
        this._clampedControlPointView = new ClampedControlPointView_1.ClampedControlPointView(this.gl, this.curveModel.spline, this._shapeNavigableCurve.clampedPoints);
        var selectedEvent = [];
        this._selectedSlipOutCurvatureExtremaView = new SelectedSlipOutOfShapeSpaceCurvExtremView_1.SelectedSlipOutOfShapeSpaceCurvExtremaView(this.gl, this.curveModel.spline, selectedEvent);
        this._selectedEnteringCurvatureExtremaView = new SelectedEnteringShapeSpaceCurvExtremView_1.SelectedEnteringShapeSpaceCurvExtremaView(this.gl, this.curveModel.spline, selectedEvent);
        this._selectedSlipOutInflectionsView = new SelectedSlipOutOfShapeSpaceInflectionView_1.SelectedSlipOutOfShapeSpaceInflectionView(this.gl, this.curveModel.spline, selectedEvent);
        this._selectedEnteringInflectionsView = new SelectedEnteringShapeSpaceInflectionView_1.SelectedEnteringShapeSpaceInflectionView(this.gl, this.curveModel.spline, selectedEvent);
        this._highlightedControlPolygonView = new HighlightedControlPolygonView_1.HighlightedControlPolygonView(this.curveModel.spline, this.gl);
        this._phantomCurveView = new PhantomCurveView_1.PhantomCurveView(this.gl, this.curveModel.spline);
        this._sceneInteractionStrategy = new CurveSceneControllerInteractionStrategy_1.CurveSceneControllerNoShapeSpaceConstraintsCPSelection(this);
        // JCL temporary modif
        this._curveShapeSpaceNavigator.curveSceneController = this;
        this.registerCurveObservers();
        this._shapeNavigableCurve.registerObserver(new CurveModelObserver_1.CurveModelObserverInCurveSceneController(this));
        this._selectedSlipOutCurvatureExtremaView.update(this.curveModel.spline);
        this._selectedEnteringCurvatureExtremaView.update(this.curveModel.spline);
        this._selectedSlipOutInflectionsView.update(this.curveModel.spline);
        this._selectedEnteringInflectionsView.update(this.curveModel.spline);
        this._navigationState = this._curveShapeSpaceNavigator.navigationState;
        this._navigationState.setNavigationWithoutShapeSpaceMonitoring();
        this._curveConstraintSelectionState = new CurveConstraintSelectionState_1.HandleConstraintAtPoint1Point2NoConstraintState(this);
        console.log("end constructor curveSceneController");
    }
    Object.defineProperty(CurveSceneController.prototype, "clampedControlPointView", {
        get: function () {
            return this._clampedControlPointView;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveSceneController.prototype, "insertKnotButtonView", {
        get: function () {
            return this._insertKnotButtonView;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveSceneController.prototype, "controlPointsView", {
        get: function () {
            return this._controlPointsView;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveSceneController.prototype, "highlightedControlPolygonView", {
        get: function () {
            return this._highlightedControlPolygonView;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveSceneController.prototype, "phantomCurveView", {
        get: function () {
            return this._phantomCurveView;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveSceneController.prototype, "curveConstraintSelectionState", {
        get: function () {
            return this._curveConstraintSelectionState;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveSceneController.prototype, "controlOfKnotInsertion", {
        get: function () {
            return this._controlOfKnotInsertion;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveSceneController.prototype, "selectedControlPoint", {
        get: function () {
            return this._selectedControlPoint;
        },
        set: function (selectedCPIndex) {
            this._selectedControlPoint = selectedCPIndex;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveSceneController.prototype, "sceneInteraction", {
        get: function () {
            return this._sceneInteractionStrategy;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveSceneController.prototype, "selectedSlipOutInflectionsView", {
        get: function () {
            return this._selectedSlipOutInflectionsView;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveSceneController.prototype, "selectedEnteringInflectionsView", {
        get: function () {
            return this._selectedEnteringInflectionsView;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveSceneController.prototype, "selectedSlipOutCurvatureExtremaView", {
        get: function () {
            return this._selectedSlipOutCurvatureExtremaView;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveSceneController.prototype, "selectedEnteringCurvatureExtremaView", {
        get: function () {
            return this._selectedEnteringCurvatureExtremaView;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveSceneController.prototype, "navigationState", {
        get: function () {
            return this._navigationState;
        },
        set: function (navigationState) {
            this._navigationState = navigationState;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveSceneController.prototype, "shapeNavigableCurve", {
        get: function () {
            return this._shapeNavigableCurve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveSceneController.prototype, "curveShapeSpaceNavigator", {
        get: function () {
            return this._curveShapeSpaceNavigator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveSceneController.prototype, "curveDiffEventsLocations", {
        set: function (curveDiffEventsLocations) {
            this._curveDiffEventsLocations = curveDiffEventsLocations;
        },
        enumerable: false,
        configurable: true
    });
    CurveSceneController.prototype.initCurveSceneView = function () {
        this._controlPointsView = new ControlPointsView_1.ControlPointsView(this.gl, this.curveModel.spline);
        this.controlPolygonView = new ControlPolygonView_1.ControlPolygonView(this.gl, this.curveModel.spline);
        this._insertKnotButtonView = new ClickButtonView_1.ClickButtonView(this.gl);
        this.curveView = new CurveView_1.CurveView(this.gl, this.curveModel.spline);
        this.curveKnotsView = new CurveKnotsView_1.CurveKnotsView(this.gl, this.curveModel.spline);
        this.inflectionsView = new InflectionsView_1.InflectionsView(this.gl, this._curveDiffEventsLocations);
        this.curvatureExtremaView = new CurvatureExtremaView_1.CurvatureExtremaView(this.gl, this._curveDiffEventsLocations);
        this.transitionCurvatureExtremaView = new TransitionCurvatureExtremaView_1.TransitionCurvatureExtremaView(this.gl, this._curveDiffEventsLocations);
        this._clampedControlPointView = new ClampedControlPointView_1.ClampedControlPointView(this.gl, this.curveModel.spline, this._shapeNavigableCurve.clampedPoints);
        this.registerCurveObservers();
        this._selectedControlPoint = null;
    };
    CurveSceneController.prototype.registerCurveObservers = function () {
        var _this = this;
        this.curveModel.registerObserver(this._controlPointsView, "control points");
        this.curveModel.registerObserver(this.controlPolygonView, "control points");
        this.curveModel.registerObserver(this.curveView, "curve");
        this.curveModel.registerObserver(this.curveKnotsView, "control points");
        this.curveModel.registerObserver(this._clampedControlPointView, "control points");
        this.curveModel.registerObserver(this._selectedSlipOutCurvatureExtremaView, "control points");
        this.curveModel.registerObserver(this._selectedSlipOutInflectionsView, "control points");
        this.curveModel.registerObserver(this._selectedEnteringCurvatureExtremaView, "control points");
        this.curveModel.registerObserver(this._selectedEnteringInflectionsView, "control points");
        this.curveModelDifferentialEventsExtractor.registerObserver(this.curvatureExtremaView, "control points");
        this.curveModelDifferentialEventsExtractor.registerObserver(this.transitionCurvatureExtremaView, "control points");
        this.curveModelDifferentialEventsExtractor.registerObserver(this.inflectionsView, "control points");
        this.curveModelDifferentialEventsExtractor.observersCP.forEach(function (element) {
            element.update(_this._curveDiffEventsLocations);
        });
        if (this.curveModel instanceof CurveModel_1.CurveModel) {
            this.curveModel.observers.forEach(function (element) {
                if (_this.curveModel !== undefined) {
                    element.update(_this.curveModel.spline);
                }
                else {
                    var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "registerCurveObservers", "Unable to initialize a CurveSceneController");
                    error.logMessageToConsole();
                }
            });
        }
        else if (this.curveModel instanceof ClosedCurveModel_1.ClosedCurveModel) {
            this.curveModel.observers.forEach(function (element) {
                if (_this.curveModel !== undefined) {
                    element.update(_this.curveModel.spline);
                }
                else {
                    var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "registerCurveObservers", "Unable to initialize a CurveSceneController");
                    error.logMessageToConsole();
                }
            });
        }
        this.curveModel.checkObservers();
    };
    CurveSceneController.prototype.removeCurveObservers = function () {
        this.curveModel.removeObserver(this._controlPointsView, "control points");
        this.curveModel.removeObserver(this.controlPolygonView, "control points");
        this.curveModel.removeObserver(this.curveView, "curve");
        this.curveModel.removeObserver(this.curveKnotsView, "control points");
        this.curveModel.removeObserver(this._clampedControlPointView, "control points");
        this.curveModel.removeObserver(this._selectedSlipOutCurvatureExtremaView, "control points");
        this.curveModel.removeObserver(this._selectedSlipOutInflectionsView, "control points");
        this.curveModel.registerObserver(this._selectedEnteringCurvatureExtremaView, "control points");
        this.curveModel.registerObserver(this._selectedEnteringInflectionsView, "control points");
        this.curveModelDifferentialEventsExtractor.removeObserver(this.curvatureExtremaView, "control points");
        this.curveModelDifferentialEventsExtractor.removeObserver(this.transitionCurvatureExtremaView, "control points");
        this.curveModelDifferentialEventsExtractor.removeObserver(this.inflectionsView, "control points");
    };
    CurveSceneController.prototype.setupWindowBackground = function () {
        var size = Math.min(window.innerWidth, window.innerHeight) - MARGIN_WINDOW_CANVAS;
        this.canvas.width = size;
        this.canvas.height = size;
        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);
        this.gl.clearColor(BACKGROUND_RED_COLOR, BACKGROUND_GREEN_COLOR, BACKGROUND_BLUE_COLOR, BACKGROUND_ALPHA);
        this.gl.clear(this.gl.COLOR_BUFFER_BIT);
        this.gl.enable(this.gl.BLEND);
        this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);
    };
    CurveSceneController.prototype.renderFrame = function () {
        this.setupWindowBackground();
        this.curveView.renderFrame();
        this.curvatureExtremaView.renderFrame();
        this.transitionCurvatureExtremaView.renderFrame();
        this.inflectionsView.renderFrame();
        this.controlPolygonView.renderFrame();
        this.curveKnotsView.renderFrame();
        if (this._sceneInteractionStrategy instanceof CurveSceneControllerInteractionStrategy_1.CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveConstraintsUnsatisfied) {
            this._highlightedControlPolygonView.renderFrame();
            this._phantomCurveView.renderFrame();
        }
        else if (this._sceneInteractionStrategy instanceof CurveSceneControllerInteractionStrategy_1.CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary
            && this._sceneInteractionStrategy.displayPhantomEntities) {
            this._highlightedControlPolygonView.renderFrame();
            this._phantomCurveView.renderFrame();
        }
        this._controlPointsView.renderFrame();
        this._insertKnotButtonView.renderFrame();
        this._selectedSlipOutCurvatureExtremaView.renderFrame();
        this._selectedSlipOutInflectionsView.renderFrame();
        this._selectedEnteringCurvatureExtremaView.renderFrame();
        this._selectedEnteringInflectionsView.renderFrame();
        if (this._shapeNavigableCurve.controlOfCurveClamping && this._clampedControlPointView !== null) {
            this._clampedControlPointView.renderFrame();
        }
    };
    CurveSceneController.prototype.addCurveObserver = function (curveObserver) {
        if (this.curveModel !== undefined) {
            curveObserver.update(this.curveModel.spline);
            this.curveModel.registerObserver(curveObserver, "curve");
        }
        else
            throw new Error("Unable to attach a curve observer to the current curve. Undefined curve model");
    };
    CurveSceneController.prototype.removeCurveObserver = function (curveObserver) {
        if (this.curveModel !== undefined) {
            curveObserver.update(this.curveModel.spline);
            this.curveModel.removeObserver(curveObserver, "curve");
        }
        else
            throw new Error("Unable to detach a curve observer to the current curve. Undefined curve model");
    };
    CurveSceneController.prototype.curveConstraintTransitionTo = function (curveConstraintSelectionState) {
        this._curveConstraintSelectionState = curveConstraintSelectionState;
    };
    CurveSceneController.prototype.changeSceneInteraction = function (sceneInteraction) {
        this._sceneInteractionStrategy = sceneInteraction;
    };
    CurveSceneController.prototype.leftMouseDown_event = function (ndcX, ndcY) {
        this._sceneInteractionStrategy.processLeftMouseDownInteraction(ndcX, ndcY);
    };
    CurveSceneController.prototype.leftMouseDragged_event = function (ndcX, ndcY) {
        this._sceneInteractionStrategy.processLeftMouseDragInteraction(ndcX, ndcY);
    };
    CurveSceneController.prototype.leftMouseUp_event = function () {
        this._sceneInteractionStrategy.processLeftMouseUpInteraction();
    };
    CurveSceneController.prototype.shiftKeyDown = function () {
        this._sceneInteractionStrategy.processShiftKeyDownInteraction();
    };
    CurveSceneController.prototype.shiftKeyUp = function () {
        this._sceneInteractionStrategy.processShiftKeyUpInteraction();
    };
    CurveSceneController.prototype.dbleClick_event = function (ndcX, ndcY) {
        if (this.curveModel !== undefined) {
            if (this._shapeNavigableCurve.controlOfCurveClamping) {
                if (this._clampedControlPointView !== null) {
                    var selectedClampedControlPoint = this._clampedControlPointView.knotSelection(ndcX, ndcY);
                    console.log("dlble_click: id conrol pt = " + selectedClampedControlPoint);
                    if (selectedClampedControlPoint !== null) {
                        if ((this._shapeNavigableCurve.clampedPoints[0] === selectedClampedControlPoint || this._shapeNavigableCurve.clampedPoints[0] === ShapeNavigableCurve_1.NO_CONSTRAINT)
                            && this._shapeNavigableCurve.clampedPoints[1] !== selectedClampedControlPoint) {
                            this._curveConstraintSelectionState.handleCurveConstraintAtPoint1(selectedClampedControlPoint);
                        }
                        else if ((this._shapeNavigableCurve.clampedPoints[1] === selectedClampedControlPoint || this._shapeNavigableCurve.clampedPoints[1] === ShapeNavigableCurve_1.NO_CONSTRAINT)
                            && this._shapeNavigableCurve.clampedPoints[0] !== selectedClampedControlPoint) {
                            this._curveConstraintSelectionState.handleCurveConstraintAtPoint2(selectedClampedControlPoint);
                        }
                        this.curveModel.notifyObservers();
                        return true;
                    }
                    else
                        return true;
                }
                else
                    return true;
            }
            else
                return true;
        }
        else {
            throw new Error("Unable to process the selected point for clamping. Undefined curve model");
        }
    };
    return CurveSceneController;
}());
exports.CurveSceneController = CurveSceneController;


/***/ }),

/***/ "./src/controllers/CurveSceneControllerInteractionStrategy.ts":
/*!********************************************************************!*\
  !*** ./src/controllers/CurveSceneControllerInteractionStrategy.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingClosedCurve = exports.CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary = exports.CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurve = exports.CurveSceneControllerStrictlyInsideShapeSpaceCPSelection = exports.CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingClosedCurve = exports.CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveConstraintsUnsatisfied = exports.CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveEventsInsideInterval = exports.CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve = exports.CurveSceneControllerNestedSimplifiedShapeSpacesCPSelection = exports.CurveSceneControllerNoShapeSpaceConstraintsCPDragging = exports.CurveSceneControllerNoShapeSpaceConstraintsCPSelection = exports.CurveSceneControllerKnotInsertion = exports.CurveSceneControllerInteractionStrategy = void 0;
var OptProblemOpenBSplineR1toR2_1 = __webpack_require__(/*! ../bsplineOptimizationProblems/OptProblemOpenBSplineR1toR2 */ "./src/bsplineOptimizationProblems/OptProblemOpenBSplineR1toR2.ts");
var CurveConstraintStrategy_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/CurveConstraintStrategy */ "./src/curveShapeSpaceNavigation/CurveConstraintStrategy.ts");
var NavigationState_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/NavigationState */ "./src/curveShapeSpaceNavigation/NavigationState.ts");
var ShapeSpaceDiffEventsStructure_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/ShapeSpaceDiffEventsStructure */ "./src/curveShapeSpaceNavigation/ShapeSpaceDiffEventsStructure.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ClosedCurveModel_1 = __webpack_require__(/*! ../newModels/ClosedCurveModel */ "./src/newModels/ClosedCurveModel.ts");
var CurveModel_1 = __webpack_require__(/*! ../newModels/CurveModel */ "./src/newModels/CurveModel.ts");
var NeighboringEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/NeighboringEvents */ "./src/sequenceOfDifferentialEvents/NeighboringEvents.ts");
var CurveCategory_1 = __webpack_require__(/*! ../shapeNavigableCurve/CurveCategory */ "./src/shapeNavigableCurve/CurveCategory.ts");
var EventStateAtCurveExtremity_1 = __webpack_require__(/*! ../shapeNavigableCurve/EventStateAtCurveExtremity */ "./src/shapeNavigableCurve/EventStateAtCurveExtremity.ts");
var ShapeNavigableCurve_1 = __webpack_require__(/*! ../shapeNavigableCurve/ShapeNavigableCurve */ "./src/shapeNavigableCurve/ShapeNavigableCurve.ts");
var CurveSceneControllerInteractionStrategy = /** @class */ (function () {
    function CurveSceneControllerInteractionStrategy(curveSceneController) {
        this._curveSceneController = curveSceneController;
        this.shapeNavigableCurve = this._curveSceneController.shapeNavigableCurve;
        this.curveShapeSpaceNavigator = this._curveSceneController.curveShapeSpaceNavigator;
        this.selectedControlPoint = null;
    }
    Object.defineProperty(CurveSceneControllerInteractionStrategy.prototype, "curveSceneController", {
        get: function () {
            return this.curveSceneController;
        },
        enumerable: false,
        configurable: true
    });
    return CurveSceneControllerInteractionStrategy;
}());
exports.CurveSceneControllerInteractionStrategy = CurveSceneControllerInteractionStrategy;
// Remark: the interaction states hereunder are independent of the clamping process that can be applied
// to all configurations underneath
var CurveSceneControllerKnotInsertion = /** @class */ (function (_super) {
    __extends(CurveSceneControllerKnotInsertion, _super);
    function CurveSceneControllerKnotInsertion(curveSceneController) {
        var _this = _super.call(this, curveSceneController) || this;
        _this.selectedControlPoint = _this._curveSceneController.selectedControlPoint;
        _this.curveModel = _this.shapeNavigableCurve.curveCategory.curveModel;
        return _this;
    }
    CurveSceneControllerKnotInsertion.prototype.insertKnotIntoCurve = function (controlPointIndex) {
        var cp = controlPointIndex;
        if (this.curveModel instanceof CurveModel_1.CurveModel) {
            if (cp === 0) {
                cp += 1;
            }
            ;
            if (cp === this.curveModel.spline.controlPoints.length - 1) {
                cp -= 1;
            }
            ;
        }
        else if (this.curveModel instanceof ClosedCurveModel_1.ClosedCurveModel) {
        }
        var grevilleAbscissae = this.curveModel.spline.grevilleAbscissae();
        if (cp != null) {
            var spline = this.curveModel.spline;
            spline.insertKnot(grevilleAbscissae[cp], 1);
            this.curveModel.setSpline(spline);
            this.updateClampedPoints(grevilleAbscissae[cp]);
            this.curveModel.notifyObservers();
            // JCL this could be better handled with an update process of shapenavigableCurve observers ?
            this.curveShapeSpaceNavigator.navigationState.setCurrentCurve(this.curveModel.spline);
            this.curveShapeSpaceNavigator.navigationCurveModel.currentCurve = this.curveModel.spline.clone();
            if (this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy instanceof CurveConstraintStrategy_1.CurveConstraintClampedFirstAndLastControlPoint) {
                this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy.setCurrentCurve(this.curveModel.spline);
            }
            this.curveShapeSpaceNavigator.navigationCurveModel.resetCurveToOptimize();
        }
    };
    CurveSceneControllerKnotInsertion.prototype.updateClampedPoints = function (knotParametricLocation) {
        // update the clamped points indices of the shape navigable curve
        this.shapeNavigableCurve.updateClampedPointsAfterKnotInsertion(knotParametricLocation);
        // update the indices of reference points used for curve geometric constraints
        if (this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy instanceof CurveConstraintStrategy_1.CurveConstraintClampedFirstControlPoint) {
            this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy.referencePtIndex = this.shapeNavigableCurve.clampedPoints[0];
        }
        else if (this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy instanceof CurveConstraintStrategy_1.CurveConstraintClampedLastControlPoint) {
            this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy.referencePtIndex = this.shapeNavigableCurve.clampedPoints[1];
        }
        // update the graphic location of clamped points
        this._curveSceneController.clampedControlPointView.clearSelectedPoints();
        if (this.shapeNavigableCurve.clampedPoints[0] !== ShapeNavigableCurve_1.NO_CONSTRAINT)
            this._curveSceneController.clampedControlPointView.setSelectedKnot(this.shapeNavigableCurve.clampedPoints[0]);
        if (this.shapeNavigableCurve.clampedPoints[1] !== ShapeNavigableCurve_1.NO_CONSTRAINT)
            this._curveSceneController.clampedControlPointView.setSelectedKnot(this.shapeNavigableCurve.clampedPoints[1]);
    };
    CurveSceneControllerKnotInsertion.prototype.processLeftMouseDownInteraction = function (ndcX, ndcY) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processLeftMouseDownInteraction", "insert knot");
        warning.logMessageToConsole();
        this.selectedControlPoint = this._curveSceneController.controlPointsView.pointSelection(ndcX, ndcY);
        this.insertKnotIntoCurve(this.selectedControlPoint);
        this._curveSceneController.selectedControlPoint = null;
        this.selectedControlPoint = null;
        this._curveSceneController.controlPointsView.setSelected(this.selectedControlPoint);
        this._curveSceneController.renderFrame();
        if (this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationWithoutShapeSpaceMonitoring
            || this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.CCurveNavigationWithoutShapeSpaceMonitoring) {
            this._curveSceneController.changeSceneInteraction(new CurveSceneControllerNoShapeSpaceConstraintsCPSelection(this._curveSceneController));
        }
        else if (this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationThroughSimplerShapeSpaces
            || this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.CCurveNavigationThroughSimplerShapeSpaces) {
            this._curveSceneController.changeSceneInteraction(new CurveSceneControllerNestedSimplifiedShapeSpacesCPSelection(this._curveSceneController));
        }
        else if (this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationStrictlyInsideShapeSpace
            || this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.CCurveNavigationStrictlyInsideShapeSpace) {
            this._curveSceneController.changeSceneInteraction(new CurveSceneControllerStrictlyInsideShapeSpaceCPSelection(this._curveSceneController));
        }
    };
    CurveSceneControllerKnotInsertion.prototype.processLeftMouseDragInteraction = function (ndcX, ndcY) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processLeftMouseDragInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    CurveSceneControllerKnotInsertion.prototype.processLeftMouseUpInteraction = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processLeftMouseUpInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    CurveSceneControllerKnotInsertion.prototype.processShiftKeyDownInteraction = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processshiftKeyDownInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    CurveSceneControllerKnotInsertion.prototype.processShiftKeyUpInteraction = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processshiftKeyUpInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    return CurveSceneControllerKnotInsertion;
}(CurveSceneControllerInteractionStrategy));
exports.CurveSceneControllerKnotInsertion = CurveSceneControllerKnotInsertion;
var CurveSceneControllerNoShapeSpaceConstraintsCPSelection = /** @class */ (function (_super) {
    __extends(CurveSceneControllerNoShapeSpaceConstraintsCPSelection, _super);
    function CurveSceneControllerNoShapeSpaceConstraintsCPSelection(curveSceneController) {
        var _this = _super.call(this, curveSceneController) || this;
        _this.selectedControlPoint = _this._curveSceneController.selectedControlPoint;
        _this.insertKnotButtonView = _this._curveSceneController.insertKnotButtonView;
        _this.curveModel = _this.shapeNavigableCurve.curveCategory.curveModel;
        _this.curveModel.notifyObservers();
        return _this;
    }
    CurveSceneControllerNoShapeSpaceConstraintsCPSelection.prototype.processLeftMouseDownInteraction = function (ndcX, ndcY) {
        if (this.insertKnotButtonView.buttonSelection(ndcX, ndcY)) {
            console.log("insertButton");
            this._curveSceneController.changeSceneInteraction(new CurveSceneControllerKnotInsertion(this._curveSceneController));
        }
        else {
            this.selectedControlPoint = this._curveSceneController.controlPointsView.pointSelection(ndcX, ndcY);
            console.log(" select CP id = ", this.selectedControlPoint);
            this._curveSceneController.controlPointsView.setSelected(this.selectedControlPoint);
            this._curveSceneController.renderFrame();
            if (this.selectedControlPoint !== null) {
                this._curveSceneController.selectedControlPoint = this.selectedControlPoint;
                this._curveSceneController.changeSceneInteraction(new CurveSceneControllerNoShapeSpaceConstraintsCPDragging(this._curveSceneController));
            }
        }
    };
    CurveSceneControllerNoShapeSpaceConstraintsCPSelection.prototype.processLeftMouseDragInteraction = function (ndcX, ndcY) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processLeftMouseDragInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    CurveSceneControllerNoShapeSpaceConstraintsCPSelection.prototype.processLeftMouseUpInteraction = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processLeftMouseUpInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    CurveSceneControllerNoShapeSpaceConstraintsCPSelection.prototype.processShiftKeyDownInteraction = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processshiftKeyDownInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    CurveSceneControllerNoShapeSpaceConstraintsCPSelection.prototype.processShiftKeyUpInteraction = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processshiftKeyUpInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    return CurveSceneControllerNoShapeSpaceConstraintsCPSelection;
}(CurveSceneControllerInteractionStrategy));
exports.CurveSceneControllerNoShapeSpaceConstraintsCPSelection = CurveSceneControllerNoShapeSpaceConstraintsCPSelection;
var CurveSceneControllerNoShapeSpaceConstraintsCPDragging = /** @class */ (function (_super) {
    __extends(CurveSceneControllerNoShapeSpaceConstraintsCPDragging, _super);
    function CurveSceneControllerNoShapeSpaceConstraintsCPDragging(curveSceneController) {
        var _this = _super.call(this, curveSceneController) || this;
        _this.curveModel = _this.shapeNavigableCurve.curveCategory.curveModel;
        _this.selectedControlPoint = _this._curveSceneController.selectedControlPoint;
        return _this;
    }
    CurveSceneControllerNoShapeSpaceConstraintsCPDragging.prototype.processLeftMouseDownInteraction = function (ndcX, ndcY) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processLeftMouseDownInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    CurveSceneControllerNoShapeSpaceConstraintsCPDragging.prototype.processLeftMouseDragInteraction = function (ndcX, ndcY) {
        var x = ndcX;
        var y = ndcY;
        if (this.selectedControlPoint != null) {
            this._curveSceneController.controlPointsView.setSelected(null);
            this.curveModel.setControlPointPosition(this.selectedControlPoint, x, y);
            this.curveModel.notifyObservers();
            this._curveSceneController.curveModelDifferentialEventsExtractor.notifyObservers();
        }
    };
    CurveSceneControllerNoShapeSpaceConstraintsCPDragging.prototype.processLeftMouseUpInteraction = function () {
        console.log(" processLeftMouseUpInteraction");
        this.selectedControlPoint = null;
        this._curveSceneController.selectedControlPoint = null;
        this._curveSceneController.changeSceneInteraction(new CurveSceneControllerNoShapeSpaceConstraintsCPSelection(this._curveSceneController));
    };
    CurveSceneControllerNoShapeSpaceConstraintsCPDragging.prototype.processShiftKeyDownInteraction = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processshiftKeyDownInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    CurveSceneControllerNoShapeSpaceConstraintsCPDragging.prototype.processShiftKeyUpInteraction = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processshiftKeyUpInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    return CurveSceneControllerNoShapeSpaceConstraintsCPDragging;
}(CurveSceneControllerInteractionStrategy));
exports.CurveSceneControllerNoShapeSpaceConstraintsCPDragging = CurveSceneControllerNoShapeSpaceConstraintsCPDragging;
var CurveSceneControllerNestedSimplifiedShapeSpacesCPSelection = /** @class */ (function (_super) {
    __extends(CurveSceneControllerNestedSimplifiedShapeSpacesCPSelection, _super);
    function CurveSceneControllerNestedSimplifiedShapeSpacesCPSelection(curveSceneController) {
        var _this = _super.call(this, curveSceneController) || this;
        _this.selectedControlPoint = _this._curveSceneController.selectedControlPoint;
        _this.insertKnotButtonView = _this._curveSceneController.insertKnotButtonView;
        _this.curveModel = _this.shapeNavigableCurve.curveCategory.curveModel;
        _this.curveShapeSpaceNavigator.navigationCurveModel.currentCurve = _this.curveModel.spline;
        _this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve = _this.curveModel.spline;
        _this.curveModel.notifyObservers();
        return _this;
    }
    CurveSceneControllerNestedSimplifiedShapeSpacesCPSelection.prototype.processLeftMouseDownInteraction = function (ndcX, ndcY) {
        if (this.insertKnotButtonView.buttonSelection(ndcX, ndcY)) {
            this._curveSceneController.changeSceneInteraction(new CurveSceneControllerKnotInsertion(this._curveSceneController));
            console.log("Nested simplified spaces: insertButton");
        }
        else {
            this.selectedControlPoint = this._curveSceneController.controlPointsView.pointSelection(ndcX, ndcY);
            console.log(" select CP id = ", this.selectedControlPoint);
            this._curveSceneController.controlPointsView.setSelected(this.selectedControlPoint);
            this._curveSceneController.renderFrame();
            if (this.selectedControlPoint !== null) {
                this._curveSceneController.selectedControlPoint = this.selectedControlPoint;
                if (this.shapeNavigableCurve.curveCategory instanceof CurveCategory_1.OpenPlanarCurve) {
                    this._curveSceneController.changeSceneInteraction(new CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve(this._curveSceneController));
                }
                else if (this.shapeNavigableCurve.curveCategory instanceof CurveCategory_1.ClosedPlanarCurve) {
                    // this.shapeNavigableCurve.changeMngmtOfEventAtExtremity(new NoEventToManageForClosedCurve(this.shapeNavigableCurve.eventMgmtAtExtremities));
                    this._curveSceneController.changeSceneInteraction(new CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingClosedCurve(this._curveSceneController));
                }
            }
        }
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPSelection.prototype.processLeftMouseDragInteraction = function (ndcX, ndcY) {
        // const warning = new WarningLog(this.constructor.name, "processLeftMouseDragInteraction", "nothing to do there");
        // warning.logMessageToConsole();
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPSelection.prototype.processLeftMouseUpInteraction = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processLeftMouseUpInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPSelection.prototype.processShiftKeyDownInteraction = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processshiftKeyDownInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPSelection.prototype.processShiftKeyUpInteraction = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processshiftKeyUpInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    return CurveSceneControllerNestedSimplifiedShapeSpacesCPSelection;
}(CurveSceneControllerInteractionStrategy));
exports.CurveSceneControllerNestedSimplifiedShapeSpacesCPSelection = CurveSceneControllerNestedSimplifiedShapeSpacesCPSelection;
var CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve = /** @class */ (function (_super) {
    __extends(CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve, _super);
    function CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve(curveSceneController) {
        var _this = _super.call(this, curveSceneController) || this;
        // if(this.curveShapeSpaceNavigator.eventStateAtCrvExtremities instanceof EventStayInsideCurve) {
        //     this._curveSceneController.changeSceneInteraction(new CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveEventsInsideInterval(this._curveSceneController));
        // }
        _this.selectedControlPoint = _this._curveSceneController.selectedControlPoint;
        _this.eventMgmtAtExtremities = _this.curveShapeSpaceNavigator.eventMgmtAtExtremities;
        _this.controlOfInflection = _this.curveShapeSpaceNavigator.getActiveControlInflections();
        _this.controlOfCurvatureExtrema = _this.curveShapeSpaceNavigator.getActiveControlCurvatureExtrema();
        _this.managementOfEventsAtExtremities = _this.curveShapeSpaceNavigator.getManagementDiffEventsAtExtremities();
        if (_this.managementOfEventsAtExtremities === ShapeSpaceDiffEventsStructure_1.EventMgmtState.Active) {
            _this.eventsStayInsideInterval = true;
        }
        else {
            _this.eventsStayInsideInterval = false;
        }
        _this.curveModel = _this.shapeNavigableCurve.curveCategory.curveModel;
        _this.curveShapeSpaceNavigator.navigationCurveModel.currentCurve = _this.curveModel.spline;
        _this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve = _this.curveModel.spline;
        return _this;
    }
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve.prototype.processLeftMouseDownInteraction = function (ndcX, ndcY) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processLeftMouseDownInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve.prototype.processLeftMouseDragInteraction = function (ndcX, ndcY) {
        console.log('drag CPDraggingOpenCurve');
        var x = ndcX;
        var y = ndcY;
        // console.log(" simpler spaces: selected point = ", this.selectedControlPoint);
        if (this.selectedControlPoint != null) {
            this._curveSceneController.controlPointsView.setSelected(null);
            // console.log("x0= " + this.curveModel.spline.controlPoints[0].x + " y0= " + this.curveModel.spline.controlPoints[0].y +
            // " x1= " + this.curveModel.spline.controlPoints[ this.curveModel.spline.controlPoints.length - 1].x + " y1= " + this.curveModel.spline.controlPoints[ this.curveModel.spline.controlPoints.length - 1].y)
            if (!this.controlOfCurvatureExtrema && !this.controlOfInflection) {
                /* JCL 2020/11/12 Remove the setControlPoint as a preliminary step of optimization
                because it is part of the optimize method (whether sliding is active or not) */
                this.curveModel.setControlPointPosition(this.selectedControlPoint, x, y);
                this.curveShapeSpaceNavigator.navigationCurveModel.currentCurve = this.curveModel.spline;
                this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve = this.curveModel.spline;
            }
            else {
                this.curveShapeSpaceNavigator.navigationCurveModel.currentCurve = this.curveModel.spline;
                this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve = this.curveModel.spline;
                this.curveShapeSpaceNavigator.eventMgmtAtExtremities.clearEvents();
                this.curveShapeSpaceNavigator.navigationCurveModel.navigateSpace(this.selectedControlPoint, x, y);
                if (this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy.constraintsNotSatisfied) {
                    console.log("Constraints not satisfied - must change interaction Strategy");
                    this._curveSceneController.changeSceneInteraction(new CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveConstraintsUnsatisfied(this._curveSceneController));
                }
                else if (this.curveShapeSpaceNavigator.eventMgmtAtExtremities.eventOutOfInterval && this.eventsStayInsideInterval) {
                    console.log("An event went out of the interval. Display previous step");
                    this._curveSceneController.changeSceneInteraction(new CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveEventsInsideInterval(this._curveSceneController));
                }
                else {
                    if (this.curveShapeSpaceNavigator.eventMgmtAtExtremities.eventOutOfInterval) {
                        this.curveShapeSpaceNavigator.eventMgmtAtExtremities.eventOutOfInterval = false;
                    }
                    this.curveModel.setSpline(this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve);
                    this._curveSceneController.curveModelDifferentialEventsExtractor.update(this.curveModel.spline);
                }
            }
            this.curveModel.notifyObservers();
            this._curveSceneController.curveModelDifferentialEventsExtractor.notifyObservers();
        }
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve.prototype.processLeftMouseUpInteraction = function () {
        var message = new ErrorLoging_1.WarningLog(this.constructor.name, " processLeftMouseUpInteraction ", "reset selected control point");
        message.logMessageToConsole();
        this.selectedControlPoint = null;
        this._curveSceneController.selectedControlPoint = null;
        this._curveSceneController.changeSceneInteraction(new CurveSceneControllerNestedSimplifiedShapeSpacesCPSelection(this._curveSceneController));
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve.prototype.processShiftKeyDownInteraction = function () {
        var message = new ErrorLoging_1.WarningLog(this.constructor.name, " processShiftKeyDownInteraction ", "events can slip out");
        message.logMessageToConsole();
        if (this.curveShapeSpaceNavigator.getManagementDiffEventsAtExtremities() === ShapeSpaceDiffEventsStructure_1.EventMgmtState.Active) {
            this.eventsStayInsideInterval = false;
            this.curveShapeSpaceNavigator.setManagementDiffEventsAtExtremities(ShapeSpaceDiffEventsStructure_1.EventMgmtState.Inactive);
            this.managementOfEventsAtExtremities = this.curveShapeSpaceNavigator.getManagementDiffEventsAtExtremities();
        }
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve.prototype.processShiftKeyUpInteraction = function () {
        var message = new ErrorLoging_1.WarningLog(this.constructor.name, " processShiftKeyUpInteraction ", "events stay inside interval");
        message.logMessageToConsole();
        if (this.curveShapeSpaceNavigator.getManagementDiffEventsAtExtremities() === ShapeSpaceDiffEventsStructure_1.EventMgmtState.Inactive) {
            var message_1 = new ErrorLoging_1.WarningLog(this.constructor.name, " processShiftKeyUpInteraction ", "events stay inside interval");
            message_1.logMessageToConsole();
            this.eventsStayInsideInterval = true;
            this.curveShapeSpaceNavigator.setManagementDiffEventsAtExtremities(ShapeSpaceDiffEventsStructure_1.EventMgmtState.Active);
            this.managementOfEventsAtExtremities = this.curveShapeSpaceNavigator.getManagementDiffEventsAtExtremities();
        }
    };
    return CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve;
}(CurveSceneControllerInteractionStrategy));
exports.CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve = CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve;
var CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveEventsInsideInterval = /** @class */ (function (_super) {
    __extends(CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveEventsInsideInterval, _super);
    function CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveEventsInsideInterval(curveSceneController) {
        var _this = _super.call(this, curveSceneController) || this;
        _this.curvatureExtSplippingOut = [];
        _this.inflectionsSplippingOut = [];
        _this.selectedControlPoint = _this._curveSceneController.selectedControlPoint;
        _this.eventMgmtAtExtremities = _this.curveShapeSpaceNavigator.eventMgmtAtExtremities;
        _this.curveModel = _this.shapeNavigableCurve.curveCategory.curveModel;
        _this.curveModel.setSpline(_this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve.clone());
        _this.convertNeighboringEventsIntoDiffEventsToDisplay();
        _this.curveModel.notifyObservers();
        _this._curveSceneController.curveModelDifferentialEventsExtractor.notifyObservers();
        return _this;
    }
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveEventsInsideInterval.prototype.processLeftMouseDownInteraction = function (ndcX, ndcY) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processLeftMouseDownInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveEventsInsideInterval.prototype.processLeftMouseDragInteraction = function (ndcX, ndcY) {
        console.log('drag CPDraggingOpenCurveEventsInsideInterval');
        var x = ndcX;
        var y = ndcY;
        // console.log(" simpler spaces: selected point = ", this.selectedControlPoint);
        if (this.selectedControlPoint != null) {
            this._curveSceneController.controlPointsView.setSelected(null);
            // console.log("x0= " + this.curveModel.spline.controlPoints[0].x + " y0= " + this.curveModel.spline.controlPoints[0].y +
            // " x1= " + this.curveModel.spline.controlPoints[ this.curveModel.spline.controlPoints.length - 1].x + " y1= " + this.curveModel.spline.controlPoints[ this.curveModel.spline.controlPoints.length - 1].y)
            if (!this.controlOfCurvatureExtrema && !this.controlOfInflection) {
                console.log("Inconsistent curve shape control settings");
            }
            else {
                this.curveShapeSpaceNavigator.navigationCurveModel.currentCurve = this.curveModel.spline;
                this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve = this.curveModel.spline;
                this.clearListsOfDiffEvents();
                this.updateDiffEventsToDisplay();
                this.eventMgmtAtExtremities.clearEvents();
                this.curveShapeSpaceNavigator.navigationCurveModel.navigateSpace(this.selectedControlPoint, x, y);
                if (this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy.constraintsNotSatisfied) {
                    console.log("Constraints not satisfied - must change interaction Strategy");
                    this._curveSceneController.changeSceneInteraction(new CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveConstraintsUnsatisfied(this._curveSceneController));
                }
                else if (this.eventsStayInsideInterval) {
                    this.curveModel.setSpline(this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve);
                    this._curveSceneController.curveModelDifferentialEventsExtractor.update(this.curveModel.spline);
                    this.eventMgmtAtExtremities.eventOutOfInterval = false;
                    this._curveSceneController.changeSceneInteraction(new CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve(this._curveSceneController));
                }
            }
            this.curveModel.notifyObservers();
            this._curveSceneController.curveModelDifferentialEventsExtractor.notifyObservers();
        }
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveEventsInsideInterval.prototype.processLeftMouseUpInteraction = function () {
        var message = new ErrorLoging_1.WarningLog(this.constructor.name, " processLeftMouseUpInteraction ", " come back to point selection");
        message.logMessageToConsole();
        this.selectedControlPoint = null;
        this._curveSceneController.selectedControlPoint = null;
        this._curveSceneController.selectedSlipOutCurvatureExtremaView.clearPoints();
        this._curveSceneController.selectedSlipOutInflectionsView.clearPoints();
        this._curveSceneController.changeSceneInteraction(new CurveSceneControllerNestedSimplifiedShapeSpacesCPSelection(this._curveSceneController));
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveEventsInsideInterval.prototype.processShiftKeyDownInteraction = function () {
        var message = new ErrorLoging_1.WarningLog(this.constructor.name, " processShiftKeyDownInteraction ", " come back to drag point");
        message.logMessageToConsole();
        this.eventsStayInsideInterval = false;
        this._curveSceneController.selectedSlipOutCurvatureExtremaView.clearPoints();
        this._curveSceneController.selectedSlipOutInflectionsView.clearPoints();
        this._curveSceneController.changeSceneInteraction(new CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve(this._curveSceneController));
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveEventsInsideInterval.prototype.processShiftKeyUpInteraction = function () {
        var message = new ErrorLoging_1.WarningLog(this.constructor.name, " processShiftKeyUpInteraction ", " come back to drag point");
        message.logMessageToConsole();
        this.eventsStayInsideInterval = true;
        this._curveSceneController.changeSceneInteraction(new CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve(this._curveSceneController));
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveEventsInsideInterval.prototype.clearListsOfDiffEvents = function () {
        this.curvatureExtSplippingOut = [];
        this.inflectionsSplippingOut = [];
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveEventsInsideInterval.prototype.updateDiffEventsToDisplay = function () {
        this._curveSceneController.selectedSlipOutCurvatureExtremaView.updatePoints(this.curvatureExtSplippingOut);
        this._curveSceneController.selectedSlipOutInflectionsView.updatePoints(this.inflectionsSplippingOut);
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveEventsInsideInterval.prototype.convertNeighboringEventsIntoDiffEventsToDisplay = function () {
        this.curvatureExtSplippingOut = this.eventMgmtAtExtremities.locationsCurvExtrema;
        this.inflectionsSplippingOut = this.eventMgmtAtExtremities.locationsInflections;
        this.updateDiffEventsToDisplay();
    };
    return CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveEventsInsideInterval;
}(CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve));
exports.CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveEventsInsideInterval = CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveEventsInsideInterval;
var CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveConstraintsUnsatisfied = /** @class */ (function (_super) {
    __extends(CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveConstraintsUnsatisfied, _super);
    function CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveConstraintsUnsatisfied(curveSceneController) {
        var _this = _super.call(this, curveSceneController) || this;
        _this.eventMgmtAtExtremities = _this.curveShapeSpaceNavigator.eventMgmtAtExtremities;
        _this.lastValidCurve = _this.curveModel.spline.clone();
        _this.curveModel.setSpline(_this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve.clone());
        _this._curveSceneController.highlightedControlPolygonView.update(_this.lastValidCurve);
        _this._curveSceneController.phantomCurveView.update(_this.lastValidCurve);
        return _this;
    }
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveConstraintsUnsatisfied.prototype.processLeftMouseDragInteraction = function (ndcX, ndcY) {
        var x = ndcX;
        var y = ndcY;
        console.log(" simpler spaces: selected point = ", this.selectedControlPoint);
        if (this.selectedControlPoint != null) {
            this._curveSceneController.controlPointsView.setSelected(null);
            if (!this.controlOfCurvatureExtrema && !this.controlOfInflection) {
                /* JCL 2020/11/12 Remove the setControlPoint as a preliminary step of optimization
                because it is part of the optimize method (whether sliding is active or not) */
                this.curveModel.setControlPointPosition(this.selectedControlPoint, x, y);
                this.curveShapeSpaceNavigator.navigationCurveModel.currentCurve = this.curveModel.spline;
                this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve = this.curveModel.spline;
            }
            else {
                this.curveShapeSpaceNavigator.navigationCurveModel.currentCurve = this.curveModel.spline;
                this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve = this.curveModel.spline;
                this.curveShapeSpaceNavigator.navigationCurveModel.navigateSpace(this.selectedControlPoint, x, y);
                if (this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy.constraintsNotSatisfied)
                    console.log("Constraints not satisfied - new interaction Strategy");
                this.curveModel.setSpline(this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve);
                this._curveSceneController.curveModelDifferentialEventsExtractor.update(this.curveModel.spline);
            }
            this.curveModel.notifyObservers();
            this._curveSceneController.curveModelDifferentialEventsExtractor.notifyObservers();
        }
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveConstraintsUnsatisfied.prototype.processLeftMouseUpInteraction = function () {
        this.selectedControlPoint = null;
        this._curveSceneController.selectedControlPoint = null;
        this._curveSceneController.changeSceneInteraction(new CurveSceneControllerNestedSimplifiedShapeSpacesCPSelection(this._curveSceneController));
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveConstraintsUnsatisfied.prototype.processShiftKeyDownInteraction = function () {
        // this.curveEventAtExtremityMayVanish = true;
        this.curveShapeSpaceNavigator.eventMgmtAtExtremities.changeMngmtOfEventAtExtremity(new EventStateAtCurveExtremity_1.EventSlideOutsideCurve(this.eventMgmtAtExtremities));
        this.eventMgmtAtExtremities.processEventAtCurveExtremity();
        var message = new ErrorLoging_1.WarningLog(this.constructor.name, " processShiftKeyDownInteraction ", this.eventMgmtAtExtremities.eventStateAtCrvExtremities.constructor.name);
        message.logMessageToConsole();
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveConstraintsUnsatisfied.prototype.processShiftKeyUpInteraction = function () {
        // this.curveEventAtExtremityMayVanish = false;
        this.curveShapeSpaceNavigator.eventMgmtAtExtremities.changeMngmtOfEventAtExtremity(new EventStateAtCurveExtremity_1.EventStayInsideCurve(this.eventMgmtAtExtremities));
        this.eventMgmtAtExtremities.processEventAtCurveExtremity();
        var message = new ErrorLoging_1.WarningLog(this.constructor.name, " processShiftKeyUpInteraction ", this.eventMgmtAtExtremities.eventStateAtCrvExtremities.constructor.name);
        message.logMessageToConsole();
    };
    return CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveConstraintsUnsatisfied;
}(CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve));
exports.CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveConstraintsUnsatisfied = CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurveConstraintsUnsatisfied;
var CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingClosedCurve = /** @class */ (function (_super) {
    __extends(CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingClosedCurve, _super);
    function CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingClosedCurve(curveSceneController) {
        return _super.call(this, curveSceneController) || this;
    }
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingClosedCurve.prototype.processShiftKeyDownInteraction = function () {
        this.eventMgmtAtExtremities.processEventAtCurveExtremity();
        var message = new ErrorLoging_1.WarningLog(this.constructor.name, " processShiftKeyDownInteraction ", this.eventMgmtAtExtremities.eventStateAtCrvExtremities.constructor.name);
        message.logMessageToConsole();
    };
    CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingClosedCurve.prototype.processShiftKeyUpInteraction = function () {
        this.eventMgmtAtExtremities.processEventAtCurveExtremity();
        var message = new ErrorLoging_1.WarningLog(this.constructor.name, " processShiftKeyDownInteraction ", this.eventMgmtAtExtremities.eventStateAtCrvExtremities.constructor.name);
        message.logMessageToConsole();
    };
    return CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingClosedCurve;
}(CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingOpenCurve));
exports.CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingClosedCurve = CurveSceneControllerNestedSimplifiedShapeSpacesCPDraggingClosedCurve;
var CurveSceneControllerStrictlyInsideShapeSpaceCPSelection = /** @class */ (function (_super) {
    __extends(CurveSceneControllerStrictlyInsideShapeSpaceCPSelection, _super);
    function CurveSceneControllerStrictlyInsideShapeSpaceCPSelection(curveSceneController) {
        var _this = _super.call(this, curveSceneController) || this;
        _this.selectedControlPoint = _this._curveSceneController.selectedControlPoint;
        _this.insertKnotButtonView = _this._curveSceneController.insertKnotButtonView;
        _this.curveModel = _this.shapeNavigableCurve.curveCategory.curveModel;
        _this.curveShapeSpaceNavigator.navigationCurveModel.currentCurve = _this.curveModel.spline;
        _this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve = _this.curveModel.spline;
        _this.curveModel.notifyObservers();
        return _this;
    }
    CurveSceneControllerStrictlyInsideShapeSpaceCPSelection.prototype.processLeftMouseDownInteraction = function (ndcX, ndcY) {
        if (this.insertKnotButtonView.buttonSelection(ndcX, ndcY)) {
            this._curveSceneController.changeSceneInteraction(new CurveSceneControllerKnotInsertion(this._curveSceneController));
        }
        else {
            this.selectedControlPoint = this._curveSceneController.controlPointsView.pointSelection(ndcX, ndcY);
            console.log(" stricly inside shape space: select CP id = ", this.selectedControlPoint);
            this._curveSceneController.controlPointsView.setSelected(this.selectedControlPoint);
            this._curveSceneController.renderFrame();
            if (this.selectedControlPoint !== null) {
                this._curveSceneController.selectedControlPoint = this.selectedControlPoint;
                if (this.shapeNavigableCurve.curveCategory instanceof CurveCategory_1.OpenPlanarCurve) {
                    this._curveSceneController.changeSceneInteraction(new CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurve(this._curveSceneController));
                }
                else if (this.shapeNavigableCurve.curveCategory instanceof ClosedCurveModel_1.ClosedCurveModel) {
                    // this.curveShapeSpaceNavigator.eventMgmtAtExtremities.changeMngmtOfEventAtExtremity(new NoEventToManageForCurve(this.curveShapeSpaceNavigator.eventMgmtAtExtremities));
                    this._curveSceneController.changeSceneInteraction(new CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingClosedCurve(this._curveSceneController));
                }
            }
        }
    };
    CurveSceneControllerStrictlyInsideShapeSpaceCPSelection.prototype.processLeftMouseDragInteraction = function (ndcX, ndcY) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processLeftMouseDragInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    CurveSceneControllerStrictlyInsideShapeSpaceCPSelection.prototype.processLeftMouseUpInteraction = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processLeftMouseUpInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    CurveSceneControllerStrictlyInsideShapeSpaceCPSelection.prototype.processShiftKeyDownInteraction = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processshiftKeyDownInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    CurveSceneControllerStrictlyInsideShapeSpaceCPSelection.prototype.processShiftKeyUpInteraction = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processshiftKeyUpInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    return CurveSceneControllerStrictlyInsideShapeSpaceCPSelection;
}(CurveSceneControllerInteractionStrategy));
exports.CurveSceneControllerStrictlyInsideShapeSpaceCPSelection = CurveSceneControllerStrictlyInsideShapeSpaceCPSelection;
var CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurve = /** @class */ (function (_super) {
    __extends(CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurve, _super);
    function CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurve(curveSceneController) {
        var _this = _super.call(this, curveSceneController) || this;
        _this.selectedControlPoint = _this._curveSceneController.selectedControlPoint;
        _this.eventMgmtAtExtremities = _this.curveShapeSpaceNavigator.eventMgmtAtExtremities;
        _this.controlOfInflection = _this.curveShapeSpaceNavigator.getActiveControlInflections();
        _this.controlOfCurvatureExtrema = _this.curveShapeSpaceNavigator.getActiveControlCurvatureExtrema();
        _this.managementOfEventsAtExtremities = _this.curveShapeSpaceNavigator.getManagementDiffEventsAtExtremities();
        if (_this.managementOfEventsAtExtremities === ShapeSpaceDiffEventsStructure_1.EventMgmtState.Active) {
            _this.eventsStayInsideInterval = true;
        }
        else {
            _this.eventsStayInsideInterval = false;
        }
        _this.curveModel = _this.shapeNavigableCurve.curveCategory.curveModel;
        _this.curveShapeSpaceNavigator.navigationCurveModel.currentCurve = _this.curveModel.spline;
        _this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve = _this.curveModel.spline;
        return _this;
    }
    CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurve.prototype.processLeftMouseDownInteraction = function (ndcX, ndcY) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processLeftMouseDownInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurve.prototype.processLeftMouseDragInteraction = function (ndcX, ndcY) {
        console.log('drag CPDraggingOpenCurve Stricly Inside Shape Space');
        var x = ndcX;
        var y = ndcY;
        if (this.selectedControlPoint != null) {
            this._curveSceneController.controlPointsView.setSelected(null);
            if (!this.controlOfCurvatureExtrema && !this.controlOfInflection) {
                /* JCL 2020/11/12 Remove the setControlPoint as a preliminary step of optimization
                because it is part of the optimize method (whether sliding is active or not) */
                this.curveModel.setControlPointPosition(this.selectedControlPoint, x, y);
                this.curveShapeSpaceNavigator.navigationCurveModel.currentCurve = this.curveModel.spline;
                this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve = this.curveModel.spline;
            }
            else {
                this.curveShapeSpaceNavigator.navigationCurveModel.currentCurve = this.curveModel.spline;
                this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve = this.curveModel.spline;
                console.log("navigate inside shape space");
                this.curveShapeSpaceNavigator.navigationCurveModel.navigateSpace(this.selectedControlPoint, x, y);
                this.curveModel.setSpline(this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve);
                this._curveSceneController.curveModelDifferentialEventsExtractor.update(this.curveModel.spline);
            }
            // if(this.curveShapeSpaceNavigator.navigationCurveModel.navigationState.boundaryEnforcer.isActive()) {
            if (this.curveShapeSpaceNavigator.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace) {
                if (this.curveShapeSpaceNavigator.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.isActive()) {
                    console.log("need to change interaction strategy");
                    this._curveSceneController.changeSceneInteraction(new CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary(this._curveSceneController));
                }
            }
            this.curveModel.notifyObservers();
            this._curveSceneController.curveModelDifferentialEventsExtractor.notifyObservers();
        }
    };
    CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurve.prototype.processLeftMouseUpInteraction = function () {
        var message = new ErrorLoging_1.WarningLog(this.constructor.name, " processLeftMouseUpInteraction ", "reset selected control point");
        message.logMessageToConsole();
        this.selectedControlPoint = null;
        this._curveSceneController.selectedControlPoint = null;
        this._curveSceneController.changeSceneInteraction(new CurveSceneControllerStrictlyInsideShapeSpaceCPSelection(this._curveSceneController));
    };
    CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurve.prototype.processShiftKeyDownInteraction = function () {
        // this.curveShapeSpaceNavigator.eventMgmtAtExtremities.changeMngmtOfEventAtExtremity(new EventSlideOutsideCurve(this.eventMgmtAtExtremities));
        // this.eventMgmtAtExtremities.processEventAtCurveExtremity();
        // const message = new WarningLog(this.constructor.name, " processShiftKeyDownInteraction ", this.eventMgmtAtExtremities.eventStateAtCrvExtremities.constructor.name);
        // message.logMessageToConsole();
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processShiftKeyDownInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurve.prototype.processShiftKeyUpInteraction = function () {
        // this.curveShapeSpaceNavigator.eventMgmtAtExtremities.changeMngmtOfEventAtExtremity(new EventStayInsideCurve(this.eventMgmtAtExtremities));
        // this.eventMgmtAtExtremities.processEventAtCurveExtremity();
        // const message = new WarningLog(this.constructor.name, " processShiftKeyUpInteraction ", this.eventMgmtAtExtremities.eventStateAtCrvExtremities.constructor.name);
        // message.logMessageToConsole();
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "processShiftKeyUpInteraction", "nothing to do there");
        warning.logMessageToConsole();
    };
    return CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurve;
}(CurveSceneControllerInteractionStrategy));
exports.CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurve = CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurve;
var CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary = /** @class */ (function (_super) {
    __extends(CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary, _super);
    function CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary(curveSceneController) {
        var _this = _super.call(this, curveSceneController) || this;
        _this.curvatureExtEntering = [];
        _this.curvatureExtSplippingOut = [];
        _this.inflectionsEntering = [];
        _this.inflectionsSplippingOut = [];
        _this.selectedControlPoint = _this._curveSceneController.selectedControlPoint;
        _this.curveModel = _this.shapeNavigableCurve.curveCategory.curveModel;
        _this.curveShapeSpaceNavigator.navigationCurveModel.currentCurve = _this.curveModel.spline;
        // this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve = this.curveModel.spline;
        if (_this.curveShapeSpaceNavigator.navigationCurveModel.adjacentShapeSpaceCurve !== undefined && !_this.isNeighboringEventAtExtremity()) {
            _this.adjacentShapeSpaceCurve = _this.curveShapeSpaceNavigator.navigationCurveModel.adjacentShapeSpaceCurve;
            _this._curveSceneController.highlightedControlPolygonView.update(_this.adjacentShapeSpaceCurve);
            _this._curveSceneController.phantomCurveView.update(_this.adjacentShapeSpaceCurve);
        }
        else {
            _this.adjacentShapeSpaceCurve = _this.curveShapeSpaceNavigator.navigationCurveModel.currentCurve;
        }
        if (_this.isNeighboringEventAtExtremity()) {
            _this._displayPhantomEntities = false;
        }
        else {
            _this._displayPhantomEntities = true;
        }
        _this.curveModel.setSpline(_this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve.clone());
        _this.convertNeighboringEventsIntoDiffEventsToDisplay();
        _this.curveModel.notifyObservers();
        _this.updateDiffEventsEnteringOnCurveAdjacentToShapeSpace();
        _this._curveSceneController.curveModelDifferentialEventsExtractor.notifyObservers();
        // this.curveShapeSpaceNavigator.navigationCurveModel.navigationState.boundaryEnforcer.deactivate();
        if (_this.curveShapeSpaceNavigator.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace) {
            _this.curveShapeSpaceNavigator.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.reset();
        }
        return _this;
    }
    Object.defineProperty(CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary.prototype, "displayPhantomEntities", {
        get: function () {
            return this._displayPhantomEntities;
        },
        enumerable: false,
        configurable: true
    });
    CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary.prototype.processLeftMouseDragInteraction = function (ndcX, ndcY) {
        var x = ndcX;
        var y = ndcY;
        console.log(" shape space boundary: selected point = ", this.selectedControlPoint);
        if (this.selectedControlPoint != null) {
            this._curveSceneController.controlPointsView.setSelected(null);
            if (!this.controlOfCurvatureExtrema && !this.controlOfInflection) {
                /* JCL 2020/11/12 Remove the setControlPoint as a preliminary step of optimization
                because it is part of the optimize method (whether sliding is active or not) */
                console.log("Inconsistent curve shape control settings");
            }
            else {
                this.curveShapeSpaceNavigator.navigationCurveModel.currentCurve = this.curveModel.spline;
                this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve = this.curveModel.spline;
                this.clearListsOfDiffEvents();
                this.updateDiffEventsToDisplay();
                console.log("navigate at boundary");
                this.curveShapeSpaceNavigator.navigationCurveModel.navigateSpace(this.selectedControlPoint, x, y);
                if (this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy.constraintsNotSatisfied)
                    console.log("Constraints not satisfied - new interaction Strategy");
                this.curveModel.setSpline(this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve);
                this._curveSceneController.curveModelDifferentialEventsExtractor.update(this.curveModel.spline);
                if (this.curveShapeSpaceNavigator.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace) {
                    // if(this.curveShapeSpaceNavigator.navigationCurveModel.navigationState.boundaryEnforcer.isActive()) {
                    if (this.curveShapeSpaceNavigator.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.isActive()) {
                        this.updateCurveAdjacentToShapeSpace();
                        this.convertNeighboringEventsIntoDiffEventsToDisplay();
                        // this.curveShapeSpaceNavigator.navigationCurveModel.navigationState.boundaryEnforcer.deactivate();
                        this.curveShapeSpaceNavigator.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.reset();
                    }
                    else {
                        console.log("change interaction strategy to drag inside shape space");
                        this.clearListsOfDiffEvents();
                        this.updateDiffEventsToDisplay();
                        // this.curveShapeSpaceNavigator.navigationCurveModel.navigationState.boundaryEnforcer.reset();
                        this.curveShapeSpaceNavigator.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.reset();
                        this.curveModel.notifyObservers();
                        this._curveSceneController.curveModelDifferentialEventsExtractor.notifyObservers();
                        this._curveSceneController.changeSceneInteraction(new CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurve(this._curveSceneController));
                    }
                }
            }
            this.curveModel.notifyObservers();
            this.updateDiffEventsEnteringOnCurveAdjacentToShapeSpace();
            this._curveSceneController.curveModelDifferentialEventsExtractor.notifyObservers();
        }
    };
    CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary.prototype.processLeftMouseUpInteraction = function () {
        var message = new ErrorLoging_1.WarningLog(this.constructor.name, " processLeftMouseUpInteraction ", "reset selected control point");
        message.logMessageToConsole();
        this.selectedControlPoint = null;
        this._curveSceneController.selectedControlPoint = null;
        this.clearListsOfDiffEvents();
        this.updateDiffEventsToDisplay();
        this.curveModel.notifyObservers();
        this._curveSceneController.curveModelDifferentialEventsExtractor.notifyObservers();
        this._curveSceneController.changeSceneInteraction(new CurveSceneControllerStrictlyInsideShapeSpaceCPSelection(this._curveSceneController));
    };
    CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary.prototype.processShiftKeyDownInteraction = function () {
        var message = new ErrorLoging_1.WarningLog(this.constructor.name, " processShiftKeyDownInteraction ", "free differential events");
        message.logMessageToConsole();
        this.clearListsOfDiffEvents();
        this.updateDiffEventsToDisplay();
        // this.curveShapeSpaceNavigator.navigationCurveModel.navigationState.boundaryEnforcer.deactivate();
        // this.curveShapeSpaceNavigator.navigationCurveModel.navigationState.boundaryEnforcer.addTransitionOfEvents(this.curveShapeSpaceNavigator.navigationState.currentNeighboringEvents);
        if (this.curveShapeSpaceNavigator.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace) {
            this.curveShapeSpaceNavigator.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.deactivate();
            this.curveShapeSpaceNavigator.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.addTransitionOfEvents(this.curveShapeSpaceNavigator.navigationState.currentNeighboringEvents);
        }
        this.curveModel.notifyObservers();
        this._curveSceneController.curveModelDifferentialEventsExtractor.notifyObservers();
        this._curveSceneController.changeSceneInteraction(new CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurve(this._curveSceneController));
    };
    CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary.prototype.clearListsOfDiffEvents = function () {
        this.curvatureExtEntering = [];
        this.curvatureExtSplippingOut = [];
        this.inflectionsEntering = [];
        this.inflectionsSplippingOut = [];
    };
    CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary.prototype.updateDiffEventsToDisplay = function () {
        this._curveSceneController.selectedSlipOutCurvatureExtremaView.updatePoints(this.curvatureExtSplippingOut);
        this._curveSceneController.selectedEnteringCurvatureExtremaView.updatePoints(this.curvatureExtEntering);
        this._curveSceneController.selectedSlipOutInflectionsView.updatePoints(this.inflectionsSplippingOut);
        this._curveSceneController.selectedEnteringInflectionsView.updatePoints(this.inflectionsEntering);
    };
    CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary.prototype.convertNeighboringEventsIntoDiffEventsToDisplay = function () {
        var e_1, _a;
        var sequenceOpt = this.curveShapeSpaceNavigator.navigationState.curveAnalyserOptimizedCurve.sequenceOfDifferentialEvents;
        try {
            for (var _b = __values(this.curveShapeSpaceNavigator.navigationState.currentNeighboringEvents), _c = _b.next(); !_c.done; _c = _b.next()) {
                var neighboringEvents = _c.value;
                if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryAppear) {
                    this.curvatureExtEntering.push(0);
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryAppear) {
                    this.curvatureExtEntering.push(this.curveModel.spline.knots[this.curveModel.spline.knots.length - 1]);
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryDisappear) {
                    var eventLocation = sequenceOpt.eventAt(neighboringEvents.index).location;
                    this.curvatureExtSplippingOut.push(eventLocation);
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryDisappear) {
                    var eventLocation = sequenceOpt.eventAt(neighboringEvents.index).location;
                    this.curvatureExtSplippingOut.push(eventLocation);
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaAppear) {
                    var eventLocation1 = this.curveShapeSpaceNavigator.navigationState.transitionEvents.eventAt(0);
                    this.curvatureExtEntering.push(eventLocation1.location);
                    var eventLocation2 = this.curveShapeSpaceNavigator.navigationState.transitionEvents.eventAt(1);
                    this.curvatureExtEntering.push(eventLocation2.location);
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaDisappear) {
                    var eventLocation1 = this.curveShapeSpaceNavigator.navigationState.transitionEvents.eventAt(0);
                    this.curvatureExtSplippingOut.push(eventLocation1.location);
                    var eventLocation2 = this.curveShapeSpaceNavigator.navigationState.transitionEvents.eventAt(1);
                    this.curvatureExtSplippingOut.push(eventLocation2.location);
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryDisappear) {
                    var eventLocation = sequenceOpt.eventAt(neighboringEvents.index).location;
                    this.inflectionsSplippingOut.push(eventLocation);
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryAppear) {
                    this.inflectionsEntering.push(0);
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryDisappear) {
                    var eventLocation = sequenceOpt.eventAt(neighboringEvents.index).location;
                    this.inflectionsSplippingOut.push(eventLocation);
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryAppear) {
                    this.inflectionsEntering.push(this.curveModel.spline.knots[this.curveModel.spline.knots.length - 1]);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.updateDiffEventsToDisplay();
    };
    CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary.prototype.updateCurveAdjacentToShapeSpace = function () {
        if (this.curveShapeSpaceNavigator.navigationCurveModel.adjacentShapeSpaceCurve !== undefined && !this.isNeighboringEventAtExtremity()) {
            this.adjacentShapeSpaceCurve = this.curveShapeSpaceNavigator.navigationCurveModel.adjacentShapeSpaceCurve;
            this._curveSceneController.highlightedControlPolygonView.update(this.adjacentShapeSpaceCurve);
            this._curveSceneController.phantomCurveView.update(this.adjacentShapeSpaceCurve);
        }
        else if (!this.isNeighboringEventAtExtremity()) {
            this.adjacentShapeSpaceCurve = this.curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve;
        }
        if (this.isNeighboringEventAtExtremity()) {
            this._displayPhantomEntities = false;
        }
        else {
            this._displayPhantomEntities = true;
        }
    };
    CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary.prototype.updateDiffEventsEnteringOnCurveAdjacentToShapeSpace = function () {
        if (this.curveShapeSpaceNavigator.navigationCurveModel.adjacentShapeSpaceCurve !== undefined && !this.isNeighboringEventAtExtremity()) {
            this._curveSceneController.selectedEnteringCurvatureExtremaView.update(this.adjacentShapeSpaceCurve);
            this._curveSceneController.selectedEnteringInflectionsView.update(this.adjacentShapeSpaceCurve);
            this.updateDiffEventsToDisplay();
        }
    };
    CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary.prototype.isNeighboringEventAtExtremity = function () {
        var e_2, _a;
        var result = false;
        var anyOtherTypeOfEvent = false;
        try {
            for (var _b = __values(this.curveShapeSpaceNavigator.navigationCurveModel.navigationState.currentNeighboringEvents), _c = _b.next(); !_c.done; _c = _b.next()) {
                var neighboringEvent_1 = _c.value;
                switch (neighboringEvent_1.type) {
                    case NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryAppear:
                        if (!anyOtherTypeOfEvent)
                            result = true;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryDisappear:
                        if (!anyOtherTypeOfEvent)
                            result = true;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryAppear:
                        if (!anyOtherTypeOfEvent)
                            result = true;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryDisappear:
                        if (!anyOtherTypeOfEvent)
                            result = true;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryAppear:
                        if (!anyOtherTypeOfEvent)
                            result = true;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryDisappear:
                        if (!anyOtherTypeOfEvent)
                            result = true;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryAppear:
                        if (!anyOtherTypeOfEvent)
                            result = true;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryDisappear:
                        if (!anyOtherTypeOfEvent)
                            result = true;
                        break;
                    default:
                        anyOtherTypeOfEvent = true;
                        result = false;
                        break;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var neighboringEvent = this.curveShapeSpaceNavigator.navigationCurveModel.navigationState.currentNeighboringEvents[0];
        return result;
    };
    return CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary;
}(CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurve));
exports.CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary = CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurveShapeSpaceBoundary;
var CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingClosedCurve = /** @class */ (function (_super) {
    __extends(CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingClosedCurve, _super);
    function CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingClosedCurve(curveSceneController) {
        return _super.call(this, curveSceneController) || this;
    }
    CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingClosedCurve.prototype.processShiftKeyDownInteraction = function () {
        this.eventMgmtAtExtremities.processEventAtCurveExtremity();
        var message = new ErrorLoging_1.WarningLog(this.constructor.name, " processShiftKeyDownInteraction ", this.eventMgmtAtExtremities.eventStateAtCrvExtremities.constructor.name);
        message.logMessageToConsole();
    };
    CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingClosedCurve.prototype.processShiftKeyUpInteraction = function () {
        this.eventMgmtAtExtremities.processEventAtCurveExtremity();
        var message = new ErrorLoging_1.WarningLog(this.constructor.name, " processShiftKeyDownInteraction ", this.eventMgmtAtExtremities.eventStateAtCrvExtremities.constructor.name);
        message.logMessageToConsole();
    };
    return CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingClosedCurve;
}(CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingOpenCurve));
exports.CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingClosedCurve = CurveSceneControllerStrictlyInsideShapeSpaceCPDraggingClosedCurve;


/***/ }),

/***/ "./src/controllers/CurveShapeMonitoringStrategy.ts":
/*!*********************************************************!*\
  !*** ./src/controllers/CurveShapeMonitoringStrategy.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CCurveShapeMonitoringStrategyWithNoDiffEventSliding = exports.CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding = exports.CCurveShapeMonitoringStrategyWithCurvatureExtremaSliding = exports.CCurveShapeMonitoringStrategyWithInflexionsSliding = exports.CCurveShapeMonitoringStrategyWithNoDiffEventNoSliding = exports.CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding = exports.CCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding = exports.CCurveShapeMonitoringStrategyWithInflexionsNoSliding = exports.CCurveShapeMonitoringStrategy = exports.OCurveShapeMonitoringStrategyWithNoDiffEventSliding = exports.OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding = exports.OCurveShapeMonitoringStrategyWithCurvatureExtremaSliding = exports.OCurveShapeMonitoringStrategyWithInflexionsSliding = exports.OCurveShapeMonitoringStrategyWithNoDiffEventNoSliding = exports.OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding = exports.OCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding = exports.OCurveShapeMonitoringStrategyWithInflexionsNoSliding = exports.OCurveShapeMonitoringStrategy = exports.CurveShapeMonitoringStrategy = void 0;
var Optimizer_1 = __webpack_require__(/*! ../mathematics/Optimizer */ "./src/mathematics/Optimizer.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ShapeSpaceDiffEventsStructure_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/ShapeSpaceDiffEventsStructure */ "./src/curveShapeSpaceNavigation/ShapeSpaceDiffEventsStructure.ts");
var NeighboringEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/NeighboringEvents */ "./src/sequenceOfDifferentialEvents/NeighboringEvents.ts");
var OptProblemPeriodicBSplineR1toR2_1 = __webpack_require__(/*! ../bsplineOptimizationProblems/OptProblemPeriodicBSplineR1toR2 */ "./src/bsplineOptimizationProblems/OptProblemPeriodicBSplineR1toR2.ts");
var EventStateAtCurveExtremity_1 = __webpack_require__(/*! ../shapeNavigableCurve/EventStateAtCurveExtremity */ "./src/shapeNavigableCurve/EventStateAtCurveExtremity.ts");
var NavigationState_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/NavigationState */ "./src/curveShapeSpaceNavigation/NavigationState.ts");
var OptProblemOpenBSplineR1toR2_1 = __webpack_require__(/*! ../bsplineOptimizationProblems/OptProblemOpenBSplineR1toR2 */ "./src/bsplineOptimizationProblems/OptProblemOpenBSplineR1toR2.ts");
var CurveShapeMonitoringStrategy = /** @class */ (function () {
    function CurveShapeMonitoringStrategy(navigationCurveModel) {
        this.navigationCurveModel = navigationCurveModel;
        this.shapeSpaceDiffEventsStructure = navigationCurveModel.shapeSpaceDiffEventsStructure;
        this.currentCurve = navigationCurveModel.currentCurve;
    }
    return CurveShapeMonitoringStrategy;
}());
exports.CurveShapeMonitoringStrategy = CurveShapeMonitoringStrategy;
var OCurveShapeMonitoringStrategy = /** @class */ (function (_super) {
    __extends(OCurveShapeMonitoringStrategy, _super);
    function OCurveShapeMonitoringStrategy(oCShapeSpaceNavigator) {
        var _this = _super.call(this, oCShapeSpaceNavigator) || this;
        _this.openCShapeSpaceNavigator = oCShapeSpaceNavigator;
        _this.curveShapeSpaceNavigator = oCShapeSpaceNavigator.curveShapeSpaceNavigator;
        _this.currentCurve = oCShapeSpaceNavigator.currentCurve;
        return _this;
    }
    Object.defineProperty(OCurveShapeMonitoringStrategy.prototype, "optimizationProblem", {
        get: function () {
            return this._optimizationProblem;
        },
        set: function (optimizationProblem) {
            this._optimizationProblem = optimizationProblem;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OCurveShapeMonitoringStrategy.prototype, "optimizer", {
        get: function () {
            return this._optimizer;
        },
        set: function (optimizer) {
            this._optimizer = optimizer;
        },
        enumerable: false,
        configurable: true
    });
    OCurveShapeMonitoringStrategy.prototype.resetAfterCurveChange = function () {
        this.resetCurve(this.openCShapeSpaceNavigator.curveModel.spline);
    };
    OCurveShapeMonitoringStrategy.prototype.setEventManagementAtCurveExtremityState = function () {
        if (this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents && this.shapeSpaceDiffEventsStructure.managementOfEventsAtExtremities === ShapeSpaceDiffEventsStructure_1.EventMgmtState.NotApplicable) {
            switch (this.curveShapeSpaceNavigator.eventMgmtAtExtremities.previousManagementOfEventsAtExtremities) {
                case ShapeSpaceDiffEventsStructure_1.EventMgmtState.Active: {
                    this.curveShapeSpaceNavigator.eventMgmtAtExtremities.changeMngmtOfEventAtExtremity(new EventStateAtCurveExtremity_1.EventStayInsideCurve(this.curveShapeSpaceNavigator.eventMgmtAtExtremities));
                    break;
                }
                case ShapeSpaceDiffEventsStructure_1.EventMgmtState.Inactive: {
                    this.curveShapeSpaceNavigator.eventMgmtAtExtremities.changeMngmtOfEventAtExtremity(new EventStateAtCurveExtremity_1.EventSlideOutsideCurve(this.curveShapeSpaceNavigator.eventMgmtAtExtremities));
                    break;
                }
                case ShapeSpaceDiffEventsStructure_1.EventMgmtState.NotApplicable: {
                    this.curveShapeSpaceNavigator.eventMgmtAtExtremities.changeMngmtOfEventAtExtremity(new EventStateAtCurveExtremity_1.EventSlideOutsideCurve(this.curveShapeSpaceNavigator.eventMgmtAtExtremities));
                    this.curveShapeSpaceNavigator.eventMgmtAtExtremities.previousManagementOfEventsAtExtremities = ShapeSpaceDiffEventsStructure_1.EventMgmtState.Inactive;
                    break;
                }
            }
        }
        else if (!this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents) {
            if (this.curveShapeSpaceNavigator.eventMgmtAtExtremities !== undefined) {
                switch (this.shapeSpaceDiffEventsStructure.managementOfEventsAtExtremities) {
                    case ShapeSpaceDiffEventsStructure_1.EventMgmtState.Active: {
                        this.curveShapeSpaceNavigator.eventMgmtAtExtremities.previousManagementOfEventsAtExtremities = ShapeSpaceDiffEventsStructure_1.EventMgmtState.Active;
                        break;
                    }
                    case ShapeSpaceDiffEventsStructure_1.EventMgmtState.Inactive: {
                        this.curveShapeSpaceNavigator.eventMgmtAtExtremities.previousManagementOfEventsAtExtremities = ShapeSpaceDiffEventsStructure_1.EventMgmtState.Inactive;
                        break;
                    }
                }
                this.curveShapeSpaceNavigator.eventMgmtAtExtremities.changeMngmtOfEventAtExtremity(new EventStateAtCurveExtremity_1.NoEventToManageForCurve(this.curveShapeSpaceNavigator.eventMgmtAtExtremities));
            }
        }
    };
    return OCurveShapeMonitoringStrategy;
}(CurveShapeMonitoringStrategy));
exports.OCurveShapeMonitoringStrategy = OCurveShapeMonitoringStrategy;
var OCurveShapeMonitoringStrategyWithInflexionsNoSliding = /** @class */ (function (_super) {
    __extends(OCurveShapeMonitoringStrategyWithInflexionsNoSliding, _super);
    function OCurveShapeMonitoringStrategyWithInflexionsNoSliding(oCShapeSpaceNavigator) {
        var _this = _super.call(this, oCShapeSpaceNavigator) || this;
        _this.activeOptimizer = _this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer;
        if (!_this.activeOptimizer) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of activeNavigationWithOptimizer parameter.");
            error.logMessageToConsole();
        }
        else if (_this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of slidingDifferentialEvents parameter: sliding should be inactive.");
            error.logMessageToConsole();
        }
        /* JCL 2020/10/06 use optimization with inactive constraints dedicated to cubics */
        _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsNoInactiveConstraints(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
        _this._optimizer = _this.newOptimizer(_this._optimizationProblem);
        _this.setEventManagementAtCurveExtremityState();
        _this.lastDiffEvent = NeighboringEvents_1.NeighboringEventsType.none;
        return _this;
    }
    OCurveShapeMonitoringStrategyWithInflexionsNoSliding.prototype.newOptimizer = function (optimizationProblem) {
        optimizationProblem.setWeightingFactor();
        return new Optimizer_1.Optimizer(optimizationProblem);
    };
    OCurveShapeMonitoringStrategyWithInflexionsNoSliding.prototype.resetCurve = function (curve) {
        this.currentCurve = curve;
        this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsNoInactiveConstraints(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
        this._optimizer = this.newOptimizer(this._optimizationProblem);
    };
    return OCurveShapeMonitoringStrategyWithInflexionsNoSliding;
}(OCurveShapeMonitoringStrategy));
exports.OCurveShapeMonitoringStrategyWithInflexionsNoSliding = OCurveShapeMonitoringStrategyWithInflexionsNoSliding;
var OCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding = /** @class */ (function (_super) {
    __extends(OCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding, _super);
    function OCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding(oCShapeSpaceNavigator) {
        var _this = _super.call(this, oCShapeSpaceNavigator) || this;
        _this.activeOptimizer = oCShapeSpaceNavigator.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer;
        if (!_this.activeOptimizer) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of activeNavigationWithOptimizer parameter.");
            error.logMessageToConsole();
        }
        else if (_this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of slidingDifferentialEvents parameter: sliding should be inactive.");
            error.logMessageToConsole();
        }
        /* JCL 2020/10/06 use optimization with inactive constraints dedicated to cubics */
        _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsNoInactiveConstraints(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
        _this._optimizer = _this.newOptimizer(_this._optimizationProblem);
        _this.setEventManagementAtCurveExtremityState();
        _this.lastDiffEvent = NeighboringEvents_1.NeighboringEventsType.none;
        return _this;
    }
    OCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding.prototype.newOptimizer = function (optimizationProblem) {
        optimizationProblem.setWeightingFactor();
        return new Optimizer_1.Optimizer(optimizationProblem);
    };
    OCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding.prototype.resetCurve = function (curve) {
        this.currentCurve = curve;
        this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsNoInactiveConstraints(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
        this._optimizer = this.newOptimizer(this._optimizationProblem);
    };
    return OCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding;
}(OCurveShapeMonitoringStrategy));
exports.OCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding = OCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding;
var OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding = /** @class */ (function (_super) {
    __extends(OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding, _super);
    function OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding(oCShapeSpaceNavigator) {
        var _this = _super.call(this, oCShapeSpaceNavigator) || this;
        _this.activeOptimizer = oCShapeSpaceNavigator.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer;
        if (!_this.activeOptimizer) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of activeNavigationWithOptimizer parameter.");
            error.logMessageToConsole();
        }
        else if (_this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of slidingDifferentialEvents parameter: sliding should be inactive.");
            error.logMessageToConsole();
        }
        /* JCL 2020/10/06 use optimization with inactive constraints dedicated to cubics */
        _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsNoInactiveConstraints(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
        _this._optimizer = _this.newOptimizer(_this._optimizationProblem);
        _this.setEventManagementAtCurveExtremityState();
        _this.lastDiffEvent = NeighboringEvents_1.NeighboringEventsType.none;
        return _this;
    }
    OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding.prototype.newOptimizer = function (optimizationProblem) {
        optimizationProblem.setWeightingFactor();
        return new Optimizer_1.Optimizer(optimizationProblem);
    };
    OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding.prototype.resetCurve = function (curve) {
        this.currentCurve = curve;
        this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsNoInactiveConstraints(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
        this._optimizer = this.newOptimizer(this._optimizationProblem);
    };
    return OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding;
}(OCurveShapeMonitoringStrategy));
exports.OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding = OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding;
var OCurveShapeMonitoringStrategyWithNoDiffEventNoSliding = /** @class */ (function (_super) {
    __extends(OCurveShapeMonitoringStrategyWithNoDiffEventNoSliding, _super);
    function OCurveShapeMonitoringStrategyWithNoDiffEventNoSliding(oCShapeSpaceNavigator) {
        var _this = _super.call(this, oCShapeSpaceNavigator) || this;
        _this.activeOptimizer = oCShapeSpaceNavigator.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer;
        if (_this.activeOptimizer) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of activeNavigationWithOptimizer parameter.");
            error.logMessageToConsole();
        }
        else if (_this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of slidingDifferentialEvents parameter: sliding should be inactive.");
            error.logMessageToConsole();
        }
        /* JCL 2020/10/06 use optimization with inactive constraints dedicated to cubics */
        _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsNoInactiveConstraints(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
        _this._optimizer = _this.newOptimizer(_this._optimizationProblem);
        _this.setEventManagementAtCurveExtremityState();
        _this.lastDiffEvent = NeighboringEvents_1.NeighboringEventsType.none;
        return _this;
    }
    OCurveShapeMonitoringStrategyWithNoDiffEventNoSliding.prototype.newOptimizer = function (optimizationProblem) {
        optimizationProblem.setWeightingFactor();
        return new Optimizer_1.Optimizer(optimizationProblem);
    };
    OCurveShapeMonitoringStrategyWithNoDiffEventNoSliding.prototype.resetCurve = function (curve) {
        this.currentCurve = curve;
        this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsNoInactiveConstraints(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
        this._optimizer = this.newOptimizer(this._optimizationProblem);
    };
    return OCurveShapeMonitoringStrategyWithNoDiffEventNoSliding;
}(OCurveShapeMonitoringStrategy));
exports.OCurveShapeMonitoringStrategyWithNoDiffEventNoSliding = OCurveShapeMonitoringStrategyWithNoDiffEventNoSliding;
var OCurveShapeMonitoringStrategyWithInflexionsSliding = /** @class */ (function (_super) {
    __extends(OCurveShapeMonitoringStrategyWithInflexionsSliding, _super);
    function OCurveShapeMonitoringStrategyWithInflexionsSliding(oCShapeSpaceNavigator) {
        var _this = _super.call(this, oCShapeSpaceNavigator) || this;
        _this.activeOptimizer = _this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer;
        if (!_this.activeOptimizer) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of activeNavigationWithOptimizer parameter.");
            error.logMessageToConsole();
        }
        else if (!_this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of slidingDifferentialEvents parameter: sliding should be active.");
            error.logMessageToConsole();
        }
        if (_this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationThroughSimplerShapeSpaces) {
            if (_this.curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure.managementOfEventsAtExtremities === ShapeSpaceDiffEventsStructure_1.EventMgmtState.Active) {
                _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
            }
            else {
                _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactors(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
            }
        }
        else if (_this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationStrictlyInsideShapeSpace) {
            _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure, _this.openCShapeSpaceNavigator);
        }
        else {
            _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactors(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
        }
        _this._optimizer = _this.newOptimizer(_this._optimizationProblem);
        _this.setEventManagementAtCurveExtremityState();
        _this.lastDiffEvent = NeighboringEvents_1.NeighboringEventsType.none;
        return _this;
    }
    OCurveShapeMonitoringStrategyWithInflexionsSliding.prototype.newOptimizer = function (optimizationProblem) {
        optimizationProblem.setWeightingFactor();
        return new Optimizer_1.Optimizer(optimizationProblem);
    };
    OCurveShapeMonitoringStrategyWithInflexionsSliding.prototype.resetCurve = function (curve) {
        this.currentCurve = curve;
        if (this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationThroughSimplerShapeSpaces) {
            if (this.curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure.managementOfEventsAtExtremities === ShapeSpaceDiffEventsStructure_1.EventMgmtState.Active) {
                this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
            }
            else {
                this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactors(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
            }
        }
        else if (this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationStrictlyInsideShapeSpace) {
            this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure, this.openCShapeSpaceNavigator);
        }
        else {
            this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactors(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
        }
        this._optimizer = this.newOptimizer(this._optimizationProblem);
    };
    return OCurveShapeMonitoringStrategyWithInflexionsSliding;
}(OCurveShapeMonitoringStrategy));
exports.OCurveShapeMonitoringStrategyWithInflexionsSliding = OCurveShapeMonitoringStrategyWithInflexionsSliding;
var OCurveShapeMonitoringStrategyWithCurvatureExtremaSliding = /** @class */ (function (_super) {
    __extends(OCurveShapeMonitoringStrategyWithCurvatureExtremaSliding, _super);
    function OCurveShapeMonitoringStrategyWithCurvatureExtremaSliding(oCShapeSpaceNavigator) {
        var _this = _super.call(this, oCShapeSpaceNavigator) || this;
        _this.activeOptimizer = oCShapeSpaceNavigator.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer;
        if (!_this.activeOptimizer) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of activeNavigationWithOptimizer parameter.");
            error.logMessageToConsole();
        }
        else if (!_this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of slidingDifferentialEvents parameter: sliding should be active.");
            error.logMessageToConsole();
        }
        if (_this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationThroughSimplerShapeSpaces) {
            if (_this.curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure.managementOfEventsAtExtremities === ShapeSpaceDiffEventsStructure_1.EventMgmtState.Active) {
                _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
            }
            else {
                _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactors(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
            }
        }
        else if (_this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationStrictlyInsideShapeSpace) {
            _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure, _this.openCShapeSpaceNavigator);
        }
        else {
            _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactors(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
        }
        _this._optimizer = _this.newOptimizer(_this._optimizationProblem);
        _this.setEventManagementAtCurveExtremityState();
        _this.lastDiffEvent = NeighboringEvents_1.NeighboringEventsType.none;
        return _this;
    }
    OCurveShapeMonitoringStrategyWithCurvatureExtremaSliding.prototype.newOptimizer = function (optimizationProblem) {
        optimizationProblem.setWeightingFactor();
        return new Optimizer_1.Optimizer(optimizationProblem);
    };
    OCurveShapeMonitoringStrategyWithCurvatureExtremaSliding.prototype.resetCurve = function (curve) {
        this.currentCurve = curve;
        if (this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationThroughSimplerShapeSpaces) {
            if (this.curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure.managementOfEventsAtExtremities === ShapeSpaceDiffEventsStructure_1.EventMgmtState.Active) {
                this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
            }
            else {
                this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactors(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
            }
        }
        else if (this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationStrictlyInsideShapeSpace) {
            this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure, this.openCShapeSpaceNavigator);
        }
        else {
            this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactors(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
        }
        this._optimizer = this.newOptimizer(this._optimizationProblem);
    };
    return OCurveShapeMonitoringStrategyWithCurvatureExtremaSliding;
}(OCurveShapeMonitoringStrategy));
exports.OCurveShapeMonitoringStrategyWithCurvatureExtremaSliding = OCurveShapeMonitoringStrategyWithCurvatureExtremaSliding;
var OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding = /** @class */ (function (_super) {
    __extends(OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding, _super);
    function OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding(oCShapeSpaceNavigator) {
        var _this = _super.call(this, oCShapeSpaceNavigator) || this;
        _this.activeOptimizer = oCShapeSpaceNavigator.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer;
        if (!_this.activeOptimizer) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of activeNavigationWithOptimizer parameter.");
            error.logMessageToConsole();
        }
        else if (!_this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of slidingDifferentialEvents parameter: sliding should be active.");
            error.logMessageToConsole();
        }
        if (_this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationThroughSimplerShapeSpaces) {
            if (_this.curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure.managementOfEventsAtExtremities === ShapeSpaceDiffEventsStructure_1.EventMgmtState.Active) {
                _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
            }
            else {
                _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactors(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
            }
        }
        else if (_this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationStrictlyInsideShapeSpace) {
            _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure, _this.openCShapeSpaceNavigator);
        }
        else {
            _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactors(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
        }
        _this._optimizer = _this.newOptimizer(_this._optimizationProblem);
        _this.setEventManagementAtCurveExtremityState();
        _this.lastDiffEvent = NeighboringEvents_1.NeighboringEventsType.none;
        return _this;
    }
    OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding.prototype.newOptimizer = function (optimizationProblem) {
        optimizationProblem.setWeightingFactor();
        return new Optimizer_1.Optimizer(optimizationProblem);
    };
    OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding.prototype.resetCurve = function (curve) {
        this.currentCurve = curve;
        if (this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationThroughSimplerShapeSpaces) {
            if (this.curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure.managementOfEventsAtExtremities === ShapeSpaceDiffEventsStructure_1.EventMgmtState.Active) {
                this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
            }
            else {
                this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactors(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
            }
        }
        else if (this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationStrictlyInsideShapeSpace) {
            this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure, this.openCShapeSpaceNavigator);
        }
        else {
            this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactors(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
        }
        this._optimizer = this.newOptimizer(this._optimizationProblem);
    };
    return OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding;
}(OCurveShapeMonitoringStrategy));
exports.OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding = OCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding;
var OCurveShapeMonitoringStrategyWithNoDiffEventSliding = /** @class */ (function (_super) {
    __extends(OCurveShapeMonitoringStrategyWithNoDiffEventSliding, _super);
    function OCurveShapeMonitoringStrategyWithNoDiffEventSliding(oCShapeSpaceNavigator) {
        var _this = _super.call(this, oCShapeSpaceNavigator) || this;
        _this.activeOptimizer = oCShapeSpaceNavigator.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer;
        if (_this.activeOptimizer) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of activeNavigationWithOptimizer parameter.");
            error.logMessageToConsole();
        }
        else if (_this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents) {
            // The sliding state cannot be active when control of inflections and curvature extrema are deactivated
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of slidingDifferentialEvents parameter: sliding should be inactive.");
            error.logMessageToConsole();
        }
        if (_this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationThroughSimplerShapeSpaces) {
            _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactors(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
        }
        else if (_this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationStrictlyInsideShapeSpace) {
            _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure, _this.openCShapeSpaceNavigator);
        }
        else {
            _this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactors(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
        }
        _this._optimizer = _this.newOptimizer(_this._optimizationProblem);
        _this.setEventManagementAtCurveExtremityState();
        _this.lastDiffEvent = NeighboringEvents_1.NeighboringEventsType.none;
        return _this;
    }
    OCurveShapeMonitoringStrategyWithNoDiffEventSliding.prototype.newOptimizer = function (optimizationProblem) {
        optimizationProblem.setWeightingFactor();
        return new Optimizer_1.Optimizer(optimizationProblem);
    };
    OCurveShapeMonitoringStrategyWithNoDiffEventSliding.prototype.resetCurve = function (curve) {
        this.currentCurve = curve;
        if (this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationThroughSimplerShapeSpaces) {
            this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactors(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
        }
        else if (this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationStrictlyInsideShapeSpace) {
            this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure, this.openCShapeSpaceNavigator);
        }
        else {
            this._optimizationProblem = new OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactors(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
        }
        this._optimizer = this.newOptimizer(this._optimizationProblem);
    };
    return OCurveShapeMonitoringStrategyWithNoDiffEventSliding;
}(OCurveShapeMonitoringStrategy));
exports.OCurveShapeMonitoringStrategyWithNoDiffEventSliding = OCurveShapeMonitoringStrategyWithNoDiffEventSliding;
var CCurveShapeMonitoringStrategy = /** @class */ (function (_super) {
    __extends(CCurveShapeMonitoringStrategy, _super);
    function CCurveShapeMonitoringStrategy(cCShapeSpaceNavigator) {
        var _this = _super.call(this, cCShapeSpaceNavigator) || this;
        _this.closedCShapeSpaceNavigator = cCShapeSpaceNavigator;
        _this.currentCurve = cCShapeSpaceNavigator.currentCurve;
        return _this;
    }
    Object.defineProperty(CCurveShapeMonitoringStrategy.prototype, "optimizationProblem", {
        get: function () {
            return this._optimizationProblem;
        },
        set: function (optimizationProblem) {
            this._optimizationProblem = optimizationProblem;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CCurveShapeMonitoringStrategy.prototype, "optimizer", {
        get: function () {
            return this._optimizer;
        },
        set: function (optimizer) {
            this._optimizer = optimizer;
        },
        enumerable: false,
        configurable: true
    });
    // setWeightingFactor(optimizationProblem: OpPeriodicBSplineR1toR2): void {
    //     optimizationProblem.weigthingFactors[0] = 10;
    //     optimizationProblem.weigthingFactors[this.currentCurve.controlPoints.length] = 10;
    //     optimizationProblem.weigthingFactors[this.currentCurve.controlPoints.length-1] = 10;
    //     optimizationProblem.weigthingFactors[this.currentCurve.controlPoints.length*2-1] = 10;
    // }
    CCurveShapeMonitoringStrategy.prototype.resetAfterCurveChange = function () {
        // this.currentCurve = this.closedCShapeSpaceNavigator.curveModel.spline;
        this.resetCurve(this.closedCShapeSpaceNavigator.curveModel.spline);
    };
    return CCurveShapeMonitoringStrategy;
}(CurveShapeMonitoringStrategy));
exports.CCurveShapeMonitoringStrategy = CCurveShapeMonitoringStrategy;
var CCurveShapeMonitoringStrategyWithInflexionsNoSliding = /** @class */ (function (_super) {
    __extends(CCurveShapeMonitoringStrategyWithInflexionsNoSliding, _super);
    function CCurveShapeMonitoringStrategyWithInflexionsNoSliding(cCShapeSpaceNavigator) {
        var _this = _super.call(this, cCShapeSpaceNavigator) || this;
        _this.activeOptimizer = _this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer;
        if (!_this.activeOptimizer) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of activeNavigationWithOptimizer parameter.");
            error.logMessageToConsole();
        }
        else if (_this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of slidingDifferentialEvents parameter: sliding should be inactive.");
            error.logMessageToConsole();
        }
        /* JCL 2020/10/06 use optimization with inactive constraints dedicated to cubics */
        _this._optimizationProblem = new OptProblemPeriodicBSplineR1toR2_1.OptProblemPeriodicBSplineR1toR2NoInactiveConstraints(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
        /*this.optimizationProblem = new  OptProblemBSplineR1toR2WithWeigthingFactorsDedicatedToCubics(this.curveModel.spline.clone(), this.curveModel.spline.clone(), activeControl) */
        _this._optimizer = _this.newOptimizer(_this._optimizationProblem);
        _this.lastDiffEvent = NeighboringEvents_1.NeighboringEventsType.none;
        return _this;
    }
    CCurveShapeMonitoringStrategyWithInflexionsNoSliding.prototype.newOptimizer = function (optimizationProblem) {
        // this.setWeightingFactor(optimizationProblem);
        return new Optimizer_1.Optimizer(optimizationProblem);
    };
    CCurveShapeMonitoringStrategyWithInflexionsNoSliding.prototype.resetCurve = function (curve) {
        this.currentCurve = curve;
        this._optimizationProblem = new OptProblemPeriodicBSplineR1toR2_1.OptProblemPeriodicBSplineR1toR2NoInactiveConstraints(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
        /*this.optimizationProblem = new  OptProblemBSplineR1toR2WithWeigthingFactorsDedicatedToCubics(this.curveModel.spline.clone(), this.curveModel.spline.clone()) */
        this._optimizer = this.newOptimizer(this._optimizationProblem);
    };
    CCurveShapeMonitoringStrategyWithInflexionsNoSliding.prototype.optimize = function (selectedControlPoint, ndcX, ndcY) {
        // Do nothing -> for temporary compatibility
    };
    return CCurveShapeMonitoringStrategyWithInflexionsNoSliding;
}(CCurveShapeMonitoringStrategy));
exports.CCurveShapeMonitoringStrategyWithInflexionsNoSliding = CCurveShapeMonitoringStrategyWithInflexionsNoSliding;
var CCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding = /** @class */ (function (_super) {
    __extends(CCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding, _super);
    function CCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding(cCShapeSpaceNavigator) {
        var _this = _super.call(this, cCShapeSpaceNavigator) || this;
        _this.activeOptimizer = _this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer;
        if (!_this.activeOptimizer) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of activeNavigationWithOptimizer parameter.");
            error.logMessageToConsole();
        }
        else if (_this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of slidingDifferentialEvents parameter: sliding should be inactive.");
            error.logMessageToConsole();
        }
        /* JCL 2020/10/06 use optimization with inactive constraints dedicated to cubics */
        _this._optimizationProblem = new OptProblemPeriodicBSplineR1toR2_1.OptProblemPeriodicBSplineR1toR2NoInactiveConstraints(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
        /*this.optimizationProblem = new  OptProblemBSplineR1toR2WithWeigthingFactorsDedicatedToCubics(this.curveModel.spline.clone(), this.curveModel.spline.clone(), activeControl) */
        _this._optimizer = _this.newOptimizer(_this._optimizationProblem);
        _this.lastDiffEvent = NeighboringEvents_1.NeighboringEventsType.none;
        return _this;
    }
    CCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding.prototype.newOptimizer = function (optimizationProblem) {
        // this.setWeightingFactor(optimizationProblem);
        return new Optimizer_1.Optimizer(optimizationProblem);
    };
    CCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding.prototype.resetCurve = function (curve) {
        this.currentCurve = curve;
        this._optimizationProblem = new OptProblemPeriodicBSplineR1toR2_1.OptProblemPeriodicBSplineR1toR2NoInactiveConstraints(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
        /*this.optimizationProblem = new  OptProblemBSplineR1toR2WithWeigthingFactorsDedicatedToCubics(this.curveModel.spline.clone(), this.curveModel.spline.clone()) */
        this._optimizer = this.newOptimizer(this._optimizationProblem);
    };
    CCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding.prototype.optimize = function (selectedControlPoint, ndcX, ndcY) {
        // Do nothing -> for temporary compatibility
    };
    return CCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding;
}(CCurveShapeMonitoringStrategy));
exports.CCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding = CCurveShapeMonitoringStrategyWithCurvatureExtremaNoSliding;
var CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding = /** @class */ (function (_super) {
    __extends(CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding, _super);
    function CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding(cCShapeSpaceNavigator) {
        var _this = _super.call(this, cCShapeSpaceNavigator) || this;
        _this.activeOptimizer = _this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer;
        if (!_this.activeOptimizer) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of activeNavigationWithOptimizer parameter.");
            error.logMessageToConsole();
        }
        else if (_this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of slidingDifferentialEvents parameter: sliding should be inactive.");
            error.logMessageToConsole();
        }
        /* JCL 2020/10/06 use optimization with inactive constraints dedicated to cubics */
        _this._optimizationProblem = new OptProblemPeriodicBSplineR1toR2_1.OptProblemPeriodicBSplineR1toR2NoInactiveConstraints(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
        /*this.optimizationProblem = new  OptProblemBSplineR1toR2WithWeigthingFactorsDedicatedToCubics(this.curveModel.spline.clone(), this.curveModel.spline.clone(), activeControl) */
        _this._optimizer = _this.newOptimizer(_this._optimizationProblem);
        _this.lastDiffEvent = NeighboringEvents_1.NeighboringEventsType.none;
        return _this;
    }
    CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding.prototype.newOptimizer = function (optimizationProblem) {
        // this.setWeightingFactor(optimizationProblem);
        return new Optimizer_1.Optimizer(optimizationProblem);
    };
    CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding.prototype.resetCurve = function (curve) {
        this.currentCurve = curve;
        this._optimizationProblem = new OptProblemPeriodicBSplineR1toR2_1.OptProblemPeriodicBSplineR1toR2NoInactiveConstraints(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
        /*this.optimizationProblem = new  OptProblemBSplineR1toR2WithWeigthingFactorsDedicatedToCubics(this.curveModel.spline.clone(), this.curveModel.spline.clone()) */
        this._optimizer = this.newOptimizer(this._optimizationProblem);
    };
    CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding.prototype.optimize = function (selectedControlPoint, ndcX, ndcY) {
        // Do nothing -> for temporary compatibility
    };
    return CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding;
}(CCurveShapeMonitoringStrategy));
exports.CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding = CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaNoSliding;
var CCurveShapeMonitoringStrategyWithNoDiffEventNoSliding = /** @class */ (function (_super) {
    __extends(CCurveShapeMonitoringStrategyWithNoDiffEventNoSliding, _super);
    function CCurveShapeMonitoringStrategyWithNoDiffEventNoSliding(cCShapeSpaceNavigator) {
        var _this = _super.call(this, cCShapeSpaceNavigator) || this;
        _this.activeOptimizer = _this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer;
        if (_this.activeOptimizer) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of activeNavigationWithOptimizer parameter.");
            error.logMessageToConsole();
        }
        else if (_this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of slidingDifferentialEvents parameter: sliding should be inactive.");
            error.logMessageToConsole();
        }
        /* JCL 2020/10/06 use optimization with inactive constraints dedicated to cubics */
        _this._optimizationProblem = new OptProblemPeriodicBSplineR1toR2_1.OptProblemPeriodicBSplineR1toR2NoInactiveConstraints(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
        /*this.optimizationProblem = new  OptProblemBSplineR1toR2WithWeigthingFactorsDedicatedToCubics(this.curveModel.spline.clone(), this.curveModel.spline.clone(), activeControl) */
        _this._optimizer = _this.newOptimizer(_this._optimizationProblem);
        _this.lastDiffEvent = NeighboringEvents_1.NeighboringEventsType.none;
        return _this;
    }
    CCurveShapeMonitoringStrategyWithNoDiffEventNoSliding.prototype.newOptimizer = function (optimizationProblem) {
        // this.setWeightingFactor(optimizationProblem);
        return new Optimizer_1.Optimizer(optimizationProblem);
    };
    CCurveShapeMonitoringStrategyWithNoDiffEventNoSliding.prototype.resetCurve = function (curve) {
        this.currentCurve = curve;
        this._optimizationProblem = new OptProblemPeriodicBSplineR1toR2_1.OptProblemPeriodicBSplineR1toR2NoInactiveConstraints(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
        /*this.optimizationProblem = new  OptProblemBSplineR1toR2WithWeigthingFactorsDedicatedToCubics(this.curveModel.spline.clone(), this.curveModel.spline.clone()) */
        this._optimizer = this.newOptimizer(this._optimizationProblem);
    };
    CCurveShapeMonitoringStrategyWithNoDiffEventNoSliding.prototype.optimize = function (selectedControlPoint, ndcX, ndcY) {
        // Do nothing -> for temporary compatibility
    };
    return CCurveShapeMonitoringStrategyWithNoDiffEventNoSliding;
}(CCurveShapeMonitoringStrategy));
exports.CCurveShapeMonitoringStrategyWithNoDiffEventNoSliding = CCurveShapeMonitoringStrategyWithNoDiffEventNoSliding;
var CCurveShapeMonitoringStrategyWithInflexionsSliding = /** @class */ (function (_super) {
    __extends(CCurveShapeMonitoringStrategyWithInflexionsSliding, _super);
    function CCurveShapeMonitoringStrategyWithInflexionsSliding(cCShapeSpaceNavigator) {
        var _this = _super.call(this, cCShapeSpaceNavigator) || this;
        _this.activeOptimizer = _this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer;
        if (!_this.activeOptimizer) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of activeNavigationWithOptimizer parameter.");
            error.logMessageToConsole();
        }
        else if (!_this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of slidingDifferentialEvents parameter: sliding should be active.");
            error.logMessageToConsole();
        }
        /* JCL 2020/10/06 use optimization with inactive constraints dedicated to cubics */
        _this._optimizationProblem = new OptProblemPeriodicBSplineR1toR2_1.OptProblemPeriodicBSplineR1toR2(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
        /*this.optimizationProblem = new  OptProblemBSplineR1toR2WithWeigthingFactorsDedicatedToCubics(this.curveModel.spline.clone(), this.curveModel.spline.clone(), activeControl) */
        _this._optimizer = _this.newOptimizer(_this._optimizationProblem);
        _this.lastDiffEvent = NeighboringEvents_1.NeighboringEventsType.none;
        return _this;
    }
    CCurveShapeMonitoringStrategyWithInflexionsSliding.prototype.newOptimizer = function (optimizationProblem) {
        // this.setWeightingFactor(optimizationProblem);
        return new Optimizer_1.Optimizer(optimizationProblem);
    };
    CCurveShapeMonitoringStrategyWithInflexionsSliding.prototype.resetCurve = function (curve) {
        this.currentCurve = curve;
        this.optimizationProblem = new OptProblemPeriodicBSplineR1toR2_1.OptProblemPeriodicBSplineR1toR2(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
        /*this.optimizationProblem = new  OptProblemBSplineR1toR2WithWeigthingFactorsDedicatedToCubics(this.curveModel.spline.clone(), this.curveModel.spline.clone()) */
        this._optimizer = this.newOptimizer(this.optimizationProblem);
    };
    CCurveShapeMonitoringStrategyWithInflexionsSliding.prototype.optimize = function (selectedControlPoint, ndcX, ndcY) {
        // Do nothing -> for temporary compatibility
    };
    return CCurveShapeMonitoringStrategyWithInflexionsSliding;
}(CCurveShapeMonitoringStrategy));
exports.CCurveShapeMonitoringStrategyWithInflexionsSliding = CCurveShapeMonitoringStrategyWithInflexionsSliding;
var CCurveShapeMonitoringStrategyWithCurvatureExtremaSliding = /** @class */ (function (_super) {
    __extends(CCurveShapeMonitoringStrategyWithCurvatureExtremaSliding, _super);
    function CCurveShapeMonitoringStrategyWithCurvatureExtremaSliding(cCShapeSpaceNavigator) {
        var _this = _super.call(this, cCShapeSpaceNavigator) || this;
        _this.activeOptimizer = _this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer;
        if (!_this.activeOptimizer) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of activeNavigationWithOptimizer parameter.");
            error.logMessageToConsole();
        }
        else if (!_this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of slidingDifferentialEvents parameter: sliding should be active.");
            error.logMessageToConsole();
        }
        /* JCL 2020/10/06 use optimization with inactive constraints dedicated to cubics */
        _this._optimizationProblem = new OptProblemPeriodicBSplineR1toR2_1.OptProblemPeriodicBSplineR1toR2(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
        /*this.optimizationProblem = new  OptProblemBSplineR1toR2WithWeigthingFactorsDedicatedToCubics(this.curveModel.spline.clone(), this.curveModel.spline.clone(), activeControl) */
        _this._optimizer = _this.newOptimizer(_this._optimizationProblem);
        _this.lastDiffEvent = NeighboringEvents_1.NeighboringEventsType.none;
        return _this;
    }
    CCurveShapeMonitoringStrategyWithCurvatureExtremaSliding.prototype.newOptimizer = function (optimizationProblem) {
        // this.setWeightingFactor(optimizationProblem);
        return new Optimizer_1.Optimizer(optimizationProblem);
    };
    CCurveShapeMonitoringStrategyWithCurvatureExtremaSliding.prototype.resetCurve = function (curve) {
        this.currentCurve = curve;
        this.optimizationProblem = new OptProblemPeriodicBSplineR1toR2_1.OptProblemPeriodicBSplineR1toR2(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
        /*this.optimizationProblem = new  OptProblemBSplineR1toR2WithWeigthingFactorsDedicatedToCubics(this.curveModel.spline.clone(), this.curveModel.spline.clone()) */
        this._optimizer = this.newOptimizer(this.optimizationProblem);
    };
    CCurveShapeMonitoringStrategyWithCurvatureExtremaSliding.prototype.optimize = function (selectedControlPoint, ndcX, ndcY) {
        // Do nothing -> for temporary compatibility
    };
    return CCurveShapeMonitoringStrategyWithCurvatureExtremaSliding;
}(CCurveShapeMonitoringStrategy));
exports.CCurveShapeMonitoringStrategyWithCurvatureExtremaSliding = CCurveShapeMonitoringStrategyWithCurvatureExtremaSliding;
var CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding = /** @class */ (function (_super) {
    __extends(CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding, _super);
    function CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding(cCShapeSpaceNavigator) {
        var _this = _super.call(this, cCShapeSpaceNavigator) || this;
        _this.activeOptimizer = _this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer;
        if (!_this.activeOptimizer) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of activeNavigationWithOptimizer parameter.");
            error.logMessageToConsole();
        }
        else if (!_this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of slidingDifferentialEvents parameter: sliding should be active.");
            error.logMessageToConsole();
        }
        /* JCL 2020/10/06 use optimization with inactive constraints dedicated to cubics */
        _this._optimizationProblem = new OptProblemPeriodicBSplineR1toR2_1.OptProblemPeriodicBSplineR1toR2(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
        /*this.optimizationProblem = new  OptProblemBSplineR1toR2WithWeigthingFactorsDedicatedToCubics(this.curveModel.spline.clone(), this.curveModel.spline.clone(), activeControl) */
        _this._optimizer = _this.newOptimizer(_this._optimizationProblem);
        _this.lastDiffEvent = NeighboringEvents_1.NeighboringEventsType.none;
        return _this;
    }
    CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding.prototype.newOptimizer = function (optimizationProblem) {
        // this.setWeightingFactor(optimizationProblem);
        return new Optimizer_1.Optimizer(optimizationProblem);
    };
    CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding.prototype.resetCurve = function (curve) {
        this.currentCurve = curve;
        this.optimizationProblem = new OptProblemPeriodicBSplineR1toR2_1.OptProblemPeriodicBSplineR1toR2(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
        /*this.optimizationProblem = new  OptProblemBSplineR1toR2WithWeigthingFactorsDedicatedToCubics(this.curveModel.spline.clone(), this.curveModel.spline.clone()) */
        this._optimizer = this.newOptimizer(this.optimizationProblem);
    };
    CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding.prototype.optimize = function (selectedControlPoint, ndcX, ndcY) {
        // Do nothing -> for temporary compatibility
    };
    return CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding;
}(CCurveShapeMonitoringStrategy));
exports.CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding = CCurveShapeMonitoringStrategyWithInflectionsAndCurvatureExtremaSliding;
var CCurveShapeMonitoringStrategyWithNoDiffEventSliding = /** @class */ (function (_super) {
    __extends(CCurveShapeMonitoringStrategyWithNoDiffEventSliding, _super);
    function CCurveShapeMonitoringStrategyWithNoDiffEventSliding(cCShapeSpaceNavigator) {
        var _this = _super.call(this, cCShapeSpaceNavigator) || this;
        _this.activeOptimizer = _this.shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer;
        if (_this.activeOptimizer) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of activeNavigationWithOptimizer parameter.");
            error.logMessageToConsole();
        }
        else if (_this.shapeSpaceDiffEventsStructure.slidingDifferentialEvents) {
            // The sliding state cannot be active when control of inflections and curvature extrema are deactivated
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent status of slidingDifferentialEvents parameter: sliding should be inactive.");
            error.logMessageToConsole();
        }
        /* JCL 2020/10/06 use optimization with inactive constraints dedicated to cubics */
        _this._optimizationProblem = new OptProblemPeriodicBSplineR1toR2_1.OptProblemPeriodicBSplineR1toR2(_this.currentCurve.clone(), _this.shapeSpaceDiffEventsStructure);
        /*this.optimizationProblem = new  OptProblemBSplineR1toR2WithWeigthingFactorsDedicatedToCubics(this.curveModel.spline.clone(), this.curveModel.spline.clone(), activeControl) */
        _this._optimizer = _this.newOptimizer(_this._optimizationProblem);
        _this.lastDiffEvent = NeighboringEvents_1.NeighboringEventsType.none;
        return _this;
    }
    CCurveShapeMonitoringStrategyWithNoDiffEventSliding.prototype.newOptimizer = function (optimizationProblem) {
        // this.setWeightingFactor(optimizationProblem);
        return new Optimizer_1.Optimizer(optimizationProblem);
    };
    CCurveShapeMonitoringStrategyWithNoDiffEventSliding.prototype.resetCurve = function (curve) {
        this.currentCurve = curve;
        this.optimizationProblem = new OptProblemPeriodicBSplineR1toR2_1.OptProblemPeriodicBSplineR1toR2(this.currentCurve.clone(), this.shapeSpaceDiffEventsStructure);
        /*this.optimizationProblem = new  OptProblemBSplineR1toR2WithWeigthingFactorsDedicatedToCubics(this.curveModel.spline.clone(), this.curveModel.spline.clone()) */
        this._optimizer = this.newOptimizer(this.optimizationProblem);
    };
    CCurveShapeMonitoringStrategyWithNoDiffEventSliding.prototype.optimize = function (selectedControlPoint, ndcX, ndcY) {
        // Do nothing -> for temporary compatibility
    };
    return CCurveShapeMonitoringStrategyWithNoDiffEventSliding;
}(CCurveShapeMonitoringStrategy));
exports.CCurveShapeMonitoringStrategyWithNoDiffEventSliding = CCurveShapeMonitoringStrategyWithNoDiffEventSliding;


/***/ }),

/***/ "./src/curveShapeSpaceAnalysis/AbstractCurveDifferentialEventsExtractor.ts":
/*!*********************************************************************************!*\
  !*** ./src/curveShapeSpaceAnalysis/AbstractCurveDifferentialEventsExtractor.ts ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractCurveDifferentialEventsExtractor = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var SequenceOfDifferentialEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/SequenceOfDifferentialEvents */ "./src/sequenceOfDifferentialEvents/SequenceOfDifferentialEvents.ts");
var CurveDifferentialEventsLocations_1 = __webpack_require__(/*! ./CurveDifferentialEventsLocations */ "./src/curveShapeSpaceAnalysis/CurveDifferentialEventsLocations.ts");
var AbstractCurveDifferentialEventsExtractor = /** @class */ (function () {
    function AbstractCurveDifferentialEventsExtractor(curveToAnalyze) {
        this._observers = [];
        this._observersCP = [];
        this.curve = curveToAnalyze;
        this._sequenceOfDifferentialEvents = new SequenceOfDifferentialEvents_1.SequenceOfDifferentialEvents();
        this._crvDiffEventsLocations = new CurveDifferentialEventsLocations_1.CurveDifferentialEventsLocations();
    }
    Object.defineProperty(AbstractCurveDifferentialEventsExtractor.prototype, "sequenceOfDifferentialEvents", {
        get: function () {
            return this._sequenceOfDifferentialEvents;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractCurveDifferentialEventsExtractor.prototype, "crvDiffEventsLocations", {
        get: function () {
            return this._crvDiffEventsLocations;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractCurveDifferentialEventsExtractor.prototype, "observers", {
        get: function () {
            return this._observers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractCurveDifferentialEventsExtractor.prototype, "observersCP", {
        get: function () {
            return this._observersCP;
        },
        enumerable: false,
        configurable: true
    });
    AbstractCurveDifferentialEventsExtractor.prototype.registerObserver = function (observer, kind) {
        switch (kind) {
            case 'curve':
                this._observers.push(observer);
                var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'registerObserver', 'register as curve' + observer.constructor.name);
                warning.logMessageToConsole();
                break;
            case 'control points':
                this._observersCP.push(observer);
                warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'registerObserver', 'register as CP' + observer.constructor.name);
                warning.logMessageToConsole();
                break;
            default:
                throw Error("unknown kind");
        }
    };
    AbstractCurveDifferentialEventsExtractor.prototype.removeObserver = function (observer, kind) {
        switch (kind) {
            case 'curve':
                this._observers.splice(this._observers.indexOf(observer), 1);
                break;
            case 'control points':
                this._observersCP.splice(this._observersCP.indexOf(observer), 1);
                break;
        }
    };
    AbstractCurveDifferentialEventsExtractor.prototype.notifyObservers = function () {
        var e_1, _a, e_2, _b;
        try {
            for (var _c = __values(this._observers), _d = _c.next(); !_d.done; _d = _c.next()) {
                var observer = _d.value;
                // const warning = new WarningLog(this.constructor.name, 'notifyObservers', "update as curve: " + observer.constructor.name);
                // warning.logMessageToConsole();
                observer.update(this._crvDiffEventsLocations.clone());
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var _e = __values(this._observersCP), _f = _e.next(); !_f.done; _f = _e.next()) {
                var observer = _f.value;
                // const warning = new WarningLog(this.constructor.name, 'notifyObservers', "update as curve: " + observer.constructor.name);
                // warning.logMessageToConsole();
                observer.update(this._crvDiffEventsLocations.clone());
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    return AbstractCurveDifferentialEventsExtractor;
}());
exports.AbstractCurveDifferentialEventsExtractor = AbstractCurveDifferentialEventsExtractor;


/***/ }),

/***/ "./src/curveShapeSpaceAnalysis/ClosedCurveDifferentialEventsExtractor.ts":
/*!*******************************************************************************!*\
  !*** ./src/curveShapeSpaceAnalysis/ClosedCurveDifferentialEventsExtractor.ts ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClosedCurveDifferentialEventsExtractor = void 0;
var PeriodicBSplineR1toR2DifferentialProperties_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR2DifferentialProperties */ "./src/newBsplines/PeriodicBSplineR1toR2DifferentialProperties.ts");
var SequenceOfDifferentialEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/SequenceOfDifferentialEvents */ "./src/sequenceOfDifferentialEvents/SequenceOfDifferentialEvents.ts");
var AbstractCurveDifferentialEventsExtractor_1 = __webpack_require__(/*! ./AbstractCurveDifferentialEventsExtractor */ "./src/curveShapeSpaceAnalysis/AbstractCurveDifferentialEventsExtractor.ts");
var ClosedCurveDifferentialEventsExtractor = /** @class */ (function (_super) {
    __extends(ClosedCurveDifferentialEventsExtractor, _super);
    function ClosedCurveDifferentialEventsExtractor(curveToAnalyze) {
        var _this = _super.call(this, curveToAnalyze) || this;
        _this._inflectionParametricLocations = [];
        _this._curvatureExtremaParametricLocations = [];
        _this.curve = curveToAnalyze;
        _this._inflectionLocationsEuclideanSpace = [];
        _this._curvatureExtremaLocationsEuclideanSpace = [];
        _this._transientCurvatureExtremaLocationsEuclideanSpace = [];
        _this.curveDiffProperties = new PeriodicBSplineR1toR2DifferentialProperties_1.PeriodicBSplineR1toR2DifferentialProperties(_this.curve);
        _this._curvatureNumerator = _this.curveDiffProperties.curvatureNumerator();
        _this._curvatureDerivativeNumerator = _this.curveDiffProperties.curvatureDerivativeNumerator();
        _this._sequenceOfDifferentialEvents = new SequenceOfDifferentialEvents_1.SequenceOfDifferentialEvents();
        _this.extractSeqOfDiffEvents();
        return _this;
    }
    Object.defineProperty(ClosedCurveDifferentialEventsExtractor.prototype, "curvatureNumerator", {
        get: function () {
            return this._curvatureNumerator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveDifferentialEventsExtractor.prototype, "curvatureDerivativeNumerator", {
        get: function () {
            return this._curvatureDerivativeNumerator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveDifferentialEventsExtractor.prototype, "inflectionLocationsEuclideanSpace", {
        get: function () {
            return this._inflectionLocationsEuclideanSpace;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveDifferentialEventsExtractor.prototype, "inflectionParametricLocations", {
        get: function () {
            return this._inflectionParametricLocations;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveDifferentialEventsExtractor.prototype, "curvatureExtremaLocationsEuclideanSpace", {
        get: function () {
            return this._curvatureExtremaLocationsEuclideanSpace;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveDifferentialEventsExtractor.prototype, "curvatureExtremaParametricLocations", {
        get: function () {
            return this._curvatureExtremaParametricLocations;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveDifferentialEventsExtractor.prototype, "transientCurvatureExtremaLocationsEuclideanSpace", {
        get: function () {
            return this._transientCurvatureExtremaLocationsEuclideanSpace;
        },
        enumerable: false,
        configurable: true
    });
    ClosedCurveDifferentialEventsExtractor.prototype.extractSeqOfDiffEvents = function () {
        this._inflectionLocationsEuclideanSpace = this.curveDiffProperties.inflections();
        this._inflectionParametricLocations = this._curvatureNumerator.zeros();
        this._curvatureExtremaLocationsEuclideanSpace = this.curveDiffProperties.curvatureExtrema();
        this._curvatureExtremaParametricLocations = this._curvatureDerivativeNumerator.zeros();
        this._transientCurvatureExtremaLocationsEuclideanSpace = this.curveDiffProperties.transitionCurvatureExtrema();
        this._sequenceOfDifferentialEvents.insertEvents(this._curvatureExtremaParametricLocations, this._inflectionParametricLocations);
        return this._sequenceOfDifferentialEvents;
    };
    ClosedCurveDifferentialEventsExtractor.prototype.update = function (curveToAnalyze) {
        this.curve = curveToAnalyze;
        this.curveDiffProperties = new PeriodicBSplineR1toR2DifferentialProperties_1.PeriodicBSplineR1toR2DifferentialProperties(this.curve);
        this._curvatureNumerator = this.curveDiffProperties.curvatureNumerator();
        this._curvatureDerivativeNumerator = this.curveDiffProperties.curvatureDerivativeNumerator();
        this.extractSeqOfDiffEvents();
    };
    return ClosedCurveDifferentialEventsExtractor;
}(AbstractCurveDifferentialEventsExtractor_1.AbstractCurveDifferentialEventsExtractor));
exports.ClosedCurveDifferentialEventsExtractor = ClosedCurveDifferentialEventsExtractor;


/***/ }),

/***/ "./src/curveShapeSpaceAnalysis/ClosedCurveDifferentialEventsExtractorWithoutSequence.ts":
/*!**********************************************************************************************!*\
  !*** ./src/curveShapeSpaceAnalysis/ClosedCurveDifferentialEventsExtractorWithoutSequence.ts ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClosedCurveDifferentialEventsExtractorWithoutSequence = void 0;
var PeriodicBSplineR1toR2DifferentialProperties_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR2DifferentialProperties */ "./src/newBsplines/PeriodicBSplineR1toR2DifferentialProperties.ts");
var SequenceOfDifferentialEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/SequenceOfDifferentialEvents */ "./src/sequenceOfDifferentialEvents/SequenceOfDifferentialEvents.ts");
var ClosedCurveDifferentialEventsExtractor_1 = __webpack_require__(/*! ./ClosedCurveDifferentialEventsExtractor */ "./src/curveShapeSpaceAnalysis/ClosedCurveDifferentialEventsExtractor.ts");
var ClosedCurveDifferentialEventsExtractorWithoutSequence = /** @class */ (function (_super) {
    __extends(ClosedCurveDifferentialEventsExtractorWithoutSequence, _super);
    function ClosedCurveDifferentialEventsExtractorWithoutSequence(curveToAnalyze) {
        var _this = _super.call(this, curveToAnalyze) || this;
        _this.curve = curveToAnalyze;
        _this._sequenceOfDifferentialEvents = new SequenceOfDifferentialEvents_1.SequenceOfDifferentialEvents();
        _this.extractSeqOfDiffEvents();
        _this.notifyObservers();
        return _this;
    }
    ClosedCurveDifferentialEventsExtractorWithoutSequence.prototype.extractSeqOfDiffEvents = function () {
        this._crvDiffEventsLocations.inflectionLocationsEuclideanSpace = this.curveDiffProperties.inflections();
        this._inflectionParametricLocations = this._curvatureNumerator.zeros();
        this._crvDiffEventsLocations.curvatureExtremaLocationsEuclideanSpace = this.curveDiffProperties.curvatureExtrema();
        this._curvatureExtremaParametricLocations = this._curvatureDerivativeNumerator.zeros();
        this._crvDiffEventsLocations.transientCurvatureExtremaLocationsEuclideanSpace = this.curveDiffProperties.transitionCurvatureExtrema();
        return this._sequenceOfDifferentialEvents;
    };
    ClosedCurveDifferentialEventsExtractorWithoutSequence.prototype.update = function (curveToAnalyze) {
        this.curve = curveToAnalyze;
        this.curveDiffProperties = new PeriodicBSplineR1toR2DifferentialProperties_1.PeriodicBSplineR1toR2DifferentialProperties(this.curve);
        this._curvatureNumerator = this.curveDiffProperties.curvatureNumerator();
        this._curvatureDerivativeNumerator = this.curveDiffProperties.curvatureDerivativeNumerator();
        this.extractSeqOfDiffEvents();
        // this.notifyObservers();
    };
    return ClosedCurveDifferentialEventsExtractorWithoutSequence;
}(ClosedCurveDifferentialEventsExtractor_1.ClosedCurveDifferentialEventsExtractor));
exports.ClosedCurveDifferentialEventsExtractorWithoutSequence = ClosedCurveDifferentialEventsExtractorWithoutSequence;


/***/ }),

/***/ "./src/curveShapeSpaceAnalysis/CurveAnalyzer.ts":
/*!******************************************************!*\
  !*** ./src/curveShapeSpaceAnalysis/CurveAnalyzer.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClosedCurveDummyAnalyzer = exports.ClosedCurveAnalyzer = exports.OPenCurveDummyAnalyzer = exports.OpenCurveAnalyzer = exports.AbstractCurveAnalyzer = void 0;
var SequenceOfDifferentialEvents_1 = __webpack_require__(/*! ../../src/sequenceOfDifferentialEvents/SequenceOfDifferentialEvents */ "./src/sequenceOfDifferentialEvents/SequenceOfDifferentialEvents.ts");
var OpenCurveDifferentialEventsExtractor_1 = __webpack_require__(/*! ./OpenCurveDifferentialEventsExtractor */ "./src/curveShapeSpaceAnalysis/OpenCurveDifferentialEventsExtractor.ts");
var ExtremumLocationClassifiier_1 = __webpack_require__(/*! ./ExtremumLocationClassifiier */ "./src/curveShapeSpaceAnalysis/ExtremumLocationClassifiier.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ClosedCurveDifferentialEventsExtractor_1 = __webpack_require__(/*! ./ClosedCurveDifferentialEventsExtractor */ "./src/curveShapeSpaceAnalysis/ClosedCurveDifferentialEventsExtractor.ts");
var OpenCurveDifferentialEventsExtractorWithoutSequence_1 = __webpack_require__(/*! ./OpenCurveDifferentialEventsExtractorWithoutSequence */ "./src/curveShapeSpaceAnalysis/OpenCurveDifferentialEventsExtractorWithoutSequence.ts");
var ClosedCurveDifferentialEventsExtractorWithoutSequence_1 = __webpack_require__(/*! ./ClosedCurveDifferentialEventsExtractorWithoutSequence */ "./src/curveShapeSpaceAnalysis/ClosedCurveDifferentialEventsExtractorWithoutSequence.ts");
var BSplineR1toR1_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR1 */ "./src/newBsplines/BSplineR1toR1.ts");
var AbstractCurveAnalyzer = /** @class */ (function () {
    function AbstractCurveAnalyzer(curveToAnalyze, navigationCurveModel) {
        this.curve = curveToAnalyze;
        this.navigationCurveModel = navigationCurveModel;
        this._curveCurvatureCntrlPolygon = [];
        this._curvatureCrtlPtsClosestToZero = [];
        this._curvatureSignChanges = [];
        this._curvatureDerivativeSignChanges = [];
        this._curveCurvatureDerivativeCntrlPolygon = [];
        this._curvatureDerivCrtlPtsClosestToZero = [];
    }
    Object.defineProperty(AbstractCurveAnalyzer.prototype, "curvatureSignChanges", {
        get: function () {
            return this._curvatureSignChanges.slice();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractCurveAnalyzer.prototype, "curveCurvatureCntrlPolygon", {
        get: function () {
            return this._curveCurvatureCntrlPolygon.slice();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractCurveAnalyzer.prototype, "curvatureCrtlPtsClosestToZero", {
        get: function () {
            return this._curvatureCrtlPtsClosestToZero.slice();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractCurveAnalyzer.prototype, "curvatureDerivativeSignChanges", {
        get: function () {
            return this._curvatureDerivativeSignChanges.slice();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractCurveAnalyzer.prototype, "curveCurvatureDerivativeCntrlPolygon", {
        get: function () {
            return this._curveCurvatureDerivativeCntrlPolygon.slice();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractCurveAnalyzer.prototype, "curvatureDerivCrtlPtsClosestToZero", {
        get: function () {
            return this._curvatureDerivCrtlPtsClosestToZero.slice();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractCurveAnalyzer.prototype, "curvatureNumerator", {
        get: function () {
            return this._curvatureNumerator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractCurveAnalyzer.prototype, "curvatureDerivativeNumerator", {
        get: function () {
            return this._curvatureDerivativeNumerator;
        },
        enumerable: false,
        configurable: true
    });
    AbstractCurveAnalyzer.prototype.getGlobalExtremmumOffAxis = function (controlPoints) {
        var localMinima = new ExtremumLocationClassifiier_1.ExtremumLocationClassifier(controlPoints);
        var validGlobalMinimum = localMinima.getGlobalMinimum();
        var localMaxima = new ExtremumLocationClassifiier_1.ExtremumLocationClassifier(controlPoints);
        var validGlobalMaximum = localMaxima.getGlobalMaximum();
        if (validGlobalMinimum && validGlobalMaximum && Math.abs(localMinima.globalExtremum.value) > Math.abs(localMaxima.globalExtremum.value)) {
            return localMaxima.globalExtremum;
        }
        else if (validGlobalMinimum && validGlobalMaximum) {
            return localMinima.globalExtremum;
        }
        else if (validGlobalMinimum) {
            return localMinima.globalExtremum;
        }
        else if (validGlobalMaximum) {
            return localMaxima.globalExtremum;
        }
        else
            return { index: ExtremumLocationClassifiier_1.INITIAL_INDEX, value: 0.0 };
    };
    AbstractCurveAnalyzer.prototype.getControlPointsSign = function (controlPoints) {
        var result = [];
        for (var i = 0, n = controlPoints.length; i < n; i += 1) {
            if (controlPoints[i] > 0) {
                result.push(-1);
            }
            else {
                result.push(1);
            }
        }
        return result;
    };
    AbstractCurveAnalyzer.prototype.getSignChangesControlPolygon = function (controlPointsSigns) {
        var signChangesControlPolygon = [];
        var previousSign = controlPointsSigns[0];
        for (var i = 1, n = controlPointsSigns.length; i < n; i += 1) {
            if (previousSign !== controlPointsSigns[i]) {
                signChangesControlPolygon.push(i - 1);
            }
            previousSign = controlPointsSigns[i];
        }
        return signChangesControlPolygon;
    };
    AbstractCurveAnalyzer.prototype.updateCurrent = function () {
        this.curve = this.navigationCurveModel.currentCurve;
        this.update();
    };
    AbstractCurveAnalyzer.prototype.updateOptimized = function () {
        this.curve = this.navigationCurveModel.optimizedCurve;
        this.update();
    };
    return AbstractCurveAnalyzer;
}());
exports.AbstractCurveAnalyzer = AbstractCurveAnalyzer;
var OpenCurveAnalyzer = /** @class */ (function (_super) {
    __extends(OpenCurveAnalyzer, _super);
    function OpenCurveAnalyzer(curveToAnalyze, navigationCurveModel, slidingEventsAtExtremities) {
        var _this = _super.call(this, curveToAnalyze, navigationCurveModel) || this;
        var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, 'constructor', 'start constructor.');
        warning.logMessageToConsole();
        _this._curvatureNumerator = new BSplineR1toR1_1.BSplineR1toR1();
        _this._curvatureDerivativeNumerator = new BSplineR1toR1_1.BSplineR1toR1();
        _this.curve = curveToAnalyze;
        _this.navigationCurveModel = navigationCurveModel;
        _this._slidingEventsAtExtremities = slidingEventsAtExtremities;
        _this.navigationState = navigationCurveModel.navigationState;
        _this._shapeSpaceDescriptor = navigationCurveModel.shapeSpaceDescriptor;
        _this._curveControlState = navigationCurveModel.curveShapeSpaceNavigator.curveControlState;
        var diffEventsExtractor = new OpenCurveDifferentialEventsExtractor_1.OpenCurveDifferentialEventsExtractor(_this.curve);
        _this._sequenceOfDifferentialEvents = diffEventsExtractor.extractSeqOfDiffEvents();
        _this.globalExtremumOffAxisCurvaturePoly = { index: ExtremumLocationClassifiier_1.INITIAL_INDEX, value: 0.0 };
        if (_this._curveControlState) {
            _this._curvatureNumerator = diffEventsExtractor.curvatureNumerator;
            _this._curveCurvatureCntrlPolygon = diffEventsExtractor.curvatureNumerator.controlPoints;
            _this.globalExtremumOffAxisCurvaturePoly = _this.getGlobalExtremmumOffAxis(_this._curveCurvatureCntrlPolygon);
            _this._curvatureSignChanges = _this.getSignChangesControlPolygon(_this._curveCurvatureCntrlPolygon);
            _this.computeCurvatureCPClosestToZero();
        }
        else {
            warning = new ErrorLoging_1.WarningLog(_this.constructor.name, 'constructor', 'Cannot initialize consistently curvature control polygon.');
            warning.logMessageToConsole();
        }
        _this.globalExtremumOffAxisCurvatureDerivPoly = { index: ExtremumLocationClassifiier_1.INITIAL_INDEX, value: 0.0 };
        if (_this._curveControlState) {
            _this._curvatureDerivativeNumerator = diffEventsExtractor.curvatureDerivativeNumerator;
            _this._curveCurvatureDerivativeCntrlPolygon = diffEventsExtractor.curvatureDerivativeNumerator.controlPoints;
            _this.globalExtremumOffAxisCurvatureDerivPoly = _this.getGlobalExtremmumOffAxis(_this._curveCurvatureDerivativeCntrlPolygon);
            _this._curvatureDerivativeSignChanges = _this.getSignChangesControlPolygon(_this._curveCurvatureDerivativeCntrlPolygon);
            _this.computeCurvatureDerivCPClosestToZero();
        }
        else {
            warning = new ErrorLoging_1.WarningLog(_this.constructor.name, 'constructor', 'Cannot initialize consistently curvature deriv control polygon.');
            warning.logMessageToConsole();
        }
        return _this;
    }
    Object.defineProperty(OpenCurveAnalyzer.prototype, "sequenceOfDifferentialEvents", {
        get: function () {
            return SequenceOfDifferentialEvents_1.deepCopySequenceOfDifferentialEvents(this._sequenceOfDifferentialEvents);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OpenCurveAnalyzer.prototype, "curveControlState", {
        get: function () {
            return this._curveControlState;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OpenCurveAnalyzer.prototype, "shapeSpaceDescriptor", {
        get: function () {
            return this._shapeSpaceDescriptor;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OpenCurveAnalyzer.prototype, "slidingEventsAtExtremities", {
        get: function () {
            return this._slidingEventsAtExtremities;
        },
        set: function (slidingEventsAtExtremities) {
            this._slidingEventsAtExtremities = slidingEventsAtExtremities;
        },
        enumerable: false,
        configurable: true
    });
    OpenCurveAnalyzer.prototype.setStrategyForSlidingEventsAtExtremitities = function (slidingEventsAtExtremities) {
        this._slidingEventsAtExtremities = slidingEventsAtExtremities;
    };
    OpenCurveAnalyzer.prototype.computeCurvatureCPClosestToZero = function () {
        this._slidingEventsAtExtremities.getCurvatureCrtlPtsClosestToZero(this);
    };
    OpenCurveAnalyzer.prototype.computeCurvatureDerivCPClosestToZero = function () {
        this._slidingEventsAtExtremities.getCurvatureDerivCrtlPtsClosestToZero(this);
    };
    // set curvatureCrtlPtsClosestToZero(controlPolygon: number[]) {
    //     this._curvatureCrtlPtsClosestToZero = controlPolygon;
    // }
    OpenCurveAnalyzer.prototype.update = function () {
        // this.curve = this.navigationCurveModel.currentCurve;
        var diffEventsExtractor = new OpenCurveDifferentialEventsExtractor_1.OpenCurveDifferentialEventsExtractor(this.curve);
        this._sequenceOfDifferentialEvents = diffEventsExtractor.extractSeqOfDiffEvents();
        this._curveCurvatureCntrlPolygon = diffEventsExtractor.curvatureNumerator.controlPoints;
        this.globalExtremumOffAxisCurvaturePoly = this.getGlobalExtremmumOffAxis(this.curveCurvatureCntrlPolygon);
        this._curveCurvatureDerivativeCntrlPolygon = diffEventsExtractor.curvatureDerivativeNumerator.controlPoints;
        this.globalExtremumOffAxisCurvatureDerivPoly = this.getGlobalExtremmumOffAxis(this.curveCurvatureDerivativeCntrlPolygon);
        this._curvatureNumerator = diffEventsExtractor.curvatureNumerator;
        this._curvatureDerivativeNumerator = diffEventsExtractor.curvatureDerivativeNumerator;
    };
    return OpenCurveAnalyzer;
}(AbstractCurveAnalyzer));
exports.OpenCurveAnalyzer = OpenCurveAnalyzer;
var OPenCurveDummyAnalyzer = /** @class */ (function (_super) {
    __extends(OPenCurveDummyAnalyzer, _super);
    function OPenCurveDummyAnalyzer(curveToAnalyze, navigationCurveModel, slidingEventsAtExtremities) {
        var _this = _super.call(this, curveToAnalyze, navigationCurveModel) || this;
        var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, 'constructor', 'start constructor.');
        warning.logMessageToConsole();
        _this._curvatureNumerator = new BSplineR1toR1_1.BSplineR1toR1();
        _this._curvatureDerivativeNumerator = new BSplineR1toR1_1.BSplineR1toR1();
        _this.curve = curveToAnalyze;
        _this.navigationCurveModel = navigationCurveModel;
        _this._slidingEventsAtExtremities = slidingEventsAtExtremities;
        _this.navigationState = navigationCurveModel.navigationState;
        _this._shapeSpaceDescriptor = navigationCurveModel.shapeSpaceDescriptor;
        _this._curveControlState = navigationCurveModel.curveShapeSpaceNavigator.curveControlState;
        var diffEventsExtractor = new OpenCurveDifferentialEventsExtractorWithoutSequence_1.OpenCurveDifferentialEventsExtractorWithoutSequence(_this.curve);
        _this._sequenceOfDifferentialEvents = diffEventsExtractor.extractSeqOfDiffEvents();
        _this.globalExtremumOffAxisCurvaturePoly = { index: ExtremumLocationClassifiier_1.INITIAL_INDEX, value: 0.0 };
        _this.globalExtremumOffAxisCurvatureDerivPoly = { index: ExtremumLocationClassifiier_1.INITIAL_INDEX, value: 0.0 };
        return _this;
    }
    Object.defineProperty(OPenCurveDummyAnalyzer.prototype, "sequenceOfDifferentialEvents", {
        get: function () {
            return this._sequenceOfDifferentialEvents;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OPenCurveDummyAnalyzer.prototype, "shapeSpaceDescriptor", {
        get: function () {
            return this._shapeSpaceDescriptor;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OPenCurveDummyAnalyzer.prototype, "curveControlState", {
        get: function () {
            return this._curveControlState;
        },
        enumerable: false,
        configurable: true
    });
    OPenCurveDummyAnalyzer.prototype.computeCurvatureCPClosestToZero = function () {
    };
    OPenCurveDummyAnalyzer.prototype.computeCurvatureDerivCPClosestToZero = function () {
    };
    OPenCurveDummyAnalyzer.prototype.update = function () {
        // this.curve = this.navigationCurveModel.currentCurve;
        var diffEventsExtractor = new OpenCurveDifferentialEventsExtractorWithoutSequence_1.OpenCurveDifferentialEventsExtractorWithoutSequence(this.curve);
        this._sequenceOfDifferentialEvents = diffEventsExtractor.extractSeqOfDiffEvents();
        this._curveCurvatureCntrlPolygon = diffEventsExtractor.curvatureNumerator.controlPoints;
        this.globalExtremumOffAxisCurvaturePoly = this.getGlobalExtremmumOffAxis(this.curveCurvatureCntrlPolygon);
        this._curveCurvatureDerivativeCntrlPolygon = diffEventsExtractor.curvatureDerivativeNumerator.controlPoints;
        this.globalExtremumOffAxisCurvatureDerivPoly = this.getGlobalExtremmumOffAxis(this.curveCurvatureDerivativeCntrlPolygon);
        this._curvatureNumerator = diffEventsExtractor.curvatureNumerator;
        this._curvatureDerivativeNumerator = diffEventsExtractor.curvatureDerivativeNumerator;
    };
    return OPenCurveDummyAnalyzer;
}(AbstractCurveAnalyzer));
exports.OPenCurveDummyAnalyzer = OPenCurveDummyAnalyzer;
var ClosedCurveAnalyzer = /** @class */ (function (_super) {
    __extends(ClosedCurveAnalyzer, _super);
    function ClosedCurveAnalyzer(curveToAnalyze, navigationCurveModel) {
        var _this = _super.call(this, curveToAnalyze, navigationCurveModel) || this;
        var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, 'constructor', 'start constructor.');
        warning.logMessageToConsole();
        _this._curvatureNumerator = new BSplineR1toR1_1.BSplineR1toR1();
        _this._curvatureDerivativeNumerator = new BSplineR1toR1_1.BSplineR1toR1();
        _this.curve = curveToAnalyze;
        _this.navigationCurveModel = navigationCurveModel;
        _this.navigationState = navigationCurveModel.navigationState;
        _this._shapeSpaceDescriptor = navigationCurveModel.shapeSpaceDescriptor;
        _this._curveControlState = navigationCurveModel.curveShapeSpaceNavigator.curveControlState;
        var diffEventsExtractor = new ClosedCurveDifferentialEventsExtractor_1.ClosedCurveDifferentialEventsExtractor(_this.curve);
        _this._sequenceOfDifferentialEvents = diffEventsExtractor.extractSeqOfDiffEvents();
        _this.globalExtremumOffAxisCurvaturePoly = { index: ExtremumLocationClassifiier_1.INITIAL_INDEX, value: 0.0 };
        if (_this._curveControlState) {
            _this._curveCurvatureCntrlPolygon = diffEventsExtractor.curvatureNumerator.controlPoints;
            _this.globalExtremumOffAxisCurvaturePoly = _this.getGlobalExtremmumOffAxis(_this._curveCurvatureCntrlPolygon);
            _this._curvatureSignChanges = _this.getSignChangesControlPolygon(_this._curveCurvatureCntrlPolygon);
            _this.computeCurvatureCPClosestToZero();
        }
        else {
            warning = new ErrorLoging_1.WarningLog(_this.constructor.name, 'constructor', 'Cannot initialize consistently curvature control polygon.');
            warning.logMessageToConsole();
        }
        _this.globalExtremumOffAxisCurvatureDerivPoly = { index: ExtremumLocationClassifiier_1.INITIAL_INDEX, value: 0.0 };
        if (_this._curveControlState) {
            _this._curveCurvatureDerivativeCntrlPolygon = diffEventsExtractor.curvatureDerivativeNumerator.controlPoints;
            _this.globalExtremumOffAxisCurvatureDerivPoly = _this.getGlobalExtremmumOffAxis(_this._curveCurvatureDerivativeCntrlPolygon);
            _this._curvatureDerivativeSignChanges = _this.getSignChangesControlPolygon(_this._curveCurvatureDerivativeCntrlPolygon);
            _this.computeCurvatureDerivCPClosestToZero();
        }
        else {
            warning = new ErrorLoging_1.WarningLog(_this.constructor.name, 'constructor', 'Cannot initialize consistently curvature deriv control polygon.');
            warning.logMessageToConsole();
        }
        return _this;
    }
    Object.defineProperty(ClosedCurveAnalyzer.prototype, "sequenceOfDifferentialEvents", {
        get: function () {
            return this._sequenceOfDifferentialEvents;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveAnalyzer.prototype, "curveControlState", {
        get: function () {
            return this._curveControlState;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveAnalyzer.prototype, "shapeSpaceDescriptor", {
        get: function () {
            return this._shapeSpaceDescriptor;
        },
        enumerable: false,
        configurable: true
    });
    // set curvatureCrtlPtsClosestToZero(controlPolygon: number[]) {
    //     this._curvatureCrtlPtsClosestToZero = controlPolygon;
    // }
    ClosedCurveAnalyzer.prototype.computeCurvatureCPClosestToZero = function () {
    };
    ClosedCurveAnalyzer.prototype.computeCurvatureDerivCPClosestToZero = function () {
    };
    ClosedCurveAnalyzer.prototype.update = function () {
        // this.curve = this.navigationCurveModel.currentCurve;
        var diffEventsExtractor = new ClosedCurveDifferentialEventsExtractor_1.ClosedCurveDifferentialEventsExtractor(this.curve);
        this._sequenceOfDifferentialEvents = diffEventsExtractor.extractSeqOfDiffEvents();
        this._curveCurvatureCntrlPolygon = diffEventsExtractor.curvatureNumerator.controlPoints;
        this.globalExtremumOffAxisCurvaturePoly = this.getGlobalExtremmumOffAxis(this.curveCurvatureCntrlPolygon);
        this._curveCurvatureDerivativeCntrlPolygon = diffEventsExtractor.curvatureDerivativeNumerator.controlPoints;
        this.globalExtremumOffAxisCurvatureDerivPoly = this.getGlobalExtremmumOffAxis(this.curveCurvatureDerivativeCntrlPolygon);
        this._curvatureNumerator = diffEventsExtractor.curvatureNumerator;
        this._curvatureDerivativeNumerator = diffEventsExtractor.curvatureDerivativeNumerator;
    };
    return ClosedCurveAnalyzer;
}(AbstractCurveAnalyzer));
exports.ClosedCurveAnalyzer = ClosedCurveAnalyzer;
var ClosedCurveDummyAnalyzer = /** @class */ (function (_super) {
    __extends(ClosedCurveDummyAnalyzer, _super);
    function ClosedCurveDummyAnalyzer(curveToAnalyze, navigationCurveModel) {
        var _this = _super.call(this, curveToAnalyze, navigationCurveModel) || this;
        var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, 'constructor', 'start constructor.');
        warning.logMessageToConsole();
        _this._curvatureNumerator = new BSplineR1toR1_1.BSplineR1toR1();
        _this._curvatureDerivativeNumerator = new BSplineR1toR1_1.BSplineR1toR1();
        _this.curve = curveToAnalyze;
        _this.navigationCurveModel = navigationCurveModel;
        _this.navigationState = navigationCurveModel.navigationState;
        _this._shapeSpaceDescriptor = navigationCurveModel.shapeSpaceDescriptor;
        _this._curveControlState = navigationCurveModel.curveShapeSpaceNavigator.curveControlState;
        _this.globalExtremumOffAxisCurvaturePoly = { index: ExtremumLocationClassifiier_1.INITIAL_INDEX, value: 0.0 };
        var diffEventsExtractor = new ClosedCurveDifferentialEventsExtractorWithoutSequence_1.ClosedCurveDifferentialEventsExtractorWithoutSequence(_this.curve);
        _this._sequenceOfDifferentialEvents = diffEventsExtractor.extractSeqOfDiffEvents();
        _this.globalExtremumOffAxisCurvatureDerivPoly = { index: ExtremumLocationClassifiier_1.INITIAL_INDEX, value: 0.0 };
        return _this;
    }
    Object.defineProperty(ClosedCurveDummyAnalyzer.prototype, "sequenceOfDifferentialEvents", {
        get: function () {
            return this._sequenceOfDifferentialEvents;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveDummyAnalyzer.prototype, "curveControlState", {
        get: function () {
            return this._curveControlState;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveDummyAnalyzer.prototype, "shapeSpaceDescriptor", {
        get: function () {
            return this._shapeSpaceDescriptor;
        },
        enumerable: false,
        configurable: true
    });
    ClosedCurveDummyAnalyzer.prototype.computeCurvatureCPClosestToZero = function () {
    };
    ClosedCurveDummyAnalyzer.prototype.computeCurvatureDerivCPClosestToZero = function () {
    };
    ClosedCurveDummyAnalyzer.prototype.update = function () {
        // this.curve = this.navigationCurveModel.currentCurve;
        var diffEventsExtractor = new ClosedCurveDifferentialEventsExtractorWithoutSequence_1.ClosedCurveDifferentialEventsExtractorWithoutSequence(this.curve);
        this._sequenceOfDifferentialEvents = diffEventsExtractor.extractSeqOfDiffEvents();
        this._curveCurvatureCntrlPolygon = diffEventsExtractor.curvatureNumerator.controlPoints;
        this.globalExtremumOffAxisCurvaturePoly = this.getGlobalExtremmumOffAxis(this.curveCurvatureCntrlPolygon);
        this._curveCurvatureDerivativeCntrlPolygon = diffEventsExtractor.curvatureDerivativeNumerator.controlPoints;
        this.globalExtremumOffAxisCurvatureDerivPoly = this.getGlobalExtremmumOffAxis(this.curveCurvatureDerivativeCntrlPolygon);
        this._curvatureNumerator = diffEventsExtractor.curvatureNumerator;
        this._curvatureDerivativeNumerator = diffEventsExtractor.curvatureDerivativeNumerator;
    };
    return ClosedCurveDummyAnalyzer;
}(AbstractCurveAnalyzer));
exports.ClosedCurveDummyAnalyzer = ClosedCurveDummyAnalyzer;


/***/ }),

/***/ "./src/curveShapeSpaceAnalysis/CurveDifferentialEventsLocations.ts":
/*!*************************************************************************!*\
  !*** ./src/curveShapeSpaceAnalysis/CurveDifferentialEventsLocations.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deepCopyEventsEuclideanLocations = exports.deepCopyEventsParametricLocations = exports.CurveDifferentialEventsLocations = void 0;
var CurveDifferentialEventsLocations = /** @class */ (function () {
    function CurveDifferentialEventsLocations() {
        this._inflectionParametricLocations = [];
        this._curvatureNumeratorExtremaEstimators = [];
        this._curvatureExtremaParametricLocations = [];
        this._curvatureDerivativeNumeratorExtremaEstimators = [];
        this._inflectionLocationsEuclideanSpace = [];
        this._curvatureExtremaLocationsEuclideanSpace = [];
        this._transientCurvatureExtremaLocationsEuclideanSpace = [];
    }
    Object.defineProperty(CurveDifferentialEventsLocations.prototype, "inflectionParametricLocations", {
        get: function () {
            return this._inflectionParametricLocations;
        },
        set: function (parametricLocations) {
            this._inflectionParametricLocations = parametricLocations;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveDifferentialEventsLocations.prototype, "curvatureNumeratorExtremaEstimators", {
        get: function () {
            return this._curvatureNumeratorExtremaEstimators;
        },
        set: function (parametricLocations) {
            this._curvatureNumeratorExtremaEstimators = parametricLocations;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveDifferentialEventsLocations.prototype, "curvatureExtremaParametricLocations", {
        get: function () {
            return this._curvatureExtremaParametricLocations;
        },
        set: function (parametricLocations) {
            this._curvatureExtremaParametricLocations = parametricLocations;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveDifferentialEventsLocations.prototype, "curvatureDerivativeNumeratorExtremaEstimators", {
        get: function () {
            return this._curvatureDerivativeNumeratorExtremaEstimators;
        },
        set: function (parametricLocations) {
            this._curvatureDerivativeNumeratorExtremaEstimators = parametricLocations;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveDifferentialEventsLocations.prototype, "inflectionLocationsEuclideanSpace", {
        get: function () {
            return this._inflectionLocationsEuclideanSpace;
        },
        set: function (euclideanLocations) {
            this._inflectionLocationsEuclideanSpace = euclideanLocations;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveDifferentialEventsLocations.prototype, "curvatureExtremaLocationsEuclideanSpace", {
        get: function () {
            return this._curvatureExtremaLocationsEuclideanSpace;
        },
        set: function (euclideanLocations) {
            this._curvatureExtremaLocationsEuclideanSpace = euclideanLocations;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveDifferentialEventsLocations.prototype, "transientCurvatureExtremaLocationsEuclideanSpace", {
        get: function () {
            return this._transientCurvatureExtremaLocationsEuclideanSpace;
        },
        set: function (euclideanLocations) {
            this._transientCurvatureExtremaLocationsEuclideanSpace = euclideanLocations;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Return a deep copy of this set of locations
     */
    CurveDifferentialEventsLocations.prototype.clone = function () {
        var crvDiffEventsLocations = new CurveDifferentialEventsLocations();
        crvDiffEventsLocations.inflectionParametricLocations = deepCopyEventsParametricLocations(this._inflectionParametricLocations);
        crvDiffEventsLocations.curvatureNumeratorExtremaEstimators = deepCopyEventsParametricLocations(this._curvatureNumeratorExtremaEstimators);
        crvDiffEventsLocations.curvatureExtremaParametricLocations = deepCopyEventsParametricLocations(this._curvatureExtremaParametricLocations);
        crvDiffEventsLocations.curvatureDerivativeNumeratorExtremaEstimators = deepCopyEventsParametricLocations(this._curvatureDerivativeNumeratorExtremaEstimators);
        crvDiffEventsLocations.inflectionLocationsEuclideanSpace = deepCopyEventsEuclideanLocations(this._inflectionLocationsEuclideanSpace);
        crvDiffEventsLocations.curvatureExtremaLocationsEuclideanSpace = deepCopyEventsEuclideanLocations(this._curvatureExtremaLocationsEuclideanSpace);
        crvDiffEventsLocations.transientCurvatureExtremaLocationsEuclideanSpace = deepCopyEventsEuclideanLocations(this._transientCurvatureExtremaLocationsEuclideanSpace);
        return crvDiffEventsLocations;
    };
    return CurveDifferentialEventsLocations;
}());
exports.CurveDifferentialEventsLocations = CurveDifferentialEventsLocations;
function deepCopyEventsParametricLocations(parametericLocations) {
    var e_1, _a;
    var result = [];
    try {
        for (var parametericLocations_1 = __values(parametericLocations), parametericLocations_1_1 = parametericLocations_1.next(); !parametericLocations_1_1.done; parametericLocations_1_1 = parametericLocations_1.next()) {
            var loc = parametericLocations_1_1.value;
            var newloc = loc;
            result.push(newloc);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (parametericLocations_1_1 && !parametericLocations_1_1.done && (_a = parametericLocations_1.return)) _a.call(parametericLocations_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
}
exports.deepCopyEventsParametricLocations = deepCopyEventsParametricLocations;
function deepCopyEventsEuclideanLocations(euclideanLocations) {
    var e_2, _a;
    var result = [];
    try {
        for (var euclideanLocations_1 = __values(euclideanLocations), euclideanLocations_1_1 = euclideanLocations_1.next(); !euclideanLocations_1_1.done; euclideanLocations_1_1 = euclideanLocations_1.next()) {
            var loc = euclideanLocations_1_1.value;
            result.push(loc.clone());
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (euclideanLocations_1_1 && !euclideanLocations_1_1.done && (_a = euclideanLocations_1.return)) _a.call(euclideanLocations_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return result;
}
exports.deepCopyEventsEuclideanLocations = deepCopyEventsEuclideanLocations;


/***/ }),

/***/ "./src/curveShapeSpaceAnalysis/ExtractionCPClosestToZeroUnderEventSlidingAtExtremeties.ts":
/*!************************************************************************************************!*\
  !*** ./src/curveShapeSpaceAnalysis/ExtractionCPClosestToZeroUnderEventSlidingAtExtremeties.ts ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurveAnalyzerEventsNotSlidingOfInterval = exports.CurveAnalyzerEventsNotSlidingOnTheRightOfInterval = exports.CurveAnalyzerEventsNotSlidingOnTheLeftOfInterval = exports.CurveAnalyzerEventsSlidingOutOfInterval = void 0;
var CurveAnalyzerEventsSlidingOutOfInterval = /** @class */ (function () {
    function CurveAnalyzerEventsSlidingOutOfInterval() {
    }
    CurveAnalyzerEventsSlidingOutOfInterval.prototype.getCurvatureCrtlPtsClosestToZero = function (curveAnalyzer) {
        for (var i = 0, n = curveAnalyzer.curvatureSignChanges.length; i < n; i += 1) {
            if (Math.pow(curveAnalyzer.curveCurvatureCntrlPolygon[curveAnalyzer.curvatureSignChanges[i]], 2) < Math.pow(curveAnalyzer.curveCurvatureCntrlPolygon[curveAnalyzer.curvatureSignChanges[i] + 1], 2)) {
                if (curveAnalyzer.curvatureCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureSignChanges[i]) === -1)
                    curveAnalyzer.curvatureCrtlPtsClosestToZero.push(curveAnalyzer.curvatureSignChanges[i]);
            }
            else {
                if (curveAnalyzer.curvatureCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureSignChanges[i] + 1) === -1)
                    curveAnalyzer.curvatureCrtlPtsClosestToZero.push(curveAnalyzer.curvatureSignChanges[i] + 1);
            }
        }
    };
    CurveAnalyzerEventsSlidingOutOfInterval.prototype.getCurvatureDerivCrtlPtsClosestToZero = function (curveAnalyzer) {
        for (var i = 0, n = curveAnalyzer.curvatureDerivativeSignChanges.length; i < n; i += 1) {
            if (Math.pow(curveAnalyzer.curveCurvatureDerivativeCntrlPolygon[curveAnalyzer.curvatureDerivativeSignChanges[i]], 2) < Math.pow(curveAnalyzer.curveCurvatureDerivativeCntrlPolygon[curveAnalyzer.curvatureDerivativeSignChanges[i] + 1], 2)) {
                if (curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureDerivativeSignChanges[i]) === -1)
                    curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.push(curveAnalyzer.curvatureDerivativeSignChanges[i]);
            }
            else {
                if (curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureDerivativeSignChanges[i] + 1) === -1)
                    curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.push(curveAnalyzer.curvatureDerivativeSignChanges[i] + 1);
            }
        }
    };
    return CurveAnalyzerEventsSlidingOutOfInterval;
}());
exports.CurveAnalyzerEventsSlidingOutOfInterval = CurveAnalyzerEventsSlidingOutOfInterval;
var CurveAnalyzerEventsNotSlidingOnTheLeftOfInterval = /** @class */ (function () {
    function CurveAnalyzerEventsNotSlidingOnTheLeftOfInterval() {
    }
    CurveAnalyzerEventsNotSlidingOnTheLeftOfInterval.prototype.getCurvatureCrtlPtsClosestToZero = function (curveAnalyzer) {
        for (var i = 0, n = curveAnalyzer.curvatureSignChanges.length; i < n; i += 1) {
            if (Math.pow(curveAnalyzer.curveCurvatureCntrlPolygon[curveAnalyzer.curvatureSignChanges[i]], 2) < Math.pow(curveAnalyzer.curveCurvatureCntrlPolygon[curveAnalyzer.curvatureSignChanges[i] + 1], 2)) {
                if (curveAnalyzer.curvatureSignChanges[i] > 0 && curveAnalyzer.curvatureCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureSignChanges[i]) === -1) {
                    curveAnalyzer.curvatureCrtlPtsClosestToZero.push(curveAnalyzer.curvatureSignChanges[i]);
                }
            }
            else {
                if (curveAnalyzer.curvatureSignChanges[i] === 0 && curveAnalyzer.curvatureCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureSignChanges[i] + 1) === -1) {
                    curveAnalyzer.curvatureCrtlPtsClosestToZero.push(curveAnalyzer.curvatureSignChanges[i] + 1);
                    curveAnalyzer.shapeSpaceDescriptor.inflectionMonitoringAtCurveExtremities.splice(curveAnalyzer.shapeSpaceDescriptor.inflectionMonitoringAtCurveExtremities.indexOf(0), 1);
                }
                else if (curveAnalyzer.curvatureCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureSignChanges[i] + 1) === -1)
                    curveAnalyzer.curvatureCrtlPtsClosestToZero.push(curveAnalyzer.curvatureSignChanges[i] + 1);
            }
        }
    };
    CurveAnalyzerEventsNotSlidingOnTheLeftOfInterval.prototype.getCurvatureDerivCrtlPtsClosestToZero = function (curveAnalyzer) {
        for (var i = 0, n = curveAnalyzer.curvatureDerivativeSignChanges.length; i < n; i += 1) {
            if (Math.pow(curveAnalyzer.curveCurvatureDerivativeCntrlPolygon[curveAnalyzer.curvatureDerivativeSignChanges[i]], 2) < Math.pow(curveAnalyzer.curveCurvatureDerivativeCntrlPolygon[curveAnalyzer.curvatureDerivativeSignChanges[i] + 1], 2)) {
                if (curveAnalyzer.curvatureDerivativeSignChanges[i] > 0 && curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureDerivativeSignChanges[i]) === -1) {
                    curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.push(curveAnalyzer.curvatureDerivativeSignChanges[i]);
                }
            }
            else {
                if (curveAnalyzer.curvatureDerivativeSignChanges[i] === 0 && curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureDerivativeSignChanges[i] + 1) === -1) {
                    curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.push(curveAnalyzer.curvatureDerivativeSignChanges[i] + 1);
                    curveAnalyzer.shapeSpaceDescriptor.curvatureExtremumMonitoringAtCurveExtremities.splice(curveAnalyzer.shapeSpaceDescriptor.curvatureExtremumMonitoringAtCurveExtremities.indexOf(0), 1);
                }
                else if (curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureDerivativeSignChanges[i] + 1) === -1)
                    curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.push(curveAnalyzer.curvatureDerivativeSignChanges[i] + 1);
            }
        }
    };
    return CurveAnalyzerEventsNotSlidingOnTheLeftOfInterval;
}());
exports.CurveAnalyzerEventsNotSlidingOnTheLeftOfInterval = CurveAnalyzerEventsNotSlidingOnTheLeftOfInterval;
var CurveAnalyzerEventsNotSlidingOnTheRightOfInterval = /** @class */ (function () {
    function CurveAnalyzerEventsNotSlidingOnTheRightOfInterval() {
    }
    CurveAnalyzerEventsNotSlidingOnTheRightOfInterval.prototype.getCurvatureCrtlPtsClosestToZero = function (curveAnalyzer) {
        for (var i = 0, n = curveAnalyzer.curvatureSignChanges.length; i < n; i += 1) {
            if (Math.pow(curveAnalyzer.curveCurvatureCntrlPolygon[curveAnalyzer.curvatureSignChanges[i]], 2) < Math.pow(curveAnalyzer.curveCurvatureCntrlPolygon[curveAnalyzer.curvatureSignChanges[i] + 1], 2)) {
                if (curveAnalyzer.curvatureSignChanges[i] === (curveAnalyzer.curveCurvatureCntrlPolygon.length - 2) && curveAnalyzer.curvatureCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureSignChanges[i]) === -1) {
                    curveAnalyzer.curvatureCrtlPtsClosestToZero.push(curveAnalyzer.curvatureSignChanges[i]);
                    curveAnalyzer.shapeSpaceDescriptor.inflectionMonitoringAtCurveExtremities.splice(curveAnalyzer.shapeSpaceDescriptor.inflectionMonitoringAtCurveExtremities.indexOf(curveAnalyzer.curveCurvatureCntrlPolygon.length - 1), 1);
                }
                else if (curveAnalyzer.curvatureCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureSignChanges[i]) === -1)
                    curveAnalyzer.curvatureCrtlPtsClosestToZero.push(curveAnalyzer.curvatureSignChanges[i]);
            }
            else {
                if ((curveAnalyzer.curvatureSignChanges[i] + 1) < (curveAnalyzer.curveCurvatureCntrlPolygon.length - 1) && curveAnalyzer.curvatureCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureSignChanges[i] + 1) === -1) {
                    curveAnalyzer.curvatureCrtlPtsClosestToZero.push(curveAnalyzer.curvatureSignChanges[i] + 1);
                }
            }
        }
    };
    CurveAnalyzerEventsNotSlidingOnTheRightOfInterval.prototype.getCurvatureDerivCrtlPtsClosestToZero = function (curveAnalyzer) {
        for (var i = 0, n = curveAnalyzer.curvatureDerivativeSignChanges.length; i < n; i += 1) {
            if (Math.pow(curveAnalyzer.curveCurvatureDerivativeCntrlPolygon[curveAnalyzer.curvatureDerivativeSignChanges[i]], 2) < Math.pow(curveAnalyzer.curveCurvatureDerivativeCntrlPolygon[curveAnalyzer.curvatureDerivativeSignChanges[i] + 1], 2)) {
                if (curveAnalyzer.curvatureDerivativeSignChanges[i] === (curveAnalyzer.curveCurvatureDerivativeCntrlPolygon.length - 2) && curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureDerivativeSignChanges[i]) === -1) {
                    // Verifier le fonctionnement de curvatureExtremumMonitoringAtCurveExtremities
                    curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.push(curveAnalyzer.curvatureDerivativeSignChanges[i]);
                    curveAnalyzer.shapeSpaceDescriptor.curvatureExtremumMonitoringAtCurveExtremities.splice(curveAnalyzer.shapeSpaceDescriptor.curvatureExtremumMonitoringAtCurveExtremities.indexOf(curveAnalyzer.curveCurvatureDerivativeCntrlPolygon.length - 1), 1);
                }
                else if (curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureDerivativeSignChanges[i]) === -1)
                    curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.push(curveAnalyzer.curvatureDerivativeSignChanges[i]);
            }
            else {
                if ((curveAnalyzer.curvatureDerivativeSignChanges[i] + 1) < (curveAnalyzer.curveCurvatureDerivativeCntrlPolygon.length - 1) && curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureDerivativeSignChanges[i] + 1) === -1) {
                    curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.push(curveAnalyzer.curvatureDerivativeSignChanges[i] + 1);
                }
            }
        }
    };
    return CurveAnalyzerEventsNotSlidingOnTheRightOfInterval;
}());
exports.CurveAnalyzerEventsNotSlidingOnTheRightOfInterval = CurveAnalyzerEventsNotSlidingOnTheRightOfInterval;
var CurveAnalyzerEventsNotSlidingOfInterval = /** @class */ (function () {
    function CurveAnalyzerEventsNotSlidingOfInterval() {
    }
    CurveAnalyzerEventsNotSlidingOfInterval.prototype.getCurvatureCrtlPtsClosestToZero = function (curveAnalyzer) {
        for (var i = 0, n = curveAnalyzer.curvatureSignChanges.length; i < n; i += 1) {
            if (Math.pow(curveAnalyzer.curveCurvatureCntrlPolygon[curveAnalyzer.curvatureSignChanges[i]], 2) < Math.pow(curveAnalyzer.curveCurvatureCntrlPolygon[curveAnalyzer.curvatureSignChanges[i] + 1], 2)) {
                if (curveAnalyzer.curvatureSignChanges[i] > 0 && curveAnalyzer.curvatureCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureSignChanges[i]) === -1) {
                    curveAnalyzer.curvatureCrtlPtsClosestToZero.push(curveAnalyzer.curvatureSignChanges[i]);
                }
                else if (curveAnalyzer.curvatureSignChanges[i] === (curveAnalyzer.curveCurvatureCntrlPolygon.length - 2) && curveAnalyzer.curvatureCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureSignChanges[i]) === -1) {
                    curveAnalyzer.curvatureCrtlPtsClosestToZero.push(curveAnalyzer.curvatureSignChanges[i]);
                    curveAnalyzer.shapeSpaceDescriptor.inflectionMonitoringAtCurveExtremities.splice(curveAnalyzer.shapeSpaceDescriptor.inflectionMonitoringAtCurveExtremities.indexOf(curveAnalyzer.curveCurvatureCntrlPolygon.length - 1), 1);
                }
            }
            else {
                if ((curveAnalyzer.curvatureSignChanges[i] + 1) < (curveAnalyzer.curveCurvatureCntrlPolygon.length - 1) && curveAnalyzer.curvatureCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureSignChanges[i] + 1) === -1) {
                    curveAnalyzer.curvatureCrtlPtsClosestToZero.push(curveAnalyzer.curvatureSignChanges[i] + 1);
                }
                else if (curveAnalyzer.curvatureSignChanges[i] === 0 && curveAnalyzer.curvatureCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureSignChanges[i] + 1) === -1) {
                    curveAnalyzer.curvatureCrtlPtsClosestToZero.push(curveAnalyzer.curvatureSignChanges[i] + 1);
                    curveAnalyzer.shapeSpaceDescriptor.inflectionMonitoringAtCurveExtremities.splice(curveAnalyzer.shapeSpaceDescriptor.inflectionMonitoringAtCurveExtremities.indexOf(0), 1);
                }
            }
        }
    };
    CurveAnalyzerEventsNotSlidingOfInterval.prototype.getCurvatureDerivCrtlPtsClosestToZero = function (curveAnalyzer) {
        for (var i = 0, n = curveAnalyzer.curvatureDerivativeSignChanges.length; i < n; i += 1) {
            if (Math.pow(curveAnalyzer.curveCurvatureDerivativeCntrlPolygon[curveAnalyzer.curvatureDerivativeSignChanges[i]], 2) < Math.pow(curveAnalyzer.curveCurvatureDerivativeCntrlPolygon[curveAnalyzer.curvatureDerivativeSignChanges[i] + 1], 2)) {
                if (curveAnalyzer.curvatureDerivativeSignChanges[i] > 0 && curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureDerivativeSignChanges[i]) === -1) {
                    curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.push(curveAnalyzer.curvatureDerivativeSignChanges[i]);
                }
                else if (curveAnalyzer.curvatureDerivativeSignChanges[i] === (curveAnalyzer.curveCurvatureDerivativeCntrlPolygon.length - 2) && curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureDerivativeSignChanges[i]) === -1) {
                    // Verifier le fonctionnement de curvatureExtremumMonitoringAtCurveExtremities
                    curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.push(curveAnalyzer.curvatureDerivativeSignChanges[i]);
                    curveAnalyzer.shapeSpaceDescriptor.curvatureExtremumMonitoringAtCurveExtremities.splice(curveAnalyzer.shapeSpaceDescriptor.curvatureExtremumMonitoringAtCurveExtremities.indexOf(curveAnalyzer.curveCurvatureDerivativeCntrlPolygon.length - 1), 1);
                }
            }
            else {
                if ((curveAnalyzer.curvatureDerivativeSignChanges[i] + 1) < (curveAnalyzer.curveCurvatureDerivativeCntrlPolygon.length - 1) && curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureDerivativeSignChanges[i] + 1) === -1) {
                    curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.push(curveAnalyzer.curvatureDerivativeSignChanges[i] + 1);
                }
                else if (curveAnalyzer.curvatureDerivativeSignChanges[i] === 0 && curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.indexOf(curveAnalyzer.curvatureDerivativeSignChanges[i] + 1) === -1) {
                    curveAnalyzer.curvatureDerivCrtlPtsClosestToZero.push(curveAnalyzer.curvatureDerivativeSignChanges[i] + 1);
                    curveAnalyzer.shapeSpaceDescriptor.curvatureExtremumMonitoringAtCurveExtremities.splice(curveAnalyzer.shapeSpaceDescriptor.curvatureExtremumMonitoringAtCurveExtremities.indexOf(0), 1);
                }
            }
        }
    };
    return CurveAnalyzerEventsNotSlidingOfInterval;
}());
exports.CurveAnalyzerEventsNotSlidingOfInterval = CurveAnalyzerEventsNotSlidingOfInterval;


/***/ }),

/***/ "./src/curveShapeSpaceAnalysis/ExtremumLocationClassifiier.ts":
/*!********************************************************************!*\
  !*** ./src/curveShapeSpaceAnalysis/ExtremumLocationClassifiier.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExtremumLocationClassifier = exports.INITIAL_INDEX = void 0;
var MathVectorBasicOperations_1 = __webpack_require__(/*! ../linearAlgebra/MathVectorBasicOperations */ "./src/linearAlgebra/MathVectorBasicOperations.ts");
exports.INITIAL_INDEX = -1;
;
var ExtremumLocationClassifier = /** @class */ (function () {
    function ExtremumLocationClassifier(controlPoints) {
        this._localExtremum = [];
        this.controlPoints = [];
        this.controlPoints = controlPoints;
        this.globalExtremum = { index: exports.INITIAL_INDEX, value: 0.0 };
    }
    ExtremumLocationClassifier.prototype.getLocalMinima = function () {
        for (var i = 0; i < this.controlPoints.length - 2; i += 1) {
            if (MathVectorBasicOperations_1.sign(this.controlPoints[i]) === 1 && MathVectorBasicOperations_1.sign(this.controlPoints[i + 1]) === 1 && MathVectorBasicOperations_1.sign(this.controlPoints[i + 2]) === 1) {
                if (this.controlPoints[i] > this.controlPoints[i + 1] && this.controlPoints[i + 1] < this.controlPoints[i + 2]) {
                    this._localExtremum.push({ index: (i + 1), value: this.controlPoints[i + 1] });
                }
            }
        }
    };
    ExtremumLocationClassifier.prototype.getLocalMaxima = function () {
        for (var i = 0; i < this.controlPoints.length - 2; i += 1) {
            if (MathVectorBasicOperations_1.sign(this.controlPoints[i]) === -1 && MathVectorBasicOperations_1.sign(this.controlPoints[i + 1]) === -1 && MathVectorBasicOperations_1.sign(this.controlPoints[i + 2]) === -1) {
                if (this.controlPoints[i] < this.controlPoints[i + 1] && this.controlPoints[i + 1] > this.controlPoints[i + 2]) {
                    this._localExtremum.push({ index: (i + 1), value: this.controlPoints[i + 1] });
                }
            }
        }
    };
    ExtremumLocationClassifier.prototype.getGlobalMinimum = function () {
        this.getLocalMinima();
        this.sortLocalExtrema();
        if (this.globalExtremum.index !== exports.INITIAL_INDEX) {
            return true;
        }
        else {
            return false;
        }
    };
    ExtremumLocationClassifier.prototype.getGlobalMaximum = function () {
        this.getLocalMaxima();
        this.sortLocalExtrema();
        if (this.globalExtremum.index !== exports.INITIAL_INDEX) {
            return true;
        }
        else {
            return false;
        }
    };
    ExtremumLocationClassifier.prototype.sortLocalExtrema = function () {
        if (this._localExtremum.length > 0) {
            this._localExtremum.sort(function (a, b) {
                if (a.value > b.value) {
                    return 1;
                }
                if (a.value < b.value) {
                    return -1;
                }
                return 0;
            });
            this.globalExtremum = { index: this._localExtremum[0].index, value: this._localExtremum[0].value };
        }
    };
    return ExtremumLocationClassifier;
}());
exports.ExtremumLocationClassifier = ExtremumLocationClassifier;


/***/ }),

/***/ "./src/curveShapeSpaceAnalysis/OpenCurveDifferentialEventsExtractor.ts":
/*!*****************************************************************************!*\
  !*** ./src/curveShapeSpaceAnalysis/OpenCurveDifferentialEventsExtractor.ts ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OpenCurveDifferentialEventsExtractor = void 0;
var BSplineR1toR2DifferentialProperties_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2DifferentialProperties */ "./src/newBsplines/BSplineR1toR2DifferentialProperties.ts");
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var AbstractCurveDifferentialEventsExtractor_1 = __webpack_require__(/*! ./AbstractCurveDifferentialEventsExtractor */ "./src/curveShapeSpaceAnalysis/AbstractCurveDifferentialEventsExtractor.ts");
var OpenCurveDifferentialEventsExtractor = /** @class */ (function (_super) {
    __extends(OpenCurveDifferentialEventsExtractor, _super);
    function OpenCurveDifferentialEventsExtractor(curveToAnalyze) {
        var _this = _super.call(this, curveToAnalyze) || this;
        _this._inflectionParametricLocations = [];
        _this._curvatureNumeratorExtremaEstimators = [];
        _this._curvatureExtremaParametricLocations = [];
        _this._curvatureDerivativeNumeratorExtremaEstimators = [];
        _this.curve = curveToAnalyze;
        _this.curveDiffProperties = new BSplineR1toR2DifferentialProperties_1.BSplineR1toR2DifferentialProperties(_this.curve);
        _this._curvatureNumerator = _this.curveDiffProperties.curvatureNumerator();
        _this._curvatureDerivativeNumerator = _this.curveDiffProperties.curvatureDerivativeNumerator();
        _this.extractSeqOfDiffEvents();
        _this.notifyObservers();
        return _this;
    }
    Object.defineProperty(OpenCurveDifferentialEventsExtractor.prototype, "curvatureNumerator", {
        get: function () {
            return this._curvatureNumerator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OpenCurveDifferentialEventsExtractor.prototype, "curvatureDerivativeNumerator", {
        get: function () {
            return this._curvatureDerivativeNumerator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OpenCurveDifferentialEventsExtractor.prototype, "inflectionParametricLocations", {
        get: function () {
            return this._inflectionParametricLocations;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OpenCurveDifferentialEventsExtractor.prototype, "curvatureExtremaParametricLocations", {
        get: function () {
            return this._curvatureExtremaParametricLocations;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OpenCurveDifferentialEventsExtractor.prototype, "curvatureNumeratorExtremaEstimators", {
        get: function () {
            return this._curvatureNumeratorExtremaEstimators;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OpenCurveDifferentialEventsExtractor.prototype, "curvatureDerivativeNumeratorExtremaEstimators", {
        get: function () {
            return this._curvatureDerivativeNumeratorExtremaEstimators;
        },
        enumerable: false,
        configurable: true
    });
    OpenCurveDifferentialEventsExtractor.prototype.extractSeqOfDiffEvents = function () {
        this._crvDiffEventsLocations.inflectionLocationsEuclideanSpace = this.curveDiffProperties.inflections();
        this._inflectionParametricLocations = this._curvatureNumerator.zeros();
        this.extractInflectionEstimators();
        this._crvDiffEventsLocations.curvatureExtremaLocationsEuclideanSpace = this.curveDiffProperties.curvatureExtrema();
        this._curvatureExtremaParametricLocations = this._curvatureDerivativeNumerator.zeros();
        this._crvDiffEventsLocations.transientCurvatureExtremaLocationsEuclideanSpace = this.curveDiffProperties.transitionCurvatureExtrema();
        this._sequenceOfDifferentialEvents.insertEvents(this._curvatureExtremaParametricLocations, this._inflectionParametricLocations);
        return this._sequenceOfDifferentialEvents;
    };
    OpenCurveDifferentialEventsExtractor.prototype.extractInflectionEstimators = function () {
        this._curvatureNumeratorExtremaEstimators.push(this._curvatureNumerator.evaluate(ComparatorOfSequencesDiffEvents_1.LOWER_BOUND_CURVE_INTERVAL));
        for (var i = 0; i < (this._inflectionParametricLocations.length - 1); i++) {
            var midAbscissa = this._inflectionParametricLocations[i + 1] - this._inflectionParametricLocations[i];
            this._curvatureNumeratorExtremaEstimators.push(this._curvatureNumerator.evaluate(midAbscissa));
        }
        this._curvatureNumeratorExtremaEstimators.push(this._curvatureNumerator.evaluate(ComparatorOfSequencesDiffEvents_1.UPPER_BOUND_CURVE_INTERVAL));
    };
    OpenCurveDifferentialEventsExtractor.prototype.extractCurvatureExtremaExtimators = function () {
        this._curvatureDerivativeNumeratorExtremaEstimators.push(this._curvatureDerivativeNumerator.evaluate(ComparatorOfSequencesDiffEvents_1.LOWER_BOUND_CURVE_INTERVAL));
        for (var i = 0; i < (this._curvatureExtremaParametricLocations.length - 1); i++) {
            var midAbscissa = this._curvatureExtremaParametricLocations[i + 1] - this._curvatureExtremaParametricLocations[i];
            this._curvatureDerivativeNumeratorExtremaEstimators.push(this._curvatureDerivativeNumerator.evaluate(midAbscissa));
        }
        this._curvatureDerivativeNumeratorExtremaEstimators.push(this._curvatureDerivativeNumerator.evaluate(ComparatorOfSequencesDiffEvents_1.UPPER_BOUND_CURVE_INTERVAL));
    };
    OpenCurveDifferentialEventsExtractor.prototype.update = function (curveToAnalyze) {
        this.curve = curveToAnalyze;
        this.curveDiffProperties = new BSplineR1toR2DifferentialProperties_1.BSplineR1toR2DifferentialProperties(this.curve);
        this._curvatureNumerator = this.curveDiffProperties.curvatureNumerator();
        this._curvatureDerivativeNumerator = this.curveDiffProperties.curvatureDerivativeNumerator();
        this.extractSeqOfDiffEvents();
        this.notifyObservers();
    };
    return OpenCurveDifferentialEventsExtractor;
}(AbstractCurveDifferentialEventsExtractor_1.AbstractCurveDifferentialEventsExtractor));
exports.OpenCurveDifferentialEventsExtractor = OpenCurveDifferentialEventsExtractor;


/***/ }),

/***/ "./src/curveShapeSpaceAnalysis/OpenCurveDifferentialEventsExtractorWithoutSequence.ts":
/*!********************************************************************************************!*\
  !*** ./src/curveShapeSpaceAnalysis/OpenCurveDifferentialEventsExtractorWithoutSequence.ts ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OpenCurveDifferentialEventsExtractorWithoutSequence = void 0;
var BSplineR1toR2DifferentialProperties_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2DifferentialProperties */ "./src/newBsplines/BSplineR1toR2DifferentialProperties.ts");
var SequenceOfDifferentialEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/SequenceOfDifferentialEvents */ "./src/sequenceOfDifferentialEvents/SequenceOfDifferentialEvents.ts");
var OpenCurveDifferentialEventsExtractor_1 = __webpack_require__(/*! ./OpenCurveDifferentialEventsExtractor */ "./src/curveShapeSpaceAnalysis/OpenCurveDifferentialEventsExtractor.ts");
var OpenCurveDifferentialEventsExtractorWithoutSequence = /** @class */ (function (_super) {
    __extends(OpenCurveDifferentialEventsExtractorWithoutSequence, _super);
    function OpenCurveDifferentialEventsExtractorWithoutSequence(curveToAnalyze) {
        var _this = _super.call(this, curveToAnalyze) || this;
        _this._sequenceOfDifferentialEvents = new SequenceOfDifferentialEvents_1.SequenceOfDifferentialEvents();
        _this.extractSeqOfDiffEvents();
        _this.notifyObservers();
        return _this;
    }
    OpenCurveDifferentialEventsExtractorWithoutSequence.prototype.extractSeqOfDiffEvents = function () {
        this._crvDiffEventsLocations.inflectionLocationsEuclideanSpace = this.curveDiffProperties.inflections();
        this._inflectionParametricLocations = this._curvatureNumerator.zeros();
        this._crvDiffEventsLocations.curvatureExtremaLocationsEuclideanSpace = this.curveDiffProperties.curvatureExtrema();
        this._curvatureExtremaParametricLocations = this._curvatureDerivativeNumerator.zeros();
        this._crvDiffEventsLocations.transientCurvatureExtremaLocationsEuclideanSpace = this.curveDiffProperties.transitionCurvatureExtrema();
        return this._sequenceOfDifferentialEvents;
    };
    OpenCurveDifferentialEventsExtractorWithoutSequence.prototype.update = function (curveToAnalyze) {
        this.curve = curveToAnalyze;
        this.curveDiffProperties = new BSplineR1toR2DifferentialProperties_1.BSplineR1toR2DifferentialProperties(this.curve);
        this._curvatureNumerator = this.curveDiffProperties.curvatureNumerator();
        this._curvatureDerivativeNumerator = this.curveDiffProperties.curvatureDerivativeNumerator();
        this.extractSeqOfDiffEvents();
        this.notifyObservers();
    };
    return OpenCurveDifferentialEventsExtractorWithoutSequence;
}(OpenCurveDifferentialEventsExtractor_1.OpenCurveDifferentialEventsExtractor));
exports.OpenCurveDifferentialEventsExtractorWithoutSequence = OpenCurveDifferentialEventsExtractorWithoutSequence;


/***/ }),

/***/ "./src/curveShapeSpaceNavigation/CurveConstraintStrategy.ts":
/*!******************************************************************!*\
  !*** ./src/curveShapeSpaceNavigation/CurveConstraintStrategy.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurveConstraintClampedFirstAndLastControlPoint = exports.CurveConstraintClampedLastControlPoint = exports.CurveConstraintClampedFirstControlPoint = exports.CurveConstraintNoConstraint = exports.CurveConstraintStrategy = exports.TOL_LOCATION_CURVE_REFERENCE_POINTS = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var Vector2d_1 = __webpack_require__(/*! ../mathVector/Vector2d */ "./src/mathVector/Vector2d.ts");
var CurveConstraints_1 = __webpack_require__(/*! ./CurveConstraints */ "./src/curveShapeSpaceNavigation/CurveConstraints.ts");
var SquareMatrix_1 = __webpack_require__(/*! ../linearAlgebra/SquareMatrix */ "./src/linearAlgebra/SquareMatrix.ts");
var AbstractBSplineR1toR2_1 = __webpack_require__(/*! ../newBsplines/AbstractBSplineR1toR2 */ "./src/newBsplines/AbstractBSplineR1toR2.ts");
exports.TOL_LOCATION_CURVE_REFERENCE_POINTS = 1.0E-6;
var CurveConstraintStrategy = /** @class */ (function () {
    function CurveConstraintStrategy(curveConstraints) {
        this.curveConstraints = curveConstraints;
        this.shapeNavigableCurve = curveConstraints.shapeNavigableCurve;
        this._currentCurve = this.shapeNavigableCurve.curveCategory.curveModel.spline;
        this._constraintsNotSatisfied = false;
    }
    Object.defineProperty(CurveConstraintStrategy.prototype, "constraintsNotSatisfied", {
        get: function () {
            return this._constraintsNotSatisfied;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveConstraintStrategy.prototype, "currentCurve", {
        get: function () {
            return this._currentCurve.clone();
        },
        set: function (currentCurve) {
            this._currentCurve = currentCurve.clone();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveConstraintStrategy.prototype, "optimizedCurve", {
        get: function () {
            return this._optimizedCurve.clone();
        },
        set: function (optimizedCurve) {
            this._optimizedCurve = optimizedCurve.clone();
        },
        enumerable: false,
        configurable: true
    });
    return CurveConstraintStrategy;
}());
exports.CurveConstraintStrategy = CurveConstraintStrategy;
var CurveConstraintNoConstraint = /** @class */ (function (_super) {
    __extends(CurveConstraintNoConstraint, _super);
    function CurveConstraintNoConstraint(curveConstraints) {
        var _this = _super.call(this, curveConstraints) || this;
        if (_this.shapeNavigableCurve.curveShapeSpaceNavigator !== undefined) {
            _this._curveShapeSpaceNavigator = _this.shapeNavigableCurve.curveShapeSpaceNavigator;
        }
        else {
            _this._curveShapeSpaceNavigator = undefined;
        }
        _this._firstControlPoint = CurveConstraints_1.ConstraintType.none;
        _this._lastControlPoint = CurveConstraints_1.ConstraintType.none;
        _this.curveConstraints.firstControlPoint = _this._firstControlPoint;
        _this.curveConstraints.lastControlPoint = _this._lastControlPoint;
        if (_this._curveShapeSpaceNavigator !== undefined) {
            _this._optimizedCurve = _this._curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve;
        }
        else {
            _this._optimizedCurve = _this.shapeNavigableCurve.curveCategory.curveModel.spline;
        }
        var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, "constructor", " strategy for no CP clamped.");
        warning.logMessageToConsole();
        return _this;
    }
    Object.defineProperty(CurveConstraintNoConstraint.prototype, "firstControlPoint", {
        get: function () {
            return this._firstControlPoint;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveConstraintNoConstraint.prototype, "lastControlPoint", {
        get: function () {
            return this._lastControlPoint;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveConstraintNoConstraint.prototype, "curveShapeSpaceNavigator", {
        get: function () {
            return this._curveShapeSpaceNavigator;
        },
        set: function (curveShapeSpaceNavigator) {
            this._curveShapeSpaceNavigator = curveShapeSpaceNavigator;
        },
        enumerable: false,
        configurable: true
    });
    CurveConstraintNoConstraint.prototype.updateCurve = function () {
        if (this._curveShapeSpaceNavigator !== undefined) {
            this.optimizedCurve = this._curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, 'updateCurve', 'Cannot update curve: curveShapeSpaceNavigator undefined.');
            error.logMessageToConsole();
        }
    };
    CurveConstraintNoConstraint.prototype.locateCurveExtremityUnderConstraint = function (curveConstraints) {
        if (curveConstraints.firstControlPoint === CurveConstraints_1.ConstraintType.none
            && curveConstraints.lastControlPoint === CurveConstraints_1.ConstraintType.none) {
            this.updateCurve();
            if (this._curveShapeSpaceNavigator !== undefined) {
                this._curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve = this.optimizedCurve;
            }
            else {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, 'locateCurveExtremityUnderConstraint', 'Cannot update the optimized curve: curveShapeSpaceNavigator undefined.');
                error.logMessageToConsole();
            }
        }
        else {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "locateCurveExtremityUnderConstraint", " inconsistent constraint setting for this class.");
            warning.logMessageToConsole();
        }
    };
    return CurveConstraintNoConstraint;
}(CurveConstraintStrategy));
exports.CurveConstraintNoConstraint = CurveConstraintNoConstraint;
var CurveConstraintClampedFirstControlPoint = /** @class */ (function (_super) {
    __extends(CurveConstraintClampedFirstControlPoint, _super);
    function CurveConstraintClampedFirstControlPoint(curveConstraints) {
        var _a, _b;
        var _this = _super.call(this, curveConstraints) || this;
        if (_this.shapeNavigableCurve.curveShapeSpaceNavigator !== undefined) {
            _this._curveShapeSpaceNavigator = _this.shapeNavigableCurve.curveShapeSpaceNavigator;
        }
        else {
            _this._curveShapeSpaceNavigator = undefined;
        }
        _this._firstControlPoint = CurveConstraints_1.ConstraintType.location;
        _this._lastControlPoint = CurveConstraints_1.ConstraintType.none;
        _this.curveConstraints.firstControlPoint = _this._firstControlPoint;
        _this.curveConstraints.lastControlPoint = _this._lastControlPoint;
        if (_this._curveShapeSpaceNavigator !== undefined) {
            _this._optimizedCurve = (_a = _this._curveShapeSpaceNavigator) === null || _a === void 0 ? void 0 : _a.navigationCurveModel.optimizedCurve;
        }
        else {
            _this._optimizedCurve = _this.shapeNavigableCurve.curveCategory.curveModel.spline;
        }
        _this._referencePtIndex = _this.shapeNavigableCurve.clampedPoints[0];
        _this.displacementCurrentCurveControlPolygon = (_b = _this.curveShapeSpaceNavigator) === null || _b === void 0 ? void 0 : _b.navigationCurveModel.displacementCurrentCurveControlPolygon;
        var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, "constructor", " strategy for first CP clamped.");
        warning.logMessageToConsole();
        return _this;
    }
    Object.defineProperty(CurveConstraintClampedFirstControlPoint.prototype, "firstControlPoint", {
        get: function () {
            return this._firstControlPoint;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveConstraintClampedFirstControlPoint.prototype, "lastControlPoint", {
        get: function () {
            return this._lastControlPoint;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveConstraintClampedFirstControlPoint.prototype, "curveShapeSpaceNavigator", {
        get: function () {
            return this._curveShapeSpaceNavigator;
        },
        set: function (curveShapeSpaceNavigator) {
            this._curveShapeSpaceNavigator = curveShapeSpaceNavigator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveConstraintClampedFirstControlPoint.prototype, "referencePtIndex", {
        set: function (referencePtIndex) {
            this._referencePtIndex = referencePtIndex;
        },
        enumerable: false,
        configurable: true
    });
    CurveConstraintClampedFirstControlPoint.prototype.updateCurve = function () {
        if (this._curveShapeSpaceNavigator !== undefined) {
            this.optimizedCurve = this._curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, 'updateCurve', 'Cannot update curve: curveShapeSpaceNavigator undefined.');
            error.logMessageToConsole();
        }
    };
    CurveConstraintClampedFirstControlPoint.prototype.relocateCurveAfterOptimization = function () {
        var e_1, _a;
        this.updateCurve();
        var controlPoints = AbstractBSplineR1toR2_1.deepCopyControlPoints(this._optimizedCurve.controlPoints);
        if (this._curveShapeSpaceNavigator !== undefined
            && this.displacementCurrentCurveControlPolygon !== undefined) {
            this._curveShapeSpaceNavigator.navigationCurveModel.curveDisplacement();
            try {
                for (var controlPoints_1 = __values(controlPoints), controlPoints_1_1 = controlPoints_1.next(); !controlPoints_1_1.done; controlPoints_1_1 = controlPoints_1.next()) {
                    var controlP = controlPoints_1_1.value;
                    controlP.x -= this.displacementCurrentCurveControlPolygon[0].x;
                    controlP.y -= this.displacementCurrentCurveControlPolygon[0].y;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (controlPoints_1_1 && !controlPoints_1_1.done && (_a = controlPoints_1.return)) _a.call(controlPoints_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        this._optimizedCurve.controlPoints = controlPoints;
        return this.optimizedCurve;
    };
    CurveConstraintClampedFirstControlPoint.prototype.relocateCurveAfterOptimizationUsingKnotPts = function () {
        var e_2, _a;
        this.updateCurve();
        var knots = this.optimizedCurve.getDistinctKnots();
        var refPoint = this._optimizedCurve.evaluate(knots[this._referencePtIndex]);
        var controlPoints = this._optimizedCurve.controlPoints;
        if (this._curveShapeSpaceNavigator !== undefined) {
            var displacement = refPoint.substract(this._curveShapeSpaceNavigator.navigationCurveModel.currentCurve.evaluate(knots[this._referencePtIndex]));
            try {
                for (var controlPoints_2 = __values(controlPoints), controlPoints_2_1 = controlPoints_2.next(); !controlPoints_2_1.done; controlPoints_2_1 = controlPoints_2.next()) {
                    var controlP = controlPoints_2_1.value;
                    controlP.x -= displacement.x;
                    controlP.y -= displacement.y;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (controlPoints_2_1 && !controlPoints_2_1.done && (_a = controlPoints_2.return)) _a.call(controlPoints_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        this._optimizedCurve.controlPoints = controlPoints;
        return this.optimizedCurve;
    };
    CurveConstraintClampedFirstControlPoint.prototype.locateCurveExtremityUnderConstraint = function (curveConstraints) {
        if (curveConstraints.firstControlPoint === CurveConstraints_1.ConstraintType.location
            && curveConstraints.lastControlPoint === CurveConstraints_1.ConstraintType.none) {
            // this.relocateCurveAfterOptimization();
            this.relocateCurveAfterOptimizationUsingKnotPts();
            if (this._curveShapeSpaceNavigator !== undefined) {
                this._curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve = this.optimizedCurve;
            }
            else {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, 'locateCurveExtremityUnderConstraint', 'Cannot update the optimized curve: curveShapeSpaceNavigator undefined.');
                error.logMessageToConsole();
            }
        }
        else {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "locateCurveExtremityUnderConstraint", " inconsistent constraint setting for this class.");
            warning.logMessageToConsole();
        }
    };
    return CurveConstraintClampedFirstControlPoint;
}(CurveConstraintStrategy));
exports.CurveConstraintClampedFirstControlPoint = CurveConstraintClampedFirstControlPoint;
var CurveConstraintClampedLastControlPoint = /** @class */ (function (_super) {
    __extends(CurveConstraintClampedLastControlPoint, _super);
    function CurveConstraintClampedLastControlPoint(curveConstraints) {
        var _a, _b;
        var _this = _super.call(this, curveConstraints) || this;
        if (_this.shapeNavigableCurve.curveShapeSpaceNavigator !== undefined) {
            _this._curveShapeSpaceNavigator = _this.shapeNavigableCurve.curveShapeSpaceNavigator;
        }
        else {
            _this._curveShapeSpaceNavigator = undefined;
        }
        _this._firstControlPoint = CurveConstraints_1.ConstraintType.none;
        _this._lastControlPoint = CurveConstraints_1.ConstraintType.location;
        _this.curveConstraints.firstControlPoint = _this._firstControlPoint;
        _this.curveConstraints.lastControlPoint = _this._lastControlPoint;
        if (_this._curveShapeSpaceNavigator !== undefined) {
            _this._optimizedCurve = (_a = _this._curveShapeSpaceNavigator) === null || _a === void 0 ? void 0 : _a.navigationCurveModel.optimizedCurve;
        }
        else {
            _this._optimizedCurve = _this.shapeNavigableCurve.curveCategory.curveModel.spline;
        }
        _this._referencePtIndex = _this.shapeNavigableCurve.clampedPoints[1];
        _this.displacementCurrentCurveControlPolygon = (_b = _this.curveShapeSpaceNavigator) === null || _b === void 0 ? void 0 : _b.navigationCurveModel.displacementCurrentCurveControlPolygon;
        var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, "constructor", " strategy for last CP clamped.");
        warning.logMessageToConsole();
        return _this;
    }
    Object.defineProperty(CurveConstraintClampedLastControlPoint.prototype, "firstControlPoint", {
        get: function () {
            return this._firstControlPoint;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveConstraintClampedLastControlPoint.prototype, "lastControlPoint", {
        get: function () {
            return this._lastControlPoint;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveConstraintClampedLastControlPoint.prototype, "curveShapeSpaceNavigator", {
        get: function () {
            return this._curveShapeSpaceNavigator;
        },
        set: function (curveShapeSpaceNavigator) {
            this._curveShapeSpaceNavigator = curveShapeSpaceNavigator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveConstraintClampedLastControlPoint.prototype, "referencePtIndex", {
        set: function (referencePtIndex) {
            this._referencePtIndex = referencePtIndex;
        },
        enumerable: false,
        configurable: true
    });
    CurveConstraintClampedLastControlPoint.prototype.updateCurve = function () {
        if (this._curveShapeSpaceNavigator !== undefined) {
            this.optimizedCurve = this._curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, 'updateCurve', 'Cannot update curve: curveShapeSpaceNavigator undefined.');
            error.logMessageToConsole();
        }
    };
    CurveConstraintClampedLastControlPoint.prototype.relocateCurveAfterOptimization = function () {
        var e_3, _a;
        this.updateCurve();
        var controlPoints = AbstractBSplineR1toR2_1.deepCopyControlPoints(this._optimizedCurve.controlPoints);
        if (this._curveShapeSpaceNavigator !== undefined &&
            this.displacementCurrentCurveControlPolygon !== undefined) {
            this._curveShapeSpaceNavigator.navigationCurveModel.curveDisplacement();
            try {
                for (var controlPoints_3 = __values(controlPoints), controlPoints_3_1 = controlPoints_3.next(); !controlPoints_3_1.done; controlPoints_3_1 = controlPoints_3.next()) {
                    var controlP = controlPoints_3_1.value;
                    controlP.x -= this.displacementCurrentCurveControlPolygon[controlPoints.length - 1].x;
                    controlP.y -= this.displacementCurrentCurveControlPolygon[controlPoints.length - 1].y;
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (controlPoints_3_1 && !controlPoints_3_1.done && (_a = controlPoints_3.return)) _a.call(controlPoints_3);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        this._optimizedCurve.controlPoints = controlPoints;
        return this.optimizedCurve;
    };
    CurveConstraintClampedLastControlPoint.prototype.relocateCurveAfterOptimizationUsingKnotPts = function () {
        var e_4, _a;
        this.updateCurve();
        var knots = this.optimizedCurve.getDistinctKnots();
        var refPoint = this._optimizedCurve.evaluate(knots[this._referencePtIndex]);
        var controlPoints = this._optimizedCurve.controlPoints;
        if (this._curveShapeSpaceNavigator !== undefined) {
            var displacement = refPoint.substract(this._curveShapeSpaceNavigator.navigationCurveModel.currentCurve.evaluate(knots[this._referencePtIndex]));
            try {
                for (var controlPoints_4 = __values(controlPoints), controlPoints_4_1 = controlPoints_4.next(); !controlPoints_4_1.done; controlPoints_4_1 = controlPoints_4.next()) {
                    var controlP = controlPoints_4_1.value;
                    controlP.x -= displacement.x;
                    controlP.y -= displacement.y;
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (controlPoints_4_1 && !controlPoints_4_1.done && (_a = controlPoints_4.return)) _a.call(controlPoints_4);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        this._optimizedCurve.controlPoints = controlPoints;
        return this.optimizedCurve;
    };
    CurveConstraintClampedLastControlPoint.prototype.locateCurveExtremityUnderConstraint = function (curveConstraints) {
        if (curveConstraints.firstControlPoint === CurveConstraints_1.ConstraintType.none
            && curveConstraints.lastControlPoint === CurveConstraints_1.ConstraintType.location) {
            // this.relocateCurveAfterOptimization();
            this.relocateCurveAfterOptimizationUsingKnotPts();
            if (this._curveShapeSpaceNavigator !== undefined) {
                this._curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve = this.optimizedCurve;
            }
            else {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, 'locateCurveExtremityUnderConstraint', 'Cannot update the optimized curve: curveShapeSpaceNavigator undefined.');
                error.logMessageToConsole();
            }
        }
        else {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "locateCurveExtremityUnderConstraint", " inconsistent constraint setting for this class.");
            warning.logMessageToConsole();
        }
    };
    return CurveConstraintClampedLastControlPoint;
}(CurveConstraintStrategy));
exports.CurveConstraintClampedLastControlPoint = CurveConstraintClampedLastControlPoint;
var CurveConstraintClampedFirstAndLastControlPoint = /** @class */ (function (_super) {
    __extends(CurveConstraintClampedFirstAndLastControlPoint, _super);
    function CurveConstraintClampedFirstAndLastControlPoint(curveConstraints) {
        var _a, _b;
        var _this = _super.call(this, curveConstraints) || this;
        if (_this.shapeNavigableCurve.curveShapeSpaceNavigator !== undefined) {
            _this._curveShapeSpaceNavigator = _this.shapeNavigableCurve.curveShapeSpaceNavigator;
        }
        else {
            _this._curveShapeSpaceNavigator = undefined;
        }
        _this._firstControlPoint = CurveConstraints_1.ConstraintType.location;
        _this._lastControlPoint = CurveConstraints_1.ConstraintType.location;
        _this.curveConstraints.firstControlPoint = _this._firstControlPoint;
        _this.curveConstraints.lastControlPoint = _this._lastControlPoint;
        if (_this._curveShapeSpaceNavigator !== undefined) {
            _this._optimizedCurve = (_a = _this._curveShapeSpaceNavigator) === null || _a === void 0 ? void 0 : _a.navigationCurveModel.optimizedCurve;
        }
        else {
            _this._optimizedCurve = _this.shapeNavigableCurve.curveCategory.curveModel.spline;
        }
        _this._referencePtIndex = _this.shapeNavigableCurve.clampedPoints[0];
        _this._currentCurve = _this.shapeNavigableCurve.curveCategory.curveModel.spline;
        _this.displacementCurrentCurveControlPolygon = (_b = _this.curveShapeSpaceNavigator) === null || _b === void 0 ? void 0 : _b.navigationCurveModel.displacementCurrentCurveControlPolygon;
        var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, "constructor", " strategy for first and last CP clamped.");
        warning.logMessageToConsole();
        return _this;
    }
    Object.defineProperty(CurveConstraintClampedFirstAndLastControlPoint.prototype, "firstControlPoint", {
        get: function () {
            return this._firstControlPoint;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveConstraintClampedFirstAndLastControlPoint.prototype, "lastControlPoint", {
        get: function () {
            return this._lastControlPoint;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveConstraintClampedFirstAndLastControlPoint.prototype, "curveShapeSpaceNavigator", {
        get: function () {
            return this._curveShapeSpaceNavigator;
        },
        set: function (curveShapeSpaceNavigator) {
            this._curveShapeSpaceNavigator = curveShapeSpaceNavigator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveConstraintClampedFirstAndLastControlPoint.prototype, "referencePtIndex", {
        set: function (referencePtIndex) {
            this._referencePtIndex = referencePtIndex;
        },
        enumerable: false,
        configurable: true
    });
    CurveConstraintClampedFirstAndLastControlPoint.prototype.updateCurve = function () {
        if (this._curveShapeSpaceNavigator !== undefined) {
            this.optimizedCurve = this._curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, 'updateCurve', 'Cannot update curve: curveShapeSpaceNavigator undefined.');
            error.logMessageToConsole();
        }
    };
    CurveConstraintClampedFirstAndLastControlPoint.prototype.setCurrentCurve = function (currentCurve) {
        this.currentCurve = currentCurve.clone();
    };
    CurveConstraintClampedFirstAndLastControlPoint.prototype.relocateCurveAfterOptimization = function () {
        var e_5, _a;
        if (this._curveShapeSpaceNavigator !== undefined && this.displacementCurrentCurveControlPolygon !== undefined) {
            var controlPoints = AbstractBSplineR1toR2_1.deepCopyControlPoints(this.optimizedCurve.controlPoints);
            var nbControlPts = this.displacementCurrentCurveControlPolygon.length;
            this._curveShapeSpaceNavigator.navigationCurveModel.curveDisplacement();
            if (Math.abs(this.displacementCurrentCurveControlPolygon[nbControlPts - 1].substract(this.displacementCurrentCurveControlPolygon[0]).norm()) < exports.TOL_LOCATION_CURVE_REFERENCE_POINTS) {
                this.displacementCurrentCurveControlPolygon[controlPoints.length - 1] = this.displacementCurrentCurveControlPolygon[0];
                try {
                    for (var controlPoints_5 = __values(controlPoints), controlPoints_5_1 = controlPoints_5.next(); !controlPoints_5_1.done; controlPoints_5_1 = controlPoints_5.next()) {
                        var controlP = controlPoints_5_1.value;
                        controlP.x -= this.displacementCurrentCurveControlPolygon[controlPoints.length - 1].x;
                        controlP.y -= this.displacementCurrentCurveControlPolygon[controlPoints.length - 1].y;
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (controlPoints_5_1 && !controlPoints_5_1.done && (_a = controlPoints_5.return)) _a.call(controlPoints_5);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
                this._optimizedCurve.controlPoints = controlPoints;
            }
            else {
                // JCL Stop deforming curve because constraint is violated. Need to change strategy -> todo
                this.optimizedCurve = this.currentCurve.clone();
                this._constraintsNotSatisfied = true;
            }
        }
        return this.optimizedCurve;
    };
    CurveConstraintClampedFirstAndLastControlPoint.prototype.relocateCurveAfterOptimizationUsingKnotPts = function () {
        this.updateCurve();
        var knotsOptCurve = this.optimizedCurve.getDistinctKnots();
        var refPoint1 = this._optimizedCurve.evaluate(knotsOptCurve[this._referencePtIndex]);
        var refPoint2 = this._optimizedCurve.evaluate(knotsOptCurve[this.shapeNavigableCurve.clampedPoints[1]]);
        var knotsCurrentCurve = this._currentCurve.getDistinctKnots();
        var refDistance = this._currentCurve.evaluate(knotsCurrentCurve[this.shapeNavigableCurve.clampedPoints[1]]).distance(this._currentCurve.evaluate(knotsCurrentCurve[this._referencePtIndex]));
        var distance = refPoint2.distance(refPoint1);
        if (this._curveShapeSpaceNavigator !== undefined) {
            // if(Math.abs(displacement1.substract(displacement2).norm()) < TOL_LOCATION_CURVE_REFERENCE_POINTS) {
            if (Math.abs(distance - refDistance) < exports.TOL_LOCATION_CURVE_REFERENCE_POINTS) {
                this.applyRigidBodyDisplacement();
            }
            else {
                // Scale the optimized curve to meet the distance constraint
                // const scaleFactor = refDistance / distance;
                // const scaledCurve = this._optimizedCurve.scale(scaleFactor);
                // this._optimizedCurve = scaledCurve.clone();
                // this.applyRigidBodyDisplacement();
                // JCL Stop deforming curve because constraint is violated. Need to change strategy -> todo
                var valid = this.curveConstraints.slideConstraintAlongCurve();
                if (valid) {
                    this.applyRigidBodyDisplacement();
                }
                else {
                    this._constraintsNotSatisfied = true;
                    this._optimizedCurve = this._currentCurve.clone();
                }
            }
        }
        return this.optimizedCurve;
    };
    CurveConstraintClampedFirstAndLastControlPoint.prototype.applyRigidBodyDisplacement = function () {
        var e_6, _a;
        var knotsCurrentCurve = this._currentCurve.getDistinctKnots();
        var refPt1currentCurve = this._currentCurve.evaluate(knotsCurrentCurve[this._referencePtIndex]);
        var refPt2currentCurve = this._currentCurve.evaluate(knotsCurrentCurve[this.shapeNavigableCurve.clampedPoints[1]]);
        var pt2Pt1currentCurve = refPt2currentCurve.substract(refPt1currentCurve);
        var knotsOptCurve = this.optimizedCurve.getDistinctKnots();
        if (knotsOptCurve[this._referencePtIndex] > knotsOptCurve[knotsOptCurve.length - 1] || knotsOptCurve[this._referencePtIndex] < knotsOptCurve[0]) {
            console.log("Clamped points out of range");
        }
        var refPt1optCurve = this._optimizedCurve.evaluate(knotsOptCurve[this._referencePtIndex]);
        var refPt2optCurve = this._optimizedCurve.evaluate(knotsOptCurve[this.shapeNavigableCurve.clampedPoints[1]]);
        var pt2Pt1optCurve = refPt2optCurve.substract(refPt1optCurve);
        var displacement = refPt1optCurve.substract(refPt1currentCurve);
        // use dot product to compute the angle because angle is very small and crossProduct can be less accurate
        var argument = pt2Pt1currentCurve.dot(pt2Pt1optCurve) / (pt2Pt1currentCurve.norm() * pt2Pt1optCurve.norm());
        var angle = Math.acos(pt2Pt1currentCurve.dot(pt2Pt1optCurve) / (pt2Pt1currentCurve.norm() * pt2Pt1optCurve.norm()));
        if (isNaN(angle)) {
            // Redefine the angle when the argument of the acos is greater than one, due to roundoff errors in the evaluation
            // of the argument. The argument being close an angle of 0, using asin does not lead to roundoff errors near one.
            console.log('applyRigidBodyDisplacement. Angle computed through cosine is not applicable argument = ' + argument);
            angle = Math.asin(pt2Pt1currentCurve.crossPoduct(pt2Pt1optCurve) / (pt2Pt1currentCurve.norm() * pt2Pt1optCurve.norm()));
        }
        var signAngle = Math.asin(pt2Pt1currentCurve.crossPoduct(pt2Pt1optCurve) / (pt2Pt1currentCurve.norm() * pt2Pt1optCurve.norm()));
        if (signAngle < 0.0)
            angle = -angle;
        var rotationMatrix = new SquareMatrix_1.SquareMatrix(2, [Math.cos(angle), Math.sin(angle), -Math.sin(angle), Math.cos(angle)]);
        var controlPointsOptCrv = AbstractBSplineR1toR2_1.deepCopyControlPoints(this._optimizedCurve.controlPoints);
        var relocatedCtrlPts = [];
        try {
            for (var controlPointsOptCrv_1 = __values(controlPointsOptCrv), controlPointsOptCrv_1_1 = controlPointsOptCrv_1.next(); !controlPointsOptCrv_1_1.done; controlPointsOptCrv_1_1 = controlPointsOptCrv_1.next()) {
                var controlPt = controlPointsOptCrv_1_1.value;
                relocatedCtrlPts.push(controlPt.substract(displacement));
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (controlPointsOptCrv_1_1 && !controlPointsOptCrv_1_1.done && (_a = controlPointsOptCrv_1.return)) _a.call(controlPointsOptCrv_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
        for (var i = 0; i < controlPointsOptCrv.length; i++) {
            var vertexLoc = controlPointsOptCrv[i].substract(refPt1optCurve);
            var vertexRot = Vector2d_1.toVector2d(rotationMatrix.multiplyByVector(vertexLoc.toArray()));
            relocatedCtrlPts[i] = vertexRot.add(refPt1optCurve).substract(displacement);
        }
        this._optimizedCurve.controlPoints = relocatedCtrlPts;
    };
    CurveConstraintClampedFirstAndLastControlPoint.prototype.locateCurveExtremityUnderConstraint = function (curveConstraints) {
        if (curveConstraints.firstControlPoint === CurveConstraints_1.ConstraintType.location
            && curveConstraints.lastControlPoint === CurveConstraints_1.ConstraintType.location) {
            // this.relocateCurveAfterOptimization();
            this.relocateCurveAfterOptimizationUsingKnotPts();
            if (this._curveShapeSpaceNavigator !== undefined) {
                this._curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve = this.optimizedCurve;
            }
            else {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, 'locateCurveExtremityUnderConstraint', 'Cannot update the optimized curve: curveShapeSpaceNavigator undefined.');
                error.logMessageToConsole();
            }
        }
        else {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "locateCurveExtremityUnderConstraint", " inconsistent constraint setting for this class.");
            warning.logMessageToConsole();
        }
    };
    return CurveConstraintClampedFirstAndLastControlPoint;
}(CurveConstraintStrategy));
exports.CurveConstraintClampedFirstAndLastControlPoint = CurveConstraintClampedFirstAndLastControlPoint;


/***/ }),

/***/ "./src/curveShapeSpaceNavigation/CurveConstraints.ts":
/*!***********************************************************!*\
  !*** ./src/curveShapeSpaceNavigation/CurveConstraints.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurveConstraints = exports.NB_MAX_ITER_SLIDING_CLAMPING_CONSTRAINT = exports.CurveExtremity = exports.ConstraintType = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var CurveConstraintStrategy_1 = __webpack_require__(/*! ./CurveConstraintStrategy */ "./src/curveShapeSpaceNavigation/CurveConstraintStrategy.ts");
var ShapeNavigableCurve_1 = __webpack_require__(/*! ../shapeNavigableCurve/ShapeNavigableCurve */ "./src/shapeNavigableCurve/ShapeNavigableCurve.ts");
var BSplineR1toR2_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2 */ "./src/newBsplines/BSplineR1toR2.ts");
var PeriodicBSplineR1toR2withOpenKnotSequence_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence */ "./src/newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence.ts");
var BSplineR1toR1_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR1 */ "./src/newBsplines/BSplineR1toR1.ts");
var AbstractBSplineR1toR2_1 = __webpack_require__(/*! ../newBsplines/AbstractBSplineR1toR2 */ "./src/newBsplines/AbstractBSplineR1toR2.ts");
var ConstraintType;
(function (ConstraintType) {
    ConstraintType[ConstraintType["none"] = 0] = "none";
    ConstraintType[ConstraintType["location"] = 1] = "location";
    ConstraintType[ConstraintType["tangent"] = 2] = "tangent";
    ConstraintType[ConstraintType["locationAndTangent"] = 3] = "locationAndTangent";
})(ConstraintType = exports.ConstraintType || (exports.ConstraintType = {}));
var CurveExtremity;
(function (CurveExtremity) {
    CurveExtremity[CurveExtremity["first"] = 0] = "first";
    CurveExtremity[CurveExtremity["last"] = 1] = "last";
})(CurveExtremity = exports.CurveExtremity || (exports.CurveExtremity = {}));
exports.NB_MAX_ITER_SLIDING_CLAMPING_CONSTRAINT = 10;
var CurveConstraints = /** @class */ (function () {
    // private _optimizedCurve: BSplineR1toR2Interface;
    function CurveConstraints(shapeNavigableCurve) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'constructor', 'start constructor.');
        warning.logMessageToConsole();
        this._shapeNavigableCurve = shapeNavigableCurve;
        this._curveConstraintStrategy = new CurveConstraintStrategy_1.CurveConstraintNoConstraint(this);
        this._firstControlPoint = this._curveConstraintStrategy.firstControlPoint;
        this._lastControlPoint = this._curveConstraintStrategy.lastControlPoint;
        this._shapeNavigableCurve.changeCurveConstraintStrategy(this._curveConstraintStrategy);
        this._firstControlPoint = ConstraintType.none;
        this._lastControlPoint = ConstraintType.none;
        // this._optimizedCurve = this._shapeNavigableCurve.optimizedCurve;
    }
    Object.defineProperty(CurveConstraints.prototype, "firstControlPoint", {
        get: function () {
            return this._firstControlPoint;
        },
        set: function (constraintAtFirstPoint) {
            this._firstControlPoint = constraintAtFirstPoint;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveConstraints.prototype, "lastControlPoint", {
        get: function () {
            return this._lastControlPoint;
        },
        set: function (constraintAtLastPoint) {
            this._lastControlPoint = constraintAtLastPoint;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveConstraints.prototype, "curveConstraintStrategy", {
        get: function () {
            return this._curveConstraintStrategy;
        },
        set: function (curveConstraintStrategy) {
            this._curveConstraintStrategy = curveConstraintStrategy;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveConstraints.prototype, "shapeNavigableCurve", {
        get: function () {
            return this._shapeNavigableCurve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveConstraints.prototype, "curveShapeSpaceNavigator", {
        get: function () {
            return this._shapeNavigableCurve;
        },
        enumerable: false,
        configurable: true
    });
    CurveConstraints.prototype.setConstraint = function (curveConstraintStrategy) {
        this._curveConstraintStrategy = curveConstraintStrategy;
        this._firstControlPoint = this._curveConstraintStrategy.firstControlPoint;
        this._lastControlPoint = this._curveConstraintStrategy.lastControlPoint;
    };
    CurveConstraints.prototype.processConstraint = function () {
        this._curveConstraintStrategy.locateCurveExtremityUnderConstraint(this);
    };
    // clearConstraint(extremity: CurveExtremity): void {
    //     if(extremity === CurveExtremity.first) {
    //         this._firstControlPoint = ConstraintType.none;
    //     }
    //     if(extremity === CurveExtremity.last) {
    //         this._lastControlPoint = ConstraintType.none;
    //     }
    // }
    CurveConstraints.prototype.clearAll = function () {
        this._firstControlPoint = ConstraintType.none;
        this._lastControlPoint = ConstraintType.none;
    };
    CurveConstraints.prototype.slideConstraintAlongCurve = function () {
        var valid = true;
        var indexPoint1 = this._shapeNavigableCurve.clampedPoints[0];
        var indexPoint2 = this._shapeNavigableCurve.clampedPoints[1];
        if (indexPoint1 === ShapeNavigableCurve_1.NO_CONSTRAINT || indexPoint2 === ShapeNavigableCurve_1.NO_CONSTRAINT) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "slideConstraintAlongCurve", "Configuration with only one clamped point: cannot be processed.");
            error.logMessageToConsole();
        }
        else {
            var knots = this._curveConstraintStrategy.optimizedCurve.getDistinctKnots();
            var optimizedSpline = this._curveConstraintStrategy.optimizedCurve;
            var newAbscRefPt2 = this.computeAbscissae(indexPoint1, indexPoint2);
            var deltaU2 = Math.abs(newAbscRefPt2.abscissa - knots[indexPoint2]);
            console.log('newAbsc2 ' + newAbscRefPt2.abscissa + ' iter ' + newAbscRefPt2.nbIter + ' delatU2 ' + deltaU2);
            var newAbscRefPt1 = this.computeAbscissae(indexPoint2, indexPoint1);
            var deltaU1 = Math.abs(newAbscRefPt1.abscissa - knots[indexPoint1]);
            console.log('newAbsc1 ' + newAbscRefPt1.abscissa + ' iter ' + newAbscRefPt1.nbIter + ' delatU1 ' + deltaU1);
            var newAbsc = void 0;
            var segment = void 0;
            if (newAbscRefPt1.nbIter < exports.NB_MAX_ITER_SLIDING_CLAMPING_CONSTRAINT && newAbscRefPt2.nbIter < exports.NB_MAX_ITER_SLIDING_CLAMPING_CONSTRAINT
                && newAbscRefPt1.nbIter !== -1 && newAbscRefPt2.nbIter !== -1) {
                if (deltaU1 > deltaU2) {
                    newAbsc = newAbscRefPt2.abscissa;
                    if (indexPoint1 < indexPoint2) {
                        segment = AbstractBSplineR1toR2_1.curveSegment.BEFORE;
                    }
                    else {
                        segment = AbstractBSplineR1toR2_1.curveSegment.AFTER;
                    }
                }
                else {
                    newAbsc = newAbscRefPt1.abscissa;
                    if (indexPoint1 < indexPoint2) {
                        segment = AbstractBSplineR1toR2_1.curveSegment.AFTER;
                    }
                    else {
                        segment = AbstractBSplineR1toR2_1.curveSegment.BEFORE;
                    }
                }
            }
            else if (newAbscRefPt1.nbIter < exports.NB_MAX_ITER_SLIDING_CLAMPING_CONSTRAINT && newAbscRefPt1.nbIter !== -1) {
                newAbsc = newAbscRefPt1.abscissa;
                if (indexPoint1 < indexPoint2) {
                    segment = AbstractBSplineR1toR2_1.curveSegment.AFTER;
                }
                else {
                    segment = AbstractBSplineR1toR2_1.curveSegment.BEFORE;
                }
            }
            else if (newAbscRefPt2.nbIter < exports.NB_MAX_ITER_SLIDING_CLAMPING_CONSTRAINT && newAbscRefPt2.nbIter !== -1) {
                newAbsc = newAbscRefPt2.abscissa;
                if (indexPoint1 < indexPoint2) {
                    segment = AbstractBSplineR1toR2_1.curveSegment.BEFORE;
                }
                else {
                    segment = AbstractBSplineR1toR2_1.curveSegment.AFTER;
                }
            }
            else {
                // There is no solution of point location to satisfy the constraint
                valid = false;
                console.log("newAbsc = " + newAbsc);
            }
            for (var i = 0; i < optimizedSpline.degree + 1; i++) {
                if (optimizedSpline.knots[i] !== 0.0) {
                    console.log("Inconsistent knot sequence");
                }
            }
            if (newAbsc !== undefined && valid) {
                if (optimizedSpline instanceof BSplineR1toR2_1.BSplineR1toR2) {
                    if (newAbsc > knots[knots.length - 1] || newAbsc < knots[0]) {
                        // console.log("extend curve to: "+newAbsc);
                        optimizedSpline = optimizedSpline.extend(newAbsc);
                    }
                    else if (newAbsc < knots[knots.length - 1] && newAbsc > knots[0]) {
                        console.log("split curve at: " + newAbsc + " segment = " + segment);
                        if (segment !== undefined)
                            optimizedSpline = optimizedSpline.splitAt(newAbsc, segment);
                    }
                    this._curveConstraintStrategy.optimizedCurve = optimizedSpline;
                    for (var i = 0; i < optimizedSpline.degree + 1; i++) {
                        if (optimizedSpline.knots[i] !== 0.0) {
                            console.log("Inconsistent knot sequence");
                        }
                    }
                }
                else if (this._curveConstraintStrategy.optimizedCurve instanceof PeriodicBSplineR1toR2withOpenKnotSequence_1.PeriodicBSplineR1toR2withOpenKnotSequence) {
                }
            }
            else {
                this._curveConstraintStrategy.optimizedCurve = this._curveConstraintStrategy.currentCurve;
            }
        }
        return valid;
    };
    CurveConstraints.prototype.computeAbscissae = function (indexPoint1, indexPoint2) {
        var spline = this._curveConstraintStrategy.currentCurve;
        var optimizedSpline = this._curveConstraintStrategy.optimizedCurve;
        var knots = spline.getDistinctKnots();
        var point1 = spline.evaluate(knots[indexPoint1]);
        var point2 = spline.evaluate(knots[indexPoint2]);
        var refDistance = point1.distance(point2);
        var knotsOptCrv = optimizedSpline.getDistinctKnots();
        var point1Opt = optimizedSpline.evaluate(knotsOptCrv[indexPoint1]);
        var point2Opt = optimizedSpline.evaluate(knotsOptCrv[indexPoint2]);
        var distance = point1Opt.distance(point2Opt);
        var sx = new BSplineR1toR1_1.BSplineR1toR1(optimizedSpline.getControlPointsX(), optimizedSpline.knots);
        var sxu = sx.derivative();
        var sy = new BSplineR1toR1_1.BSplineR1toR1(optimizedSpline.getControlPointsY(), optimizedSpline.knots);
        var syu = sy.derivative();
        var newAbsc = knotsOptCrv[indexPoint2];
        var iter = 0;
        var solution1 = false;
        var solution2 = false;
        var iterOutside = 0;
        var minVariationDistance = 0;
        var maxVariationDistance = 0;
        var minVariationAbscissa = 0;
        var maxVariationAbscissa = 0;
        var offset = 0.0;
        if (knotsOptCrv[0] !== 0.0) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "computeAbscissae", "Inconsistent knot sequence. First knot is not 0.0");
            error.logMessageToConsole();
        }
        while (Math.abs(distance - refDistance) > CurveConstraintStrategy_1.TOL_LOCATION_CURVE_REFERENCE_POINTS && iter < exports.NB_MAX_ITER_SLIDING_CLAMPING_CONSTRAINT) {
            var c = Math.pow(distance, 2) - Math.pow(refDistance, 2);
            var point2dx = sxu.evaluate(newAbsc);
            var point2dy = syu.evaluate(newAbsc);
            var a = Math.pow(point2dx, 2) + Math.pow(point2dy, 2);
            point2Opt = optimizedSpline.evaluate(newAbsc);
            var vectorP1P2 = point2Opt.substract(point1Opt);
            var bprime = point2dx * vectorP1P2.x + point2dy * vectorP1P2.y;
            var discriminant = Math.pow(bprime, 2) - a * c;
            var deltaU1 = 0.0;
            var deltaU2 = 0.0;
            if (discriminant >= 0.0) {
                deltaU1 = (-bprime + Math.sqrt(discriminant)) / a;
                deltaU2 = (-bprime - Math.sqrt(discriminant)) / a;
            }
            else {
                iter = -1;
                break;
            }
            var solPoint1 = void 0, solPoint2 = void 0;
            var u1 = knotsOptCrv[indexPoint2] + deltaU1;
            if (u1 < knotsOptCrv[0] || u1 > knotsOptCrv[knotsOptCrv.length - 1]) {
                solPoint1 = optimizedSpline.evaluateOutsideRefInterval(u1);
            }
            else {
                solPoint1 = optimizedSpline.evaluate(u1);
            }
            var u2 = knotsOptCrv[indexPoint2] + deltaU2;
            if (u2 < knotsOptCrv[0] || u2 > knotsOptCrv[knotsOptCrv.length - 1]) {
                solPoint2 = optimizedSpline.evaluateOutsideRefInterval(u2);
            }
            else {
                solPoint2 = optimizedSpline.evaluate(u2);
            }
            var distance1 = point1Opt.distance(solPoint1);
            var distance2 = point1Opt.distance(solPoint2);
            if (iter === 0) {
                if (Math.abs(distance1 - refDistance) > Math.abs(distance2 - refDistance)) {
                    solution2 = true;
                    newAbsc = u2;
                }
                else {
                    solution1 = true;
                    newAbsc = u1;
                }
            }
            else {
                if (solution1)
                    newAbsc = u1;
                if (solution2)
                    newAbsc = u2;
            }
            if (newAbsc < knotsOptCrv[0] || newAbsc > knotsOptCrv[knotsOptCrv.length - 1]) {
                iterOutside++;
                // console.log(' newAbsc outside interval. redefine curve');
                if (optimizedSpline instanceof BSplineR1toR2_1.BSplineR1toR2) {
                    var tempSpline = optimizedSpline.extend(newAbsc);
                    if (newAbsc < knotsOptCrv[0]) {
                        offset = offset - newAbsc;
                        minVariationAbscissa = 0.0;
                        newAbsc = 0.0;
                    }
                    else {
                        // console.log("extend curve at right extremity u = "+newAbsc);
                    }
                    optimizedSpline = new BSplineR1toR2_1.BSplineR1toR2(tempSpline.controlPoints, tempSpline.knots);
                    sx = new BSplineR1toR1_1.BSplineR1toR1(optimizedSpline.getControlPointsX(), optimizedSpline.knots);
                    sxu = sx.derivative();
                    sy = new BSplineR1toR1_1.BSplineR1toR1(optimizedSpline.getControlPointsY(), optimizedSpline.knots);
                    syu = sy.derivative();
                    // console.log(' ctrlPts'+JSON.stringify(optimizedSpline.controlPoints)+' knots '+optimizedSpline.knots);
                }
                else if (this._curveConstraintStrategy.optimizedCurve instanceof PeriodicBSplineR1toR2withOpenKnotSequence_1.PeriodicBSplineR1toR2withOpenKnotSequence) {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "computeAbscissae", "something to do there");
                    error.logMessageToConsole();
                }
            }
            point2Opt = optimizedSpline.evaluate(newAbsc);
            distance = point1Opt.distance(point2Opt);
            // console.log('newAbsc '+ newAbsc+ ' u1 '+sol1+' u2 '+sol2+ ' dist1 '+distance1+' dist2 '+distance2+' distance '+distance+' iter '+iter);
            if ((distance - refDistance) > 0.0 && (distance - refDistance) > maxVariationDistance) {
                maxVariationDistance = distance - refDistance;
            }
            else if ((distance - refDistance) < 0.0 && (distance - refDistance) < minVariationDistance) {
                minVariationDistance = distance - refDistance;
            }
            if ((newAbsc - offset) > 0.0 && (newAbsc - offset) > maxVariationAbscissa) {
                maxVariationAbscissa = newAbsc - offset;
            }
            else if ((newAbsc - offset) < 0.0 && (newAbsc - offset) < minVariationAbscissa) {
                minVariationAbscissa = newAbsc - offset;
            }
            iter++;
        }
        if (iter === exports.NB_MAX_ITER_SLIDING_CLAMPING_CONSTRAINT) {
            if (iterOutside >= (exports.NB_MAX_ITER_SLIDING_CLAMPING_CONSTRAINT / 2) - 1) {
                // console.log('Nb Iter Outside = '+iterOutside+' maxVariation = '+ maxVariationDistance+' minVariation = '+minVariationDistance);
                var newAbscRef = this.solveWithLinearApproximation(indexPoint1, indexPoint2, minVariationAbscissa, maxVariationAbscissa, optimizedSpline, offset);
                if (newAbscRef.nbIter < exports.NB_MAX_ITER_SLIDING_CLAMPING_CONSTRAINT) {
                    iter = 1;
                    newAbsc = newAbscRef.abscissa;
                }
                // console.log('Found newAbsc = '+newAbscRef.abscissa+' NbIter = '+ newAbscRef.nbIter);
            }
            else
                console.log('Nb Iter Outside = ' + iterOutside);
        }
        else if (iter === -1) {
            console.log('NO SOLUTION');
        }
        return {
            abscissa: newAbsc - offset,
            nbIter: iter
        };
    };
    CurveConstraints.prototype.solveWithLinearApproximation = function (indexPoint1, indexPoint2, minVariationAbscissa, maxVariationAbscissa, optimizedSplineInit, offset) {
        var spline = this._curveConstraintStrategy.currentCurve;
        var optimizedSpline = optimizedSplineInit.clone();
        var knots = spline.getDistinctKnots();
        var point1 = spline.evaluate(knots[indexPoint1]);
        var point2 = spline.evaluate(knots[indexPoint2]);
        var refDistance = point1.distance(point2);
        var knotsOpt = optimizedSpline.getDistinctKnots();
        var point1Opt = optimizedSpline.evaluate(knotsOpt[indexPoint1]);
        var umin = offset + minVariationAbscissa;
        var uMax = offset + maxVariationAbscissa;
        // if(umin < 0.0) {
        //     console.log("umin = "+umin+" uMax = "+uMax);
        // }
        var point2Opt1 = optimizedSpline.evaluate(offset + minVariationAbscissa);
        var distance1 = point1Opt.distance(point2Opt1);
        var point2Opt2 = optimizedSpline.evaluate(offset + maxVariationAbscissa);
        var distance2 = point1Opt.distance(point2Opt2);
        var u = offset;
        var iter = 0;
        if ((distance1 - refDistance) * (distance2 - refDistance) < 0.0) {
            var distance = distance1;
            while (Math.abs(distance - refDistance) > CurveConstraintStrategy_1.TOL_LOCATION_CURVE_REFERENCE_POINTS && iter < exports.NB_MAX_ITER_SLIDING_CLAMPING_CONSTRAINT) {
                u = offset + maxVariationAbscissa - ((distance2 - refDistance) / (distance2 - distance1)) * (maxVariationAbscissa - minVariationAbscissa);
                distance = point1Opt.distance(optimizedSpline.evaluate(u));
                if ((distance - refDistance) > 0.0) {
                    if ((distance1 - refDistance) > 0.0) {
                        distance1 = distance;
                        minVariationAbscissa = u - offset;
                    }
                    else {
                        distance2 = distance;
                        maxVariationAbscissa = u - offset;
                    }
                }
                else {
                    if ((distance1 - refDistance) > 0.0) {
                        distance2 = distance;
                        maxVariationAbscissa = u - offset;
                    }
                    else {
                        distance1 = distance;
                        minVariationAbscissa = u - offset;
                    }
                }
                umin = offset + minVariationAbscissa;
                uMax = offset + maxVariationAbscissa;
                // console.log("umin = "+umin+" u = "+u+"uMax = "+uMax);
                iter++;
            }
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "solveWithLinearApproximation", "Cannot process robustly this configuration.");
            error.logMessageToConsole();
        }
        return {
            abscissa: u,
            nbIter: iter
        };
    };
    return CurveConstraints;
}());
exports.CurveConstraints = CurveConstraints;


/***/ }),

/***/ "./src/curveShapeSpaceNavigation/CurveShapeSpaceDescriptor.ts":
/*!********************************************************************!*\
  !*** ./src/curveShapeSpaceNavigation/CurveShapeSpaceDescriptor.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurveShapeSpaceDescriptor = void 0;
var CurveShapeSpaceDescriptor = /** @class */ (function () {
    function CurveShapeSpaceDescriptor(curveToAnalyze) {
        // JCL a finaliser avec le nb correct de contraintes
        this._inflectionsTotalNumberOfConstraints = curveToAnalyze.degree;
        this._curvatureExtremaTotalNumberOfConstraints = curveToAnalyze.degree;
        this._curvatureExtremumMonitoringAtCurveExtremities = [];
        this._inflectionMonitoringAtCurveExtremities = [];
    }
    Object.defineProperty(CurveShapeSpaceDescriptor.prototype, "inflectionsTotalNumberOfConstraints", {
        get: function () {
            return this._inflectionsTotalNumberOfConstraints;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveShapeSpaceDescriptor.prototype, "curvatureExtremaTotalNumberOfConstraints", {
        get: function () {
            return this._curvatureExtremaTotalNumberOfConstraints;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveShapeSpaceDescriptor.prototype, "curvatureExtremumMonitoringAtCurveExtremities", {
        get: function () {
            return this._curvatureExtremumMonitoringAtCurveExtremities;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveShapeSpaceDescriptor.prototype, "inflectionMonitoringAtCurveExtremities", {
        get: function () {
            return this._inflectionMonitoringAtCurveExtremities;
        },
        enumerable: false,
        configurable: true
    });
    return CurveShapeSpaceDescriptor;
}());
exports.CurveShapeSpaceDescriptor = CurveShapeSpaceDescriptor;


/***/ }),

/***/ "./src/curveShapeSpaceNavigation/CurveShapeSpaceNavigator.ts":
/*!*******************************************************************!*\
  !*** ./src/curveShapeSpaceNavigation/CurveShapeSpaceNavigator.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurveShapeSpaceNavigator = exports.ActiveInflectionLocationControl = exports.ActiveExtremaLocationControl = exports.CONVERGENCE_THRESHOLD = exports.MAX_TRUST_REGION_RADIUS = exports.MAX_NB_STEPS_TRUST_REGION_OPTIMIZER = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ShapeSpaceDiffEventsStructure_1 = __webpack_require__(/*! ./ShapeSpaceDiffEventsStructure */ "./src/curveShapeSpaceNavigation/ShapeSpaceDiffEventsStructure.ts");
var EventMgmtAtCurveExtremities_1 = __webpack_require__(/*! ../shapeNavigableCurve/EventMgmtAtCurveExtremities */ "./src/shapeNavigableCurve/EventMgmtAtCurveExtremities.ts");
var CurveControlState_1 = __webpack_require__(/*! ../controllers/CurveControlState */ "./src/controllers/CurveControlState.ts");
var NavigationCurveModel_1 = __webpack_require__(/*! ./NavigationCurveModel */ "./src/curveShapeSpaceNavigation/NavigationCurveModel.ts");
exports.MAX_NB_STEPS_TRUST_REGION_OPTIMIZER = 800;
exports.MAX_TRUST_REGION_RADIUS = 100;
exports.CONVERGENCE_THRESHOLD = 10e-8;
/* JCL 2023/03/25 used only in curve control strategies SlidingStrategy, NoSlidingStrategy, ... */
var ActiveExtremaLocationControl;
(function (ActiveExtremaLocationControl) {
    ActiveExtremaLocationControl[ActiveExtremaLocationControl["mergeExtrema"] = 0] = "mergeExtrema";
    ActiveExtremaLocationControl[ActiveExtremaLocationControl["none"] = 1] = "none";
    ActiveExtremaLocationControl[ActiveExtremaLocationControl["stopDeforming"] = 2] = "stopDeforming";
    ActiveExtremaLocationControl[ActiveExtremaLocationControl["extremumLeaving"] = 3] = "extremumLeaving";
    ActiveExtremaLocationControl[ActiveExtremaLocationControl["extremumEntering"] = 4] = "extremumEntering";
})(ActiveExtremaLocationControl = exports.ActiveExtremaLocationControl || (exports.ActiveExtremaLocationControl = {}));
var ActiveInflectionLocationControl;
(function (ActiveInflectionLocationControl) {
    ActiveInflectionLocationControl[ActiveInflectionLocationControl["mergeExtremaAndInflection"] = 0] = "mergeExtremaAndInflection";
    ActiveInflectionLocationControl[ActiveInflectionLocationControl["none"] = 1] = "none";
    ActiveInflectionLocationControl[ActiveInflectionLocationControl["stopDeforming"] = 2] = "stopDeforming";
})(ActiveInflectionLocationControl = exports.ActiveInflectionLocationControl || (exports.ActiveInflectionLocationControl = {}));
var CurveShapeSpaceNavigator = /** @class */ (function () {
    function CurveShapeSpaceNavigator(shapeNavigableCurve) {
        // Initializes controlOfEventsAtExtremity in accordance with the navigation mode:
        //      mode 0, mode 1, mode 2: controlOfCurveClamping =  false,
        this._controlOfEventsAtExtremity = false;
        this._shapeNavigableCurve = shapeNavigableCurve;
        this._shapeSpaceDiffEventsStructure = new ShapeSpaceDiffEventsStructure_1.ShapeSpaceDiffEventsStructure(this._shapeNavigableCurve, this);
        this._navigationCurveModel = new NavigationCurveModel_1.OpenCurveShapeSpaceNavigator(this);
        this._navigationState = this._navigationCurveModel.navigationState;
        this._navigationState.navigationStateChange = false;
        this._eventMgmtAtExtremities = new EventMgmtAtCurveExtremities_1.EventMgmtAtCurveExtremities(this);
        this._eventStateAtCrvExtremities = this._eventMgmtAtExtremities.eventStateAtCrvExtremities;
        this._curveControlState = new CurveControlState_1.HandleNoDiffEventNoSlidingState(this);
        this._navigationCurveModel.curveControlState = this._curveControlState;
        this._curveControlState.curveControlParamChange = false;
        this.curveSceneController = undefined;
    }
    Object.defineProperty(CurveShapeSpaceNavigator.prototype, "navigationCurveModel", {
        get: function () {
            return this._navigationCurveModel;
        },
        set: function (navigationCurveModel) {
            this._navigationCurveModel = navigationCurveModel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveShapeSpaceNavigator.prototype, "navigationState", {
        get: function () {
            return this._navigationState;
        },
        set: function (navigationState) {
            this._navigationState = navigationState;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveShapeSpaceNavigator.prototype, "controlOfEventsAtExtremity", {
        get: function () {
            return this._controlOfEventsAtExtremity;
        },
        set: function (controlOfEventsAtExtremity) {
            this._controlOfEventsAtExtremity = controlOfEventsAtExtremity;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveShapeSpaceNavigator.prototype, "eventMgmtAtExtremities", {
        get: function () {
            return this._eventMgmtAtExtremities;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveShapeSpaceNavigator.prototype, "eventStateAtCrvExtremities", {
        get: function () {
            return this._eventStateAtCrvExtremities;
        },
        set: function (eventStateAtCrvExtremities) {
            this._eventStateAtCrvExtremities = eventStateAtCrvExtremities;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveShapeSpaceNavigator.prototype, "shapeNavigableCurve", {
        get: function () {
            return this._shapeNavigableCurve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveShapeSpaceNavigator.prototype, "shapeSpaceDiffEventsStructure", {
        get: function () {
            return this._shapeSpaceDiffEventsStructure;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveShapeSpaceNavigator.prototype, "curveControlState", {
        get: function () {
            return this._curveControlState;
        },
        set: function (curveControlState) {
            this._curveControlState = curveControlState;
        },
        enumerable: false,
        configurable: true
    });
    CurveShapeSpaceNavigator.prototype.getActiveControlInflections = function () {
        return this._shapeSpaceDiffEventsStructure.activeControlInflections;
    };
    CurveShapeSpaceNavigator.prototype.getActiveControlCurvatureExtrema = function () {
        return this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema;
    };
    CurveShapeSpaceNavigator.prototype.getSlidingDifferentialEvents = function () {
        return this._shapeSpaceDiffEventsStructure.slidingDifferentialEvents;
    };
    CurveShapeSpaceNavigator.prototype.getManagementDiffEventsAtExtremities = function () {
        return this._shapeSpaceDiffEventsStructure.managementOfEventsAtExtremities;
    };
    CurveShapeSpaceNavigator.prototype.setActiveControlInflections = function (activeControlInflections) {
        this._shapeSpaceDiffEventsStructure.activeControlInflections = activeControlInflections;
    };
    CurveShapeSpaceNavigator.prototype.setActiveControlCurvatureExtrema = function (activeControlCurvatureExtrema) {
        this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema = activeControlCurvatureExtrema;
    };
    CurveShapeSpaceNavigator.prototype.setSlidingDifferentialEvents = function (slidingDifferentialEvents) {
        this._shapeSpaceDiffEventsStructure.slidingDifferentialEvents = slidingDifferentialEvents;
    };
    CurveShapeSpaceNavigator.prototype.setManagementDiffEventsAtExtremities = function (eventManagementStateAtExtremity) {
        this._shapeSpaceDiffEventsStructure.managementOfEventsAtExtremities = eventManagementStateAtExtremity;
    };
    CurveShapeSpaceNavigator.prototype.transitionTo = function (curveControlState) {
        this._curveControlState = curveControlState;
    };
    CurveShapeSpaceNavigator.prototype.toggleSliding = function () {
        this._curveControlState.handleSliding();
    };
    CurveShapeSpaceNavigator.prototype.toggleControlOfCurvatureExtrema = function () {
        this._curveControlState.handleCurvatureExtrema();
    };
    CurveShapeSpaceNavigator.prototype.toggleControlOfInflections = function () {
        this._curveControlState.handleInflections();
    };
    CurveShapeSpaceNavigator.prototype.toggleEventMgmtAtCurveExt = function () {
        // this._curveControl.toggleEventMgmtAtCurveExt();
        this._controlOfEventsAtExtremity = !this._controlOfEventsAtExtremity;
        console.log("control of event at extremity: " + this._controlOfEventsAtExtremity);
        this._eventMgmtAtExtremities.processEventAtCurveExtremity();
    };
    CurveShapeSpaceNavigator.prototype.restoreCurveControlState = function (shapeSpaceNavigationEventListener) {
        if (shapeSpaceNavigationEventListener.previousControlOfCurvatureExtrema) {
            if (shapeSpaceNavigationEventListener.previousControlOfInflection) {
                if (shapeSpaceNavigationEventListener.previousSliding) {
                    this.curveControlState = new CurveControlState_1.HandleInflectionsAndCurvatureExtremaSlidingState(this);
                }
                else {
                    this.curveControlState = new CurveControlState_1.HandleInflectionsAndCurvatureExtremaNoSlidingState(this);
                }
            }
            else {
                if (shapeSpaceNavigationEventListener.previousSliding) {
                    this.curveControlState = new CurveControlState_1.HandleCurvatureExtremaSlidingState(this);
                }
                else {
                    this.curveControlState = new CurveControlState_1.HandleCurvatureExtremaNoSlidingState(this);
                }
            }
        }
        else {
            if (shapeSpaceNavigationEventListener.previousControlOfInflection) {
                if (shapeSpaceNavigationEventListener.previousSliding) {
                    this.curveControlState = new CurveControlState_1.HandleInflectionsSlidingState(this);
                }
                else {
                    this.curveControlState = new CurveControlState_1.HandleInflectionsNoSlidingState(this);
                }
            }
            else {
                this.curveControlState = new CurveControlState_1.HandleNoDiffEventNoSlidingState(this);
                shapeSpaceNavigationEventListener.disableControlOfSliding();
            }
        }
    };
    CurveShapeSpaceNavigator.prototype.inputSelectNavigationProcess = function (navigationID) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "inputSelectNavigationProcess", navigationID.toString());
        warning.logMessageToConsole();
        switch (navigationID) {
            case 0: {
                this._navigationState.setNavigationWithoutShapeSpaceMonitoring();
                break;
            }
            case 1: {
                this._navigationState.setNavigationThroughSimplerShapeSpaces();
                break;
            }
            case 2: {
                this._navigationState.setNavigationStrictlyInsideShapeSpace();
                break;
            }
            default: {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "inputSelectNavigationProcess", "no available navigation process.");
                error.logMessageToConsole();
                break;
            }
        }
        // JCL 2021/12/07 temporary setting to keep consistency between curvescenecontroller context and curveShapeSpaceNavigator context
        // JCL 2021/12/07 should be removed when the curveScenceController context would be decomposed into (UI and graphics) and the curveShapeSpaceNavigator context on the other side
        // this.navigationState = this.curveShapeSpaceNavigator.navigationState;
    };
    return CurveShapeSpaceNavigator;
}());
exports.CurveShapeSpaceNavigator = CurveShapeSpaceNavigator;


/***/ }),

/***/ "./src/curveShapeSpaceNavigation/NavigationCurveModel.ts":
/*!***************************************************************!*\
  !*** ./src/curveShapeSpaceNavigation/NavigationCurveModel.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClosedCurveShapeSpaceNavigator = exports.OpenCurveShapeSpaceNavigator = exports.NavigationCurveModel = void 0;
var OptimizationProblemCtrlParameters_1 = __webpack_require__(/*! ../bsplineOptimizationProblems/OptimizationProblemCtrlParameters */ "./src/bsplineOptimizationProblems/OptimizationProblemCtrlParameters.ts");
var CurveShapeMonitoringStrategy_1 = __webpack_require__(/*! ../controllers/CurveShapeMonitoringStrategy */ "./src/controllers/CurveShapeMonitoringStrategy.ts");
var ExtractionCPClosestToZeroUnderEventSlidingAtExtremeties_1 = __webpack_require__(/*! ../curveShapeSpaceAnalysis/ExtractionCPClosestToZeroUnderEventSlidingAtExtremeties */ "./src/curveShapeSpaceAnalysis/ExtractionCPClosestToZeroUnderEventSlidingAtExtremeties.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var Vector2d_1 = __webpack_require__(/*! ../mathVector/Vector2d */ "./src/mathVector/Vector2d.ts");
var ClosedCurveModel_1 = __webpack_require__(/*! ../newModels/ClosedCurveModel */ "./src/newModels/ClosedCurveModel.ts");
var CurveModel_1 = __webpack_require__(/*! ../newModels/CurveModel */ "./src/newModels/CurveModel.ts");
var NeighboringEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/NeighboringEvents */ "./src/sequenceOfDifferentialEvents/NeighboringEvents.ts");
var CurveShapeSpaceDescriptor_1 = __webpack_require__(/*! ./CurveShapeSpaceDescriptor */ "./src/curveShapeSpaceNavigation/CurveShapeSpaceDescriptor.ts");
var NavigationState_1 = __webpack_require__(/*! ./NavigationState */ "./src/curveShapeSpaceNavigation/NavigationState.ts");
var NavigationCurveModel = /** @class */ (function () {
    function NavigationCurveModel(curveShapeSpaceNavigator) {
        this._curveShapeSpaceNavigator = curveShapeSpaceNavigator;
        this._shapeSpaceDiffEventsStructure = curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure;
        this._curveControlState = this._curveShapeSpaceNavigator.curveControlState;
        this.controlOfInflections = this._shapeSpaceDiffEventsStructure.activeControlInflections;
        this.controlOfCurvatureExtrema = this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema;
        this.sliding = this._shapeSpaceDiffEventsStructure.slidingDifferentialEvents;
        this._shapeNavigableCurve = curveShapeSpaceNavigator.shapeNavigableCurve;
    }
    Object.defineProperty(NavigationCurveModel.prototype, "curveShapeSpaceNavigator", {
        get: function () {
            return this._curveShapeSpaceNavigator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NavigationCurveModel.prototype, "shapeNavigableCurve", {
        get: function () {
            return this._shapeNavigableCurve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NavigationCurveModel.prototype, "navigationState", {
        get: function () {
            return this._navigationState;
        },
        set: function (navigationState) {
            this._navigationState = navigationState;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NavigationCurveModel.prototype, "shapeSpaceDiffEventsStructure", {
        get: function () {
            return this._shapeSpaceDiffEventsStructure;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NavigationCurveModel.prototype, "curveShapeMonitoringStrategy", {
        // get activeExtremaLocationControl(): ActiveExtremaLocationControl {
        //     return this._activeExtremaLocationControl;
        // }
        get: function () {
            return this._curveShapeMonitoringStrategy;
        },
        set: function (curveShapeMonitoringStrategy) {
            this._curveShapeMonitoringStrategy = curveShapeMonitoringStrategy;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NavigationCurveModel.prototype, "curveControlState", {
        get: function () {
            return this._curveControlState;
        },
        set: function (curveControlState) {
            this._curveControlState = curveControlState;
        },
        enumerable: false,
        configurable: true
    });
    NavigationCurveModel.prototype.changeCurveShapeMonitoring = function (strategy) {
        this._curveShapeMonitoringStrategy = strategy;
    };
    return NavigationCurveModel;
}());
exports.NavigationCurveModel = NavigationCurveModel;
var OpenCurveShapeSpaceNavigator = /** @class */ (function (_super) {
    __extends(OpenCurveShapeSpaceNavigator, _super);
    function OpenCurveShapeSpaceNavigator(curveShapeSpaceNavigator) {
        var _this = _super.call(this, curveShapeSpaceNavigator) || this;
        _this._displacementCurrentCurveControlPolygon = [];
        if (_this._shapeNavigableCurve.curveCategory.curveModel instanceof CurveModel_1.CurveModel) {
            _this._curveModel = _this._shapeNavigableCurve.curveCategory.curveModel;
        }
        else {
            _this._curveModel = new CurveModel_1.CurveModel();
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, 'constructor', "curve model is undefined. Cannot proceed.");
            error.logMessageToConsole();
        }
        _this._currentCurve = _this.curveModel.spline;
        _this.currentControlPolygon = _this.currentCurve.controlPoints;
        _this._selectedControlPoint = undefined;
        _this.locationSelectedCP = new Vector2d_1.Vector2d(0, 0);
        _this._targetCurve = _this.curveModel.spline;
        _this._optimizedCurve = _this._currentCurve.clone();
        _this.currentControlPolygon.forEach(function () { return _this.displacementCurrentCurveControlPolygon.push(new Vector2d_1.Vector2d(0.0, 0.0)); });
        _this._curveShapeMonitoringStrategy = new CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategyWithNoDiffEventNoSliding(_this);
        _this._shapeSpaceDescriptor = new CurveShapeSpaceDescriptor_1.CurveShapeSpaceDescriptor(_this._currentCurve);
        // this._eventMgmtAtCurveExtremities = new EventMgmtAtCurveExtremities();
        _this._slidingEventsAtExtremities = new ExtractionCPClosestToZeroUnderEventSlidingAtExtremeties_1.CurveAnalyzerEventsSlidingOutOfInterval();
        // JCL Setting up the navigation state requires having defined the shapeSpaceDiffEventsStructure and its shapeSpaceDiffEventsConfigurator
        // JCL as well as the CurveShapeSpaceDescriptor
        _this._navigationState = new NavigationState_1.OCurveNavigationWithoutShapeSpaceMonitoring(_this);
        _this._curveShapeSpaceNavigator.navigationState = _this._navigationState;
        // JCL requires the setting of the navigationState
        _this.curveAnalyserCurrentCurve = _this._navigationState.curveAnalyserCurrentCurve;
        _this._seqDiffEventsCurrentCurve = _this.curveAnalyserCurrentCurve.sequenceOfDifferentialEvents;
        _this.curveAnalyserOptimizedCurve = _this._navigationState.curveAnalyserOptimizedCurve;
        _this._seqDiffEventsOptimizedCurve = _this.curveAnalyserOptimizedCurve.sequenceOfDifferentialEvents;
        _this.diffEvents = new NeighboringEvents_1.NeighboringEvents();
        _this._optimizationProblemParam = new OptimizationProblemCtrlParameters_1.OptimizationProblemCtrlParameters();
        _this.changeNavigationState(_this._navigationState);
        console.log("end constructor curveShapeSpaceNavigator");
        return _this;
    }
    Object.defineProperty(OpenCurveShapeSpaceNavigator.prototype, "seqDiffEventsCurrentCurve", {
        get: function () {
            return this._seqDiffEventsCurrentCurve;
        },
        set: function (seqDiffEventsCurrentCurve) {
            this._seqDiffEventsCurrentCurve = seqDiffEventsCurrentCurve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OpenCurveShapeSpaceNavigator.prototype, "seqDiffEventsOptimizedCurve", {
        get: function () {
            return this._seqDiffEventsOptimizedCurve;
        },
        set: function (seqDiffEventsOptimizedCurve) {
            this._seqDiffEventsOptimizedCurve = seqDiffEventsOptimizedCurve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OpenCurveShapeSpaceNavigator.prototype, "optimizationProblemParam", {
        get: function () {
            return this._optimizationProblemParam;
        },
        set: function (optimPbParam) {
            this._optimizationProblemParam = optimPbParam;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OpenCurveShapeSpaceNavigator.prototype, "selectedControlPoint", {
        get: function () {
            if (this._selectedControlPoint !== undefined) {
                return this._selectedControlPoint;
            }
            else {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, 'get', 'the selected control point has a status undefined.');
                error.logMessageToConsole();
            }
        },
        set: function (cpIndex) {
            if (cpIndex !== undefined) {
                this.selectedControlPoint = cpIndex;
            }
            else {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, 'set', 'the control point index must not be of type undefined.');
                error.logMessageToConsole();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OpenCurveShapeSpaceNavigator.prototype, "optimizedCurve", {
        get: function () {
            return this._optimizedCurve.clone();
        },
        // set eventMgmtAtCurveExtremities(eventMgmtAtCurveExtremities: EventMgmtAtCurveExtremities) {
        //     this._eventMgmtAtCurveExtremities = eventMgmtAtCurveExtremities;
        // }
        set: function (aBSpline) {
            this._optimizedCurve = aBSpline.clone();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OpenCurveShapeSpaceNavigator.prototype, "currentCurve", {
        // get eventMgmtAtCurveExtremities(): EventMgmtAtCurveExtremities {
        //     return this._eventMgmtAtCurveExtremities;
        // }
        get: function () {
            return this._currentCurve.clone();
        },
        set: function (curve) {
            this._currentCurve = curve.clone();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OpenCurveShapeSpaceNavigator.prototype, "adjacentShapeSpaceCurve", {
        get: function () {
            var _a;
            return (_a = this._adjacentShapeSpaceCurve) === null || _a === void 0 ? void 0 : _a.clone();
        },
        set: function (adjacentShapeSpaceCurve) {
            this._adjacentShapeSpaceCurve = adjacentShapeSpaceCurve;
        },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(OpenCurveShapeSpaceNavigator.prototype, "curveModel", {
        get: function () {
            return this._curveModel;
        },
        set: function (curveModel) {
            this._curveModel = curveModel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OpenCurveShapeSpaceNavigator.prototype, "shapeSpaceDescriptor", {
        get: function () {
            return this._shapeSpaceDescriptor;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OpenCurveShapeSpaceNavigator.prototype, "targetCurve", {
        get: function () {
            return this._targetCurve.clone();
        },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(OpenCurveShapeSpaceNavigator.prototype, "displacementCurrentCurveControlPolygon", {
        get: function () {
            return this._displacementCurrentCurveControlPolygon;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OpenCurveShapeSpaceNavigator.prototype, "slidingEventsAtExtremities", {
        get: function () {
            return this._slidingEventsAtExtremities;
        },
        enumerable: false,
        configurable: true
    });
    OpenCurveShapeSpaceNavigator.prototype.changeNavigationState = function (state) {
        this._navigationState = state;
        this.navigationState.setNavigationCurveModel(this);
    };
    OpenCurveShapeSpaceNavigator.prototype.navigateSpace = function (selectedControlPoint, x, y) {
        // const message = new WarningLog(this.constructor.name, "navigateSpace", this.navigationState.constructor.name + " "
        // + this._shapeSpaceDiffEventsConfigurator.constructor.name + " ");
        // message.logMessageToConsole();
        this._selectedControlPoint = selectedControlPoint;
        this.navigationState.navigate(selectedControlPoint, x, y);
    };
    // initializeNavigationStep(): void {
    //     const diffEventsExtractor = new CurveDifferentialEventsExtractor(this.currentCurve);
    //     this.seqDiffEventsCurrentCurve = diffEventsExtractor.generateSeqOfDiffEvents();
    //     this._optimizationProblemParam.updateConstraintBounds = true;
    // }
    OpenCurveShapeSpaceNavigator.prototype.updateCurrentCurve = function (newSelectedControlPoint, newDispSelctdCP) {
        //this.curveModel = newCurve;
        //this._currentCurve = newCurve.spline.clone();
        this.currentControlPolygon = this._currentCurve.controlPoints.slice();
        this._selectedControlPoint = newSelectedControlPoint;
        this.locationSelectedCP = newDispSelctdCP;
    };
    OpenCurveShapeSpaceNavigator.prototype.setTargetCurve = function () {
        if (this.selectedControlPoint !== undefined) {
            this._targetCurve = this._currentCurve.clone();
            this._targetCurve.setControlPointPosition(this.selectedControlPoint, this.locationSelectedCP);
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, 'setTargetCurve', 'the index of the selected control point is undefined.');
            error.logMessageToConsole();
        }
        if (this._shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer) {
            // this.curveControl.optimizationProblem.setTargetSpline(this.targetCurve);
            this._curveShapeMonitoringStrategy.optimizationProblem.setTargetSpline(this.targetCurve);
        }
    };
    OpenCurveShapeSpaceNavigator.prototype.resetCurveToOptimize = function () {
        if (this._shapeNavigableCurve.curveCategory.curveModel instanceof CurveModel_1.CurveModel) {
            this._curveModel = this._shapeNavigableCurve.curveCategory.curveModel;
        }
        else {
            this._curveModel = new CurveModel_1.CurveModel();
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, 'constructor', "curve model is undefined. Cannot proceed.");
            error.logMessageToConsole();
        }
        this._curveShapeMonitoringStrategy.resetAfterCurveChange();
    };
    OpenCurveShapeSpaceNavigator.prototype.curveDisplacement = function () {
        for (var i = 0; i < this.displacementCurrentCurveControlPolygon.length; i += 1) {
            this.displacementCurrentCurveControlPolygon[i] = this.optimizedCurve.controlPoints[i].substract(this.currentControlPolygon[i]);
        }
    };
    return OpenCurveShapeSpaceNavigator;
}(NavigationCurveModel));
exports.OpenCurveShapeSpaceNavigator = OpenCurveShapeSpaceNavigator;
var ClosedCurveShapeSpaceNavigator = /** @class */ (function (_super) {
    __extends(ClosedCurveShapeSpaceNavigator, _super);
    function ClosedCurveShapeSpaceNavigator(curveShapeSpaceNavigator) {
        var _this = _super.call(this, curveShapeSpaceNavigator) || this;
        _this._displacementCurrentCurveControlPolygon = [];
        if (_this._shapeNavigableCurve.curveCategory.curveModel instanceof ClosedCurveModel_1.ClosedCurveModel) {
            _this._curveModel = _this._shapeNavigableCurve.curveCategory.curveModel;
        }
        else {
            _this._curveModel = new ClosedCurveModel_1.ClosedCurveModel();
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, 'constructor', "curve model is undefined. Cannot proceed.");
            error.logMessageToConsole();
        }
        // this._curveControl = new DummyStrategy(this.curveModel, this._shapeSpaceDiffEventsStructure.activeControlInflections,
        //     this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema);
        _this._currentCurve = _this.curveModel.spline;
        _this.currentControlPolygon = _this.currentCurve.controlPoints.slice();
        _this._selectedControlPoint = undefined;
        _this.locationSelectedCP = new Vector2d_1.Vector2d(0, 0);
        _this._targetCurve = _this.curveModel.spline;
        _this._optimizedCurve = _this._currentCurve.clone();
        _this.currentControlPolygon.forEach(function () { return _this._displacementCurrentCurveControlPolygon.push(new Vector2d_1.Vector2d(0.0, 0.0)); });
        _this._curveShapeMonitoringStrategy = new CurveShapeMonitoringStrategy_1.CCurveShapeMonitoringStrategyWithNoDiffEventNoSliding(_this);
        _this._shapeSpaceDescriptor = new CurveShapeSpaceDescriptor_1.CurveShapeSpaceDescriptor(_this._currentCurve);
        _this._navigationState = new NavigationState_1.CCurveNavigationWithoutShapeSpaceMonitoring(_this);
        _this._curveShapeSpaceNavigator.navigationState = _this._navigationState;
        _this.curveAnalyserCurrentCurve = _this.navigationState.curveAnalyserCurrentCurve;
        _this._seqDiffEventsCurrentCurve = _this.curveAnalyserCurrentCurve.sequenceOfDifferentialEvents;
        _this.curveAnalyserOptimizedCurve = _this.navigationState.curveAnalyserOptimizedCurve;
        _this._seqDiffEventsOptimizedCurve = _this.curveAnalyserOptimizedCurve.sequenceOfDifferentialEvents;
        // JCL temporary setting before adapting the optimization problem setting to closed curves
        // const dummyCurveModel = new CurveModel()
        _this._optimizationProblemParam = new OptimizationProblemCtrlParameters_1.OptimizationProblemCtrlParameters();
        return _this;
    }
    Object.defineProperty(ClosedCurveShapeSpaceNavigator.prototype, "seqDiffEventsCurrentCurve", {
        get: function () {
            return this._seqDiffEventsCurrentCurve;
        },
        set: function (seqDiffEventsCurrentCurve) {
            this._seqDiffEventsCurrentCurve = seqDiffEventsCurrentCurve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveShapeSpaceNavigator.prototype, "seqDiffEventsOptimizedCurve", {
        get: function () {
            return this._seqDiffEventsOptimizedCurve;
        },
        set: function (seqDiffEventsOptimizedCurve) {
            this._seqDiffEventsOptimizedCurve = seqDiffEventsOptimizedCurve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveShapeSpaceNavigator.prototype, "currentCurve", {
        get: function () {
            return this._currentCurve.clone();
        },
        set: function (curve) {
            this._currentCurve = curve.clone();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveShapeSpaceNavigator.prototype, "targetCurve", {
        get: function () {
            return this._targetCurve.clone();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveShapeSpaceNavigator.prototype, "optimizedCurve", {
        get: function () {
            return this._optimizedCurve.clone();
        },
        set: function (aBSpline) {
            this._optimizedCurve = aBSpline.clone();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveShapeSpaceNavigator.prototype, "adjacentShapeSpaceCurve", {
        get: function () {
            var _a;
            return (_a = this._adjacentShapeSpaceCurve) === null || _a === void 0 ? void 0 : _a.clone();
        },
        set: function (adjacentShapeSpaceCurve) {
            this._adjacentShapeSpaceCurve = adjacentShapeSpaceCurve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveShapeSpaceNavigator.prototype, "optimizationProblemParam", {
        get: function () {
            return this._optimizationProblemParam;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveShapeSpaceNavigator.prototype, "selectedControlPoint", {
        get: function () {
            if (this._selectedControlPoint !== undefined) {
                return this._selectedControlPoint;
            }
            else {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, 'get', 'the selected control point has a status undefined.');
                error.logMessageToConsole();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveShapeSpaceNavigator.prototype, "shapeSpaceDescriptor", {
        get: function () {
            return this._shapeSpaceDescriptor;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveShapeSpaceNavigator.prototype, "displacementCurrentCurveControlPolygon", {
        get: function () {
            return this._displacementCurrentCurveControlPolygon;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveShapeSpaceNavigator.prototype, "curveModel", {
        get: function () {
            return this._curveModel;
        },
        set: function (curveModel) {
            this._curveModel = curveModel;
        },
        enumerable: false,
        configurable: true
    });
    ClosedCurveShapeSpaceNavigator.prototype.changeNavigationState = function (state) {
        this._navigationState = state;
        this._navigationState.setNavigationCurveModel(this);
    };
    ClosedCurveShapeSpaceNavigator.prototype.setTargetCurve = function () {
        if (this.selectedControlPoint !== undefined) {
            this._targetCurve = this._currentCurve.clone();
            this._targetCurve.setControlPointPosition(this.selectedControlPoint, this.locationSelectedCP);
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, 'setTargetCurve', 'the index of the selected control point is undefined.');
            error.logMessageToConsole();
        }
        if (this._shapeSpaceDiffEventsStructure.activeNavigationWithOptimizer) {
            this._curveShapeMonitoringStrategy.optimizationProblem.setTargetSpline(this.targetCurve);
            // this.optimizationProblem.setTargetSpline(this.targetCurve);
        }
    };
    ClosedCurveShapeSpaceNavigator.prototype.resetCurveToOptimize = function () {
        if (this._shapeNavigableCurve.curveCategory.curveModel instanceof ClosedCurveModel_1.ClosedCurveModel) {
            this._curveModel = this._shapeNavigableCurve.curveCategory.curveModel;
        }
        else {
            this._curveModel = new ClosedCurveModel_1.ClosedCurveModel();
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, 'constructor', "curve model is undefined. Cannot proceed.");
            error.logMessageToConsole();
        }
        // this._curveControl = new DummyStrategy(this.curveModel, this._shapeSpaceDiffEventsStructure.activeControlInflections,
        //     this._shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema);
        this._curveShapeMonitoringStrategy.resetAfterCurveChange();
    };
    ClosedCurveShapeSpaceNavigator.prototype.updateCurrentCurve = function (newSelectedControlPoint, newDispSelctdCP) {
        //this.curveModel = newCurve;
        //this._currentCurve = newCurve.spline.clone();
        this.currentControlPolygon = this._currentCurve.controlPoints.slice();
        this._selectedControlPoint = newSelectedControlPoint;
        this.locationSelectedCP = newDispSelctdCP;
    };
    ClosedCurveShapeSpaceNavigator.prototype.navigateSpace = function (selectedControlPoint, x, y) {
        var message = new ErrorLoging_1.WarningLog(this.constructor.name, "navigateSpace", this._navigationState.constructor.name + " "
            // + this._shapeSpaceDiffEventsConfigurator.constructor.name + " ");
            + this._curveControlState.constructor.name);
        message.logMessageToConsole();
        this._selectedControlPoint = selectedControlPoint;
        this._navigationState.navigate(selectedControlPoint, x, y);
    };
    ClosedCurveShapeSpaceNavigator.prototype.curveDisplacement = function () {
        for (var i = 0; i < this._displacementCurrentCurveControlPolygon.length; i += 1) {
            this._displacementCurrentCurveControlPolygon[i] = this.optimizedCurve.controlPoints[i].substract(this.currentControlPolygon[i]);
        }
    };
    return ClosedCurveShapeSpaceNavigator;
}(NavigationCurveModel));
exports.ClosedCurveShapeSpaceNavigator = ClosedCurveShapeSpaceNavigator;


/***/ }),

/***/ "./src/curveShapeSpaceNavigation/NavigationState.ts":
/*!**********************************************************!*\
  !*** ./src/curveShapeSpaceNavigation/NavigationState.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CCurveNavigationStrictlyInsideShapeSpace = exports.CCurveNavigationThroughSimplerShapeSpaces = exports.CCurveNavigationWithoutShapeSpaceMonitoring = exports.ClosedCurveNavigationState = exports.OCurveNavigationStrictlyInsideShapeSpace = exports.OCurveNavigationThroughSimplerShapeSpaces = exports.OCurveNavigationWithoutShapeSpaceMonitoring = exports.OpenCurveNavigationState = exports.NavigationState = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var CurveShapeSpaceNavigator_1 = __webpack_require__(/*! ./CurveShapeSpaceNavigator */ "./src/curveShapeSpaceNavigation/CurveShapeSpaceNavigator.ts");
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var CurveAnalyzer_1 = __webpack_require__(/*! ../curveShapeSpaceAnalysis/CurveAnalyzer */ "./src/curveShapeSpaceAnalysis/CurveAnalyzer.ts");
var Vector2d_1 = __webpack_require__(/*! ../mathVector/Vector2d */ "./src/mathVector/Vector2d.ts");
var BSplineR1toR2_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2 */ "./src/newBsplines/BSplineR1toR2.ts");
var CurveModel_1 = __webpack_require__(/*! ../newModels/CurveModel */ "./src/newModels/CurveModel.ts");
var PeriodicBSplineR1toR2withOpenKnotSequence_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence */ "./src/newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence.ts");
var CurveConstraintStrategy_1 = __webpack_require__(/*! ./CurveConstraintStrategy */ "./src/curveShapeSpaceNavigation/CurveConstraintStrategy.ts");
var ClosedCurveModel_1 = __webpack_require__(/*! ../newModels/ClosedCurveModel */ "./src/newModels/ClosedCurveModel.ts");
var Optimizer_1 = __webpack_require__(/*! ../mathematics/Optimizer */ "./src/mathematics/Optimizer.ts");
var CurveShapeMonitoringStrategy_1 = __webpack_require__(/*! ../controllers/CurveShapeMonitoringStrategy */ "./src/controllers/CurveShapeMonitoringStrategy.ts");
var NeighboringEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/NeighboringEvents */ "./src/sequenceOfDifferentialEvents/NeighboringEvents.ts");
var SequenceOfDifferentialEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/SequenceOfDifferentialEvents */ "./src/sequenceOfDifferentialEvents/SequenceOfDifferentialEvents.ts");
var OpenCurveDifferentialEventsExtractor_1 = __webpack_require__(/*! ../curveShapeSpaceAnalysis/OpenCurveDifferentialEventsExtractor */ "./src/curveShapeSpaceAnalysis/OpenCurveDifferentialEventsExtractor.ts");
var DifferentialEventVariation_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/DifferentialEventVariation */ "./src/sequenceOfDifferentialEvents/DifferentialEventVariation.ts");
var OptProblemOpenBSplineR1toR2_1 = __webpack_require__(/*! ../bsplineOptimizationProblems/OptProblemOpenBSplineR1toR2 */ "./src/bsplineOptimizationProblems/OptProblemOpenBSplineR1toR2.ts");
var ShapeSpaceDiffEventsStructure_1 = __webpack_require__(/*! ./ShapeSpaceDiffEventsStructure */ "./src/curveShapeSpaceNavigation/ShapeSpaceDiffEventsStructure.ts");
var DifferentialEvent_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/DifferentialEvent */ "./src/sequenceOfDifferentialEvents/DifferentialEvent.ts");
var BSplineR1toR1_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR1 */ "./src/newBsplines/BSplineR1toR1.ts");
var NavigationState = /** @class */ (function () {
    function NavigationState() {
        this._navigationStateChange = true;
        this._currentNeighboringEvents = [];
        this._transitionEvents = new SequenceOfDifferentialEvents_1.SequenceOfDifferentialEvents();
    }
    Object.defineProperty(NavigationState.prototype, "navigationStateChange", {
        get: function () {
            return this._navigationStateChange;
        },
        set: function (navigationStateChange) {
            this._navigationStateChange = navigationStateChange;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NavigationState.prototype, "transitionEvents", {
        get: function () {
            return this._transitionEvents;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NavigationState.prototype, "currentNeighboringEvents", {
        get: function () {
            return this._currentNeighboringEvents;
        },
        enumerable: false,
        configurable: true
    });
    return NavigationState;
}());
exports.NavigationState = NavigationState;
var OpenCurveNavigationState = /** @class */ (function (_super) {
    __extends(OpenCurveNavigationState, _super);
    function OpenCurveNavigationState(navigationCurveModel) {
        var _this = _super.call(this) || this;
        _this.navigationCurveModel = navigationCurveModel;
        _this.shapeNavigableCurve = _this.navigationCurveModel.shapeNavigableCurve;
        if (_this.navigationCurveModel.shapeNavigableCurve.curveCategory.curveModel instanceof CurveModel_1.CurveModel) {
            _this.currentCurve = _this.navigationCurveModel.currentCurve;
            // this.currentCurve = this.navigationCurveModel.shapeNavigableCurve.curveCategory.curveModel.spline;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent object type to initialize the currentCurve.");
            error.logMessageToConsole();
            _this.currentCurve = new BSplineR1toR2_1.BSplineR1toR2;
        }
        _this.navigationCurveModel.currentCurve = _this.currentCurve;
        _this.optimizedCurve = _this.currentCurve.clone();
        _this.navigationCurveModel.optimizedCurve = _this.optimizedCurve;
        if (!_this.navigationCurveModel.shapeNavigableCurve) {
            var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, 'constructor', 'Not able to initialize curveConstraints field.');
            warning.logMessageToConsole();
        }
        return _this;
    }
    OpenCurveNavigationState.prototype.setNavigationCurveModel = function (navigationCurveModel) {
        this.navigationCurveModel = navigationCurveModel;
    };
    OpenCurveNavigationState.prototype.setNavigationStrictlyInsideShapeSpace = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'setNavigationStrictlyInsideShapeSpace', 'set NavigationStrictlyInsideShapeSpace');
        warning.logMessageToConsole();
        this.navigationCurveModel.changeNavigationState(new OCurveNavigationStrictlyInsideShapeSpace(this.navigationCurveModel));
        this.shapeNavigableCurve.notifyObservers();
        this.navigationCurveModel.curveShapeSpaceNavigator.navigationState.navigationStateChange = false;
    };
    OpenCurveNavigationState.prototype.setNavigationThroughSimplerShapeSpaces = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'setNavigationThroughSimplerShapeSpaces', 'set NavigationThroughSimplerShapeSpaces');
        warning.logMessageToConsole();
        this.navigationCurveModel.changeNavigationState(new OCurveNavigationThroughSimplerShapeSpaces(this.navigationCurveModel));
        this.shapeNavigableCurve.notifyObservers();
        this.navigationCurveModel.curveShapeSpaceNavigator.navigationState.navigationStateChange = false;
    };
    OpenCurveNavigationState.prototype.setNavigationWithoutShapeSpaceMonitoring = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'setNavigationWithoutShapeSpaceMonitoring', 'set NavigationWithoutShapeSpaceMonitoring');
        warning.logMessageToConsole();
        this.navigationCurveModel.changeNavigationState(new OCurveNavigationWithoutShapeSpaceMonitoring(this.navigationCurveModel));
        this.shapeNavigableCurve.notifyObservers();
        this.navigationCurveModel.curveShapeSpaceNavigator.navigationState.navigationStateChange = false;
    };
    OpenCurveNavigationState.prototype.setCurrentCurve = function (curve) {
        this.currentCurve = curve.clone();
    };
    return OpenCurveNavigationState;
}(NavigationState));
exports.OpenCurveNavigationState = OpenCurveNavigationState;
var OCurveNavigationWithoutShapeSpaceMonitoring = /** @class */ (function (_super) {
    __extends(OCurveNavigationWithoutShapeSpaceMonitoring, _super);
    function OCurveNavigationWithoutShapeSpaceMonitoring(navigationCurveModel) {
        var _this = _super.call(this, navigationCurveModel) || this;
        // JCL 09/11/2021 Set up a curve analyzer whenever the navigation state changes
        _this.optimizedCurve = _this.navigationCurveModel.optimizedCurve;
        var curveShapeSpaceNavigator = _this.navigationCurveModel.curveShapeSpaceNavigator;
        if (curveShapeSpaceNavigator.navigationState instanceof OCurveNavigationThroughSimplerShapeSpaces
            || curveShapeSpaceNavigator.navigationState instanceof OCurveNavigationStrictlyInsideShapeSpace) {
            curveShapeSpaceNavigator.navigationState = _this;
            _this.navigationCurveModel.navigationState = _this;
            _this.shapeNavigableCurve.changeCurveConstraintStrategy(new CurveConstraintStrategy_1.CurveConstraintNoConstraint(_this.shapeNavigableCurve.curveConstraints));
        }
        else {
            curveShapeSpaceNavigator.navigationState = _this;
            _this.navigationCurveModel.navigationState = _this;
        }
        _this._curveAnalyserCurrentCurve = new CurveAnalyzer_1.OPenCurveDummyAnalyzer(_this.currentCurve, _this.navigationCurveModel, _this.navigationCurveModel.slidingEventsAtExtremities);
        _this._curveAnalyserOptimizedCurve = new CurveAnalyzer_1.OPenCurveDummyAnalyzer(_this.optimizedCurve, _this.navigationCurveModel, _this.navigationCurveModel.slidingEventsAtExtremities);
        return _this;
    }
    Object.defineProperty(OCurveNavigationWithoutShapeSpaceMonitoring.prototype, "curveAnalyserCurrentCurve", {
        get: function () {
            return this._curveAnalyserCurrentCurve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OCurveNavigationWithoutShapeSpaceMonitoring.prototype, "curveAnalyserOptimizedCurve", {
        get: function () {
            return this._curveAnalyserOptimizedCurve;
        },
        enumerable: false,
        configurable: true
    });
    OCurveNavigationWithoutShapeSpaceMonitoring.prototype.setNavigationWithoutShapeSpaceMonitoring = function () {
        this.currentCurve = this.navigationCurveModel.currentCurve;
        this.optimizedCurve = this.currentCurve.clone();
        // this.curveAnalyserCurrentCurve = new CurveAnalyzer(this.currentCurve, this.curveShapeSpaceNavigator, this.curveShapeSpaceNavigator.slidingEventsAtExtremities);
        // this.curveAnalyserOptimizedCurve = new CurveAnalyzer(this.optimizedCurve, this.curveShapeSpaceNavigator, this.curveShapeSpaceNavigator.slidingEventsAtExtremities);
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "setNavigationWithoutShapeSpaceMonitoring", "No navigation process to change there.");
        warning.logMessageToConsole();
    };
    OCurveNavigationWithoutShapeSpaceMonitoring.prototype.curveConstraintsMonitoring = function () {
        this.shapeNavigableCurve.curveConstraints.processConstraint();
    };
    OCurveNavigationWithoutShapeSpaceMonitoring.prototype.navigate = function (selectedControlPoint, x, y) {
        this.navigationCurveModel.updateCurrentCurve(selectedControlPoint, new Vector2d_1.Vector2d(x, y));
        this.curveAnalyserCurrentCurve.updateCurrent();
        this.navigationCurveModel.seqDiffEventsCurrentCurve = this.navigationCurveModel.curveAnalyserCurrentCurve.sequenceOfDifferentialEvents;
        this.navigationCurveModel.setTargetCurve();
        // JCL pas nécessaire dans cette config si pas incompatible avec la connexion de l'optimiseur
        this.navigationCurveModel.optimizationProblemParam.updateConstraintBounds = false;
        this.navigationCurveModel.optimizedCurve = this.navigationCurveModel.targetCurve.clone();
        // this.shapeNavigableCurve.updateCurve();
        this.curveConstraintsMonitoring();
        this.curveAnalyserOptimizedCurve.updateOptimized();
        this.navigationCurveModel.seqDiffEventsOptimizedCurve = this.navigationCurveModel.curveAnalyserOptimizedCurve.sequenceOfDifferentialEvents;
    };
    return OCurveNavigationWithoutShapeSpaceMonitoring;
}(OpenCurveNavigationState));
exports.OCurveNavigationWithoutShapeSpaceMonitoring = OCurveNavigationWithoutShapeSpaceMonitoring;
var OCurveNavigationThroughSimplerShapeSpaces = /** @class */ (function (_super) {
    __extends(OCurveNavigationThroughSimplerShapeSpaces, _super);
    function OCurveNavigationThroughSimplerShapeSpaces(navigationCurveModel) {
        var _this = _super.call(this, navigationCurveModel) || this;
        // JCL 09/11/2021 Set up a curve analyzer whenever the navigation state changes
        _this.optimizedCurve = _this.navigationCurveModel.optimizedCurve;
        _this.curveShapeSpaceNavigator = _this.navigationCurveModel.curveShapeSpaceNavigator;
        if (_this.curveShapeSpaceNavigator.navigationState instanceof OCurveNavigationWithoutShapeSpaceMonitoring
            || _this.curveShapeSpaceNavigator.navigationState instanceof CCurveNavigationWithoutShapeSpaceMonitoring) {
            _this.curveShapeSpaceNavigator.navigationState = _this;
            _this.navigationCurveModel.navigationState = _this;
            _this.shapeNavigableCurve.clampedPoints[0] = 0;
            _this.shapeNavigableCurve.changeCurveConstraintStrategy(new CurveConstraintStrategy_1.CurveConstraintClampedFirstControlPoint(_this.shapeNavigableCurve.curveConstraints));
        }
        else {
            _this.curveShapeSpaceNavigator.navigationState = _this;
            _this.navigationCurveModel.navigationState = _this;
        }
        _this._curveAnalyserCurrentCurve = new CurveAnalyzer_1.OpenCurveAnalyzer(_this.currentCurve, _this.navigationCurveModel, _this.navigationCurveModel.slidingEventsAtExtremities);
        _this._curveAnalyserOptimizedCurve = new CurveAnalyzer_1.OpenCurveAnalyzer(_this.optimizedCurve, _this.navigationCurveModel, _this.navigationCurveModel.slidingEventsAtExtremities);
        return _this;
    }
    Object.defineProperty(OCurveNavigationThroughSimplerShapeSpaces.prototype, "curveAnalyserCurrentCurve", {
        get: function () {
            return this._curveAnalyserCurrentCurve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OCurveNavigationThroughSimplerShapeSpaces.prototype, "curveAnalyserOptimizedCurve", {
        get: function () {
            return this._curveAnalyserOptimizedCurve;
        },
        enumerable: false,
        configurable: true
    });
    OCurveNavigationThroughSimplerShapeSpaces.prototype.setNavigationThroughSimplerShapeSpaces = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "setNavigationThroughSimplerShapeSpaces", "No navigation process to change there.");
        warning.logMessageToConsole();
    };
    OCurveNavigationThroughSimplerShapeSpaces.prototype.curveConstraintsMonitoring = function () {
        this.shapeNavigableCurve.curveConstraints.processConstraint();
        if (this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy.optimizedCurve instanceof BSplineR1toR2_1.BSplineR1toR2) {
            this.navigationCurveModel.optimizedCurve = this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy.optimizedCurve;
            this.optimizedCurve = this.navigationCurveModel.optimizedCurve;
        }
        this.navigationCurveModel.currentCurve = this.navigationCurveModel.optimizedCurve;
        this.currentCurve = this.navigationCurveModel.currentCurve.clone();
        this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy.currentCurve = this.currentCurve.clone();
    };
    OCurveNavigationThroughSimplerShapeSpaces.prototype.navigate = function (selectedControlPoint, x, y) {
        this.navigationCurveModel.updateCurrentCurve(selectedControlPoint, new Vector2d_1.Vector2d(x, y));
        console.log("navigationCurveModel current = " + JSON.stringify(this.navigationCurveModel.currentCurve.controlPoints));
        this._curveAnalyserCurrentCurve.updateCurrent();
        this.navigationCurveModel.curveAnalyserCurrentCurve = this._curveAnalyserCurrentCurve;
        this.navigationCurveModel.seqDiffEventsCurrentCurve = this.navigationCurveModel.curveAnalyserCurrentCurve.sequenceOfDifferentialEvents;
        this.navigationCurveModel.setTargetCurve();
        this.navigationCurveModel.optimizationProblemParam.updateConstraintBounds = false;
        var spline = new BSplineR1toR2_1.BSplineR1toR2();
        var curvatureExtrema_gradients = [];
        var inflection_gradients = [];
        var curvatureDerivative_gradientU = [];
        if (this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities) {
            this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.reset();
            spline = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline.clone();
            var curvatureSecondDerivative = void 0;
            curvatureSecondDerivative = this.navigationCurveModel.curveAnalyserCurrentCurve.curvatureDerivativeNumerator.derivative();
            var nbEvents = this.navigationCurveModel.seqDiffEventsCurrentCurve.length();
            // let e: ExpensiveComputationResults = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.initExpansiveComputations();
            // e = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.expensiveComputation(spline);
            // const gradient_curvatureExtrema = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.compute_curvatureExtremaConstraints_gradient(
            //     e, this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.curvatureExtremaConstraintsSign, []);
            var gradient_curvatureExtrema = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.compute_curvatureExtremaConstraints_gradient(this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.curvatureExtremaConstraintsSign, []);
            console.log("spline current = " + JSON.stringify(spline.controlPoints));
            for (var i = 0; i < nbEvents; i++) {
                if (this.navigationCurveModel.seqDiffEventsCurrentCurve.eventAt(i).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM) {
                    var zeroLoc = this.navigationCurveModel.seqDiffEventsCurrentCurve.eventAt(i).location;
                    console.log("zero location[ " + i + " ] = " + zeroLoc);
                    curvatureDerivative_gradientU.push(curvatureSecondDerivative.evaluate(zeroLoc));
                    if (gradient_curvatureExtrema.shape[0] !== this.navigationCurveModel.curveAnalyserCurrentCurve.curvatureDerivativeNumerator.controlPoints.length) {
                        console.log('inconsistent sizes of control polygons !!');
                    }
                    var curvatureExtrema_gradientperCPComponent = [];
                    for (var k = 0; k < gradient_curvatureExtrema.shape[1]; k++) {
                        var gradient = [];
                        for (var j = 0; j < gradient_curvatureExtrema.shape[0]; j++) {
                            gradient.push(gradient_curvatureExtrema.get(j, k));
                        }
                        var spline_1 = new BSplineR1toR1_1.BSplineR1toR1(gradient, this.navigationCurveModel.curveAnalyserCurrentCurve.curvatureDerivativeNumerator.knots);
                        curvatureExtrema_gradientperCPComponent.push(spline_1.evaluate(zeroLoc));
                    }
                    curvatureExtrema_gradients.push(curvatureExtrema_gradientperCPComponent);
                }
            }
        }
        try {
            var status_1 = Optimizer_1.OptimizerReturnStatus.SOLUTION_OUTSIDE_SHAPE_SPACE;
            if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategy) {
                this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.init(spline);
                status_1 = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizer.optimize_using_trust_region(CurveShapeSpaceNavigator_1.CONVERGENCE_THRESHOLD, CurveShapeSpaceNavigator_1.MAX_TRUST_REGION_RADIUS, CurveShapeSpaceNavigator_1.MAX_NB_STEPS_TRUST_REGION_OPTIMIZER);
            }
            // const status: OptimizerReturnStatus = this.navigationCurveModel.curveControl.optimizer.optimize_using_trust_region(CONVERGENCE_THRESHOLD, MAX_TRUST_REGION_RADIUS, MAX_NB_STEPS_TRUST_REGION_OPTIMIZER);
            // this.navigationCurveModel.optimizer.optimize_using_trust_region(CONVERGENCE_THRESHOLD, MAX_TRUST_REGION_RADIUS, MAX_NB_STEPS_TRUST_REGION_OPTIMIZER);
            // this.navigationCurveModel.optimizedCurve = this.navigationCurveModel.optimizationProblem.spline.clone();
            // this.navigationCurveModel.optimizedCurve = this.navigationCurveModel.curveControl.optimizationProblem.spline.clone();
            if (status_1 === Optimizer_1.OptimizerReturnStatus.SOLUTION_FOUND) {
                var curveModelOptimized = new CurveModel_1.CurveModel();
                if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategy
                    && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline instanceof BSplineR1toR2_1.BSplineR1toR2
                    && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.previousSpline instanceof BSplineR1toR2_1.BSplineR1toR2
                    && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities) {
                    curveModelOptimized.setSpline(this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline);
                    if (this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline !== this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.previousSpline) {
                        console.log("estimate variations of zeros with last iteration of trust region");
                        // let curvatureExtrema_gradientsPrevious: number[][] = [];
                        // let curvatureDerivative_gradientUPrevious = [];
                        // const gradient_curvatureExtremaPrevious = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.compute_curvatureExtremaConstraints_gradientPreviousIteration(
                        //     this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.curvatureExtremaConstraintsSign, []);
                        // let curvatureDerivativePrevious = new BSplineR1toR1(this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.curvatureDerivativeNumeratorPreviousIteration(),
                        //                                     this.navigationCurveModel.curveAnalyserCurrentCurve.curvatureDerivativeNumerator.knots);
                        // const zerosCuratureDerivPrevious = curvatureDerivativePrevious.zeros();
                        // let curvatureSecondDerivativePrevious = curvatureDerivativePrevious.derivative();
                        // for( let i = 0; i < zerosCuratureDerivPrevious.length; i++) {
                        //     console.log("zero location[ "+i+" ] = "+zerosCuratureDerivPrevious[i]);
                        //     curvatureDerivative_gradientUPrevious.push(curvatureSecondDerivativePrevious.evaluate(zerosCuratureDerivPrevious[i]));
                        //     if(gradient_curvatureExtremaPrevious.shape[0] !== this.navigationCurveModel.curveAnalyserCurrentCurve.curvatureDerivativeNumerator.controlPoints.length) {
                        //         console.log('inconsistent sizes of control polygons !!')
                        //     }
                        //     const curvatureExtrema_gradientperCPComponent = [];
                        //     for(let k = 0; k < gradient_curvatureExtremaPrevious.shape[1]; k++) {
                        //         let gradient = [];
                        //         for(let j = 0; j < gradient_curvatureExtremaPrevious.shape[0]; j++) {
                        //             gradient.push(gradient_curvatureExtremaPrevious.get(j ,k));
                        //         }
                        //         const spline = new BSplineR1toR1(gradient, this.navigationCurveModel.curveAnalyserCurrentCurve.curvatureDerivativeNumerator.knots);
                        //         curvatureExtrema_gradientperCPComponent.push(spline.evaluate(zerosCuratureDerivPrevious[i]));
                        //     }
                        //     curvatureExtrema_gradientsPrevious.push(curvatureExtrema_gradientperCPComponent);
                        // }
                        // const flattenedCPsplinePrevious = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.previousSpline.flattenControlPointsArray();
                        // this.navigationCurveModel.optimizedCurve = curveModelOptimized.spline;
                        // this.optimizedCurve = curveModelOptimized.spline;
                        // const flattenedCPsplineOptim = this.optimizedCurve.flattenControlPointsArray();
                        // const curvatureDerivativeVariationWrtCP = [];
                        // let variationCP = [];
                        // for(let i = 0; i < flattenedCPsplinePrevious.length; i ++) {
                        //     variationCP.push(flattenedCPsplineOptim[i] - flattenedCPsplinePrevious[i]);
                        // }
                        // for(let i = 0; i < curvatureExtrema_gradientsPrevious.length; i++) {
                        //     let gradient = 0.0;
                        //     for(let j = 0; j < curvatureExtrema_gradientsPrevious[i].length; j ++) {
                        //         gradient = gradient + curvatureExtrema_gradientsPrevious[i][j] * variationCP[j];
                        //     }
                        //     curvatureDerivativeVariationWrtCP.push(gradient);
                        // }
                        // const zerosVariations = [];
                        // for(let i = 0; i < curvatureDerivativeVariationWrtCP.length; i++) {
                        //     zerosVariations.push(- (curvatureDerivativeVariationWrtCP[i]) / curvatureDerivative_gradientUPrevious[i]);
                        // }
                        var zerosPreviousCurve = [0.0];
                        var zerosEstimated_1 = [0.0];
                        // for( let i = 0; i < zerosCuratureDerivPrevious.length; i++) {
                        //     const zeroLoc = zerosCuratureDerivPrevious[i];
                        //     zerosPreviousCurve.push(zeroLoc);
                        //     console.log("estimated zero from previous iter location[ "+i+" ] = "+(zeroLoc + zerosVariations[i])+" variation = "+zerosVariations[i]);
                        //     zerosEstimated.push(zeroLoc + zerosVariations[i]);
                        // }
                        zerosPreviousCurve.push(1.0);
                        zerosEstimated_1.push(1.0);
                        for (var i = 1; i < zerosPreviousCurve.length; i++) {
                            var interval = (zerosPreviousCurve[i] - zerosPreviousCurve[i - 1]);
                            var intervalEstimated = (zerosEstimated_1[i] - zerosEstimated_1[i - 1]);
                            var intervalVariation = intervalEstimated - interval;
                            if (intervalEstimated < 0.0)
                                console.log("estimated interval[ " + i + " ] with zeros crossing");
                            if (intervalEstimated > interval)
                                console.log("interval[ " + i + " ]" + " shrinks: " + intervalVariation);
                            if (intervalEstimated < interval)
                                console.log("interval[ " + i + " ]" + " expands: " + intervalVariation);
                        }
                    }
                }
                this.navigationCurveModel.optimizedCurve = curveModelOptimized.spline;
                this.optimizedCurve = curveModelOptimized.spline;
                var flattenedCPsplineInit = spline.flattenControlPointsArray();
                var flattenedCPsplineOptim = this.optimizedCurve.flattenControlPointsArray();
                var curvatureDerivativeVariationWrtCP = [];
                var variationCP = [];
                for (var i = 0; i < flattenedCPsplineInit.length; i++) {
                    variationCP.push(flattenedCPsplineOptim[i] - flattenedCPsplineInit[i]);
                }
                for (var i = 0; i < curvatureExtrema_gradients.length; i++) {
                    var gradient = 0.0;
                    for (var j = 0; j < curvatureExtrema_gradients[i].length; j++) {
                        gradient = gradient + curvatureExtrema_gradients[i][j] * variationCP[j];
                    }
                    curvatureDerivativeVariationWrtCP.push(gradient);
                }
                var zerosVariations = [];
                for (var i = 0; i < curvatureDerivativeVariationWrtCP.length; i++) {
                    zerosVariations.push(-(curvatureDerivativeVariationWrtCP[i]) / curvatureDerivative_gradientU[i]);
                }
                var zerosCurrentCurve = [0.0];
                var zerosEstimated = [0.0];
                var nbEvents = this.navigationCurveModel.seqDiffEventsCurrentCurve.length();
                console.log("estimation of zeros locations from current curve");
                for (var i = 0; i < nbEvents; i++) {
                    if (this.navigationCurveModel.seqDiffEventsCurrentCurve.eventAt(i).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM) {
                        var zeroLoc = this.navigationCurveModel.seqDiffEventsCurrentCurve.eventAt(i).location;
                        zerosCurrentCurve.push(zeroLoc);
                        console.log("estimated zero location[ " + i + " ] = " + (zeroLoc + zerosVariations[i]) + " variation = " + zerosVariations[i]);
                        zerosEstimated.push(zeroLoc + zerosVariations[i]);
                    }
                }
                zerosCurrentCurve.push(1.0);
                zerosEstimated.push(1.0);
                for (var i = 1; i < zerosCurrentCurve.length; i++) {
                    var interval = (zerosCurrentCurve[i] - zerosCurrentCurve[i - 1]);
                    var intervalEstimated = (zerosEstimated[i] - zerosEstimated[i - 1]);
                    var intervalVariation = intervalEstimated - interval;
                    if (intervalEstimated < 0.0)
                        console.log("estimated interval[ " + i + " ] with zeros crossing");
                    if (intervalEstimated > interval)
                        console.log("interval[ " + i + " ]" + " shrinks: " + intervalVariation);
                    if (intervalEstimated < interval)
                        console.log("interval[ " + i + " ]" + " expands: " + intervalVariation);
                }
                this._curveAnalyserOptimizedCurve.updateOptimized();
                this.navigationCurveModel.curveAnalyserOptimizedCurve = this._curveAnalyserOptimizedCurve;
                this.navigationCurveModel.seqDiffEventsOptimizedCurve = this.navigationCurveModel.curveAnalyserOptimizedCurve.sequenceOfDifferentialEvents;
                var seqComparator = new ComparatorOfSequencesDiffEvents_1.ComparatorOfSequencesOfDiffEvents(this.navigationCurveModel.seqDiffEventsCurrentCurve, this.navigationCurveModel.seqDiffEventsOptimizedCurve);
                seqComparator.locateNeiboringEvents();
                this.curveShapeSpaceNavigator.eventStateAtCrvExtremities.monitorEventInsideCurve(seqComparator);
                if (seqComparator.neighboringEvents.length > 0) {
                    console.log("Nb neighboring events identified = " + seqComparator.neighboringEvents.length);
                }
                if (seqComparator.neighboringEvents.length > 0 && this.curveShapeSpaceNavigator.getManagementDiffEventsAtExtremities() === ShapeSpaceDiffEventsStructure_1.EventMgmtState.Active) {
                    var filteredSeqComparator = seqComparator.filterOutneighboringEventsNestedShapeSpacesNavigation(this.curveShapeSpaceNavigator);
                    if (filteredSeqComparator.neighboringEvents.length === 1) {
                        if (this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactorsEventMonitoringAtExtremities) {
                            this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.configureBoundaryEnforcer(filteredSeqComparator);
                            this.navigationCurveModel.updateCurrentCurve(selectedControlPoint, new Vector2d_1.Vector2d(x, y));
                            this._curveAnalyserCurrentCurve.updateCurrent();
                            this.navigationCurveModel.seqDiffEventsCurrentCurve = this.navigationCurveModel.curveAnalyserCurrentCurve.sequenceOfDifferentialEvents;
                            this.navigationCurveModel.setTargetCurve();
                            this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.update(spline);
                            try {
                                var curveModelOptimized1 = new CurveModel_1.CurveModel();
                                if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategy) {
                                    var status_2 = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizer.optimize_using_trust_region(CurveShapeSpaceNavigator_1.CONVERGENCE_THRESHOLD, CurveShapeSpaceNavigator_1.MAX_TRUST_REGION_RADIUS, CurveShapeSpaceNavigator_1.MAX_NB_STEPS_TRUST_REGION_OPTIMIZER);
                                    if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategy
                                        && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline instanceof BSplineR1toR2_1.BSplineR1toR2) {
                                        if (status_2 === Optimizer_1.OptimizerReturnStatus.SOLUTION_FOUND) {
                                            curveModelOptimized1.setSpline(this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline);
                                        }
                                    }
                                }
                                var diffEvExtractor = new OpenCurveDifferentialEventsExtractor_1.OpenCurveDifferentialEventsExtractor(curveModelOptimized1.spline);
                                var seqComparatorWithConstraintsAtExtremities = new ComparatorOfSequencesDiffEvents_1.ComparatorOfSequencesOfDiffEvents(this.navigationCurveModel.seqDiffEventsCurrentCurve, diffEvExtractor.sequenceOfDifferentialEvents);
                                seqComparatorWithConstraintsAtExtremities.locateNeiboringEvents();
                                var filteredSeqComparatorWithConstraints = seqComparatorWithConstraintsAtExtremities.filterOutneighboringEventsNestedShapeSpacesNavigation(this.curveShapeSpaceNavigator);
                                if (seqComparatorWithConstraintsAtExtremities.neighboringEvents.length === seqComparator.neighboringEvents.length
                                    && filteredSeqComparatorWithConstraints.neighboringEvents.length === 0) {
                                    console.log(" No match of events after applying constraints at extremities");
                                }
                                this.navigationCurveModel.optimizedCurve = curveModelOptimized1.spline;
                                this.optimizedCurve = curveModelOptimized1.spline;
                            }
                            catch (e) {
                                console.error(e);
                            }
                        }
                    }
                    else if (filteredSeqComparator.neighboringEvents.length > 1) {
                        var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "navigate", "Several events appear/disappear simultaneously. Configuration not processed yet");
                        error.logMessageToConsole();
                    }
                }
                else if (this.navigationCurveModel.seqDiffEventsCurrentCurve.length() === this.navigationCurveModel.seqDiffEventsOptimizedCurve.length()
                    && this.curveShapeSpaceNavigator.getManagementDiffEventsAtExtremities() === ShapeSpaceDiffEventsStructure_1.EventMgmtState.Active) {
                    var nbInflectionsCurrrent = this.navigationCurveModel.seqDiffEventsCurrentCurve.nbInflections();
                    var nbInflectionsOpt = this.navigationCurveModel.seqDiffEventsOptimizedCurve.nbInflections();
                    var nbCurvExtCurrent = this.navigationCurveModel.seqDiffEventsCurrentCurve.nbCurvatureExtrema();
                    var nbCurvExtOpt = this.navigationCurveModel.seqDiffEventsOptimizedCurve.nbCurvatureExtrema();
                    console.log("There may be two different events evolving simultaneously nbICur = " + nbInflectionsCurrrent + " nbIOpt = " + nbInflectionsOpt + " nbCECur = " + nbCurvExtCurrent + " nbCEOpt = " + nbCurvExtOpt);
                }
                this.curveConstraintsMonitoring();
                if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategy
                    && (this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemOpenBSplineR1toR2_1.OptProblemOPenBSplineR1toR2WithWeigthingFactors
                        || this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsNoInactiveConstraints)) {
                    this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.update(this.currentCurve);
                }
            }
            else {
                var curveModelOptimized = new CurveModel_1.CurveModel();
                curveModelOptimized.setSpline(this.currentCurve);
                this.navigationCurveModel.optimizedCurve = curveModelOptimized.spline;
                this.optimizedCurve = curveModelOptimized.spline;
            }
        }
        catch (e) {
            console.error(e);
        }
    };
    return OCurveNavigationThroughSimplerShapeSpaces;
}(OpenCurveNavigationState));
exports.OCurveNavigationThroughSimplerShapeSpaces = OCurveNavigationThroughSimplerShapeSpaces;
var OCurveNavigationStrictlyInsideShapeSpace = /** @class */ (function (_super) {
    __extends(OCurveNavigationStrictlyInsideShapeSpace, _super);
    function OCurveNavigationStrictlyInsideShapeSpace(navigationCurveModel) {
        var _this = _super.call(this, navigationCurveModel) || this;
        // JCL 09/11/2021 Set up a curve analyzer whenever the navigation state changes
        _this.optimizedCurve = _this.navigationCurveModel.optimizedCurve;
        _this.curveShapeSpaceNavigator = _this.navigationCurveModel.curveShapeSpaceNavigator;
        if (_this.curveShapeSpaceNavigator.navigationState instanceof OCurveNavigationWithoutShapeSpaceMonitoring
            || _this.curveShapeSpaceNavigator.navigationState instanceof CCurveNavigationWithoutShapeSpaceMonitoring) {
            _this.curveShapeSpaceNavigator.navigationState = _this;
            _this.navigationCurveModel.navigationState = _this;
            _this.shapeNavigableCurve.clampedPoints[0] = 0;
            _this.shapeNavigableCurve.changeCurveConstraintStrategy(new CurveConstraintStrategy_1.CurveConstraintClampedFirstControlPoint(_this.shapeNavigableCurve.curveConstraints));
        }
        else {
            _this.curveShapeSpaceNavigator.navigationState = _this;
            _this.navigationCurveModel.navigationState = _this;
        }
        _this._curveAnalyserCurrentCurve = new CurveAnalyzer_1.OpenCurveAnalyzer(_this.currentCurve, _this.navigationCurveModel, _this.navigationCurveModel.slidingEventsAtExtremities);
        _this._curveAnalyserOptimizedCurve = new CurveAnalyzer_1.OpenCurveAnalyzer(_this.optimizedCurve, _this.navigationCurveModel, _this.navigationCurveModel.slidingEventsAtExtremities);
        return _this;
    }
    Object.defineProperty(OCurveNavigationStrictlyInsideShapeSpace.prototype, "curveAnalyserCurrentCurve", {
        get: function () {
            return this._curveAnalyserCurrentCurve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OCurveNavigationStrictlyInsideShapeSpace.prototype, "curveAnalyserOptimizedCurve", {
        get: function () {
            return this._curveAnalyserOptimizedCurve;
        },
        enumerable: false,
        configurable: true
    });
    OCurveNavigationStrictlyInsideShapeSpace.prototype.setNavigationStrictlyInsideShapeSpace = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "setNavigationStrictlyInsideShapeSpace", "No navigation process to change there.");
        warning.logMessageToConsole();
    };
    OCurveNavigationStrictlyInsideShapeSpace.prototype.curveConstraintsMonitoring = function () {
        this.shapeNavigableCurve.curveConstraints.processConstraint();
        if (this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy.optimizedCurve instanceof BSplineR1toR2_1.BSplineR1toR2) {
            this.navigationCurveModel.optimizedCurve = this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy.optimizedCurve;
            this.optimizedCurve = this.navigationCurveModel.optimizedCurve;
        }
        this.navigationCurveModel.currentCurve = this.navigationCurveModel.optimizedCurve;
        this.currentCurve = this.navigationCurveModel.currentCurve.clone();
        this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy.currentCurve = this.currentCurve.clone();
    };
    OCurveNavigationStrictlyInsideShapeSpace.prototype.navigate = function (selectedControlPoint, x, y) {
        var e_1, _a;
        this.navigationCurveModel.updateCurrentCurve(selectedControlPoint, new Vector2d_1.Vector2d(x, y));
        this._curveAnalyserCurrentCurve.updateCurrent();
        this.navigationCurveModel.curveAnalyserCurrentCurve = this._curveAnalyserCurrentCurve;
        this.navigationCurveModel.seqDiffEventsCurrentCurve = this.navigationCurveModel.curveAnalyserCurrentCurve.sequenceOfDifferentialEvents;
        this.navigationCurveModel.setTargetCurve();
        this.navigationCurveModel.optimizationProblemParam.updateConstraintBounds = true;
        var spline = new BSplineR1toR2_1.BSplineR1toR2();
        this._transitionEvents.clear();
        this._currentNeighboringEvents = [];
        this.navigationCurveModel.adjacentShapeSpaceCurve = undefined;
        if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategy
            && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace) {
            spline = this.currentCurve.clone();
            this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.clearIteratedCurves();
        }
        try {
            var status_3 = Optimizer_1.OptimizerReturnStatus.SOLUTION_OUTSIDE_SHAPE_SPACE;
            if (this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace) {
                if (this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.isActive())
                    this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.deactivate();
            }
            if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategy) {
                status_3 = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizer.optimize_using_trust_region(CurveShapeSpaceNavigator_1.CONVERGENCE_THRESHOLD, CurveShapeSpaceNavigator_1.MAX_TRUST_REGION_RADIUS, CurveShapeSpaceNavigator_1.MAX_NB_STEPS_TRUST_REGION_OPTIMIZER);
            }
            // this.navigationCurveModel.curveControl.optimizer.optimize_using_trust_region(CONVERGENCE_THRESHOLD, MAX_TRUST_REGION_RADIUS, MAX_NB_STEPS_TRUST_REGION_OPTIMIZER);
            // this.navigationCurveModel.optimizedCurve = this.navigationCurveModel.curveControl.optimizationProblem.spline.clone();
            var curveModelOptimized = new CurveModel_1.CurveModel();
            if (status_3 === Optimizer_1.OptimizerReturnStatus.SOLUTION_OUTSIDE_SHAPE_SPACE || status_3 === Optimizer_1.OptimizerReturnStatus.MAX_NB_ITER_REACHED) {
                console.log('no solution found from the current curve');
            }
            if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategy
                && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline instanceof BSplineR1toR2_1.BSplineR1toR2) {
                curveModelOptimized.setSpline(this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline);
            }
            this.navigationCurveModel.optimizedCurve = curveModelOptimized.spline;
            // console.log(" spline"+curveModelOptimized.spline.controlPoints);
            this.optimizedCurve = curveModelOptimized.spline;
            this._curveAnalyserOptimizedCurve.updateOptimized();
            var diffEvExtractorC = new OpenCurveDifferentialEventsExtractor_1.OpenCurveDifferentialEventsExtractor(this.currentCurve);
            var diffEvExtractor = new OpenCurveDifferentialEventsExtractor_1.OpenCurveDifferentialEventsExtractor(this.optimizedCurve);
            console.log("curveAnalyzer Opt" + diffEvExtractor.curvatureExtremaParametricLocations + " Cur = " + diffEvExtractorC.curvatureExtremaParametricLocations);
            this.navigationCurveModel.curveAnalyserOptimizedCurve = this._curveAnalyserOptimizedCurve;
            this.navigationCurveModel.seqDiffEventsOptimizedCurve = this.navigationCurveModel.curveAnalyserOptimizedCurve.sequenceOfDifferentialEvents;
            console.log("Nb EVENTS opt = " + this.navigationCurveModel.seqDiffEventsOptimizedCurve.length());
            var seqComparator = new ComparatorOfSequencesDiffEvents_1.ComparatorOfSequencesOfDiffEvents(this.navigationCurveModel.seqDiffEventsCurrentCurve, this.navigationCurveModel.seqDiffEventsOptimizedCurve);
            seqComparator.locateNeiboringEvents();
            if (this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace) {
                this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.curvatureDerivativeCPOpt = diffEvExtractor.curvatureDerivativeNumerator.controlPoints;
                if (this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.hasTransitionsOfEvents()) {
                    seqComparator.removeAllNeighboringEvents(this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.neighboringEvents);
                    this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.reset();
                }
            }
            // console.log(" Nb of neighboring events after has Transition = "+seqComparator.neighboringEvents.length)
            if (seqComparator.neighboringEvents.length > 0) {
                if (seqComparator.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.moreThanOneEvent) {
                    console.log('More than one event to process. Not yet available');
                    this.navigationCurveModel.optimizedCurve = this.navigationCurveModel.currentCurve.clone();
                    this.optimizedCurve = this.currentCurve.clone();
                    this._curveAnalyserOptimizedCurve.updateOptimized();
                    this.navigationCurveModel.curveAnalyserOptimizedCurve = this._curveAnalyserOptimizedCurve;
                    this.navigationCurveModel.seqDiffEventsOptimizedCurve = this.navigationCurveModel.curveAnalyserOptimizedCurve.sequenceOfDifferentialEvents;
                    // if(this.navigationCurveModel.curveShapeMonitoringStrategy instanceof OCurveShapeMonitoringStrategy
                    //     && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemBSplineR1toR2WithWeigthingFactorsGeneralNavigation) {
                    //     this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.update(this.currentCurve);
                    // }
                    if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategy
                        && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace) {
                        this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.update(this.currentCurve);
                    }
                }
                else {
                    var updateDisplacement = false;
                    var updatedDisplacement = new Vector2d_1.Vector2d(x, y);
                    var filteredSeqComparator = seqComparator.filterOutneighboringEvents(this.curveShapeSpaceNavigator);
                    if (filteredSeqComparator.neighboringEvents.length > 0) {
                        if (this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace) {
                            // this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.activate();
                            this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.configureBoundaryEnforcer(filteredSeqComparator);
                        }
                        // console.log(" Nb of neighboring events = "+filteredSeqComparator.neighboringEvents.length+ " seq current length "+this.navigationCurveModel.seqDiffEventsCurrentCurve.sequence.length+ " seq opt length "+this.navigationCurveModel.seqDiffEventsOptimizedCurve.sequence.length);
                        if (this._transitionEvents.length() > 0)
                            updateDisplacement = true;
                        this._currentNeighboringEvents = filteredSeqComparator.neighboringEvents;
                        if (filteredSeqComparator.neighboringEvents.length > 1) {
                            console.log(" Nb of neighboring events2 = " + filteredSeqComparator.neighboringEvents.length + " seq current length " + this.navigationCurveModel.seqDiffEventsCurrentCurve.sequence.length + " seq opt length " + this.navigationCurveModel.seqDiffEventsOptimizedCurve.sequence.length);
                        }
                    }
                    if (this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace) {
                        if (this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.isActive()) {
                            // if(this.navigationCurveModel.curveShapeMonitoringStrategy instanceof OCurveShapeMonitoringStrategy
                            //     && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemBSplineR1toR2WithWeigthingFactorsGeneralNavigation) {
                            if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategy
                                && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace) {
                                if (this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.isTransitionAtExtremity()) {
                                    if (this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.isCurvatureExtTransitionAtExtremity()) {
                                        this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.curveAnalyser1 = this._curveAnalyserCurrentCurve;
                                        this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.curveAnalyser2 = this._curveAnalyserOptimizedCurve;
                                        this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.neighboringEvents = filteredSeqComparator.neighboringEvents;
                                        this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.variationDifferentialEvents();
                                        this.navigationCurveModel.updateCurrentCurve(selectedControlPoint, updatedDisplacement);
                                        this._curveAnalyserCurrentCurve.updateCurrent();
                                        this.navigationCurveModel.seqDiffEventsCurrentCurve = this.navigationCurveModel.curveAnalyserCurrentCurve.sequenceOfDifferentialEvents;
                                        this.navigationCurveModel.setTargetCurve();
                                        this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.updateConstraintBound = true;
                                        this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.clearVariation();
                                        this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.update(spline);
                                        this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.updateConstraintBound = false;
                                        this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.clearIteratedCurves();
                                        try {
                                            var threshold = CurveShapeSpaceNavigator_1.CONVERGENCE_THRESHOLD;
                                            var status_4 = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizer.optimize_using_trust_region(threshold, CurveShapeSpaceNavigator_1.MAX_TRUST_REGION_RADIUS, CurveShapeSpaceNavigator_1.MAX_NB_STEPS_TRUST_REGION_OPTIMIZER);
                                            var curveModelOptimized_1 = new CurveModel_1.CurveModel();
                                            if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategy
                                                && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline instanceof BSplineR1toR2_1.BSplineR1toR2) {
                                                if (status_4 === Optimizer_1.OptimizerReturnStatus.SOLUTION_FOUND) {
                                                    curveModelOptimized_1.setSpline(this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline);
                                                }
                                                else if (status_4 === Optimizer_1.OptimizerReturnStatus.SOLUTION_OUTSIDE_SHAPE_SPACE) {
                                                    this.navigationCurveModel.adjacentShapeSpaceCurve = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline;
                                                    var closestCurveToShapeSpaceBoundary = this.closestCurveToShapeSpaceBoundary();
                                                    if (closestCurveToShapeSpaceBoundary !== undefined) {
                                                        curveModelOptimized_1.setSpline(closestCurveToShapeSpaceBoundary);
                                                    }
                                                    else {
                                                        curveModelOptimized_1.setSpline(spline);
                                                    }
                                                }
                                            }
                                            var diffEvExtractor_1 = new OpenCurveDifferentialEventsExtractor_1.OpenCurveDifferentialEventsExtractor(curveModelOptimized_1.spline);
                                            var seqComparatorWithoutTransition = new ComparatorOfSequencesDiffEvents_1.ComparatorOfSequencesOfDiffEvents(this.navigationCurveModel.seqDiffEventsCurrentCurve, diffEvExtractor_1.sequenceOfDifferentialEvents);
                                            seqComparatorWithoutTransition.locateNeiboringEvents();
                                            var filteredSeqComparatorWithoutTransition = seqComparatorWithoutTransition.filterOutneighboringEvents(this.curveShapeSpaceNavigator);
                                            if (filteredSeqComparatorWithoutTransition.neighboringEvents.length !== 0) {
                                                // need to modify constraint bounds to keep local extrema on the correct side of U axis
                                                console.log("Inconsistent sequence of events after correction. Need further update");
                                                this._currentNeighboringEvents.push(filteredSeqComparatorWithoutTransition.neighboringEvents[0]);
                                                if (this._transitionEvents.length() > 0) {
                                                    console.log(" couple of curvature extrema modified");
                                                    this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.newEventExist();
                                                    var firstCorrectedCurveAnalyser = new CurveAnalyzer_1.OpenCurveAnalyzer(curveModelOptimized_1.spline, this.navigationCurveModel, this.navigationCurveModel.slidingEventsAtExtremities);
                                                    var currentCurveAnalyzer = this._curveAnalyserCurrentCurve;
                                                    var diffEventsVariation1 = new DifferentialEventVariation_1.DiffrentialEventVariation(currentCurveAnalyzer, firstCorrectedCurveAnalyser);
                                                    diffEventsVariation1.neighboringEvents = filteredSeqComparatorWithoutTransition.neighboringEvents;
                                                    diffEventsVariation1.variationDifferentialEvents();
                                                    this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation = diffEventsVariation1;
                                                    // this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation = diffEventsVariation1;
                                                    // this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.curveAnalyser1 = currentCurveAnalyzer;
                                                    // this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.curveAnalyser2 = firstCorrectedCurveAnalyser;
                                                    // this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.neighboringEvents = filteredSeqComparatorWithoutTransition.neighboringEvents;
                                                    // this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.variationDifferentialEvents();
                                                    updatedDisplacement = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.updateCPDisplacement(this.navigationCurveModel.currentCurve, selectedControlPoint, x, y);
                                                    this.navigationCurveModel.updateCurrentCurve(selectedControlPoint, updatedDisplacement);
                                                    this._curveAnalyserCurrentCurve.updateCurrent();
                                                    this.navigationCurveModel.seqDiffEventsCurrentCurve = this.navigationCurveModel.curveAnalyserCurrentCurve.sequenceOfDifferentialEvents;
                                                    this.navigationCurveModel.setTargetCurve();
                                                    this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.update(spline);
                                                    this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.clearIteratedCurves();
                                                    // this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.clearVariation();
                                                    try {
                                                        var threshold_1 = CurveShapeSpaceNavigator_1.CONVERGENCE_THRESHOLD;
                                                        var status_5 = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizer.optimize_using_trust_region(threshold_1, CurveShapeSpaceNavigator_1.MAX_TRUST_REGION_RADIUS, CurveShapeSpaceNavigator_1.MAX_NB_STEPS_TRUST_REGION_OPTIMIZER);
                                                        var curveModelOptimized2 = new CurveModel_1.CurveModel();
                                                        if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategy
                                                            && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline instanceof BSplineR1toR2_1.BSplineR1toR2) {
                                                            if (status_5 === Optimizer_1.OptimizerReturnStatus.SOLUTION_FOUND) {
                                                                curveModelOptimized2.setSpline(this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline);
                                                            }
                                                            else if (status_5 === Optimizer_1.OptimizerReturnStatus.SOLUTION_OUTSIDE_SHAPE_SPACE) {
                                                                this.navigationCurveModel.adjacentShapeSpaceCurve = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline;
                                                                var closestCurveToShapeSpaceBoundary = this.closestCurveToShapeSpaceBoundary();
                                                                if (closestCurveToShapeSpaceBoundary !== undefined) {
                                                                    curveModelOptimized2.setSpline(closestCurveToShapeSpaceBoundary);
                                                                }
                                                                else {
                                                                    curveModelOptimized2.setSpline(spline);
                                                                }
                                                            }
                                                        }
                                                        var diffEvExtractor1 = new OpenCurveDifferentialEventsExtractor_1.OpenCurveDifferentialEventsExtractor(curveModelOptimized2.spline);
                                                        var seqComparatorWithoutTransition1 = new ComparatorOfSequencesDiffEvents_1.ComparatorOfSequencesOfDiffEvents(this.navigationCurveModel.seqDiffEventsCurrentCurve, diffEvExtractor1.sequenceOfDifferentialEvents);
                                                        seqComparatorWithoutTransition1.locateNeiboringEvents();
                                                        var filteredSeqComparatorWithoutTransition1 = seqComparatorWithoutTransition1.filterOutneighboringEvents(this.curveShapeSpaceNavigator);
                                                        if (filteredSeqComparatorWithoutTransition1.neighboringEvents.length !== 0) {
                                                            console.log('correction not sufficient. need to iterate');
                                                        }
                                                        curveModelOptimized_1.setSpline(curveModelOptimized2.spline);
                                                    }
                                                    catch (e) {
                                                        console.error(e);
                                                    }
                                                    this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.clearVariation();
                                                    this.navigationCurveModel.optimizedCurve = curveModelOptimized_1.spline;
                                                    this.optimizedCurve = curveModelOptimized_1.spline;
                                                    this._curveAnalyserOptimizedCurve.updateOptimized();
                                                    this.navigationCurveModel.curveAnalyserOptimizedCurve = this._curveAnalyserOptimizedCurve;
                                                    this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.removeNewEvent();
                                                    this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.resetNeighboringEvents();
                                                }
                                            }
                                            else {
                                                this.navigationCurveModel.optimizedCurve = curveModelOptimized_1.spline;
                                                this.optimizedCurve = curveModelOptimized_1.spline;
                                                this._curveAnalyserOptimizedCurve.updateOptimized();
                                                this.navigationCurveModel.curveAnalyserOptimizedCurve = this._curveAnalyserOptimizedCurve;
                                            }
                                        }
                                        catch (e) {
                                            console.error(e);
                                        }
                                    }
                                }
                                if (!this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.isTransitionAtExtremity()) {
                                    console.log("Couple neighboring events Curv Ex or Inflections");
                                    try {
                                        for (var _b = __values(filteredSeqComparator.neighboringEvents), _c = _b.next(); !_c.done; _c = _b.next()) {
                                            var neighboringEvents = _c.value;
                                            this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.curveAnalyser1 = this._curveAnalyserCurrentCurve;
                                            this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.curveAnalyser2 = this._curveAnalyserOptimizedCurve;
                                            this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.neighboringEvents = filteredSeqComparator.neighboringEvents;
                                            this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.variationDifferentialEvents();
                                            var closestCurveToShapeSpaceBoundary1 = this.closestCurveToShapeSpaceBoundary();
                                            if (updateDisplacement && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.iteratedCurves.length > 0) {
                                                updatedDisplacement = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.updateCPDisplacement(this.navigationCurveModel.currentCurve, selectedControlPoint, x, y);
                                            }
                                            this.navigationCurveModel.updateCurrentCurve(selectedControlPoint, updatedDisplacement);
                                            this._curveAnalyserCurrentCurve.updateCurrent();
                                            this.navigationCurveModel.seqDiffEventsCurrentCurve = this.navigationCurveModel.curveAnalyserCurrentCurve.sequenceOfDifferentialEvents;
                                            this.navigationCurveModel.setTargetCurve();
                                            this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.updateConstraintBound = true;
                                            this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.update(spline);
                                            this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.updateConstraintBound = false;
                                            if (!updateDisplacement) {
                                                // this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.cancelEvent();
                                                this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.clearVariation();
                                            }
                                            try {
                                                var status_6 = Optimizer_1.OptimizerReturnStatus.SOLUTION_OUTSIDE_SHAPE_SPACE;
                                                var threshold = CurveShapeSpaceNavigator_1.CONVERGENCE_THRESHOLD;
                                                if (this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.f0 < CurveShapeSpaceNavigator_1.CONVERGENCE_THRESHOLD) {
                                                    while (this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.f0 < threshold) {
                                                        threshold = threshold / 10;
                                                    }
                                                }
                                                status_6 = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizer.optimize_using_trust_region(threshold, CurveShapeSpaceNavigator_1.MAX_TRUST_REGION_RADIUS, CurveShapeSpaceNavigator_1.MAX_NB_STEPS_TRUST_REGION_OPTIMIZER);
                                                // while (status === OptimizerReturnStatus.TERMINATION_WITHOUT_CONVERGENCE) {
                                                //     let updatedCurve = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline;
                                                //     const curveAnalyzerUpdatedCurve = new OpenCurveAnalyzer(updatedCurve, this.navigationCurveModel, this.navigationCurveModel.slidingEventsAtExtremities);
                                                //     // this.navigationCurveModel.optimizedCurve = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline;
                                                //     // this.optimizedCurve = this.navigationCurveModel.optimizedCurve.clone();
                                                //     // this._curveAnalyserOptimizedCurve.updateOptimized();
                                                //     // this.navigationCurveModel.curveAnalyserOptimizedCurve = this._curveAnalyserOptimizedCurve;
                                                //     // this.navigationCurveModel.seqDiffEventsOptimizedCurve = this.navigationCurveModel.curveAnalyserOptimizedCurve.sequenceOfDifferentialEvents;
                                                //     // const seqComparator = new ComparatorOfSequencesOfDiffEvents(this.navigationCurveModel.seqDiffEventsCurrentCurve, this.navigationCurveModel.seqDiffEventsOptimizedCurve);
                                                //     // seqComparator.locateNeiboringEvents();
                                                //     // this._currentNeighboringEvents = seqComparator.neighboringEvents[0];
                                                //     // this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.curveAnalyser2 = this._curveAnalyserOptimizedCurve;
                                                //     // this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.neighboringEvents = seqComparator.neighboringEvents;
                                                //     // this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.variationDifferentialEvents();
                                                //     this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.updateExtremumValueOptimized(curveAnalyzerUpdatedCurve.curvatureDerivativeNumerator);
                                                //     updatedDisplacement = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.updateCPDisplacement(this.navigationCurveModel.currentCurve, selectedControlPoint, x, y);
                                                //     this.navigationCurveModel.updateCurrentCurve(selectedControlPoint, updatedDisplacement);
                                                //     this._curveAnalyserCurrentCurve.updateCurrent();
                                                //     this.navigationCurveModel.seqDiffEventsCurrentCurve = this.navigationCurveModel.curveAnalyserCurrentCurve.sequenceOfDifferentialEvents;
                                                //     this.navigationCurveModel.setTargetCurve();
                                                //     this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.updateConstraintBound = true;
                                                //     this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.update(spline);
                                                //     this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.updateConstraintBound = false;
                                                //     status = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizer.optimize_using_trust_region(threshold, MAX_TRUST_REGION_RADIUS, MAX_NB_STEPS_TRUST_REGION_OPTIMIZER);
                                                // }
                                                var curveModelOptimized_2 = new CurveModel_1.CurveModel();
                                                if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategy
                                                    && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline instanceof BSplineR1toR2_1.BSplineR1toR2) {
                                                    if (status_6 === Optimizer_1.OptimizerReturnStatus.SOLUTION_FOUND) {
                                                        curveModelOptimized_2.setSpline(this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline);
                                                    }
                                                    else if (status_6 === Optimizer_1.OptimizerReturnStatus.FIRST_ITERATION || status_6 === Optimizer_1.OptimizerReturnStatus.SOLUTION_OUTSIDE_SHAPE_SPACE
                                                        || closestCurveToShapeSpaceBoundary1 === undefined) {
                                                        this.navigationCurveModel.adjacentShapeSpaceCurve = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline;
                                                        curveModelOptimized_2.setSpline(spline);
                                                    }
                                                    else if (closestCurveToShapeSpaceBoundary1 !== undefined) {
                                                        this.navigationCurveModel.adjacentShapeSpaceCurve = curveModelOptimized_2.spline;
                                                        curveModelOptimized_2.setSpline(closestCurveToShapeSpaceBoundary1);
                                                    }
                                                }
                                                this.navigationCurveModel.optimizedCurve = curveModelOptimized_2.spline;
                                                this.optimizedCurve = curveModelOptimized_2.spline;
                                                this._curveAnalyserOptimizedCurve.updateOptimized();
                                                this.navigationCurveModel.curveAnalyserOptimizedCurve = this._curveAnalyserOptimizedCurve;
                                                this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.resetEventsAtExtremities();
                                            }
                                            catch (e) {
                                                console.error(e);
                                                this.navigationCurveModel.optimizedCurve = this.navigationCurveModel.currentCurve;
                                                this.optimizedCurve = this.currentCurve.clone();
                                                this._curveAnalyserOptimizedCurve.updateOptimized();
                                                this.navigationCurveModel.curveAnalyserOptimizedCurve = this._curveAnalyserOptimizedCurve;
                                            }
                                            if (updateDisplacement) {
                                                updateDisplacement = false;
                                                this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.clearVariation();
                                            }
                                        }
                                    }
                                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                                    finally {
                                        try {
                                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                                        }
                                        finally { if (e_1) throw e_1.error; }
                                    }
                                }
                                this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.shapeSpaceBoundaryEnforcer.resetEventsAtExtremities();
                            }
                        }
                    }
                }
            }
            this.curveConstraintsMonitoring();
        }
        catch (e) {
            console.error(e);
            console.log('error in optimizer');
            this.navigationCurveModel.optimizedCurve = this.navigationCurveModel.currentCurve.clone();
            this.optimizedCurve = this.currentCurve.clone();
            this._curveAnalyserOptimizedCurve.updateOptimized();
            this.navigationCurveModel.curveAnalyserOptimizedCurve = this._curveAnalyserOptimizedCurve;
            this.navigationCurveModel.seqDiffEventsOptimizedCurve = this.navigationCurveModel.curveAnalyserOptimizedCurve.sequenceOfDifferentialEvents;
            // if(this.navigationCurveModel.curveShapeMonitoringStrategy instanceof OCurveShapeMonitoringStrategy
            //     && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemBSplineR1toR2WithWeigthingFactorsGeneralNavigation) {
            if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategy
                && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace) {
                this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.update(this.currentCurve);
            }
        }
    };
    OCurveNavigationStrictlyInsideShapeSpace.prototype.closestCurveToShapeSpaceBoundary = function () {
        var index = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
        // if(this.navigationCurveModel.curveShapeMonitoringStrategy instanceof OCurveShapeMonitoringStrategy
        //     && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemBSplineR1toR2WithWeigthingFactorsGeneralNavigation) {
        if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategy
            && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem instanceof OptProblemOpenBSplineR1toR2_1.OptProblemOpenBSplineR1toR2WithWeigthingFactorsStrictShapeSpace) {
            var extremumValue = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.extremumValue;
            var iteratedCurves = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.iteratedCurves;
            for (var iCurve = 0; iCurve < iteratedCurves.length; iCurve++) {
                var iteratedCurveAnalyser = new CurveAnalyzer_1.OpenCurveAnalyzer(iteratedCurves[iCurve], this.navigationCurveModel, this.navigationCurveModel.slidingEventsAtExtremities);
                this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.updateExtremumValueOptimized(iteratedCurveAnalyser.curvatureDerivativeNumerator);
                if (this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.extremumValue *
                    this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.extremumValueOpt > 0.0
                    && this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.extremumLocationOpt !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE) {
                    if (Math.abs(extremumValue) > Math.abs(this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.extremumValueOpt)) {
                        extremumValue = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.diffEventsVariation.extremumValueOpt;
                        index = iCurve;
                    }
                }
            }
            return iteratedCurves[index];
        }
    };
    return OCurveNavigationStrictlyInsideShapeSpace;
}(OpenCurveNavigationState));
exports.OCurveNavigationStrictlyInsideShapeSpace = OCurveNavigationStrictlyInsideShapeSpace;
var ClosedCurveNavigationState = /** @class */ (function (_super) {
    __extends(ClosedCurveNavigationState, _super);
    function ClosedCurveNavigationState(navigationCurveModel) {
        var _this = _super.call(this) || this;
        _this.navigationCurveModel = navigationCurveModel;
        _this.shapeNavigableCurve = _this.navigationCurveModel.shapeNavigableCurve;
        if (_this.navigationCurveModel.shapeNavigableCurve.curveCategory.curveModel instanceof ClosedCurveModel_1.ClosedCurveModel) {
            _this.currentCurve = _this.navigationCurveModel.currentCurve;
            // this.currentCurve = this.navigationCurveModel.shapeNavigableCurve.curveCategory.curveModel.spline;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent object type to initialize the currentCurve.");
            error.logMessageToConsole();
            _this.currentCurve = new PeriodicBSplineR1toR2withOpenKnotSequence_1.PeriodicBSplineR1toR2withOpenKnotSequence;
        }
        _this.navigationCurveModel.currentCurve = _this.currentCurve;
        _this.optimizedCurve = _this.currentCurve.clone();
        _this.navigationCurveModel.optimizedCurve = _this.optimizedCurve;
        if (!_this.navigationCurveModel.shapeNavigableCurve) {
            var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, 'constructor', 'Not able to initialize curveConstraints field.');
            warning.logMessageToConsole();
        }
        return _this;
    }
    ClosedCurveNavigationState.prototype.setNavigationCurveModel = function (navigationCurveModel) {
        this.navigationCurveModel = navigationCurveModel;
    };
    ClosedCurveNavigationState.prototype.setNavigationStrictlyInsideShapeSpace = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'setNavigationStrictlyInsideShapeSpace', 'set NavigationStrictlyInsideShapeSpace');
        warning.logMessageToConsole();
        this.navigationCurveModel.changeNavigationState(new CCurveNavigationStrictlyInsideShapeSpace(this.navigationCurveModel));
        this.shapeNavigableCurve.notifyObservers();
        this.navigationCurveModel.curveShapeSpaceNavigator.navigationState.navigationStateChange = false;
    };
    ClosedCurveNavigationState.prototype.setNavigationThroughSimplerShapeSpaces = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'setNavigationThroughSimplerShapeSpaces', 'set NavigationThroughSimplerShapeSpaces');
        warning.logMessageToConsole();
        this.navigationCurveModel.changeNavigationState(new CCurveNavigationThroughSimplerShapeSpaces(this.navigationCurveModel));
        this.shapeNavigableCurve.notifyObservers();
        this.navigationCurveModel.curveShapeSpaceNavigator.navigationState.navigationStateChange = false;
    };
    ClosedCurveNavigationState.prototype.setNavigationWithoutShapeSpaceMonitoring = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'setNavigationWithoutShapeSpaceMonitoring', 'set NavigationWithoutShapeSpaceMonitoring');
        warning.logMessageToConsole();
        this.navigationCurveModel.changeNavigationState(new CCurveNavigationWithoutShapeSpaceMonitoring(this.navigationCurveModel));
        this.shapeNavigableCurve.notifyObservers();
        this.navigationCurveModel.curveShapeSpaceNavigator.navigationState.navigationStateChange = false;
    };
    ClosedCurveNavigationState.prototype.setCurrentCurve = function (curve) {
        this.currentCurve = curve.clone();
    };
    return ClosedCurveNavigationState;
}(NavigationState));
exports.ClosedCurveNavigationState = ClosedCurveNavigationState;
var CCurveNavigationWithoutShapeSpaceMonitoring = /** @class */ (function (_super) {
    __extends(CCurveNavigationWithoutShapeSpaceMonitoring, _super);
    function CCurveNavigationWithoutShapeSpaceMonitoring(navigationCurveModel) {
        var _this = _super.call(this, navigationCurveModel) || this;
        // JCL 09/11/2021 Set up a curve analyzer whenever the navigation state changes
        _this.optimizedCurve = _this.navigationCurveModel.optimizedCurve;
        var curveShapeSpaceNavigator = _this.navigationCurveModel.curveShapeSpaceNavigator;
        if (curveShapeSpaceNavigator.navigationState instanceof CCurveNavigationThroughSimplerShapeSpaces
            || curveShapeSpaceNavigator.navigationState instanceof CCurveNavigationStrictlyInsideShapeSpace) {
            curveShapeSpaceNavigator.navigationState = _this;
            _this.navigationCurveModel.navigationState = _this;
            _this.shapeNavigableCurve.changeCurveConstraintStrategy(new CurveConstraintStrategy_1.CurveConstraintNoConstraint(_this.shapeNavigableCurve.curveConstraints));
        }
        else {
            curveShapeSpaceNavigator.navigationState = _this;
            _this.navigationCurveModel.navigationState = _this;
        }
        _this._curveAnalyserCurrentCurve = new CurveAnalyzer_1.ClosedCurveDummyAnalyzer(_this.currentCurve, _this.navigationCurveModel);
        _this._curveAnalyserOptimizedCurve = new CurveAnalyzer_1.ClosedCurveDummyAnalyzer(_this.optimizedCurve, _this.navigationCurveModel);
        return _this;
    }
    Object.defineProperty(CCurveNavigationWithoutShapeSpaceMonitoring.prototype, "curveAnalyserCurrentCurve", {
        get: function () {
            return this._curveAnalyserCurrentCurve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CCurveNavigationWithoutShapeSpaceMonitoring.prototype, "curveAnalyserOptimizedCurve", {
        get: function () {
            return this._curveAnalyserOptimizedCurve;
        },
        enumerable: false,
        configurable: true
    });
    CCurveNavigationWithoutShapeSpaceMonitoring.prototype.setNavigationWithoutShapeSpaceMonitoring = function () {
        this.currentCurve = this.navigationCurveModel.currentCurve;
        this.optimizedCurve = this.currentCurve.clone();
        // this.curveAnalyserCurrentCurve = new CurveAnalyzer(this.currentCurve, this.curveShapeSpaceNavigator, this.curveShapeSpaceNavigator.slidingEventsAtExtremities);
        // this.curveAnalyserOptimizedCurve = new CurveAnalyzer(this.optimizedCurve, this.curveShapeSpaceNavigator, this.curveShapeSpaceNavigator.slidingEventsAtExtremities);
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "setNavigationWithoutShapeSpaceMonitoring", "No navigation process to change there.");
        warning.logMessageToConsole();
    };
    CCurveNavigationWithoutShapeSpaceMonitoring.prototype.curveConstraintsMonitoring = function () {
        this.shapeNavigableCurve.curveConstraints.processConstraint();
    };
    CCurveNavigationWithoutShapeSpaceMonitoring.prototype.navigate = function (selectedControlPoint, x, y) {
        this.navigationCurveModel.updateCurrentCurve(selectedControlPoint, new Vector2d_1.Vector2d(x, y));
        this.curveAnalyserCurrentCurve.updateCurrent();
        this.navigationCurveModel.seqDiffEventsCurrentCurve = this.navigationCurveModel.curveAnalyserCurrentCurve.sequenceOfDifferentialEvents;
        this.navigationCurveModel.setTargetCurve();
        // JCL pas nécessaire dans cette config si pas incompatible avec la connexion de l'optimiseur
        this.navigationCurveModel.optimizationProblemParam.updateConstraintBounds = false;
        this.navigationCurveModel.optimizedCurve = this.navigationCurveModel.targetCurve;
        // this.shapeNavigableCurve.updateCurve();
        this.curveConstraintsMonitoring();
        this.curveAnalyserOptimizedCurve.updateOptimized();
        this.navigationCurveModel.seqDiffEventsOptimizedCurve = this.navigationCurveModel.curveAnalyserOptimizedCurve.sequenceOfDifferentialEvents;
    };
    return CCurveNavigationWithoutShapeSpaceMonitoring;
}(ClosedCurveNavigationState));
exports.CCurveNavigationWithoutShapeSpaceMonitoring = CCurveNavigationWithoutShapeSpaceMonitoring;
var CCurveNavigationThroughSimplerShapeSpaces = /** @class */ (function (_super) {
    __extends(CCurveNavigationThroughSimplerShapeSpaces, _super);
    function CCurveNavigationThroughSimplerShapeSpaces(navigationCurveModel) {
        var _this = _super.call(this, navigationCurveModel) || this;
        // JCL 09/11/2021 Set up a curve analyzer whenever the navigation state changes
        _this.optimizedCurve = _this.navigationCurveModel.optimizedCurve;
        var curveShapeSpaceNavigator = _this.navigationCurveModel.curveShapeSpaceNavigator;
        if (curveShapeSpaceNavigator.navigationState instanceof CCurveNavigationWithoutShapeSpaceMonitoring) {
            curveShapeSpaceNavigator.navigationState = _this;
            _this.navigationCurveModel.navigationState = _this;
            _this.shapeNavigableCurve.clampedPoints[0] = 0;
            _this.shapeNavigableCurve.changeCurveConstraintStrategy(new CurveConstraintStrategy_1.CurveConstraintClampedFirstControlPoint(_this.shapeNavigableCurve.curveConstraints));
        }
        else {
            curveShapeSpaceNavigator.navigationState = _this;
            _this.navigationCurveModel.navigationState = _this;
        }
        _this._curveAnalyserCurrentCurve = new CurveAnalyzer_1.ClosedCurveAnalyzer(_this.currentCurve, _this.navigationCurveModel);
        _this._curveAnalyserOptimizedCurve = new CurveAnalyzer_1.ClosedCurveAnalyzer(_this.optimizedCurve, _this.navigationCurveModel);
        return _this;
    }
    Object.defineProperty(CCurveNavigationThroughSimplerShapeSpaces.prototype, "curveAnalyserCurrentCurve", {
        get: function () {
            return this._curveAnalyserCurrentCurve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CCurveNavigationThroughSimplerShapeSpaces.prototype, "curveAnalyserOptimizedCurve", {
        get: function () {
            return this._curveAnalyserOptimizedCurve;
        },
        enumerable: false,
        configurable: true
    });
    CCurveNavigationThroughSimplerShapeSpaces.prototype.setNavigationThroughSimplerShapeSpaces = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "setNavigationThroughSimplerShapeSpaces", "No navigation process to change there.");
        warning.logMessageToConsole();
    };
    CCurveNavigationThroughSimplerShapeSpaces.prototype.curveConstraintsMonitoring = function () {
        // pb etat des contraintes incorrect: un seul pt alors que etat: 2 pts ancres
        this.shapeNavigableCurve.curveConstraints.processConstraint();
        this.navigationCurveModel.currentCurve = this.navigationCurveModel.optimizedCurve;
        this.currentCurve = this.navigationCurveModel.currentCurve.clone();
        this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy.currentCurve = this.currentCurve.clone();
    };
    CCurveNavigationThroughSimplerShapeSpaces.prototype.navigate = function (selectedControlPoint, x, y) {
        this.navigationCurveModel.updateCurrentCurve(selectedControlPoint, new Vector2d_1.Vector2d(x, y));
        this.curveAnalyserCurrentCurve.updateCurrent();
        this.navigationCurveModel.seqDiffEventsCurrentCurve = this.navigationCurveModel.curveAnalyserCurrentCurve.sequenceOfDifferentialEvents;
        this.navigationCurveModel.setTargetCurve();
        this.navigationCurveModel.optimizationProblemParam.updateConstraintBounds = false;
        try {
            if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.CCurveShapeMonitoringStrategy) {
                this.navigationCurveModel.curveShapeMonitoringStrategy.optimizer.optimize_using_trust_region(CurveShapeSpaceNavigator_1.CONVERGENCE_THRESHOLD, CurveShapeSpaceNavigator_1.MAX_TRUST_REGION_RADIUS, CurveShapeSpaceNavigator_1.MAX_NB_STEPS_TRUST_REGION_OPTIMIZER);
            }
            // this.navigationCurveModel.curveControl.optimizer.optimize_using_trust_region(CONVERGENCE_THRESHOLD, MAX_TRUST_REGION_RADIUS, MAX_NB_STEPS_TRUST_REGION_OPTIMIZER);
            // requires optimization process for periodic B-Splines
            // this.navigationCurveModel.optimizedCurve = this.navigationCurveModel.optimizationProblem.spline.clone();
            if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.CCurveShapeMonitoringStrategy) {
                this.navigationCurveModel.optimizedCurve = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline;
            }
            this.optimizedCurve = this.navigationCurveModel.optimizedCurve.clone();
            this.curveConstraintsMonitoring();
            this.curveAnalyserOptimizedCurve.updateOptimized();
            this.navigationCurveModel.seqDiffEventsOptimizedCurve = this.navigationCurveModel.curveAnalyserOptimizedCurve.sequenceOfDifferentialEvents;
            var seqComparator = new ComparatorOfSequencesDiffEvents_1.ComparatorOfSequencesOfDiffEvents(this.navigationCurveModel.seqDiffEventsCurrentCurve, this.navigationCurveModel.seqDiffEventsOptimizedCurve);
            // to be added later
            // seqComparator.locateNeiboringEvents();
        }
        catch (e) {
        }
    };
    return CCurveNavigationThroughSimplerShapeSpaces;
}(ClosedCurveNavigationState));
exports.CCurveNavigationThroughSimplerShapeSpaces = CCurveNavigationThroughSimplerShapeSpaces;
var CCurveNavigationStrictlyInsideShapeSpace = /** @class */ (function (_super) {
    __extends(CCurveNavigationStrictlyInsideShapeSpace, _super);
    function CCurveNavigationStrictlyInsideShapeSpace(navigationCurveModel) {
        var _this = _super.call(this, navigationCurveModel) || this;
        // JCL 09/11/2021 Set up a curve analyzer whenever the navigation state changes
        _this.optimizedCurve = _this.navigationCurveModel.optimizedCurve;
        var curveShapeSpaceNavigator = _this.navigationCurveModel.curveShapeSpaceNavigator;
        if (curveShapeSpaceNavigator.navigationState instanceof CCurveNavigationWithoutShapeSpaceMonitoring) {
            curveShapeSpaceNavigator.navigationState = _this;
            _this.navigationCurveModel.navigationState = _this;
            _this.shapeNavigableCurve.clampedPoints[0] = 0;
            _this.shapeNavigableCurve.changeCurveConstraintStrategy(new CurveConstraintStrategy_1.CurveConstraintClampedFirstControlPoint(_this.shapeNavigableCurve.curveConstraints));
        }
        else {
            curveShapeSpaceNavigator.navigationState = _this;
            _this.navigationCurveModel.navigationState = _this;
        }
        _this._curveAnalyserCurrentCurve = new CurveAnalyzer_1.ClosedCurveAnalyzer(_this.currentCurve, _this.navigationCurveModel);
        _this._curveAnalyserOptimizedCurve = new CurveAnalyzer_1.ClosedCurveAnalyzer(_this.optimizedCurve, _this.navigationCurveModel);
        return _this;
    }
    Object.defineProperty(CCurveNavigationStrictlyInsideShapeSpace.prototype, "curveAnalyserCurrentCurve", {
        get: function () {
            return this._curveAnalyserCurrentCurve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CCurveNavigationStrictlyInsideShapeSpace.prototype, "curveAnalyserOptimizedCurve", {
        get: function () {
            return this._curveAnalyserOptimizedCurve;
        },
        enumerable: false,
        configurable: true
    });
    CCurveNavigationStrictlyInsideShapeSpace.prototype.setNavigationStrictlyInsideShapeSpace = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "setNavigationStrictlyInsideShapeSpace", "No navigation process to change there.");
        warning.logMessageToConsole();
    };
    CCurveNavigationStrictlyInsideShapeSpace.prototype.curveConstraintsMonitoring = function () {
        this.shapeNavigableCurve.curveConstraints.processConstraint();
        this.navigationCurveModel.currentCurve = this.navigationCurveModel.optimizedCurve;
        this.currentCurve = this.navigationCurveModel.currentCurve.clone();
        this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy.currentCurve = this.currentCurve.clone();
    };
    CCurveNavigationStrictlyInsideShapeSpace.prototype.navigate = function (selectedControlPoint, x, y) {
        this.navigationCurveModel.updateCurrentCurve(selectedControlPoint, new Vector2d_1.Vector2d(x, y));
        this.curveAnalyserCurrentCurve.updateCurrent();
        this.navigationCurveModel.seqDiffEventsCurrentCurve = this.navigationCurveModel.curveAnalyserCurrentCurve.sequenceOfDifferentialEvents;
        this.navigationCurveModel.setTargetCurve();
        this.navigationCurveModel.optimizationProblemParam.updateConstraintBounds = true;
        try {
            if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.CCurveShapeMonitoringStrategy) {
                this.navigationCurveModel.curveShapeMonitoringStrategy.optimizer.optimize_using_trust_region(CurveShapeSpaceNavigator_1.CONVERGENCE_THRESHOLD, CurveShapeSpaceNavigator_1.MAX_TRUST_REGION_RADIUS, CurveShapeSpaceNavigator_1.MAX_NB_STEPS_TRUST_REGION_OPTIMIZER);
            }
            // this.navigationCurveModel.curveControl.optimizer.optimize_using_trust_region(CONVERGENCE_THRESHOLD, MAX_TRUST_REGION_RADIUS, MAX_NB_STEPS_TRUST_REGION_OPTIMIZER);
            // this.curveShapeSpaceNavigator.optimizedCurve = this.curveShapeSpaceNavigator.optimizationProblem.spline.clone();
            if (this.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.CCurveShapeMonitoringStrategy) {
                this.navigationCurveModel.optimizedCurve = this.navigationCurveModel.curveShapeMonitoringStrategy.optimizationProblem.spline;
            }
            this.optimizedCurve = this.navigationCurveModel.optimizedCurve.clone();
            this.curveConstraintsMonitoring();
            this.curveAnalyserOptimizedCurve.updateOptimized();
            this.navigationCurveModel.seqDiffEventsOptimizedCurve = this.navigationCurveModel.curveAnalyserOptimizedCurve.sequenceOfDifferentialEvents;
            var seqComparator = new ComparatorOfSequencesDiffEvents_1.ComparatorOfSequencesOfDiffEvents(this.navigationCurveModel.seqDiffEventsCurrentCurve, this.navigationCurveModel.seqDiffEventsOptimizedCurve);
            // to be added later
            // seqComparator.locateNeiboringEvents();
        }
        catch (e) {
        }
    };
    return CCurveNavigationStrictlyInsideShapeSpace;
}(ClosedCurveNavigationState));
exports.CCurveNavigationStrictlyInsideShapeSpace = CCurveNavigationStrictlyInsideShapeSpace;


/***/ }),

/***/ "./src/curveShapeSpaceNavigation/ShapeSpaceBoundaryEnforcer.ts":
/*!*********************************************************************!*\
  !*** ./src/curveShapeSpaceNavigation/ShapeSpaceBoundaryEnforcer.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StrictShapeSpacesBoundaryEnforcerClosedCurve = exports.StrictShapeSpacesBoundaryEnforcerOpenCurve = exports.NestedShapeSpacesBoundaryEnforcerOpenCurve = exports.AbstractShapeSpaceBoundaryEnforcer = exports.EventsAtCurveExtremities = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var NeighboringEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/NeighboringEvents */ "./src/sequenceOfDifferentialEvents/NeighboringEvents.ts");
var EventsAtCurveExtremities = /** @class */ (function () {
    function EventsAtCurveExtremities() {
        this._start = false;
        this._end = false;
    }
    Object.defineProperty(EventsAtCurveExtremities.prototype, "start", {
        get: function () {
            return this._start;
        },
        set: function (start) {
            this._start = start;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventsAtCurveExtremities.prototype, "end", {
        get: function () {
            return this._end;
        },
        set: function (end) {
            this._end = end;
        },
        enumerable: false,
        configurable: true
    });
    return EventsAtCurveExtremities;
}());
exports.EventsAtCurveExtremities = EventsAtCurveExtremities;
var AbstractShapeSpaceBoundaryEnforcer = /** @class */ (function () {
    function AbstractShapeSpaceBoundaryEnforcer() {
        this.status = false;
        this._neighboringEvents = [];
    }
    Object.defineProperty(AbstractShapeSpaceBoundaryEnforcer.prototype, "neighboringEvents", {
        get: function () {
            return this._neighboringEvents;
        },
        enumerable: false,
        configurable: true
    });
    AbstractShapeSpaceBoundaryEnforcer.prototype.activate = function () {
        this.status = true;
    };
    AbstractShapeSpaceBoundaryEnforcer.prototype.isActive = function () {
        if (this.status) {
            return true;
        }
        else {
            return false;
        }
    };
    AbstractShapeSpaceBoundaryEnforcer.prototype.deactivate = function () {
        this.status = false;
    };
    AbstractShapeSpaceBoundaryEnforcer.prototype.addTransitionOfEvents = function (neighborinhEvents) {
        this._neighboringEvents = neighborinhEvents.slice();
    };
    AbstractShapeSpaceBoundaryEnforcer.prototype.hasTransitionsOfEvents = function () {
        var e_1, _a;
        if (this._neighboringEvents.length > 0) {
            var validList = true;
            try {
                for (var _b = __values(this._neighboringEvents), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var neighboringEvent = _c.value;
                    if (neighboringEvent.type === NeighboringEvents_1.NeighboringEventsType.none)
                        validList = false;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (validList) {
                return true;
            }
            else {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "hasTransitionsOfEvents", "The list of current differential events is inconsistent");
                error.logMessageToConsole();
                return false;
            }
        }
        else {
            return false;
        }
    };
    AbstractShapeSpaceBoundaryEnforcer.prototype.resetNeighboringEvents = function () {
        this._neighboringEvents = [];
    };
    return AbstractShapeSpaceBoundaryEnforcer;
}());
exports.AbstractShapeSpaceBoundaryEnforcer = AbstractShapeSpaceBoundaryEnforcer;
var NestedShapeSpacesBoundaryEnforcerOpenCurve = /** @class */ (function (_super) {
    __extends(NestedShapeSpacesBoundaryEnforcerOpenCurve, _super);
    function NestedShapeSpacesBoundaryEnforcerOpenCurve() {
        var _this = _super.call(this) || this;
        _this._curvExtremumEventAtExtremity = new EventsAtCurveExtremities();
        _this._inflectionEventAtExtremity = new EventsAtCurveExtremities();
        return _this;
    }
    Object.defineProperty(NestedShapeSpacesBoundaryEnforcerOpenCurve.prototype, "curvExtremumEventAtExtremity", {
        get: function () {
            return this._curvExtremumEventAtExtremity;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NestedShapeSpacesBoundaryEnforcerOpenCurve.prototype, "inflectionEventAtExtremity", {
        get: function () {
            return this._inflectionEventAtExtremity;
        },
        enumerable: false,
        configurable: true
    });
    NestedShapeSpacesBoundaryEnforcerOpenCurve.prototype.isTransitionAtExtremity = function () {
        var isTransition = false;
        if (this.isCurvatureExtTransitionAtExtremity() || this.isInflectionTransitionAtExtremity()
            || this.isMixedTransitionAtExtremity())
            isTransition = true;
        return isTransition;
    };
    NestedShapeSpacesBoundaryEnforcerOpenCurve.prototype.isCurvatureExtTransitionAtExtremity = function () {
        var isTransition = false;
        if ((this._curvExtremumEventAtExtremity.start || this._curvExtremumEventAtExtremity.end)
            && !(this._inflectionEventAtExtremity.start || this._inflectionEventAtExtremity.end))
            isTransition = true;
        return isTransition;
    };
    NestedShapeSpacesBoundaryEnforcerOpenCurve.prototype.isInflectionTransitionAtExtremity = function () {
        var isTransition = false;
        if (!(this._curvExtremumEventAtExtremity.start || this._curvExtremumEventAtExtremity.end)
            && (this._inflectionEventAtExtremity.start || this._inflectionEventAtExtremity.end))
            isTransition = true;
        return isTransition;
    };
    NestedShapeSpacesBoundaryEnforcerOpenCurve.prototype.isMixedTransitionAtExtremity = function () {
        var isTransition = false;
        if (this._curvExtremumEventAtExtremity.start && this._inflectionEventAtExtremity.end
            && !this._curvExtremumEventAtExtremity.end && !this._inflectionEventAtExtremity.start)
            isTransition = true;
        if (this._curvExtremumEventAtExtremity.end && this._inflectionEventAtExtremity.start
            && !this._curvExtremumEventAtExtremity.start && !this._inflectionEventAtExtremity.end)
            isTransition = true;
        return isTransition;
    };
    NestedShapeSpacesBoundaryEnforcerOpenCurve.prototype.resetEventsAtExtremities = function () {
        this._curvExtremumEventAtExtremity = new EventsAtCurveExtremities();
        this._inflectionEventAtExtremity = new EventsAtCurveExtremities();
    };
    NestedShapeSpacesBoundaryEnforcerOpenCurve.prototype.reset = function () {
        this.resetNeighboringEvents();
        this.resetEventsAtExtremities();
        this.status = false;
    };
    NestedShapeSpacesBoundaryEnforcerOpenCurve.prototype.configureBoundaryEnforcer = function (filteredSeqComparator) {
        if (filteredSeqComparator.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryDisappear
            || filteredSeqComparator.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryAppear) {
            this.curvExtremumEventAtExtremity.start = true;
        }
        else if (filteredSeqComparator.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryDisappear
            || filteredSeqComparator.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryAppear) {
            this.curvExtremumEventAtExtremity.end = true;
        }
        else if (filteredSeqComparator.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryDisappear
            || filteredSeqComparator.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryAppear) {
            this.inflectionEventAtExtremity.start = true;
        }
        else if (filteredSeqComparator.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryDisappear
            || filteredSeqComparator.neighboringEvents[0].type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryAppear) {
            this.inflectionEventAtExtremity.end = true;
        }
        this.activate();
        this.neighboringEvents.push(filteredSeqComparator.neighboringEvents[0]);
    };
    return NestedShapeSpacesBoundaryEnforcerOpenCurve;
}(AbstractShapeSpaceBoundaryEnforcer));
exports.NestedShapeSpacesBoundaryEnforcerOpenCurve = NestedShapeSpacesBoundaryEnforcerOpenCurve;
var StrictShapeSpacesBoundaryEnforcerOpenCurve = /** @class */ (function (_super) {
    __extends(StrictShapeSpacesBoundaryEnforcerOpenCurve, _super);
    function StrictShapeSpacesBoundaryEnforcerOpenCurve() {
        var _this = _super.call(this) || this;
        _this._curvatureDerivativeCPOpt = [];
        _this._newEvent = false;
        return _this;
    }
    Object.defineProperty(StrictShapeSpacesBoundaryEnforcerOpenCurve.prototype, "curvatureDerivativeCPOpt", {
        get: function () {
            return this._curvatureDerivativeCPOpt;
        },
        set: function (curvatureDerivativeCPOpt) {
            this._curvatureDerivativeCPOpt = curvatureDerivativeCPOpt.slice();
        },
        enumerable: false,
        configurable: true
    });
    StrictShapeSpacesBoundaryEnforcerOpenCurve.prototype.newEventExist = function () {
        this._newEvent = true;
    };
    StrictShapeSpacesBoundaryEnforcerOpenCurve.prototype.removeNewEvent = function () {
        this._newEvent = false;
    };
    StrictShapeSpacesBoundaryEnforcerOpenCurve.prototype.hasNewEvent = function () {
        if (this._newEvent) {
            return true;
        }
        else {
            return false;
        }
    };
    return StrictShapeSpacesBoundaryEnforcerOpenCurve;
}(NestedShapeSpacesBoundaryEnforcerOpenCurve));
exports.StrictShapeSpacesBoundaryEnforcerOpenCurve = StrictShapeSpacesBoundaryEnforcerOpenCurve;
var StrictShapeSpacesBoundaryEnforcerClosedCurve = /** @class */ (function (_super) {
    __extends(StrictShapeSpacesBoundaryEnforcerClosedCurve, _super);
    function StrictShapeSpacesBoundaryEnforcerClosedCurve() {
        var _this = _super.call(this) || this;
        _this._curvatureDerivativeCPOpt = [];
        _this._newEvent = false;
        return _this;
    }
    StrictShapeSpacesBoundaryEnforcerClosedCurve.prototype.reset = function () {
        this.resetNeighboringEvents();
        this.status = false;
    };
    StrictShapeSpacesBoundaryEnforcerClosedCurve.prototype.newEventExist = function () {
        this._newEvent = true;
    };
    StrictShapeSpacesBoundaryEnforcerClosedCurve.prototype.removeNewEvent = function () {
        this._newEvent = false;
    };
    StrictShapeSpacesBoundaryEnforcerClosedCurve.prototype.hasNewEvent = function () {
        if (this._newEvent) {
            return true;
        }
        else {
            return false;
        }
    };
    return StrictShapeSpacesBoundaryEnforcerClosedCurve;
}(AbstractShapeSpaceBoundaryEnforcer));
exports.StrictShapeSpacesBoundaryEnforcerClosedCurve = StrictShapeSpacesBoundaryEnforcerClosedCurve;


/***/ }),

/***/ "./src/curveShapeSpaceNavigation/ShapeSpaceDiffEventsStructure.ts":
/*!************************************************************************!*\
  !*** ./src/curveShapeSpaceNavigation/ShapeSpaceDiffEventsStructure.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Set of parameters monitoring the state of the navigation process
 * @_activeControlInflections : if true activates the optimizer to navigate a shape space with a constant set of inflections
 * @_activeControlCurvatureExtrema : if true activates the optimizer to navigate a shape space with a constant set of curvature extrema
 * @_activeNavigationWithOptimizer : if true activates the optimizer to navigate a shape space in accordance with
 * _activeControlInflections and _activeControlCurvatureExtrema settings
 * if _activeControlInflections and _activeControlCurvatureExtrema are set to false both, _activeNavigationWithOptimizer must be set to false too
 * (there is no need for an optimization process)
 * when the _activeNavigationWithOptimizer is set to false, the shape space navigation process halts but the _activeControlInflections
 * and _activeControlCurvatureExtrema are not reset
 * @_slidingDifferentialEvents : if true the differential events are allowed to slide along the curve. A complementary feature
 * to be taken into account by the optimizer
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShapeSpaceDiffEventsStructure = exports.EventMgmtState = void 0;
var CurveCategory_1 = __webpack_require__(/*! ../shapeNavigableCurve/CurveCategory */ "./src/shapeNavigableCurve/CurveCategory.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ClosedCurveModel_1 = __webpack_require__(/*! ../newModels/ClosedCurveModel */ "./src/newModels/ClosedCurveModel.ts");
var EventMgmtState;
(function (EventMgmtState) {
    EventMgmtState[EventMgmtState["Active"] = 0] = "Active";
    EventMgmtState[EventMgmtState["Inactive"] = 1] = "Inactive";
    EventMgmtState[EventMgmtState["NotApplicable"] = 2] = "NotApplicable";
})(EventMgmtState = exports.EventMgmtState || (exports.EventMgmtState = {}));
var ShapeSpaceDiffEventsStructure = /** @class */ (function () {
    function ShapeSpaceDiffEventsStructure(shapeNavigableCurve, curveShapeSpaceNavigator) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'constructor', 'start constructor.');
        warning.logMessageToConsole();
        this._curveCategory = shapeNavigableCurve.curveCategory;
        this._curveShapeSpaceNavigator = curveShapeSpaceNavigator;
        this._activeNavigationWithOptimizer = false;
        this._activeControlInflections = false;
        // Initializes activeControlCurvatureExtrema, controlOfInflection in accordance with the navigation mode:
        //      mode 0: activeControlCurvatureExtrema = false, controlOfInflection = false,
        //      mode 1, mode 2: activeControlCurvatureExtrema = true, controlOfInflection = true
        this._activeControlCurvatureExtrema = false;
        // Initializes slidingDifferentialEvents in accordance with the navigation mode:
        //      mode 0: slidingDifferentialEvents = false
        //      mode 1, mode 2: slidingDifferentialEvents =  true
        this._slidingDifferentialEvents = false;
        if (this._curveCategory instanceof CurveCategory_1.OpenPlanarCurve) {
            this._managementOfEventsAtExtremities = EventMgmtState.Inactive;
        }
        else if (this._curveCategory instanceof ClosedCurveModel_1.ClosedCurveModel) {
            this._managementOfEventsAtExtremities = EventMgmtState.NotApplicable;
        }
        else {
            this._managementOfEventsAtExtremities = EventMgmtState.NotApplicable;
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "constructor", "Curve category type unknown.");
            error.logMessageToConsole();
        }
    }
    Object.defineProperty(ShapeSpaceDiffEventsStructure.prototype, "activeControlInflections", {
        get: function () {
            return this._activeControlInflections;
        },
        set: function (controlOfInflections) {
            this._activeControlInflections = controlOfInflections;
            if (this._activeControlInflections === false && this._activeControlCurvatureExtrema === false) {
                this._activeNavigationWithOptimizer = false;
            }
            else {
                this._activeNavigationWithOptimizer = true;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeSpaceDiffEventsStructure.prototype, "activeControlCurvatureExtrema", {
        get: function () {
            return this._activeControlCurvatureExtrema;
        },
        set: function (controlOfCurvatureExtrema) {
            this._activeControlCurvatureExtrema = controlOfCurvatureExtrema;
            if (this._activeControlInflections === false && this._activeControlCurvatureExtrema === false) {
                this._activeNavigationWithOptimizer = false;
            }
            else {
                this._activeNavigationWithOptimizer = true;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeSpaceDiffEventsStructure.prototype, "slidingDifferentialEvents", {
        get: function () {
            return this._slidingDifferentialEvents;
        },
        set: function (slidingDiffEvents) {
            this._slidingDifferentialEvents = slidingDiffEvents;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeSpaceDiffEventsStructure.prototype, "activeNavigationWithOptimizer", {
        get: function () {
            return this._activeNavigationWithOptimizer;
        },
        set: function (activeNavigation) {
            this._activeNavigationWithOptimizer = activeNavigation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeSpaceDiffEventsStructure.prototype, "managementOfEventsAtExtremities", {
        get: function () {
            return this._managementOfEventsAtExtremities;
        },
        set: function (managementOfEventsAtExtremities) {
            if (this._curveCategory instanceof CurveCategory_1.OpenPlanarCurve) {
                if (managementOfEventsAtExtremities === EventMgmtState.NotApplicable && this._slidingDifferentialEvents) {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "managementOfEventsAtExtremities", "Event management state incompatible with the open curve category");
                    error.logMessageToConsole();
                }
                else {
                    this._managementOfEventsAtExtremities = managementOfEventsAtExtremities;
                }
            }
            else if (this._curveCategory instanceof ClosedCurveModel_1.ClosedCurveModel) {
                if (managementOfEventsAtExtremities !== EventMgmtState.NotApplicable) {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "managementOfEventsAtExtremities", "Event management state incompatible with the closed curve category");
                    error.logMessageToConsole();
                }
                else {
                    this._managementOfEventsAtExtremities = managementOfEventsAtExtremities;
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeSpaceDiffEventsStructure.prototype, "curveCategory", {
        get: function () {
            return this._curveCategory;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeSpaceDiffEventsStructure.prototype, "curveShapeSpaceNavigator", {
        get: function () {
            return this._curveShapeSpaceNavigator;
        },
        enumerable: false,
        configurable: true
    });
    ShapeSpaceDiffEventsStructure.prototype.reset = function () {
        this._activeNavigationWithOptimizer = false;
        // this._activeControlInflections = false;
        // this._activeControlCurvatureExtrema = false;
        // this._slidingDifferentialEvents = false;
    };
    ShapeSpaceDiffEventsStructure.prototype.stop = function () {
        this._activeNavigationWithOptimizer = false;
    };
    ShapeSpaceDiffEventsStructure.prototype.restart = function () {
        this._activeNavigationWithOptimizer = true;
    };
    return ShapeSpaceDiffEventsStructure;
}());
exports.ShapeSpaceDiffEventsStructure = ShapeSpaceDiffEventsStructure;


/***/ }),

/***/ "./src/errorProcessing/ErrorLoging.ts":
/*!********************************************!*\
  !*** ./src/errorProcessing/ErrorLoging.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WarningLog = exports.ErrorLog = exports.ErrorProcessing = void 0;
var ErrorProcessing = /** @class */ (function () {
    function ErrorProcessing(className, functionName, message) {
        this.className = className;
        this.functionName = functionName;
        if (message !== undefined) {
            this.message = message;
        }
    }
    return ErrorProcessing;
}());
exports.ErrorProcessing = ErrorProcessing;
var ErrorLog = /** @class */ (function (_super) {
    __extends(ErrorLog, _super);
    function ErrorLog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ErrorLog.prototype.logMessageToConsole = function () {
        console.log(this.className + ", " + this.functionName + ":");
        // try {
        //     throw new Error(this.message);
        // } catch(e) {
        //     console.error(e);
        // }
        console.error(new Error(this.message));
    };
    return ErrorLog;
}(ErrorProcessing));
exports.ErrorLog = ErrorLog;
var WarningLog = /** @class */ (function (_super) {
    __extends(WarningLog, _super);
    function WarningLog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WarningLog.prototype.logMessageToConsole = function () {
        console.log(this.className + ", " + this.functionName + ": " + this.message);
    };
    return WarningLog;
}(ErrorProcessing));
exports.WarningLog = WarningLog;


/***/ }),

/***/ "./src/filecontrollers/FileController.ts":
/*!***********************************************!*\
  !*** ./src/filecontrollers/FileController.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileController = void 0;
var BSplineR1toR2_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2 */ "./src/newBsplines/BSplineR1toR2.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var Vector2d_1 = __webpack_require__(/*! ../mathVector/Vector2d */ "./src/mathVector/Vector2d.ts");
var file_saver_1 = __webpack_require__(/*! file-saver */ "./node_modules/file-saver/dist/FileSaver.min.js");
var FileController = /** @class */ (function () {
    function FileController(curveModeler, curveSceneController) {
        this.curveModeler = curveModeler;
        this._curveModel = curveModeler.curveCategory.curveModel;
        this._curveSceneController = curveSceneController;
    }
    Object.defineProperty(FileController.prototype, "curveModel", {
        get: function () {
            return this._curveModel;
        },
        enumerable: false,
        configurable: true
    });
    /* JCL 2020/10/13 Add curve serialization to file */
    FileController.prototype.saveCurveToFile = function (currentFileName) {
        if (this._curveModel !== undefined) {
            var curveBlob = new Blob([JSON.stringify(this._curveModel.spline.knots) + JSON.stringify(this._curveModel.spline.controlPoints)], { type: "application/json", });
            file_saver_1.saveAs(curveBlob, currentFileName);
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "saveCurveToFile", "Cannot save the current curve to a file. Undefined curve model.");
            error.logMessageToConsole();
        }
    };
    FileController.prototype.inconsistentFileFormatMessage = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "loadCurveFromFile", "inconsistent file format. Unable to load the curve.");
        warning.logMessageToConsole();
        return undefined;
    };
    FileController.prototype.loadCurveFromFile = function (aString) {
        var e_1, _a;
        var locationClosingBracket = aString.indexOf("]");
        if (locationClosingBracket <= 0)
            this.inconsistentFileFormatMessage();
        var knotVector = aString.slice(0, locationClosingBracket + 1);
        var knots = JSON.parse(knotVector);
        if (typeof (knots) !== "object" ||
            (typeof (knots) === "object" && typeof (knots[0]) !== "number"))
            this.inconsistentFileFormatMessage();
        var controlPointVector = aString.slice(locationClosingBracket + 1);
        var controlPoints = JSON.parse(controlPointVector);
        if (typeof (controlPoints) !== "object" ||
            (typeof (controlPoints) === "object" && typeof (controlPoints[0].x) !== "number"))
            this.inconsistentFileFormatMessage();
        var CPs = [];
        try {
            for (var controlPoints_1 = __values(controlPoints), controlPoints_1_1 = controlPoints_1.next(); !controlPoints_1_1.done; controlPoints_1_1 = controlPoints_1.next()) {
                var cp = controlPoints_1_1.value;
                CPs.push(new Vector2d_1.Vector2d(cp.x, cp.y));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (controlPoints_1_1 && !controlPoints_1_1.done && (_a = controlPoints_1.return)) _a.call(controlPoints_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var tmpSpline = BSplineR1toR2_1.create_BSplineR1toR2V2d(CPs, knots);
        return tmpSpline;
    };
    FileController.prototype.resetCurveContext = function (knots, controlPoints) {
        var newSpline = BSplineR1toR2_1.create_BSplineR1toR2V2d(controlPoints, knots);
        if (this._curveModel !== undefined) {
            this._curveModel.setSpline(newSpline);
            this.curveModeler.notifyObservers();
            this._curveSceneController.curveModel = this._curveModel;
            this._curveSceneController.initCurveSceneView();
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "resetCurveContext", "Cannot load the current file content into a curve model. Undefined curve model.");
            error.logMessageToConsole();
        }
    };
    return FileController;
}());
exports.FileController = FileController;


/***/ }),

/***/ "./src/linearAlgebra/CholeskyDecomposition.ts":
/*!****************************************************!*\
  !*** ./src/linearAlgebra/CholeskyDecomposition.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CholeskyDecomposition = void 0;
/**
 * A decomposition of a positive-definite matirx into a product of a lower triangular matrix and its conjugate transpose
 */
var CholeskyDecomposition = /** @class */ (function () {
    /**
     * The values of the decomposition are stored in the lower triangular portion of the matrix g
     * @param matrix Matrix
     */
    function CholeskyDecomposition(matrix) {
        this.success = false;
        this.CLOSE_TO_ZERO = 10e-8;
        this.firstNonPositiveDefiniteLeadingSubmatrixSize = -1;
        this.g = matrix.squareMatrix();
        var n = this.g.shape[0];
        if (this.g.get(0, 0) < this.CLOSE_TO_ZERO) {
            return;
        }
        var sqrtGjj = Math.sqrt(this.g.get(0, 0));
        for (var i = 0; i < n; i += 1) {
            this.g.divideAt(i, 0, sqrtGjj);
        }
        for (var j = 1; j < n; j += 1) {
            for (var i = j; i < n; i += 1) {
                var sum = 0;
                for (var k = 0; k < j; k += 1) {
                    sum += this.g.get(i, k) * this.g.get(j, k);
                }
                this.g.substractAt(i, j, sum);
            }
            if (this.g.get(j, j) < this.CLOSE_TO_ZERO) {
                this.firstNonPositiveDefiniteLeadingSubmatrixSize = j + 1;
                return;
            }
            sqrtGjj = Math.sqrt(this.g.get(j, j));
            for (var i = j; i < n; i += 1) {
                this.g.divideAt(i, j, sqrtGjj);
            }
        }
        for (var j = 0; j < n; j += 1) {
            for (var i = 0; i < j; i += 1) {
                this.g.set(i, j, 0);
            }
        }
        this.success = true;
    }
    /**
     * Solve the linear system
     * @param b Vector
     * @return The vector x
     * @throws If the Cholesky decomposition failed
     */
    CholeskyDecomposition.prototype.solve = function (b) {
        'use strict';
        // See Numerical Recipes Third Edition p. 101
        if (!this.success) {
            throw new Error("CholeskyDecomposistion.success === false");
        }
        if (b.length !== this.g.shape[0]) {
            throw new Error("The size of the cholesky decomposed matrix g and the vector b do not match");
        }
        var n = this.g.shape[0];
        var x = b.slice();
        // Ly = b
        for (var i = 0; i < n; i += 1) {
            var sum = b[i];
            for (var k = i - 1; k >= 0; k -= 1) {
                sum -= this.g.get(i, k) * x[k];
            }
            x[i] = sum / this.g.get(i, i);
        }
        // LT x = Y
        for (var i = n - 1; i >= 0; i -= 1) {
            var sum = x[i];
            for (var k = i + 1; k < n; k += 1) {
                sum -= this.g.get(k, i) * x[k];
            }
            x[i] = sum / this.g.get(i, i);
        }
        return x;
    };
    /**
     * Solve the linear equation Lower triangular matrix LT * x = b
     * @param b Vector
     */
    CholeskyDecomposition.prototype.solve_LT_result_equal_b = function (b) {
        var n = this.g.shape[0];
        var x = b.slice();
        for (var i = 0; i < n; i += 1) {
            var sum = b[i];
            for (var k = i - 1; k >= 0; k -= 1) {
                sum -= this.g.get(i, k) * x[k];
            }
            x[i] = sum / this.g.get(i, i);
        }
        return x;
    };
    return CholeskyDecomposition;
}());
exports.CholeskyDecomposition = CholeskyDecomposition;


/***/ }),

/***/ "./src/linearAlgebra/DenseMatrix.ts":
/*!******************************************!*\
  !*** ./src/linearAlgebra/DenseMatrix.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DenseMatrix = void 0;
/**
 * A dense matrix
 */
var DenseMatrix = /** @class */ (function () {
    /**
     * Create a square matrix
     * @param nrows Number of rows
     * @param ncols Number of columns
     * @param data A row after row flat array
     * @throws If data length is not equal to nrows*ncols
     */
    function DenseMatrix(nrows, ncols, data) {
        this._shape = [nrows, ncols];
        if (data) {
            if (data.length !== this.shape[0] * this.shape[1]) {
                throw new Error("Dense matrix constructor expect the data to have nrows*ncols length");
            }
            this.data = data.slice();
        }
        else {
            this.data = [];
            for (var i = 0; i < this.shape[0] * this.shape[1]; i += 1) {
                this.data.push(0);
            }
        }
    }
    Object.defineProperty(DenseMatrix.prototype, "shape", {
        /**
         * Returns the shape of the matrix : [number of rows, number of columns]
         */
        get: function () {
            return this._shape;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Return the corresponding index in the flat row by row data vector
     * @param row The row index
     * @param column The column index
     */
    DenseMatrix.prototype.dataIndex = function (row, column) {
        var n = row * this.shape[1] + column;
        return n;
    };
    /**
     * Return the value at a given row and column position
     * @param row The row index
     * @param column The column index
     * @return Scalar
     * @throws If an index is out of range
     */
    DenseMatrix.prototype.get = function (row, column) {
        this.checkRowRange(row);
        this.checkColumnRange(column);
        return this.data[this.dataIndex(row, column)];
    };
    /**
     * Set a given value at a given row and column position
     * @param row The row index
     * @param column The column index
     * @param value The new value
     * @throws If an index is out of range
     */
    DenseMatrix.prototype.set = function (row, column, value) {
        this.checkRowRange(row);
        this.checkColumnRange(column);
        this.data[this.dataIndex(row, column)] = value;
    };
    /**
     * Check that the column index is inside appropriate range
     * @param index The column index
     * @throws If index is out of range
     */
    DenseMatrix.prototype.checkColumnRange = function (index) {
        if (index < 0 || index >= this.shape[1]) {
            throw new Error("DenseMatrix column index out of range");
        }
    };
    /**
     * Check that the row index is inside appropriate range
     * @param index The row index
     * @throws If index is out of range
     */
    DenseMatrix.prototype.checkRowRange = function (index) {
        if (index < 0 || index >= this.shape[0]) {
            throw new Error("DenseMatrix row index out of range");
        }
    };
    return DenseMatrix;
}());
exports.DenseMatrix = DenseMatrix;


/***/ }),

/***/ "./src/linearAlgebra/DiagonalMatrix.ts":
/*!*********************************************!*\
  !*** ./src/linearAlgebra/DiagonalMatrix.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.identityMatrix = exports.DiagonalMatrix = void 0;
/**
 * An identity matrix
 */
var DiagonalMatrix = /** @class */ (function () {
    /**
     * Create a Symmetric Matrix
     * @param size The number of rows or the number columns
     * @param data The matrix data in a flat vector
     */
    function DiagonalMatrix(size, data) {
        this._shape = [size, size];
        if (data) {
            if (data.length !== size) {
                throw new Error("Diagonal matrix constructor expect the data to have size length");
            }
            this.data = data.slice();
        }
        else {
            this.data = [];
            var n = size;
            for (var i = 0; i < n; i += 1) {
                this.data.push(0);
            }
        }
    }
    Object.defineProperty(DiagonalMatrix.prototype, "shape", {
        /**
         * Returns the shape of the matrix : [number of rows, number of columns]
         */
        get: function () {
            return this._shape;
        },
        enumerable: false,
        configurable: true
    });
    /**
 * Returns the value at a given row and column position
 * @param row The row index
 * @param column The column index
 * @return Scalar
 * @throws If an index is out of range
 */
    DiagonalMatrix.prototype.get = function (row, column) {
        this.checkRange(row, column);
        return this.data[row];
    };
    /**
     * Set a given value at a given row and column position
     * @param row The row index
     * @param column The column index
     * @param value The new value
     * @throws If an index is out of range
     */
    DiagonalMatrix.prototype.set = function (row, column, value) {
        this.checkRange(row, column);
        this.data[row] = value;
    };
    /**
     * Check that the index is inside appropriate range
     * @param index The column or the row index
     * @throws If an index is out of range
     */
    DiagonalMatrix.prototype.checkRange = function (row, column) {
        if (row < 0 || row >= this.shape[0] || row != column) {
            throw new Error("DiagonalMatrix index is out of range");
        }
    };
    return DiagonalMatrix;
}());
exports.DiagonalMatrix = DiagonalMatrix;
function identityMatrix(n) {
    var result = new DiagonalMatrix(n);
    for (var i = 0; i < n; i += 1) {
        result.set(i, i, 1);
    }
    return result;
}
exports.identityMatrix = identityMatrix;


/***/ }),

/***/ "./src/linearAlgebra/MathVectorBasicOperations.ts":
/*!********************************************************!*\
  !*** ./src/linearAlgebra/MathVectorBasicOperations.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sign = exports.containsNaN = exports.randomVector = exports.isZeroVector = exports.product_v1_v2t = exports.product_v_vt = exports.zeroVector = exports.norm1 = exports.norm = exports.squaredNorm = exports.addSecondVectorToFirst = exports.addTwoVectors = exports.dotProduct = exports.saxpy2 = exports.saxpy = exports.divideVectorByScalar = exports.multiplyVectorByScalar = void 0;
var SquareMatrix_1 = __webpack_require__(/*! ./SquareMatrix */ "./src/linearAlgebra/SquareMatrix.ts");
var DenseMatrix_1 = __webpack_require__(/*! ./DenseMatrix */ "./src/linearAlgebra/DenseMatrix.ts");
/**
 * Multiply a vector by a scalar
 * @param vector vector
 * @param value scalar
 */
function multiplyVectorByScalar(vector, value) {
    var result = [];
    for (var i = 0; i < vector.length; i += 1) {
        result.push(vector[i] * value);
    }
    return result;
}
exports.multiplyVectorByScalar = multiplyVectorByScalar;
/**
 * Divide a vector by a scalar
 * @param vector Vector
 * @param value Scalar
 * @throws If the scalar value is zero
 */
function divideVectorByScalar(vector, value) {
    if (value === 0) {
        throw new Error("Division by zero");
    }
    var result = [];
    for (var i = 0; i < vector.length; i += 1) {
        result.push(vector[i] / value);
    }
    return result;
}
exports.divideVectorByScalar = divideVectorByScalar;
/**
 * A standard function in basic linear algebra : y = ax + y
 * @param a Scalar
 * @param x Vector
 * @param y Vector
 * @throws If x and y have different length
 */
function saxpy(a, x, y) {
    if (x.length !== y.length) {
        throw new Error("Adding two vectors of different length");
    }
    for (var i = 0; i < x.length; i += 1) {
        y[i] += a * x[i];
    }
}
exports.saxpy = saxpy;
/**
 * A standard function in basic linear algebra : z = ax + y
 * @param a Scalar
 * @param x Vector
 * @param y Vector
 * @returns ax + y
 * @throws If x and y have different length
 */
function saxpy2(a, x, y) {
    if (x.length !== y.length) {
        throw new Error("Adding two vectors of different length");
    }
    var result = [];
    for (var i = 0; i < x.length; i += 1) {
        result.push(a * x[i] + y[i]);
    }
    return result;
}
exports.saxpy2 = saxpy2;
/**
 * Compute the dot product of two vectors
 * @param x Vector
 * @param y Vector
 * @return The scalar result
 * @throws If x and y have different length
 */
function dotProduct(x, y) {
    if (x.length !== y.length) {
        throw new Error("Making the dot product of two vectors of different length");
    }
    var result = 0;
    for (var i = 0; i < x.length; i += 1) {
        result += x[i] * y[i];
    }
    return result;
}
exports.dotProduct = dotProduct;
/**
 * Add two vectors
 * @param x Vector
 * @param y Vector
 * @return Vector
 * @throws If x and y have different length
 */
function addTwoVectors(x, y) {
    if (x.length !== y.length) {
        throw new Error("Adding two vectors of different length");
    }
    var result = [];
    for (var i = 0; i < x.length; i += 1) {
        result.push(x[i] + y[i]);
    }
    return result;
}
exports.addTwoVectors = addTwoVectors;
/**
 * Add the second vector to the first vector
 * @param x Vector
 * @param y Vector
 * @throws If x and y have different length
 */
function addSecondVectorToFirst(x, y) {
    if (x.length !== y.length) {
        throw new Error("Adding two vectors of different length");
    }
    for (var i = 0; i < x.length; i += 1) {
        x[i] += y[i];
    }
}
exports.addSecondVectorToFirst = addSecondVectorToFirst;
/**
 * Compute the square of the norm
 * @param v Vector
 * @return Non negative scalar
 */
function squaredNorm(v) {
    var result = 0;
    for (var i = 0; i < v.length; i += 1) {
        result += v[i] * v[i];
    }
    return result;
}
exports.squaredNorm = squaredNorm;
/**
 * Compute the norm
 * @param v Vector
 * @return Non negative scalar
 */
function norm(v) {
    return Math.sqrt(squaredNorm(v));
}
exports.norm = norm;
/**
 * Compute the norm p = 1
 * @param v Vector
 * @return Non negative scalar
 */
function norm1(v) {
    var result = 0;
    for (var i = 0; i < v.length; i += 1) {
        result += Math.abs(v[i]);
    }
    return result;
}
exports.norm1 = norm1;
/**
 * Create a zero vector of size n
 * @param n Size
 */
function zeroVector(n) {
    var result = [];
    for (var i = 0; i < n; i += 1) {
        result.push(0);
    }
    return result;
}
exports.zeroVector = zeroVector;
;
/**
 * Compute the product of a vector and its transpose
 * @param v Vector
 */
function product_v_vt(v) {
    var n = v.length;
    var result = new SquareMatrix_1.SquareMatrix(n);
    for (var i = 0; i < n; i += 1) {
        for (var j = 0; j < n; j += 1) {
            result.set(i, j, v[i] * v[j]);
        }
    }
    return result;
}
exports.product_v_vt = product_v_vt;
/**
 * Compute the product of a first vector with the transpose of a second vector
 * @param v1 The first vector taken as a column vector
 * @param v2 The second vector taken after transposition as a row vector
 */
function product_v1_v2t(v1, v2) {
    var m = v1.length;
    var n = v2.length;
    var result = new DenseMatrix_1.DenseMatrix(m, n);
    for (var i = 0; i < m; i += 1) {
        for (var j = 0; j < n; j += 1) {
            result.set(i, j, v1[i] * v2[j]);
        }
    }
    return result;
}
exports.product_v1_v2t = product_v1_v2t;
function isZeroVector(v) {
    var n = v.length;
    for (var i = 0; i < v.length; i += 1) {
        if (v[i] !== 0) {
            return false;
        }
    }
    return true;
}
exports.isZeroVector = isZeroVector;
/**
 * Returns a vector filled with random values between 0 and 1
 * @param n The size of the random vector
 */
function randomVector(n) {
    var result = [];
    for (var i = 0; i < n; i += 1) {
        result.push((Math.random() - 0.5) * 10e8);
        //result.push((Math.random())*10e8)
    }
    return result;
}
exports.randomVector = randomVector;
function containsNaN(v) {
    var n = v.length;
    for (var i = 0; i < v.length; i += 1) {
        if (isNaN(v[i])) {
            return true;
        }
    }
    return false;
}
exports.containsNaN = containsNaN;
/**
 * Return the sign of a number.
 * It returns 1 if the number is positive, -1 if the number is negative and 0 if it is zero or minus zero
 * The standard Math.sign() function doesn't work with Windows Internet Explorer
 * @param x Number
 */
function sign(x) {
    return x ? x < 0 ? -1 : 1 : 0;
}
exports.sign = sign;


/***/ }),

/***/ "./src/linearAlgebra/SquareMatrix.ts":
/*!*******************************************!*\
  !*** ./src/linearAlgebra/SquareMatrix.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SquareMatrix = void 0;
/**
 * A square matrix
 */
var SquareMatrix = /** @class */ (function () {
    /**
     * Create a square matrix
     * @param size Number of row and column
     * @param data A row after row flat array
     * @throws If data length is not equal to size*size
     */
    function SquareMatrix(size, data) {
        this._shape = [size, size];
        if (data) {
            if (data.length !== size * size) {
                throw new Error("Square matrix constructor expect the data to have size*size length");
            }
            this.data = data.slice();
        }
        else {
            this.data = [];
            for (var i = 0; i < this.shape[0] * this.shape[1]; i += 1) {
                this.data.push(0);
            }
        }
    }
    Object.defineProperty(SquareMatrix.prototype, "shape", {
        /**
         * Returns the shape of the matrix : [number of rows, number of columns]
         */
        get: function () {
            return this._shape;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Return the corresponding index in the flat row by row data vector
     * @param row The row index
     * @param column The column index
     */
    SquareMatrix.prototype.dataIndex = function (row, column) {
        var n = row * this._shape[1] + column;
        return n;
    };
    /**
     * Return the value at a given row and column position
     * @param row The row index
     * @param column The column index
     * @return Scalar
     * @throws If an index is out of range
     */
    SquareMatrix.prototype.get = function (row, column) {
        this.checkRowRange(row);
        this.checkColumnRange(column);
        return this.data[this.dataIndex(row, column)];
    };
    /**
     * Set a given value at a given row and column position
     * @param row The row index
     * @param column The column index
     * @param value The new value
     * @throws If an index is out of range
     */
    SquareMatrix.prototype.set = function (row, column, value) {
        this.checkRowRange(row);
        this.checkColumnRange(column);
        this.data[this.dataIndex(row, column)] = value;
    };
    /**
     * Change the value of the matrix at a given row and column position by this value divided by the divisor value
     * @param row The row index
     * @param column The column index
     * @param divisor The divisor value
     * @throws If an index is out of range
     */
    SquareMatrix.prototype.divideAt = function (row, column, divisor) {
        this.checkRowRange(row);
        this.checkColumnRange(column);
        this.data[this.dataIndex(row, column)] /= divisor;
    };
    /**
     * Change the value of the matrix at a given row and column position by this value substracted by the subtrahend value
     * @param row The row index
     * @param column The column index
     * @param divisor The divisor value
     * @throws If an index is out of range
     */
    SquareMatrix.prototype.substractAt = function (row, column, subtrahend) {
        this.checkRowRange(row);
        this.checkColumnRange(column);
        this.data[this.dataIndex(row, column)] -= subtrahend;
    };
    /**
     * Check that the index is inside appropriate range
     * @param index The column or the row index
     * @throws If an index is out of range
     */
    SquareMatrix.prototype.checkRowRange = function (index) {
        if (index < 0 || index >= this.shape[0]) {
            throw new Error("SymmetricMatrix index is out of range");
        }
    };
    /**
     * Check that the index is inside appropriate range
     * @param index The column or the row index
     * @throws If an index is out of range
     */
    SquareMatrix.prototype.checkColumnRange = function (index) {
        if (index < 0 || index >= this.shape[1]) {
            throw new Error("SymmetricMatrix index is out of range");
        }
    };
    /**
     * Multiply a matrix by a vector
     * @param v A vector the same size the matrix
     * @return a vector
     */
    SquareMatrix.prototype.multiplyByVector = function (v) {
        if (this.shape[0] !== v.length) {
            throw new Error("SquareMatrix multiply a vector of incorrect length");
        }
        var result = [];
        var n = this.shape[0];
        for (var i = 0; i < n; i += 1) {
            var temp = 0;
            for (var j = 0; j < n; j += 1) {
                temp += this.get(i, j) * v[j];
            }
            result.push(temp);
        }
        return result;
    };
    /**
     * Multiply two matrices
     * @param that A square or a symmetric matrix
     * @return a square matrix
     */
    SquareMatrix.prototype.multiplyByMatrix = function (that) {
        if (this.shape[1] !== that.shape[0]) {
            throw new Error("Size mismatch in matrix multiplication");
        }
        var result = new SquareMatrix(this.shape[1]);
        for (var i = 0; i < this.shape[0]; i += 1) {
            for (var j = 0; j < this.shape[0]; j += 1) {
                var temp = 0;
                for (var k = 0; k < this.shape[0]; k += 1) {
                    temp += this.get(i, k) * that.get(k, j);
                }
                result.set(i, j, temp);
            }
        }
        return result;
    };
    return SquareMatrix;
}());
exports.SquareMatrix = SquareMatrix;


/***/ }),

/***/ "./src/linearAlgebra/SymmetricMatrix.ts":
/*!**********************************************!*\
  !*** ./src/linearAlgebra/SymmetricMatrix.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SymmetricMatrix = void 0;
var SquareMatrix_1 = __webpack_require__(/*! ./SquareMatrix */ "./src/linearAlgebra/SquareMatrix.ts");
var DiagonalMatrix_1 = __webpack_require__(/*! ./DiagonalMatrix */ "./src/linearAlgebra/DiagonalMatrix.ts");
var MathVectorBasicOperations_1 = __webpack_require__(/*! ./MathVectorBasicOperations */ "./src/linearAlgebra/MathVectorBasicOperations.ts");
/**
 * A symmetric matrix
 */
var SymmetricMatrix = /** @class */ (function () {
    /**
     * Create a Symmetric Matrix
     * @param size The number of rows or the number columns
     * @param data The matrix data in a flat vector
     */
    function SymmetricMatrix(size, data) {
        this._shape = [size, size];
        if (data) {
            if (data.length !== size * (size + 1) / 2) {
                throw new Error("Square matrix constructor expect the data to have (size * (size + 1) / 2) length");
            }
            this.data = data.slice();
        }
        else {
            this.data = [];
            var n = (size * (size + 1)) / 2;
            for (var i = 0; i < n; i += 1) {
                this.data.push(0);
            }
        }
    }
    Object.defineProperty(SymmetricMatrix.prototype, "shape", {
        /**
        * Returns the shape of the matrix : [number of rows, number of columns]
        */
        get: function () {
            return this._shape;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns the corresponding index in the flat data vector.
     * In this flat data vector the upper triangular matrix is store row-wise.
     * @param row The row index
     * @param column The column index
     */
    SymmetricMatrix.prototype.dataIndex = function (row, column) {
        if (row <= column) {
            return row * this.shape[1] - (row - 1) * row / 2 + column - row;
        }
        return column * this.shape[0] - (column - 1) * column / 2 + row - column;
    };
    /**
     * Returns the value at a given row and column position
     * @param row The row index
     * @param column The column index
     * @return Scalar
     * @throws If an index is out of range
     */
    SymmetricMatrix.prototype.get = function (row, column) {
        this.checkRowRange(row);
        this.checkColumnRange(column);
        return this.data[this.dataIndex(row, column)];
    };
    /**
     * Set a given value at a given row and column position
     * @param row The row index
     * @param column The column index
     * @param value The new value
     * @throws If an index is out of range
     */
    SymmetricMatrix.prototype.set = function (row, column, value) {
        this.checkRowRange(row);
        this.checkColumnRange(column);
        this.data[this.dataIndex(row, column)] = value;
    };
    /**
     * Check that the index is inside appropriate range
     * @param index The column or the row index
     * @throws If an index is out of range
     */
    SymmetricMatrix.prototype.checkRowRange = function (index) {
        if (index < 0 || index >= this.shape[0]) {
            throw new Error("SymmetricMatrix index is out of range");
        }
    };
    /**
 * Check that the index is inside appropriate range
 * @param index The column or the row index
 * @throws If an index is out of range
 */
    SymmetricMatrix.prototype.checkColumnRange = function (index) {
        if (index < 0 || index >= this.shape[1]) {
            throw new Error("SymmetricMatrix index is out of range");
        }
    };
    /**
     * Compute the product v^t M v
     * @param v Vector
     * @return Scalar
     */
    SymmetricMatrix.prototype.quadraticForm = function (v) {
        var result = 0;
        for (var i = 1; i < this.shape[1]; i += 1) {
            for (var j = 0; j < i; j += 1) {
                result += this.get(i, j) * v[i] * v[j];
            }
        }
        result *= 2;
        for (var i = 0; i < this.shape[1]; i += 1) {
            result += this.get(i, i) * Math.pow(v[i], 2);
        }
        return result;
    };
    /**
     * Return a safe copy of this matrix
     * */
    SymmetricMatrix.prototype.clone = function () {
        return new SymmetricMatrix(this.shape[0], this.data);
    };
    /**
     * Increases the given element of the matrix by the value
     * @param row The row index
     * @param column The column index
     * @param value The number to be added
     * @throws If an index is out of range
     */
    SymmetricMatrix.prototype.addAt = function (row, column, value) {
        this.checkRowRange(row);
        this.checkColumnRange(row);
        this.data[this.dataIndex(row, column)] += value;
    };
    /**
     * Increases every diagonal element of the matrix by the value
     * @param value The number to be added
     */
    SymmetricMatrix.prototype.addValueOnDiagonalInPlace = function (value) {
        var m = this.shape[0];
        for (var i = 0; i < m; i += 1) {
            this.data[this.dataIndex(i, i)] += value;
        }
    };
    /**
     * Returns the new matrix: this.matrix + value * I
     * @param value
     * @returns SymmetricMatrix
     */
    SymmetricMatrix.prototype.addValueOnDiagonal = function (value) {
        var result = this.clone();
        result.addValueOnDiagonalInPlace(value);
        return result;
    };
    /**
     * Returns a SquareMatrix with the values of this matrix
     */
    SymmetricMatrix.prototype.squareMatrix = function () {
        var n = this.shape[0];
        var result = new SquareMatrix_1.SquareMatrix(n);
        for (var i = 0; i < n; i += 1) {
            for (var j = 0; j < n; j += 1) {
                result.set(i, j, this.get(i, j));
            }
        }
        return result;
    };
    SymmetricMatrix.prototype.plusSymmetricMatrixMultipliedByValue = function (matrix, value) {
        if (this.shape[0] !== matrix.shape[0]) {
            throw new Error("Adding two symmetric matrix with different shapes");
        }
        var result = this.clone();
        var n = result.shape[0];
        if (matrix instanceof DiagonalMatrix_1.DiagonalMatrix) {
            for (var i = 0; i < n; i += 1) {
                result.addAt(i, i, matrix.get(i, i) * value);
            }
            return result;
        }
        else {
            for (var i = 0; i < n; i += 1) {
                for (var j = 0; j <= i; j += 1) {
                    result.addAt(i, j, matrix.get(i, j) * value);
                }
            }
            return result;
        }
    };
    SymmetricMatrix.prototype.multiplyByVector = function (v) {
        if (this.shape[1] !== v.length) {
            throw new Error("SymmetricMatrix multiply a vector of incorrect length");
        }
        var result = [];
        var n = this.shape[1];
        for (var i = 0; i < n; i += 1) {
            var temp = 0;
            for (var j = 0; j < n; j += 1) {
                temp += this.get(i, j) * v[j];
            }
            result.push(temp);
        }
        return result;
    };
    SymmetricMatrix.prototype.containsNaN = function () {
        return MathVectorBasicOperations_1.containsNaN(this.data);
    };
    return SymmetricMatrix;
}());
exports.SymmetricMatrix = SymmetricMatrix;


/***/ }),

/***/ "./src/mathVector/Vector2d.ts":
/*!************************************!*\
  !*** ./src/mathVector/Vector2d.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scaleY = exports.scaleX = exports.scale = exports.toVector2d = exports.Vector2d = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
/**
 * A two dimensional vector
 */
var Vector2d = /** @class */ (function () {
    function Vector2d(x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        this._x = x;
        this._y = y;
    }
    Object.defineProperty(Vector2d.prototype, "x", {
        get: function () {
            return this._x;
        },
        set: function (x) {
            this._x = x;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vector2d.prototype, "y", {
        get: function () {
            return this._y;
        },
        set: function (y) {
            this._y = y;
        },
        enumerable: false,
        configurable: true
    });
    Vector2d.prototype.negative = function () {
        return new Vector2d(-this._x, -this._y);
    };
    Vector2d.prototype.add = function (v) {
        return new Vector2d(this._x + v.x, this._y + v.y);
    };
    Vector2d.prototype.multiply = function (value) {
        return new Vector2d(this._x * value, this._y * value);
    };
    Vector2d.prototype.substract = function (v) {
        return new Vector2d(this._x - v.x, this._y - v.y);
    };
    Vector2d.prototype.rotate90degrees = function () {
        return new Vector2d(-this._y, this._x);
    };
    Vector2d.prototype.normalize = function () {
        var norm = Math.sqrt(this._x * this._x + this._y * this._y);
        var x = this._x / norm;
        var y = this._y / norm;
        return new Vector2d(x, y);
    };
    Vector2d.prototype.dot = function (v) {
        return this._x * v.x + this._y * v.y;
    };
    Vector2d.prototype.crossPoduct = function (v) {
        return this._x * v.y - this._y * v.x;
    };
    Vector2d.prototype.distance = function (v) {
        return Math.sqrt(Math.pow(this._x - v.x, 2) + Math.pow(this._y - v.y, 2));
    };
    Vector2d.prototype.norm = function () {
        return Math.sqrt(Math.pow(this._x, 2) + Math.pow(this._y, 2));
    };
    Vector2d.prototype.clone = function () {
        return new Vector2d(this._x, this._y);
    };
    Vector2d.prototype.toArray = function () {
        var result = [this._x, this._y];
        return result;
    };
    return Vector2d;
}());
exports.Vector2d = Vector2d;
function toVector2d(v) {
    var result = new Vector2d;
    if (v.length !== 2) {
        var error = new ErrorLoging_1.ErrorLog("function", "toVector2d", "Incorrect length of array to convert to Vector2d object.");
        error.logMessageToConsole();
    }
    else {
        result.x = v[0];
        result.y = v[1];
    }
    return result;
}
exports.toVector2d = toVector2d;
function scale(factor, v) {
    var result = [];
    v.forEach(function (element) {
        result.push(element.multiply(factor));
    });
    return result;
}
exports.scale = scale;
function scaleX(factor, v) {
    var result = [];
    v.forEach(function (element) {
        v.push(new Vector2d(element.x * factor, element.y));
    });
    return result;
}
exports.scaleX = scaleX;
function scaleY(factor, v) {
    var result = [];
    v.forEach(function (element) {
        v.push(new Vector2d(element.x, element.y * factor));
    });
    return result;
}
exports.scaleY = scaleY;


/***/ }),

/***/ "./src/mathematics/Optimizer.ts":
/*!**************************************!*\
  !*** ./src/mathematics/Optimizer.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Optimizer = exports.OptimizerReturnStatus = void 0;
var TrustRegionSubproblem_1 = __webpack_require__(/*! ./TrustRegionSubproblem */ "./src/mathematics/TrustRegionSubproblem.ts");
var MathVectorBasicOperations_1 = __webpack_require__(/*! ../linearAlgebra/MathVectorBasicOperations */ "./src/linearAlgebra/MathVectorBasicOperations.ts");
var MathVectorBasicOperations_2 = __webpack_require__(/*! ../linearAlgebra/MathVectorBasicOperations */ "./src/linearAlgebra/MathVectorBasicOperations.ts");
var MathVectorBasicOperations_3 = __webpack_require__(/*! ../linearAlgebra/MathVectorBasicOperations */ "./src/linearAlgebra/MathVectorBasicOperations.ts");
var SymmetricMatrix_1 = __webpack_require__(/*! ../linearAlgebra/SymmetricMatrix */ "./src/linearAlgebra/SymmetricMatrix.ts");
var CholeskyDecomposition_1 = __webpack_require__(/*! ../linearAlgebra/CholeskyDecomposition */ "./src/linearAlgebra/CholeskyDecomposition.ts");
var OptimizerReturnStatus;
(function (OptimizerReturnStatus) {
    OptimizerReturnStatus[OptimizerReturnStatus["SOLUTION_FOUND"] = 0] = "SOLUTION_FOUND";
    OptimizerReturnStatus[OptimizerReturnStatus["MAX_NB_ITER_REACHED"] = 1] = "MAX_NB_ITER_REACHED";
    OptimizerReturnStatus[OptimizerReturnStatus["SOLUTION_OUTSIDE_SHAPE_SPACE"] = 2] = "SOLUTION_OUTSIDE_SHAPE_SPACE";
    OptimizerReturnStatus[OptimizerReturnStatus["FIRST_ITERATION"] = 3] = "FIRST_ITERATION";
})(OptimizerReturnStatus = exports.OptimizerReturnStatus || (exports.OptimizerReturnStatus = {}));
var Optimizer = /** @class */ (function () {
    function Optimizer(optimizationProblem) {
        this.optimizationProblem = optimizationProblem;
        this.success = false;
        if (this.optimizationProblem.f.length !== this.optimizationProblem.gradient_f.shape[0]) {
            console.log("Problem about f length and gradient_f shape 0 is in the Optimizer Constructor");
        }
    }
    Optimizer.prototype.optimize_using_trust_region = function (epsilon, maxTrustRadius, maxNumSteps) {
        if (epsilon === void 0) { epsilon = 10e-8; }
        if (maxTrustRadius === void 0) { maxTrustRadius = 10; }
        if (maxNumSteps === void 0) { maxNumSteps = 800; }
        this.success = false;
        // Bibliographic reference: Numerical Optimization, second edition, Jorge Nocedal and Stephen J. Wright, p. 69
        var numSteps = 0;
        //let numGradientComputation = 0
        var t = this.optimizationProblem.numberOfConstraints / this.optimizationProblem.f0;
        var trustRadius = 9;
        var rho;
        var eta = 0.1; // [0, 1/4)
        var mu = 10; // Bibliographic reference: Convex Optimization, Stephen Boyd and Lieven Vandenberghe, p. 569
        /* JCL 2020/09/18 Collect the elementary steps prior to shift the control polygon */
        var globalStep = MathVectorBasicOperations_3.zeroVector(this.optimizationProblem.f.length);
        // JCL 05/03/2021 add the use of checked to take into account the curve analysis
        var checked = true;
        while (this.optimizationProblem.numberOfConstraints / t > epsilon) {
            while (true) {
                numSteps += 1;
                //console.log("number of steps")
                //console.log(numSteps) 
                if (this.optimizationProblem.f.length !== this.optimizationProblem.gradient_f.shape[0]) {
                    console.log("Problem about f length and gradient_f shape 0 is in the function optimize_using_trust_region");
                }
                var b = this.barrier(this.optimizationProblem.f, this.optimizationProblem.gradient_f, this.optimizationProblem.hessian_f);
                var gradient = MathVectorBasicOperations_2.saxpy2(t, this.optimizationProblem.gradient_f0, b.gradient);
                var hessian = b.hessian.plusSymmetricMatrixMultipliedByValue(this.optimizationProblem.hessian_f0, t);
                var trustRegionSubproblem = new TrustRegionSubproblem_1.TrustRegionSubproblem(gradient, hessian);
                var tr = trustRegionSubproblem.solve(trustRadius);
                var fStep = this.optimizationProblem.fStep(tr.step);
                var numSteps2 = 0;
                while (Math.max.apply(null, fStep) >= 0) {
                    numSteps2 += 1;
                    trustRadius *= 0.25;
                    tr = trustRegionSubproblem.solve(trustRadius);
                    //numGradientComputation += 1;
                    fStep = this.optimizationProblem.fStep(tr.step);
                    if (numSteps2 > 100) {
                        throw new Error("maxSteps2 > 100");
                    }
                }
                var barrierValueStep = this.barrierValue(fStep);
                var actualReduction = t * (this.optimizationProblem.f0 - this.optimizationProblem.f0Step(tr.step)) + (b.value - barrierValueStep);
                var predictedReduction = -MathVectorBasicOperations_1.dotProduct(gradient, tr.step) - 0.5 * hessian.quadraticForm(tr.step);
                /* JCL 2020/09/17 update the global step */
                for (var i = 0; i < this.optimizationProblem.f.length; i += 1) {
                    globalStep[i] += tr.step[i];
                }
                rho = actualReduction / predictedReduction;
                if (rho < 0.25) {
                    trustRadius *= 0.25;
                }
                else if (rho > 0.75 && tr.hitsBoundary) {
                    trustRadius = Math.min(2 * trustRadius, maxTrustRadius);
                }
                if (rho > eta) {
                    //numGradientComputation += 1;
                    //console.log("number of gradient computation")
                    //console.log(numGradientComputation) 
                    //numGradientComputation = 0
                    // JCL 05/03/2021 modify the use of step to take into account the curve analysis
                    //this.o.step(tr.step)
                    checked = this.optimizationProblem.step(tr.step);
                    if (!checked) {
                        this.success = true;
                        console.log("terminate optimization: solution not in shape space. ");
                        if (numSteps === 1) {
                            return OptimizerReturnStatus.FIRST_ITERATION;
                        }
                        else {
                            return OptimizerReturnStatus.SOLUTION_OUTSIDE_SHAPE_SPACE;
                        }
                    }
                }
                if (numSteps > maxNumSteps) {
                    //throw new Error("numSteps > maxNumSteps")
                    //break;
                    console.log("optimizer: max number of iterations reached ");
                    return OptimizerReturnStatus.MAX_NB_ITER_REACHED;
                }
                var newtonDecrementSquared = this.newtonDecrementSquared(tr.step, t, this.optimizationProblem.gradient_f0, b.gradient);
                if (newtonDecrementSquared < 0) {
                    throw new Error("newtonDecrementSquared is smaller than zero");
                }
                //if (newtonDecrementSquared < epsilon && !tr.hitsBoundary) {
                if (newtonDecrementSquared < epsilon) {
                    //console.log('break newtonDecrementSquared < epsilon && !hitsBoundary');
                    break;
                }
                if (trustRadius < 10e-18) {
                    //console.log('trustRadius < 10e-10');
                    console.log(b);
                    throw new Error("trust Radius < 10e-18");
                    //break;
                }
            }
            t *= mu;
        }
        //if (numSteps === maxNumSteps) {
        //    return -1;
        //}
        //console.log(numSteps)
        this.success = true;
        return OptimizerReturnStatus.SOLUTION_FOUND;
    };
    Optimizer.prototype.optimize_using_line_search = function (epsilon, maxNumSteps) {
        if (epsilon === void 0) { epsilon = 10e-6; }
        if (maxNumSteps === void 0) { maxNumSteps = 300; }
        // Bibliographic reference: Numerical Optimization, second edition, Jorge Nocedal and Stephen J. Wright, p. 69
        var numSteps = 0;
        var t = this.optimizationProblem.numberOfConstraints / this.optimizationProblem.f0;
        var rho;
        var eta = 0.1; // [0, 1/4)
        var mu = 10; // Bibliographic reference: Convex Optimization, Stephen Boyd and Lieven Vandenberghe, p. 569
        while (this.optimizationProblem.numberOfConstraints / t > epsilon) {
            while (true) {
                numSteps += 1;
                //console.log(numSteps) 
                var b = this.barrier(this.optimizationProblem.f, this.optimizationProblem.gradient_f, this.optimizationProblem.hessian_f);
                var gradient = MathVectorBasicOperations_2.saxpy2(t, this.optimizationProblem.gradient_f0, b.gradient);
                var hessian = b.hessian.plusSymmetricMatrixMultipliedByValue(this.optimizationProblem.hessian_f0, t);
                var newtonStep = this.computeNewtonStep(gradient, hessian);
                var stepRatio = this.backtrackingLineSearch(t, newtonStep, this.optimizationProblem.f0, b.value, this.optimizationProblem.gradient_f0, b.gradient);
                if (stepRatio < 1) {
                    //console.log(stepRatio)
                }
                var step = MathVectorBasicOperations_1.multiplyVectorByScalar(newtonStep, stepRatio);
                /*
                if (Math.max(...this.o.fStep(step)) > 0) {
                    console.log(Math.max(...this.o.fStep(step)))
                }
                */
                //console.log(Math.max(...this.o.fStep(step)))
                /*
                if (Math.max(...this.o.fStep(step)) < 0) {
                    this.o.step(step)
                }
                */
                this.optimizationProblem.step(step);
                if (numSteps > maxNumSteps) {
                    //throw new Error("numSteps > maxNumSteps")
                    //break;
                    console.log("numSteps > maxNumSteps");
                    return;
                }
                var newtonDecrementSquared = this.newtonDecrementSquared(step, t, this.optimizationProblem.gradient_f0, b.gradient);
                if (newtonDecrementSquared < 0) {
                    throw new Error("newtonDecrementSquared is smaller than zero");
                }
                //if (newtonDecrementSquared < epsilon && !tr.hitsBoundary) {
                if (newtonDecrementSquared < epsilon) {
                    //console.log('break newtonDecrementSquared < epsilon && !hitsBoundary');
                    //console.log(numSteps)
                    break;
                }
            }
            t *= mu;
            //console.log(t)
        }
        //if (numSteps === maxNumSteps) {
        //    return -1;
        //}
        //console.log(numSteps)
    };
    Optimizer.prototype.newtonDecrementSquared = function (newtonStep, t, gradient_f0, barrierGradient) {
        return -MathVectorBasicOperations_1.dotProduct(MathVectorBasicOperations_2.saxpy2(t, gradient_f0, barrierGradient), newtonStep);
    };
    Optimizer.prototype.barrierValue = function (f) {
        //console.log(f)
        var result = 0;
        var n = f.length;
        for (var i = 0; i < n; i += 1) {
            result -= Math.log(-f[i]);
        }
        return result;
    };
    Optimizer.prototype.barrierGradient = function (f, gradient_f) {
        var result = MathVectorBasicOperations_3.zeroVector(gradient_f.shape[1]);
        var n = f.length;
        var m = gradient_f.shape[1];
        if (n !== gradient_f.shape[0]) {
            throw new Error("barrierGradient f and gradient_f dimensions do not match");
        }
        for (var i = 0; i < n; i += 1) {
            for (var j = 0; j < m; j += 1) {
                if (f[i] === 0) {
                    throw new Error("barrierGradient makes a division by zero");
                }
                result[j] += -gradient_f.get(i, j) / f[i];
                //console.log(result[j])
            }
        }
        //console.log(gradient_f)
        //console.log(result)
        return result;
    };
    Optimizer.prototype.barrierHessian = function (f, gradient_f, hessian_f) {
        // Bibliographic reference: Convex Optimization, Stephen Boyd and Lieven Vandenberghe, p. 564
        var m = gradient_f.shape[0];
        var n = gradient_f.shape[1];
        var result = new SymmetricMatrix_1.SymmetricMatrix(n);
        // barrier hessian first term
        for (var i = 0; i < m; i += 1) {
            for (var k = 0; k < n; k += 1) {
                for (var l = 0; l <= k; l += 1) {
                    result.addAt(k, l, gradient_f.get(i, k) * gradient_f.get(i, l) / (f[i] * f[i]));
                }
            }
        }
        // barrier hessian second term
        if (hessian_f) {
            for (var i = 0; i < n; i += 1) {
                for (var j = 0; j <= i; j += 1) {
                    for (var k = 0; k < f.length; k += 1) {
                        result.addAt(i, j, -hessian_f[k].get(i, j) / f[k]);
                    }
                }
            }
        }
        return result;
    };
    Optimizer.prototype.barrier = function (f, gradient_f, hessian_f) {
        /*
        if (f.length !== gradient_f.shape[0]) {
            console.log("Problem about f length and gradient_f shape 0 is in Optimizer in the function barrier")
        }
        */
        return { value: this.barrierValue(f),
            gradient: this.barrierGradient(f, gradient_f),
            hessian: this.barrierHessian(f, gradient_f, hessian_f)
        };
    };
    Optimizer.prototype.backtrackingLineSearch = function (t, newtonStep, f0, barrierValue, gradient_f0, barrierGradient) {
        var alpha = 0.2;
        var beta = 0.5;
        var result = 1;
        var step = newtonStep.slice();
        while (Math.max.apply(Math, __spread(this.optimizationProblem.fStep(step))) > 0) {
            result *= beta;
            //console.log(Math.max(...this.o.fStep(step)))
            step = MathVectorBasicOperations_1.multiplyVectorByScalar(newtonStep, result);
        }
        while (t * this.optimizationProblem.f0Step(step) + this.barrierValue(this.optimizationProblem.fStep(step)) > t * f0 + barrierValue
            + alpha * result * MathVectorBasicOperations_1.dotProduct(MathVectorBasicOperations_1.addTwoVectors(MathVectorBasicOperations_1.multiplyVectorByScalar(gradient_f0, t), barrierGradient), newtonStep)) {
            result *= beta;
            step = MathVectorBasicOperations_1.multiplyVectorByScalar(newtonStep, result);
        }
        return result;
    };
    Optimizer.prototype.computeNewtonStep = function (gradient, hessian) {
        var choleskyDecomposition = new CholeskyDecomposition_1.CholeskyDecomposition(hessian);
        if (choleskyDecomposition.success === false) {
            console.log("choleskyDecomposition failed");
        }
        return choleskyDecomposition.solve(MathVectorBasicOperations_1.multiplyVectorByScalar(gradient, -1));
    };
    return Optimizer;
}());
exports.Optimizer = Optimizer;


/***/ }),

/***/ "./src/mathematics/TrustRegionSubproblem.ts":
/*!**************************************************!*\
  !*** ./src/mathematics/TrustRegionSubproblem.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getBoundariesIntersections = exports.gershgorin_bounds = exports.frobeniusNorm = exports.TrustRegionSubproblem = void 0;
var SquareMatrix_1 = __webpack_require__(/*! ../linearAlgebra/SquareMatrix */ "./src/linearAlgebra/SquareMatrix.ts");
var MathVectorBasicOperations_1 = __webpack_require__(/*! ../linearAlgebra/MathVectorBasicOperations */ "./src/linearAlgebra/MathVectorBasicOperations.ts");
var MathVectorBasicOperations_2 = __webpack_require__(/*! ../linearAlgebra/MathVectorBasicOperations */ "./src/linearAlgebra/MathVectorBasicOperations.ts");
var MathVectorBasicOperations_3 = __webpack_require__(/*! ../linearAlgebra/MathVectorBasicOperations */ "./src/linearAlgebra/MathVectorBasicOperations.ts");
var MathVectorBasicOperations_4 = __webpack_require__(/*! ../linearAlgebra/MathVectorBasicOperations */ "./src/linearAlgebra/MathVectorBasicOperations.ts");
var MathVectorBasicOperations_5 = __webpack_require__(/*! ../linearAlgebra/MathVectorBasicOperations */ "./src/linearAlgebra/MathVectorBasicOperations.ts");
var MathVectorBasicOperations_6 = __webpack_require__(/*! ../linearAlgebra/MathVectorBasicOperations */ "./src/linearAlgebra/MathVectorBasicOperations.ts");
var MathVectorBasicOperations_7 = __webpack_require__(/*! ../linearAlgebra/MathVectorBasicOperations */ "./src/linearAlgebra/MathVectorBasicOperations.ts");
var MathVectorBasicOperations_8 = __webpack_require__(/*! ../linearAlgebra/MathVectorBasicOperations */ "./src/linearAlgebra/MathVectorBasicOperations.ts");
var MathVectorBasicOperations_9 = __webpack_require__(/*! ../linearAlgebra/MathVectorBasicOperations */ "./src/linearAlgebra/MathVectorBasicOperations.ts");
var CholeskyDecomposition_1 = __webpack_require__(/*! ../linearAlgebra/CholeskyDecomposition */ "./src/linearAlgebra/CholeskyDecomposition.ts");
// Bibliographic Reference: Trust-Region Methods, Conn, Gould and Toint p. 187
// note: lambda is never negative
var lambdaRange;
(function (lambdaRange) {
    lambdaRange[lambdaRange["N"] = 0] = "N";
    lambdaRange[lambdaRange["L"] = 1] = "L";
    lambdaRange[lambdaRange["G"] = 2] = "G";
    lambdaRange[lambdaRange["F"] = 3] = "F";
})(lambdaRange || (lambdaRange = {}));
/**
 * A trust region subproblem solver
 */
var TrustRegionSubproblem = /** @class */ (function () {
    /**
     * Create the trust region subproblem solver
     * @param gradient The gradient of the objective function to minimize
     * @param hessian The hessian of the objective function to minimize
     * @param k_easy Optional value in the range (0, 1)
     * @param k_hard Optional value in the range (0, 1)
     */
    function TrustRegionSubproblem(gradient, hessian, k_easy, k_hard) {
        if (k_easy === void 0) { k_easy = 0.1; }
        if (k_hard === void 0) { k_hard = 0.2; }
        this.gradient = gradient;
        this.hessian = hessian;
        this.k_easy = k_easy;
        this.k_hard = k_hard;
        this.CLOSE_TO_ZERO = 10e-8;
        this.numberOfIterations = 0;
        this.lambda = { current: 0, lowerBound: 0, upperBound: 0 };
        this.hitsBoundary = true;
        this.step = [];
        this.stepSquaredNorm = 0;
        this.stepNorm = 0;
        this.range = lambdaRange.F;
        this.lambdaPlus = 0;
        this.hardCase = false;
        this.gNorm = MathVectorBasicOperations_1.norm(this.gradient);
        if (MathVectorBasicOperations_1.containsNaN(gradient)) {
            throw new Error("The gradient parameter passed to the TrustRegionSubproblem constructor contains NaN");
        }
        if (hessian.containsNaN()) {
            throw new Error("The hessian parameter passed to the TrustRegionSubproblem to constructor contains NaN");
        }
        this.cauchyPoint = MathVectorBasicOperations_8.zeroVector(this.gradient.length);
    }
    /**
     * Find the nearly exact trust region subproblem minimizer
     * @param trustRegionRadius The trust region radius
     * @returns The vector .step and the boolean .hitsBoundary
     */
    TrustRegionSubproblem.prototype.solve = function (trustRegionRadius) {
        // Bibliographic Reference: Trust-Region Methods, Conn, Gould and Toint p. 193
        // see also the list of errata: ftp://ftp.numerical.rl.ac.uk/pub/trbook/trbook-errata.pdf for Algorithm 7.3.4 Step 1a
        this.cauchyPoint = this.computeCauchyPoint(trustRegionRadius);
        this.lambda = this.initialLambdas(trustRegionRadius);
        this.numberOfIterations = 0;
        /* JCL 2021/02/09 Try modify maxNumberOfIterations to reach a solution (original= 300)*/
        var maxNumberOfIterations = 300;
        //const maxNumberOfIterations = 400
        while (true) {
            this.numberOfIterations += 1;
            // step 1.
            var hessianPlusLambda = this.hessian.addValueOnDiagonal(this.lambda.current);
            var choleskyDecomposition = new CholeskyDecomposition_1.CholeskyDecomposition(hessianPlusLambda);
            //We have found the exact lambda, however the hessian is indefinite
            //The idea is then to find an approximate solution increasing the lambda value by EPSILON
            if (this.lambda.upperBound === this.lambda.lowerBound && !choleskyDecomposition.success) {
                var EPSILON = 10e-6;
                this.lambda.upperBound += EPSILON;
                this.lambda.current += EPSILON;
                hessianPlusLambda = this.hessian.addValueOnDiagonal(this.lambda.current);
                choleskyDecomposition = new CholeskyDecomposition_1.CholeskyDecomposition(hessianPlusLambda);
                this.range = lambdaRange.G;
            }
            // step 1a.
            this.update_step_and_range(trustRegionRadius, choleskyDecomposition);
            if (this.interiorConvergence()) {
                break;
            }
            // step 2.
            this.update_lower_and_upper_bounds();
            // step 3.
            this.update_lambda_lambdaPlus_lowerBound_and_step(trustRegionRadius, hessianPlusLambda, choleskyDecomposition);
            // step 4.
            if (this.check_for_termination_and_update_step(trustRegionRadius, hessianPlusLambda, choleskyDecomposition)) {
                break;
            }
            // step 5.
            this.update_lambda();
            if (this.numberOfIterations > maxNumberOfIterations) {
                throw new Error("Trust region subproblem maximum number of step exceeded");
            }
        }
        //console.log(this.numberOfIterations)
        return {
            step: this.step,
            hitsBoundary: this.hitsBoundary,
            hardCase: this.hardCase
        };
    };
    /**
     * An interior solution with a zero Lagrangian multiplier implies interior convergence
     */
    TrustRegionSubproblem.prototype.interiorConvergence = function () {
        // A range G corresponds to a step smaller than the trust region radius
        if (this.lambda.current === 0 && this.range === lambdaRange.G) {
            this.hitsBoundary = false;
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * Updates the lambdaRange set. Updates the step if the factorization succeeded.
     * @param trustRegionRadius Trust region radius
     * @param choleskyDecomposition Cholesky decomposition
     */
    TrustRegionSubproblem.prototype.update_step_and_range = function (trustRegionRadius, choleskyDecomposition) {
        if (choleskyDecomposition.success) {
            this.step = choleskyDecomposition.solve(MathVectorBasicOperations_4.multiplyVectorByScalar(this.gradient, -1));
            this.stepSquaredNorm = MathVectorBasicOperations_3.squaredNorm(this.step);
            this.stepNorm = Math.sqrt(this.stepSquaredNorm);
            if (this.stepNorm < trustRegionRadius) {
                this.range = lambdaRange.G;
            }
            else {
                this.range = lambdaRange.L; // once a Newton iterate falls into L it stays there
            }
        }
        else {
            this.range = lambdaRange.N;
        }
    };
    /**
     * Update lambda.upperBound or lambda.lowerBound
     */
    TrustRegionSubproblem.prototype.update_lower_and_upper_bounds = function () {
        if (this.range === lambdaRange.G) {
            this.lambda.upperBound = this.lambda.current;
        }
        else {
            this.lambda.lowerBound = this.lambda.current;
        }
    };
    /**
     * Update lambdaPlus, lambda.lowerBound, lambda.current and step
     * @param trustRegionRadius Trust region radius
     * @param hessianPlusLambda Hessian + lambda.current * I
     * @param choleskyDecomposition The Cholesky Decomposition of Hessian + lambda.current * I
     */
    TrustRegionSubproblem.prototype.update_lambda_lambdaPlus_lowerBound_and_step = function (trustRegionRadius, hessianPlusLambda, choleskyDecomposition) {
        // Step 3. If lambda in F
        if (this.range === lambdaRange.L || this.range === lambdaRange.G) {
            // Step 3a. Solve Lw = step and set lambdaPlus (algorithm 7.3.1)
            var w = solveLowerTriangular(choleskyDecomposition.g, this.step);
            var wSquaredNorm = MathVectorBasicOperations_3.squaredNorm(w);
            this.lambdaPlus = this.lambda.current + (this.stepNorm / trustRegionRadius - 1) * (this.stepSquaredNorm / wSquaredNorm);
            // Step 3b. If lambda in G
            if (this.range === lambdaRange.G) {
                // i. Use the LINPACK method to find a unit vector u to make <u, H(lambda), u> small.
                var s_min = estimateSmallestSingularValue(choleskyDecomposition.g);
                // ii. Replace lambda.lowerBound by max [lambda_lb, lambda - <u, H(lambda), u>].
                this.lambda.lowerBound = Math.max(this.lambda.lowerBound, this.lambda.current - Math.pow(s_min.value, 2));
                // iii. Find the root alpha of the equation || step + alpha u || = trustRegionRadius which makes
                // the model q(step + alpha u) smallest and replace step by step + alpha u
                var intersection = getBoundariesIntersections(this.step, s_min.vector, trustRegionRadius);
                var t = void 0;
                if (Math.abs(intersection.tmin) < Math.abs(intersection.tmax)) {
                    t = intersection.tmin;
                }
                else {
                    t = intersection.tmax;
                }
                MathVectorBasicOperations_7.saxpy(t, s_min.vector, this.step);
                this.stepSquaredNorm = MathVectorBasicOperations_3.squaredNorm(this.step);
                this.stepNorm = Math.sqrt(this.stepSquaredNorm);
            }
        }
        else {
            // Step 3c. Use the partial factorization to find delta and v such that (H(lambda) + delta e_k e_k^T) v = 0
            var sls = singularLeadingSubmatrix(hessianPlusLambda, choleskyDecomposition.g, choleskyDecomposition.firstNonPositiveDefiniteLeadingSubmatrixSize);
            // Step 3d. Replace lambda.lb by max [ lambda_lb, lambda_current + delta / || v ||^2 ]
            var vSquaredNorm = MathVectorBasicOperations_3.squaredNorm(sls.vector);
            this.lambda.lowerBound = Math.max(this.lambda.lowerBound, this.lambda.current + sls.delta / vSquaredNorm);
            //lambda.current = Math.max(Math.sqrt(lambda.lb * lambda.ub), lambda.lb + this.UPDATE_COEFF * (lambda.ub - lambda.lb));
        }
    };
    /**
     * Check for termination
     * @param trustRegionRadius Trust region radius
     * @param hessianPlusLambda Hessian + lambda.current * I
     * @param choleskyDecomposition The CholeskyDecomposition of Hessian + lambda.current * I
     */
    TrustRegionSubproblem.prototype.check_for_termination_and_update_step = function (trustRegionRadius, hessianPlusLambda, choleskyDecomposition) {
        var terminate = false;
        // Algorithm 7.3.5, Step 1. If lambda is in F and | ||s(lambda)|| - trustRegionRadius | <= k_easy * trustRegionRadius
        if ((this.range === lambdaRange.L || this.range === lambdaRange.G) && Math.abs(this.stepNorm - trustRegionRadius) <= this.k_easy * trustRegionRadius) {
            // Added test to make sure that the result is better than the Cauchy point
            var evalResult = MathVectorBasicOperations_6.dotProduct(this.gradient, this.step) + 0.5 * this.hessian.quadraticForm(this.step);
            var evalCauchy = MathVectorBasicOperations_6.dotProduct(this.gradient, this.cauchyPoint) + 0.5 * this.hessian.quadraticForm(this.cauchyPoint);
            if (evalResult > evalCauchy) {
                return false;
            }
            else {
                // stop with s = s(lambda)
                this.hitsBoundary = true;
                terminate = true;
            }
        }
        if (this.range === lambdaRange.G) {
            // Algorithm 7.3.5, Step 2. If lambda = 0 in G
            if (this.lambda.current === 0) {
                this.hitsBoundary = false; // since the Lagrange Multiplier is zero
                terminate = true;
                return terminate;
            }
            // Algorithm 7.3.5, Step 3. If lambda is in G and the LINPACK method gives u and alpha such that
            // alpha^2 <u, H(lambda), u> <= k_hard ( <s(lambda), H(lambda) * s(lambda) + lambda * trustRegionRadius^2 >)
            var s_min = estimateSmallestSingularValue(choleskyDecomposition.g);
            //let alpha = s_min.value
            //let u = s_min.vector
            var intersection = getBoundariesIntersections(this.step, s_min.vector, trustRegionRadius);
            var t_abs_max = void 0;
            // To do : explain better why > instead of <
            // relative_error is smaller for <
            // it seems that we need the worst case to make sure the result is a better solution
            // than the Cauchy point
            if (Math.abs(intersection.tmin) > Math.abs(intersection.tmax)) {
                t_abs_max = intersection.tmin;
            }
            else {
                t_abs_max = intersection.tmax;
            }
            var quadraticTerm = hessianPlusLambda.quadraticForm(this.step);
            var relative_error = Math.pow(t_abs_max * s_min.value, 2) / (quadraticTerm + this.lambda.current * Math.pow(trustRegionRadius, 2));
            //if (relative_error <= this.k_hard || t_abs_min < this.CLOSE_TO_ZERO) {
            if (relative_error <= this.k_hard) {
                //saxpy(t_abs_min, s_min.vector, this.step) done at step 3b iii.
                this.hitsBoundary = true;
                this.hardCase = true;
                terminate = true;
            }
        }
        return terminate;
    };
    /**
     * Update lambda.current
     */
    TrustRegionSubproblem.prototype.update_lambda = function () {
        //step 5.
        if (this.range === lambdaRange.L && this.gNorm !== 0) {
            this.lambda.current = this.lambdaPlus;
        }
        else if (this.range === lambdaRange.G) {
            var hessianPlusLambda = this.hessian.clone();
            hessianPlusLambda.addValueOnDiagonal(this.lambdaPlus);
            var choleskyDecomposition = new CholeskyDecomposition_1.CholeskyDecomposition(hessianPlusLambda);
            // If the factorization succeeds, then lambdaPlus is in L. Otherwise, lambdaPlus is in N
            if (choleskyDecomposition.success) {
                this.lambda.current = this.lambdaPlus;
            }
            else {
                this.lambda.lowerBound = Math.max(this.lambda.lowerBound, this.lambdaPlus);
                // Check lambda.lb for interior convergence ???
                this.lambda.current = updateLambda_using_equation_7_3_14(this.lambda.lowerBound, this.lambda.upperBound);
            }
        }
        else {
            this.lambda.current = updateLambda_using_equation_7_3_14(this.lambda.lowerBound, this.lambda.upperBound);
        }
    };
    /**
     * Returns the minimizer along the steepest descent (-gradient) direction subject to trust-region bound.
     * Note: If the gradient is a zero vector then the function returns a zero vector
     * @param trustRegionRadius The trust region radius
     * @return The minimizer vector deta x
     */
    TrustRegionSubproblem.prototype.computeCauchyPoint = function (trustRegionRadius) {
        // Bibliographic referece: Numerical Optimizatoin, second edition, Nocedal and Wright, p. 71-72
        var gHg = this.hessian.quadraticForm(this.gradient);
        var gNorm = MathVectorBasicOperations_1.norm(this.gradient);
        // return a zero step if the gradient is zero
        if (gNorm === 0) {
            return MathVectorBasicOperations_8.zeroVector(this.gradient.length);
        }
        var result = MathVectorBasicOperations_4.multiplyVectorByScalar(this.gradient, -trustRegionRadius / gNorm);
        if (gHg <= 0) {
            return result;
        }
        var tau = Math.pow(gNorm, 3) / trustRegionRadius / gHg;
        if (tau < 1) {
            return MathVectorBasicOperations_4.multiplyVectorByScalar(result, tau);
        }
        return result;
    };
    /**
     * Return an initial value, an upper bound and a lower bound for lambda.
     * @param trustRegionRadius The trust region radius
     * @return .current (lambda intial value) .lb (lower bound) and .ub (upper bound)
     */
    TrustRegionSubproblem.prototype.initialLambdas = function (trustRegionRadius) {
        // Bibliographic reference : Trust-Region Methods, Conn, Gould and Toint p. 192
        var gershgorin = gershgorin_bounds(this.hessian);
        var hessianFrobeniusNorm = frobeniusNorm(this.hessian);
        var hessianInfiniteNorm = 0;
        var minHessianDiagonal = this.hessian.get(0, 0);
        for (var i = 0; i < this.hessian.shape[0]; i += 1) {
            var tempInfiniteNorm = 0;
            for (var j = 0; j < this.hessian.shape[0]; j += 1) {
                tempInfiniteNorm += Math.abs(this.hessian.get(i, j));
            }
            hessianInfiniteNorm = Math.max(hessianInfiniteNorm, tempInfiniteNorm);
            minHessianDiagonal = Math.min(minHessianDiagonal, this.hessian.get(i, i));
        }
        var lowerBound = Math.max(0, Math.max(-minHessianDiagonal, MathVectorBasicOperations_1.norm(this.gradient) / trustRegionRadius - Math.min(gershgorin.upperBound, Math.min(hessianFrobeniusNorm, hessianInfiniteNorm))));
        var upperBound = Math.max(0, MathVectorBasicOperations_1.norm(this.gradient) / trustRegionRadius + Math.min(-gershgorin.lowerBound, Math.min(hessianFrobeniusNorm, hessianInfiniteNorm)));
        var lambda_initial;
        if (lowerBound === 0) {
            lambda_initial = 0;
        }
        else {
            lambda_initial = updateLambda_using_equation_7_3_14(lowerBound, upperBound);
        }
        return {
            current: lambda_initial,
            lowerBound: lowerBound,
            upperBound: upperBound
        };
    };
    return TrustRegionSubproblem;
}());
exports.TrustRegionSubproblem = TrustRegionSubproblem;
/**
 *
 * @param A
 * @param L
 * @param k
 * @return dela, vector
 * @throws If k < 0
 */
function singularLeadingSubmatrix(A, L, k) {
    if (k < 0) {
        throw new Error('k should not be a negative value');
    }
    var delta = 0;
    var l = new SquareMatrix_1.SquareMatrix(k);
    var v = [];
    var u = MathVectorBasicOperations_8.zeroVector(k);
    for (var j = 0; j < k - 1; j += 1) {
        delta += Math.pow(L.get(k - 1, j), 2);
    }
    delta -= A.get(k - 1, k - 1);
    for (var i = 0; i < k - 1; i += 1) {
        for (var j = 0; j <= i; j += 1) {
            l.set(i, j, L.get(i, j));
        }
        u[i] = L.get(k - 1, i);
    }
    v = MathVectorBasicOperations_8.zeroVector(A.shape[0]);
    v[k - 1] = 1;
    if (k !== 1) {
        var vtemp = solveLowerTriangular(l, u);
        for (var i = 0; i < k - 1; i += 1) {
            v[i] = vtemp[i];
        }
    }
    return {
        delta: delta,
        vector: v
    };
}
/**
 * Estimate the smallest singular value
 * @param lowerTriangular
 */
function estimateSmallestSingularValue(lowerTriangular) {
    // Bibliographic reference :  Golub, G. H., Van Loan, C. F. (2013), "Matrix computations". Forth Edition. JHU press. pp. 140-142.
    // Web reference: https://github.com/scipy/scipy/blob/master/scipy/optimize/_trustregion_exact.py
    var n = lowerTriangular.shape[0];
    var p = MathVectorBasicOperations_8.zeroVector(n);
    var y = MathVectorBasicOperations_8.zeroVector(n);
    var p_plus = [];
    var p_minus = [];
    for (var k = 0; k < n; k += 1) {
        var y_plus = (1 - p[k]) / lowerTriangular.get(k, k);
        var y_minus = (-1 - p[k]) / lowerTriangular.get(k, k);
        for (var i = k + 1; i < n; i += 1) {
            p_plus.push(p[i] + lowerTriangular.get(i, k) * y_plus);
            p_minus.push(p[i] + lowerTriangular.get(i, k) * y_minus);
        }
        if (Math.abs(y_plus) + MathVectorBasicOperations_2.norm1(p_plus) >= Math.abs(y_minus) + MathVectorBasicOperations_2.norm1(p_minus)) {
            y[k] = y_plus;
            for (var i = k + 1; i < n; i += 1) {
                p[i] = p_plus[i - k - 1];
            }
        }
        else {
            y[k] = y_minus;
            for (var i = k + 1; i < n; i += 1) {
                p[i] = p_minus[i - k - 1];
            }
        }
    }
    var v = solveUpperTriangular(lowerTriangular, y);
    var vNorm = MathVectorBasicOperations_1.norm(v);
    var yNorm = MathVectorBasicOperations_1.norm(y);
    if (vNorm === 0) {
        throw new Error("divideVectorByScalar division by zero");
    }
    return {
        value: yNorm / vNorm,
        vector: MathVectorBasicOperations_5.divideVectorByScalar(v, vNorm)
    };
}
/**
 * Solve the linear problem upper triangular matrix UT x = y
 * @param lowerTriangular The transpose of the upper triangular matrix
 * @param y The vector y
 */
function solveUpperTriangular(lowerTriangular, y) {
    var x = y.slice();
    var n = lowerTriangular.shape[0];
    // LT x = y
    for (var i = n - 1; i >= 0; i -= 1) {
        var sum = x[i];
        for (var k = i + 1; k < n; k += 1) {
            sum -= lowerTriangular.get(k, i) * x[k];
        }
        x[i] = sum / lowerTriangular.get(i, i);
    }
    return x;
}
/**
 * Solve the linear problem lower triangular matrix LT x = b
 * @param lowerTriangular The lower triangular matrix
 * @param b The vector b
 */
function solveLowerTriangular(lowerTriangular, b) {
    if (lowerTriangular.shape[0] !== b.length) {
        throw new Error('solveLowerTriangular: matrix and vector are not the same sizes');
    }
    var x = b.slice();
    var n = lowerTriangular.shape[0];
    // L x = b
    for (var i = 0; i < n; i += 1) {
        var sum = b[i];
        for (var k = i - 1; k >= 0; k -= 1) {
            sum -= lowerTriangular.get(i, k) * x[k];
        }
        x[i] = sum / lowerTriangular.get(i, i);
    }
    return x;
}
/**
 * The frobenius norm
 * @param matrix The matrix
 * @return The square root of the sum of every elements squared
 */
function frobeniusNorm(matrix) {
    var result = 0;
    var m = matrix.shape[0];
    var n = matrix.shape[1];
    for (var i = 0; i < m; i += 1) {
        for (var j = 0; j < n; j += 1) {
            result += Math.pow(matrix.get(i, j), 2);
        }
    }
    result = Math.sqrt(result);
    return result;
}
exports.frobeniusNorm = frobeniusNorm;
/**
* Given a symmetric matrix, compute the Gershgorin upper and lower bounds for its eigenvalues
* @param matrix Symmetric Matrix
* @return .lb (lower bound) and .ub (upper bound)
*/
function gershgorin_bounds(matrix) {
    // Bibliographic Reference : Trust-Region Methods, Conn, Gould and Toint p. 19
    // Gershgorin Bounds : All eigenvalues of a matrix A lie in the complex plane within the intersection
    // of n discs centered at a_(i, i) and of radii : sum of a_(i, j) for 1 ≤ i ≤ n and  j != i
    // When the matrix is symmetric, the eigenvalues are real and the discs become intervals on the real
    // line
    var m = matrix.shape[0];
    var n = matrix.shape[1];
    var matrixRowSums = [];
    for (var i = 0; i < m; i += 1) {
        var rowSum = 0;
        for (var j = 0; j < n; j += 1) {
            rowSum += Math.abs(matrix.get(i, j));
        }
        matrixRowSums.push(rowSum);
    }
    var matrixDiagonal = [];
    var matrixDiagonalAbsolute = [];
    for (var i = 0; i < m; i += 1) {
        matrixDiagonal.push(matrix.get(i, i));
        matrixDiagonalAbsolute.push(Math.abs(matrix.get(i, i)));
    }
    var lb = [];
    var ub = [];
    for (var i = 0; i < m; i += 1) {
        lb.push(matrixDiagonal[i] + matrixDiagonalAbsolute[i] - matrixRowSums[i]);
        ub.push(matrixDiagonal[i] - matrixDiagonalAbsolute[i] + matrixRowSums[i]);
    }
    var lowerBound = Math.min.apply(null, lb);
    var upperBound = Math.max.apply(null, ub);
    return {
        lowerBound: lowerBound,
        upperBound: upperBound
    };
}
exports.gershgorin_bounds = gershgorin_bounds;
/**
 * Solve the scalar quadratic equation ||z + t d|| == trust_radius
 * This is like a line-sphere intersection
 * @param z Vector
 * @param d Vector
 * @param trustRegionRadius
 * @returns The two values of t, sorted from low to high
 */
function getBoundariesIntersections(z, d, trustRegionRadius) {
    if (MathVectorBasicOperations_1.isZeroVector(d)) {
        throw new Error("In getBoundariesInstersections the d vector cannot be the zero vector");
    }
    var a = MathVectorBasicOperations_3.squaredNorm(d);
    var b = 2 * MathVectorBasicOperations_6.dotProduct(z, d);
    var c = MathVectorBasicOperations_3.squaredNorm(z) - trustRegionRadius * trustRegionRadius;
    var sqrtDiscriminant = Math.sqrt(b * b - 4 * a * c);
    var sign_b = MathVectorBasicOperations_9.sign(b);
    if (sign_b === 0) {
        sign_b = 1;
    }
    var aux = b + sqrtDiscriminant * sign_b;
    var ta = -aux / (2 * a);
    var tb = -2 * c / aux;
    return {
        tmin: Math.min(ta, tb),
        tmax: Math.max(ta, tb)
    };
}
exports.getBoundariesIntersections = getBoundariesIntersections;
function updateLambda_using_equation_7_3_14(lowerBound, upperBound, theta) {
    if (theta === void 0) { theta = 0.01; }
    // Bibliographic Reference: Trust-Region Methods, Conn, Gould and Toint p. 190
    return Math.max(Math.sqrt(upperBound * lowerBound), lowerBound + theta * (upperBound - lowerBound));
}


/***/ }),

/***/ "./src/models/CurveModelObserver.ts":
/*!******************************************!*\
  !*** ./src/models/CurveModelObserver.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurveModelObserverInCurveSceneController = exports.CurveModelObserverInFileEventListener = exports.CurveModelObserverInShapeSpaceNavigationEventListener = exports.CurveModelObserverInCurveModelEventListener = exports.CurveModelObserverInChartEventListener = void 0;
var CurveModel_1 = __webpack_require__(/*! ../newModels/CurveModel */ "./src/newModels/CurveModel.ts");
var ClosedCurveModel_1 = __webpack_require__(/*! ../newModels/ClosedCurveModel */ "./src/newModels/ClosedCurveModel.ts");
var NavigationState_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/NavigationState */ "./src/curveShapeSpaceNavigation/NavigationState.ts");
var ShapeNavigableCurve_1 = __webpack_require__(/*! ../shapeNavigableCurve/ShapeNavigableCurve */ "./src/shapeNavigableCurve/ShapeNavigableCurve.ts");
var NavigationCurveModel_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/NavigationCurveModel */ "./src/curveShapeSpaceNavigation/NavigationCurveModel.ts");
var CurveConstraintSelectionState_1 = __webpack_require__(/*! ../controllers/CurveConstraintSelectionState */ "./src/controllers/CurveConstraintSelectionState.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var EventStateAtCurveExtremity_1 = __webpack_require__(/*! ../shapeNavigableCurve/EventStateAtCurveExtremity */ "./src/shapeNavigableCurve/EventStateAtCurveExtremity.ts");
var CurveSceneControllerInteractionStrategy_1 = __webpack_require__(/*! ../controllers/CurveSceneControllerInteractionStrategy */ "./src/controllers/CurveSceneControllerInteractionStrategy.ts");
var CurveModelObserver = /** @class */ (function () {
    function CurveModelObserver() {
    }
    return CurveModelObserver;
}());
var CurveModelObserverInChartEventListener = /** @class */ (function (_super) {
    __extends(CurveModelObserverInChartEventListener, _super);
    function CurveModelObserverInChartEventListener(listener) {
        var _this = _super.call(this) || this;
        _this.listener = listener;
        return _this;
    }
    CurveModelObserverInChartEventListener.prototype.update = function (message) {
        var degreeChange = this.listener.shapeNavigableCurve.curveCategory.degreeChange;
        var curveModelChange = this.listener.shapeNavigableCurve.curveCategory.curveModelChange;
        if (curveModelChange) {
            if (message instanceof CurveModel_1.CurveModel) {
                if (this.listener.hasOwnProperty('curveModel') || this.listener.hasOwnProperty('_curveModel')) {
                    this.listener.curveModel = message;
                    this.listener.resetChartContext();
                }
            }
            else if (message instanceof ClosedCurveModel_1.ClosedCurveModel) {
                if (this.listener.hasOwnProperty('curveModel') || this.listener.hasOwnProperty('_curveModel')) {
                    this.listener.curveModel = message;
                    this.listener.resetChartContext();
                }
            }
        }
    };
    CurveModelObserverInChartEventListener.prototype.reset = function (message) {
        if (message instanceof CurveModel_1.CurveModel) {
            var curveModel = new CurveModel_1.CurveModel();
            if (curveModel.hasOwnProperty('curveModel') || this.listener.hasOwnProperty('_curveModel')) {
                this.listener.curveModel = curveModel;
            }
        }
        else if (message instanceof ClosedCurveModel_1.ClosedCurveModel) {
            var curveModel = new ClosedCurveModel_1.ClosedCurveModel();
            if (curveModel.hasOwnProperty('curveModel') || this.listener.hasOwnProperty('_curveModel')) {
                this.listener.curveModel = curveModel;
            }
        }
    };
    return CurveModelObserverInChartEventListener;
}(CurveModelObserver));
exports.CurveModelObserverInChartEventListener = CurveModelObserverInChartEventListener;
var CurveModelObserverInCurveModelEventListener = /** @class */ (function (_super) {
    __extends(CurveModelObserverInCurveModelEventListener, _super);
    function CurveModelObserverInCurveModelEventListener(listener) {
        var _this = _super.call(this) || this;
        _this.listener = listener;
        return _this;
    }
    CurveModelObserverInCurveModelEventListener.prototype.update = function (message) {
        this.listener.curveModel = message;
        var curveCategory = this.listener.shapeNavigableCurve.curveCategory;
        if (message instanceof CurveModel_1.CurveModel) {
            curveCategory.curveModel = message;
            var curveShapeSpaceNavigator = this.listener.curveShapeSpaceNavigator;
            if (curveShapeSpaceNavigator !== undefined) {
                curveShapeSpaceNavigator.navigationCurveModel.curveModel = message;
                var shapeSpaceConfigurationChange = curveShapeSpaceNavigator.curveControlState.curveControlParamChange;
                var navigationStateChange = curveShapeSpaceNavigator.navigationState.navigationStateChange;
                var curveModelChange = this.listener.shapeNavigableCurve.curveCategory.curveModelChange;
                if (curveModelChange) {
                    var degree = message.spline.degree;
                    this.listener.updateCurveDegreeSelector(degree);
                    this.listener.reinitializeConstraintControl();
                }
                if (navigationStateChange) {
                    var degree = message.spline.degree;
                    this.listener.updateCurveDegreeSelector(degree);
                    // this.listener.shapeNavigableCurve.clampedPoints.push(NO_CONSTRAINT);
                    // this.listener.shapeNavigableCurve.clampedPoints.push(NO_CONSTRAINT);
                    if (curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationWithoutShapeSpaceMonitoring
                        || curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.CCurveNavigationWithoutShapeSpaceMonitoring) {
                        this.listener.resetConstraintControl();
                        this.listener.disableCurveClamping();
                        if (curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationWithoutShapeSpaceMonitoring)
                            curveShapeSpaceNavigator.eventMgmtAtExtremities.changeMngmtOfEventAtExtremity(new EventStateAtCurveExtremity_1.EventSlideOutsideCurve(curveShapeSpaceNavigator.eventMgmtAtExtremities));
                        if (curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.CCurveNavigationWithoutShapeSpaceMonitoring)
                            curveShapeSpaceNavigator.eventMgmtAtExtremities.changeMngmtOfEventAtExtremity(new EventStateAtCurveExtremity_1.NoEventToManageForCurve(curveShapeSpaceNavigator.eventMgmtAtExtremities));
                        curveShapeSpaceNavigator.eventStateAtCrvExtremities = curveShapeSpaceNavigator.eventMgmtAtExtremities.eventStateAtCrvExtremities;
                    }
                    else {
                        this.listener.enableCurveClamping();
                        this.listener.restorePreviousConstraintControl();
                        curveShapeSpaceNavigator.eventStateAtCrvExtremities = curveShapeSpaceNavigator.eventMgmtAtExtremities.eventStateAtCrvExtremities;
                        // this.listener.shapeNavigableCurve.changeCurveConstraintStrategy(new CurveConstraintClampedFirstControlPoint(this.listener.shapeNavigableCurve.curveConstraints));
                    }
                }
                if (shapeSpaceConfigurationChange) {
                    curveCategory.curveModelDifferentialEventsLocations = curveCategory.curveModelDifferentialEvents.crvDiffEventsLocations;
                }
            }
        }
        else if (message instanceof ClosedCurveModel_1.ClosedCurveModel) {
            this.listener.shapeNavigableCurve.curveCategory.curveModel = message;
            var curveShapeSpaceNavigator = this.listener.curveShapeSpaceNavigator;
            if (curveShapeSpaceNavigator !== undefined) {
                curveShapeSpaceNavigator.navigationCurveModel.curveModel = message;
                var shapeSpaceConfigurationChange = curveShapeSpaceNavigator.curveControlState.curveControlParamChange;
                var navigationStateChange = curveShapeSpaceNavigator.navigationState.navigationStateChange;
                var curveModelChange = this.listener.shapeNavigableCurve.curveCategory.curveModelChange;
                if (curveModelChange) {
                    var degree = message.spline.degree;
                    this.listener.updateCurveDegreeSelector(degree);
                    this.listener.reinitializeConstraintControl();
                }
                if (navigationStateChange) {
                    var degree = message.spline.degree;
                    this.listener.updateCurveDegreeSelector(degree);
                    // this.listener.shapeNavigableCurve.clampedPoints.push(NO_CONSTRAINT);
                    // this.listener.shapeNavigableCurve.clampedPoints.push(NO_CONSTRAINT);
                    if (curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationWithoutShapeSpaceMonitoring
                        || curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.CCurveNavigationWithoutShapeSpaceMonitoring) {
                        if (curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.CCurveNavigationWithoutShapeSpaceMonitoring)
                            curveShapeSpaceNavigator.eventMgmtAtExtremities.changeMngmtOfEventAtExtremity(new EventStateAtCurveExtremity_1.NoEventToManageForCurve(curveShapeSpaceNavigator.eventMgmtAtExtremities));
                        this.listener.resetConstraintControl();
                        this.listener.disableCurveClamping();
                    }
                    else {
                        this.listener.enableCurveClamping();
                        this.listener.restorePreviousConstraintControl();
                        curveShapeSpaceNavigator.eventMgmtAtExtremities.changeMngmtOfEventAtExtremity(new EventStateAtCurveExtremity_1.NoEventToManageForCurve(curveShapeSpaceNavigator.eventMgmtAtExtremities));
                        curveShapeSpaceNavigator.eventStateAtCrvExtremities = curveShapeSpaceNavigator.eventMgmtAtExtremities.eventStateAtCrvExtremities;
                        // this.listener.shapeNavigableCurve.changeCurveConstraintStrategy(new CurveConstraintClampedFirstControlPoint(this.listener.shapeNavigableCurve.curveConstraints));
                    }
                }
                if (shapeSpaceConfigurationChange) {
                    curveCategory.curveModelDifferentialEventsLocations = curveCategory.curveModelDifferentialEvents.crvDiffEventsLocations;
                }
            }
        }
    };
    CurveModelObserverInCurveModelEventListener.prototype.reset = function (message) {
        if (message instanceof CurveModel_1.CurveModel) {
            var curveModel = new CurveModel_1.CurveModel();
            this.listener.curveModel = curveModel;
            this.listener.shapeNavigableCurve.curveCategory.curveModel = curveModel;
        }
        else if (message instanceof ClosedCurveModel_1.ClosedCurveModel) {
            console.log("something to do there with ClosedCurveModel in CurveModelEventListener");
        }
    };
    return CurveModelObserverInCurveModelEventListener;
}(CurveModelObserver));
exports.CurveModelObserverInCurveModelEventListener = CurveModelObserverInCurveModelEventListener;
var CurveModelObserverInShapeSpaceNavigationEventListener = /** @class */ (function (_super) {
    __extends(CurveModelObserverInShapeSpaceNavigationEventListener, _super);
    function CurveModelObserverInShapeSpaceNavigationEventListener(listener) {
        var _this = _super.call(this) || this;
        _this.listener = listener;
        _this.navigationState = _this.listener.curveShapeSpaceNavigator.navigationState;
        return _this;
    }
    CurveModelObserverInShapeSpaceNavigationEventListener.prototype.update = function (message) {
        var curveShapeSpaceNavigator = this.listener.curveShapeSpaceNavigator;
        var curveModelChange = curveShapeSpaceNavigator.shapeNavigableCurve.curveCategory.curveModelChange;
        var navigationStateChange = curveShapeSpaceNavigator.navigationState.navigationStateChange;
        var shapeSpaceConfigurationChange = curveShapeSpaceNavigator.curveControlState.curveControlParamChange;
        this.listener.curveShapeSpaceNavigator.navigationCurveModel.curveModel = message;
        if (curveModelChange) {
            if (message instanceof CurveModel_1.CurveModel) {
                curveShapeSpaceNavigator.navigationCurveModel = new NavigationCurveModel_1.OpenCurveShapeSpaceNavigator(curveShapeSpaceNavigator);
                if (curveShapeSpaceNavigator.navigationCurveModel instanceof NavigationCurveModel_1.OpenCurveShapeSpaceNavigator) {
                    curveShapeSpaceNavigator.navigationCurveModel.changeNavigationState(new NavigationState_1.OCurveNavigationWithoutShapeSpaceMonitoring(curveShapeSpaceNavigator.navigationCurveModel));
                }
            }
            else if (message instanceof ClosedCurveModel_1.ClosedCurveModel) {
                curveShapeSpaceNavigator.navigationCurveModel = new NavigationCurveModel_1.ClosedCurveShapeSpaceNavigator(this.listener.curveShapeSpaceNavigator);
                if (curveShapeSpaceNavigator.navigationCurveModel instanceof NavigationCurveModel_1.ClosedCurveShapeSpaceNavigator) {
                    curveShapeSpaceNavigator.navigationCurveModel.changeNavigationState(new NavigationState_1.CCurveNavigationWithoutShapeSpaceMonitoring(curveShapeSpaceNavigator.navigationCurveModel));
                }
            }
            this.listener.resetCurveShapeControlButtons();
            this.listener.disableControlOfCurvatureExtrema();
            this.listener.disableControlOfInflections();
            this.listener.disableControlOfSliding();
            this.listener.disableEventMgmtAtCurveExt();
            this.listener.reinitializeNavigationMode();
            curveShapeSpaceNavigator.eventMgmtAtExtremities.changeMngmtOfEventAtExtremity(new EventStateAtCurveExtremity_1.NoEventToManageForCurve(curveShapeSpaceNavigator.eventMgmtAtExtremities));
            curveShapeSpaceNavigator.navigationState = curveShapeSpaceNavigator.navigationCurveModel.navigationState;
            this.listener.reinitializePreviousShapeControlButtons();
        }
        else if (!curveModelChange && navigationStateChange) {
            this.updateNavigationState();
            // this.updateCurveModelMaintainNavigationState();
            if (this.listener.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationWithoutShapeSpaceMonitoring
                || this.listener.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.CCurveNavigationWithoutShapeSpaceMonitoring) {
                this.listener.storeCurrentCurveShapeControlButtons();
                this.listener.resetCurveShapeControlButtons();
                this.listener.disableControlOfCurvatureExtrema();
                this.listener.disableControlOfInflections();
                this.listener.disableControlOfSliding();
                this.listener.disableEventMgmtAtCurveExt();
                if (this.listener.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationWithoutShapeSpaceMonitoring)
                    curveShapeSpaceNavigator.eventMgmtAtExtremities.changeMngmtOfEventAtExtremity(new EventStateAtCurveExtremity_1.EventSlideOutsideCurve(curveShapeSpaceNavigator.eventMgmtAtExtremities));
                if (this.listener.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.CCurveNavigationWithoutShapeSpaceMonitoring)
                    curveShapeSpaceNavigator.eventMgmtAtExtremities.changeMngmtOfEventAtExtremity(new EventStateAtCurveExtremity_1.NoEventToManageForCurve(curveShapeSpaceNavigator.eventMgmtAtExtremities));
            }
            else {
                // curveShapeSpaceNavigator.navigationCurveModel.currentCurve = curveShapeSpaceNavigator.shapeNavigableCurve.curveCategory.curveModel.spline;
                // curveShapeSpaceNavigator.navigationCurveModel.optimizedCurve = curveShapeSpaceNavigator.navigationCurveModel.currentCurve;
                this.listener.enableControlOfCurvatureExtrema();
                this.listener.enableControlOfInflections();
                this.listener.enableControlOfSliding();
                this.listener.updateCurveShapeControlButtons();
                this.listener.restorePreviousCurveShapeControlButtons();
                this.listener.curveShapeSpaceNavigator.navigationCurveModel.curveControlState = this.listener.curveShapeSpaceNavigator.curveControlState;
                if (this.listener.sliding) {
                    curveShapeSpaceNavigator.eventMgmtAtExtremities.changeMngmtOfEventAtExtremity(new EventStateAtCurveExtremity_1.EventStayInsideCurve(curveShapeSpaceNavigator.eventMgmtAtExtremities));
                }
            }
        }
        else if (shapeSpaceConfigurationChange) {
            // nothing to do there at the moment
        }
    };
    CurveModelObserverInShapeSpaceNavigationEventListener.prototype.updateNavigationState = function () {
        this.navigationState = this.listener.curveShapeSpaceNavigator.navigationState;
    };
    CurveModelObserverInShapeSpaceNavigationEventListener.prototype.updateCurveModelMaintainNavigationState = function () {
        if (this.navigationState instanceof NavigationState_1.OCurveNavigationWithoutShapeSpaceMonitoring
            || this.navigationState instanceof NavigationState_1.CCurveNavigationWithoutShapeSpaceMonitoring) {
            this.listener.curveShapeSpaceNavigator.navigationState.setNavigationWithoutShapeSpaceMonitoring();
        }
        else if (this.navigationState instanceof NavigationState_1.OCurveNavigationThroughSimplerShapeSpaces
            || this.navigationState instanceof NavigationState_1.CCurveNavigationThroughSimplerShapeSpaces) {
            this.listener.curveShapeSpaceNavigator.navigationState.setNavigationThroughSimplerShapeSpaces();
        }
        else if (this.navigationState instanceof NavigationState_1.OCurveNavigationStrictlyInsideShapeSpace
            || this.navigationState instanceof NavigationState_1.CCurveNavigationStrictlyInsideShapeSpace) {
            this.listener.curveShapeSpaceNavigator.navigationState.setNavigationStrictlyInsideShapeSpace();
        }
    };
    CurveModelObserverInShapeSpaceNavigationEventListener.prototype.reset = function (message) {
        if (message instanceof CurveModel_1.CurveModel) {
            var curveModel = new CurveModel_1.CurveModel();
            if (curveModel.hasOwnProperty('curveModel') || this.listener.hasOwnProperty('_curveModel')) {
                this.listener.curveShapeSpaceNavigator.navigationCurveModel.curveModel = this.listener.curveShapeSpaceNavigator.shapeNavigableCurve.curveCategory.curveModel;
            }
        }
        else if (message instanceof ClosedCurveModel_1.ClosedCurveModel) {
            console.log("something to do there with ClosedCurveModel in ShapeSpaceNavigationEventListener");
        }
    };
    return CurveModelObserverInShapeSpaceNavigationEventListener;
}(CurveModelObserver));
exports.CurveModelObserverInShapeSpaceNavigationEventListener = CurveModelObserverInShapeSpaceNavigationEventListener;
var CurveModelObserverInFileEventListener = /** @class */ (function (_super) {
    __extends(CurveModelObserverInFileEventListener, _super);
    function CurveModelObserverInFileEventListener(listener) {
        var _this = _super.call(this) || this;
        _this.listener = listener;
        return _this;
    }
    CurveModelObserverInFileEventListener.prototype.update = function (message) {
        if (message instanceof CurveModel_1.CurveModel) {
            this.listener.curveModel = this.listener.shapeNavigableCurve.curveCategory.curveModel;
            console.log("something to do there with CurveModel in FileEventListener");
        }
        else if (message instanceof ClosedCurveModel_1.ClosedCurveModel) {
            this.listener.curveModel = this.listener.shapeNavigableCurve.curveCategory.curveModel;
            console.log("something to do there with ClosedCurveModel in FileEventListener");
        }
    };
    CurveModelObserverInFileEventListener.prototype.reset = function (message) {
        if (message instanceof CurveModel_1.CurveModel) {
            console.log("something to do there with CurveModel in FileEventListener");
        }
        else if (message instanceof ClosedCurveModel_1.ClosedCurveModel) {
            console.log("something to do there with ClosedCurveModel in FileEventListener");
        }
    };
    return CurveModelObserverInFileEventListener;
}(CurveModelObserver));
exports.CurveModelObserverInFileEventListener = CurveModelObserverInFileEventListener;
var CurveModelObserverInCurveSceneController = /** @class */ (function (_super) {
    __extends(CurveModelObserverInCurveSceneController, _super);
    function CurveModelObserverInCurveSceneController(listener) {
        var _this = _super.call(this) || this;
        _this.listener = listener;
        return _this;
    }
    CurveModelObserverInCurveSceneController.prototype.update = function (message) {
        this.listener.curveModel = message;
        this.listener.curveModelDifferentialEventsExtractor = this.listener.shapeNavigableCurve.curveCategory.curveModelDifferentialEvents;
        this.listener.curveDiffEventsLocations = this.listener.curveModelDifferentialEventsExtractor.crvDiffEventsLocations;
        if (!this.listener.shapeNavigableCurve.curveCategory.curveModelChange)
            this.listener.removeCurveObservers();
        this.listener.initCurveSceneView();
        var navigationState = this.listener.curveShapeSpaceNavigator.navigationState;
        this.listener.navigationState = navigationState;
        if (!this.listener.shapeNavigableCurve.curveCategory.curveModelChange) {
            if (navigationState instanceof NavigationState_1.OCurveNavigationWithoutShapeSpaceMonitoring ||
                navigationState instanceof NavigationState_1.CCurveNavigationWithoutShapeSpaceMonitoring) {
                if (this.listener.shapeNavigableCurve.controlOfCurveClamping) {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "update", " incorrect status of control of curve clamping.");
                    error.logMessageToConsole();
                }
                this.listener.curveConstraintTransitionTo(new CurveConstraintSelectionState_1.HandleConstraintAtPoint1Point2NoConstraintState(this.listener));
                this.listener.changeSceneInteraction(new CurveSceneControllerInteractionStrategy_1.CurveSceneControllerNoShapeSpaceConstraintsCPSelection(this.listener));
                this.listener.clampedControlPointView.clearSelectedPoints();
            }
            else {
                if (navigationState instanceof NavigationState_1.OCurveNavigationThroughSimplerShapeSpaces ||
                    navigationState instanceof NavigationState_1.CCurveNavigationThroughSimplerShapeSpaces) {
                    this.listener.changeSceneInteraction(new CurveSceneControllerInteractionStrategy_1.CurveSceneControllerNestedSimplifiedShapeSpacesCPSelection(this.listener));
                }
                else if (navigationState instanceof NavigationState_1.OCurveNavigationStrictlyInsideShapeSpace ||
                    navigationState instanceof NavigationState_1.CCurveNavigationStrictlyInsideShapeSpace) {
                    this.listener.changeSceneInteraction(new CurveSceneControllerInteractionStrategy_1.CurveSceneControllerStrictlyInsideShapeSpaceCPSelection(this.listener));
                }
                if (!this.listener.shapeNavigableCurve.controlOfCurveClamping) {
                    this.listener.curveConstraintTransitionTo(new CurveConstraintSelectionState_1.HandleConstraintAtPoint1Point2NoConstraintState(this.listener));
                    this.listener.clampedControlPointView.clearSelectedPoints();
                }
                else {
                    if (this.listener.shapeNavigableCurve.clampedPoints[0] !== ShapeNavigableCurve_1.NO_CONSTRAINT) {
                        this.listener.curveConstraintTransitionTo(new CurveConstraintSelectionState_1.HandleConstraintAtPoint1ConstraintPoint2NoConstraintState(this.listener));
                    }
                    if (this.listener.shapeNavigableCurve.clampedPoints[1] !== ShapeNavigableCurve_1.NO_CONSTRAINT) {
                        if (this.listener.curveConstraintSelectionState instanceof CurveConstraintSelectionState_1.HandleConstraintAtPoint1Point2NoConstraintState) {
                            this.listener.curveConstraintTransitionTo(new CurveConstraintSelectionState_1.HandleConstraintAtPoint1NoConstraintPoint2ConstraintState(this.listener));
                        }
                        else if (this.listener.curveConstraintSelectionState instanceof CurveConstraintSelectionState_1.HandleConstraintAtPoint1ConstraintPoint2NoConstraintState) {
                            this.listener.curveConstraintTransitionTo(new CurveConstraintSelectionState_1.HandleConstraintAtPoint1Point2ConstraintState(this.listener));
                        }
                    }
                }
            }
            this.listener.curveModel.notifyObservers();
        }
        else {
            if (message instanceof CurveModel_1.CurveModel) {
                this.listener.curveModel = this.listener.shapeNavigableCurve.curveCategory.curveModel;
                // this.listener.initCurveSceneView();
            }
            else if (message instanceof ClosedCurveModel_1.ClosedCurveModel) {
                this.listener.curveModel = this.listener.shapeNavigableCurve.curveCategory.curveModel;
                this.listener.removeCurveObservers();
                this.listener.initCurveSceneView();
                var navigationState_1 = this.listener.curveShapeSpaceNavigator.navigationState;
                this.listener.navigationState = navigationState_1;
            }
        }
        this.listener.renderFrame();
    };
    CurveModelObserverInCurveSceneController.prototype.reset = function (message) {
    };
    return CurveModelObserverInCurveSceneController;
}(CurveModelObserver));
exports.CurveModelObserverInCurveSceneController = CurveModelObserverInCurveSceneController;


/***/ }),

/***/ "./src/newBsplines/AbstractBSplineR1toR1.ts":
/*!**************************************************!*\
  !*** ./src/newBsplines/AbstractBSplineR1toR1.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractBSplineR1toR1 = exports.MAX_ITERATIONS_FOR_ZEROS_COMPUTATION = exports.CONVERGENCE_TOLERANCE_FOR_ZEROS_COMPUTATION = void 0;
var Piegl_Tiller_NURBS_Book_1 = __webpack_require__(/*! ./Piegl_Tiller_NURBS_Book */ "./src/newBsplines/Piegl_Tiller_NURBS_Book.ts");
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var Knot_1 = __webpack_require__(/*! ./Knot */ "./src/newBsplines/Knot.ts");
var AbstractKnotSequenceCurve_1 = __webpack_require__(/*! ./AbstractKnotSequenceCurve */ "./src/newBsplines/AbstractKnotSequenceCurve.ts");
exports.CONVERGENCE_TOLERANCE_FOR_ZEROS_COMPUTATION = 10e-8;
exports.MAX_ITERATIONS_FOR_ZEROS_COMPUTATION = 1e6;
/**
 * A B-Spline function from a one dimensional real space to a one dimensional real space
 */
var AbstractBSplineR1toR1 = /** @class */ (function () {
    /**
     * Create a B-Spline
     * @param controlPoints The control points array
     * @param knots The knot vector
     */
    function AbstractBSplineR1toR1(controlPoints, knots) {
        if (controlPoints === void 0) { controlPoints = [0]; }
        if (knots === void 0) { knots = [0, 1]; }
        this._controlPoints = [];
        this._degree = 0;
        this._controlPoints = __spread(controlPoints);
        this._degree = this.computeDegree(knots.length);
    }
    AbstractBSplineR1toR1.prototype.computeDegree = function (knotLength) {
        var degree = knotLength - this._controlPoints.length - 1;
        if (degree < 0) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "computeDegree", "Negative degree BSplineR1toR1 are not supported.");
            error.logMessageToConsole();
        }
        return degree;
    };
    Object.defineProperty(AbstractBSplineR1toR1.prototype, "degree", {
        get: function () {
            return this._degree;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractBSplineR1toR1.prototype, "controlPoints", {
        get: function () {
            return __spread(this._controlPoints);
        },
        set: function (controlPoints) {
            this._controlPoints = __spread(controlPoints);
            this._degree = this.computeDegree(this._increasingKnotSequence.length());
        },
        enumerable: false,
        configurable: true
    });
    /**
     * B-Spline evaluation
     * @param u The parameter
     * @returns the value of the B-Spline at u
     */
    AbstractBSplineR1toR1.prototype.evaluate = function (u) {
        var span = this._increasingKnotSequence.findSpan(u);
        var basis = Piegl_Tiller_NURBS_Book_1.basisFunctionsFromSequence(span.knotIndex, u, this._increasingKnotSequence);
        var result = 0;
        for (var i = 0; i < this._degree + 1; i += 1) {
            result += basis[i] * this._controlPoints[span.knotIndex - this._degree + i];
        }
        return result;
    };
    AbstractBSplineR1toR1.prototype.distinctKnots = function () {
        return this._increasingKnotSequence.distinctAbscissae();
    };
    AbstractBSplineR1toR1.prototype.zeros = function (tolerance) {
        var e_1, _a, e_2, _b, e_3, _c;
        if (tolerance === void 0) { tolerance = exports.CONVERGENCE_TOLERANCE_FOR_ZEROS_COMPUTATION; }
        //see : chapter 11 : Computing Zeros of Splines by Tom Lyche and Knut Morken for u_star method
        var spline = this.clone();
        var greville = [];
        var maxError = tolerance * 2;
        var vertexIndex = [];
        var it = 0;
        while (maxError > tolerance && it < exports.MAX_ITERATIONS_FOR_ZEROS_COMPUTATION) {
            it += 1;
            var maximum = 0;
            var newKnots = [];
            vertexIndex = findControlPointsFollowingSignChanges(spline);
            greville = spline.grevilleAbscissae();
            try {
                for (var vertexIndex_1 = (e_1 = void 0, __values(vertexIndex)), vertexIndex_1_1 = vertexIndex_1.next(); !vertexIndex_1_1.done; vertexIndex_1_1 = vertexIndex_1.next()) {
                    var v = vertexIndex_1_1.value;
                    var uLeft = greville[v - 1];
                    var uRight = greville[v];
                    if (uRight - uLeft > maximum) {
                        maximum = uRight - uLeft;
                    }
                    if (uRight - uLeft > tolerance) {
                        var lineZero = this.robustFindLineZero(uLeft, spline.controlPoints[v - 1], uRight, spline.controlPoints[v]);
                        newKnots.push(0.05 * (uLeft + uRight) / 2 + 0.95 * lineZero);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (vertexIndex_1_1 && !vertexIndex_1_1.done && (_a = vertexIndex_1.return)) _a.call(vertexIndex_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            try {
                for (var newKnots_1 = (e_2 = void 0, __values(newKnots)), newKnots_1_1 = newKnots_1.next(); !newKnots_1_1.done; newKnots_1_1 = newKnots_1.next()) {
                    var knot = newKnots_1_1.value;
                    spline.insertKnot(knot);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (newKnots_1_1 && !newKnots_1_1.done && (_b = newKnots_1.return)) _b.call(newKnots_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            maxError = maximum;
        }
        var result = [];
        if (it === exports.MAX_ITERATIONS_FOR_ZEROS_COMPUTATION) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "zeros", "Maximum number of iterations reached when computing zeros of BSplineR1toR1");
            error.logMessageToConsole();
            return result;
        }
        vertexIndex = findControlPointsFollowingSignChanges(spline);
        try {
            for (var vertexIndex_2 = __values(vertexIndex), vertexIndex_2_1 = vertexIndex_2.next(); !vertexIndex_2_1.done; vertexIndex_2_1 = vertexIndex_2.next()) {
                var v = vertexIndex_2_1.value;
                result.push(greville[v]);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (vertexIndex_2_1 && !vertexIndex_2_1.done && (_c = vertexIndex_2.return)) _c.call(vertexIndex_2);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return result;
    };
    AbstractBSplineR1toR1.prototype.grevilleAbscissae = function () {
        var e_4, _a;
        var result = [];
        for (var i = 0; i < this._controlPoints.length; i += 1) {
            var sum = 0;
            var subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(i + 1), new Knot_1.KnotIndexIncreasingSequence(i + this._degree));
            try {
                for (var subSequence_1 = (e_4 = void 0, __values(subSequence)), subSequence_1_1 = subSequence_1.next(); !subSequence_1_1.done; subSequence_1_1 = subSequence_1.next()) {
                    var knot = subSequence_1_1.value;
                    sum += knot;
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (subSequence_1_1 && !subSequence_1_1.done && (_a = subSequence_1.return)) _a.call(subSequence_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
            result.push(sum / this._degree);
        }
        return result;
    };
    AbstractBSplineR1toR1.prototype.insertKnot = function (u, times) {
        if (times === void 0) { times = 1; }
        if (times <= 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "insertKnot", "knot multiplicity prescribed equals zero or is negative. No knot insertion.");
            warning.logMessageToConsole();
            return;
        }
        var index = this._increasingKnotSequence.findSpan(u);
        var multiplicity = 0;
        var newControlPoints = [];
        if (this._increasingKnotSequence.isAbscissaCoincidingWithKnot(u)
            && Math.abs(u - this._increasingKnotSequence.abscissaAtIndex(index)) < AbstractKnotSequenceCurve_1.KNOT_COINCIDENCE_TOLERANCE) {
            multiplicity = this._increasingKnotSequence.knotMultiplicityAtAbscissa(this._increasingKnotSequence.abscissaAtIndex(index));
        }
        if ((multiplicity + times) > (this._degree + 1)) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "insertKnot", "The number of times the knot should be inserted is incompatible with the curve degree.");
            console.log("u = ", u, " multiplicity + times = ", (multiplicity + times));
            error.logMessageToConsole();
            return;
        }
        var indexStrictInc = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(index);
        var newIndexStrictInc = new Knot_1.KnotIndexStrictlyIncreasingSequence();
        for (var t = 0; t < times; t += 1) {
            for (var i = 0; i < index.knotIndex - this._degree + 1; i += 1) {
                newControlPoints[i] = this._controlPoints[i];
            }
            var subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(index.knotIndex - this._degree + 1), new Knot_1.KnotIndexIncreasingSequence(index.knotIndex - multiplicity + this._degree));
            for (var i = index.knotIndex - this._degree + 1; i <= index.knotIndex - multiplicity; i += 1) {
                var offset = index.knotIndex - this._degree + 1;
                var alpha = (u - subSequence[i - offset]) / (subSequence[i + this._degree - offset] - subSequence[i - offset]);
                newControlPoints[i] = this._controlPoints[i - 1] * (1 - alpha) + this._controlPoints[i] * alpha;
            }
            for (var i = index.knotIndex - multiplicity; i < this._controlPoints.length; i += 1) {
                newControlPoints[i + 1] = this._controlPoints[i];
            }
            if (multiplicity > 0) {
                this._increasingKnotSequence.raiseKnotMultiplicity(indexStrictInc, 1);
            }
            else if (multiplicity === 0 && t === 0) {
                this._increasingKnotSequence.insertKnot(u, 1);
                var newIndex = this._increasingKnotSequence.findSpan(u);
                newIndexStrictInc = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(newIndex);
            }
            else {
                this._increasingKnotSequence.raiseKnotMultiplicity(newIndexStrictInc, 1);
            }
            this._controlPoints = newControlPoints.slice();
        }
    };
    AbstractBSplineR1toR1.prototype.knotMultiplicity = function (index) {
        var result = this._increasingKnotSequence.knotMultiplicity(index);
        return result;
    };
    AbstractBSplineR1toR1.prototype.clamp = function (u) {
        // Piegl and Tiller, The NURBS book, p: 151
        var index = this._increasingKnotSequence.findSpan(u);
        var newControlPoints = [];
        var multiplicity = 0;
        var indexPlusDegree = new Knot_1.KnotIndexIncreasingSequence(index.knotIndex + this.degree);
        if (this._increasingKnotSequence.isAbscissaCoincidingWithKnot(u)
            && Math.abs(u - this._increasingKnotSequence.abscissaAtIndex(index)) < AbstractKnotSequenceCurve_1.KNOT_COINCIDENCE_TOLERANCE) {
            multiplicity = this._increasingKnotSequence.knotMultiplicityAtAbscissa(this._increasingKnotSequence.abscissaAtIndex(index));
        }
        else if (this._increasingKnotSequence.isAbscissaCoincidingWithKnot(u)
            && Math.abs(u - this._increasingKnotSequence.abscissaAtIndex(indexPlusDegree)) < AbstractKnotSequenceCurve_1.KNOT_COINCIDENCE_TOLERANCE) {
            var temporary_mult = 0;
            var tempIndex = new Knot_1.KnotIndexIncreasingSequence(this._increasingKnotSequence.length() - 1);
            while (tempIndex.knotIndex >= (index.knotIndex + this._degree)) {
                var tempIndexStrictInc = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(tempIndex);
                if (this.knotMultiplicity(tempIndexStrictInc) > temporary_mult)
                    temporary_mult = this.knotMultiplicity(tempIndexStrictInc);
                tempIndex.knotIndex--;
            }
            // multiplicity = this.knotMultiplicity(index + this._degree);
            multiplicity = temporary_mult;
        }
        var times = this._degree - multiplicity + 1;
        var indexStrictInc = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(index);
        var newIndexStrictInc = new Knot_1.KnotIndexStrictlyIncreasingSequence();
        for (var t = 0; t < times; t += 1) {
            for (var i = 0; i < index.knotIndex - this._degree + 1; i += 1) {
                newControlPoints[i] = this._controlPoints[i];
            }
            if ((index.knotIndex - this._degree + 1) <= (index.knotIndex - multiplicity)) {
                var subSequence = [];
                if ((index.knotIndex - multiplicity) > (index.knotIndex + 1)) {
                    subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(index.knotIndex - this._degree + 1), new Knot_1.KnotIndexIncreasingSequence(index.knotIndex - multiplicity));
                }
                else {
                    subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(index.knotIndex - this._degree + 1), new Knot_1.KnotIndexIncreasingSequence(index.knotIndex + 1));
                }
                for (var i = index.knotIndex - this._degree + 1; i <= index.knotIndex - multiplicity; i += 1) {
                    var offset = index.knotIndex - this._degree + 1;
                    var alpha = (u - subSequence[i - offset]) / (subSequence[i + this._degree - offset] - subSequence[i - offset]);
                    newControlPoints[i] = this._controlPoints[i - 1] * (1 - alpha) + this._controlPoints[i] * alpha;
                }
            }
            for (var i = index.knotIndex - multiplicity; i < this._controlPoints.length; i += 1) {
                newControlPoints[i + 1] = this._controlPoints[i];
            }
            if (multiplicity > 0) {
                this._increasingKnotSequence.raiseKnotMultiplicity(indexStrictInc, 1);
            }
            else if (multiplicity === 0 && t === 0) {
                this._increasingKnotSequence.insertKnot(u, 1);
                var newIndex = this._increasingKnotSequence.findSpan(u);
                newIndexStrictInc = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(newIndex);
            }
            else {
                this._increasingKnotSequence.raiseKnotMultiplicity(newIndexStrictInc, 1);
            }
            this._controlPoints = newControlPoints.slice();
            multiplicity += 1;
            index.knotIndex += 1;
        }
    };
    AbstractBSplineR1toR1.prototype.controlPolygonNumberOfSignChanges = function () {
        var result = 0;
        for (var i = 0; i < this._controlPoints.length - 1; i += 1) {
            if (Math.sign(this._controlPoints[i]) !== Math.sign(this._controlPoints[i + 1])) {
                result += 1;
            }
        }
        return result;
    };
    AbstractBSplineR1toR1.prototype.controlPolygonZeros = function () {
        var result = [];
        var greville = this.grevilleAbscissae();
        for (var i = 0; i < this._controlPoints.length - 1; i += 1) {
            if (Math.sign(this._controlPoints[i]) !== Math.sign(this._controlPoints[i + 1])) {
                result.push(this.findLineZero(greville[i], this._controlPoints[i], greville[i + 1], this._controlPoints[i + 1]));
            }
        }
        return result;
    };
    AbstractBSplineR1toR1.prototype.findLineZero = function (x1, y1, x2, y2) {
        // find the zero of the line y = ax + b
        var a = (y2 - y1) / (x2 - x1);
        var b = y1 - a * x1;
        return -b / a;
    };
    AbstractBSplineR1toR1.prototype.robustFindLineZero = function (x1, y1, x2, y2) {
        var result = this.findLineZero(x1, y1, x2, y2);
        if (isNaN(result)) {
            return x1;
        }
        return result;
    };
    AbstractBSplineR1toR1.prototype.zerosPolygonVsFunctionDiffViewer = function (tolerance) {
        var e_5, _a;
        if (tolerance === void 0) { tolerance = exports.CONVERGENCE_TOLERANCE_FOR_ZEROS_COMPUTATION; }
        //see : chapter 11 : Computing Zeros of Splines by Tom Lyche and Knut Morken for u_star method
        var spline = this.clone();
        // let spline = new BSpline_R1_to_R1(this.controlPoints.slice(), this.knots.slice())
        var greville = spline.grevilleAbscissae();
        var maxError = tolerance * 2;
        var vertexIndex = [];
        var cpZeros = spline.controlPolygonNumberOfSignChanges();
        var result = [];
        var lastInsertedKnot = 0;
        while (maxError > tolerance) {
            var temp = spline.controlPolygonNumberOfSignChanges();
            if (cpZeros !== temp) {
                result.push(lastInsertedKnot);
            }
            cpZeros = temp;
            var cpLeft = spline.controlPoints[0];
            vertexIndex = [];
            var maximum = 0;
            for (var index = 1; index < spline.controlPoints.length; index += 1) {
                var cpRight = spline.controlPoints[index];
                if (cpLeft <= 0 && cpRight > 0) {
                    vertexIndex.push(index);
                }
                if (cpLeft >= 0 && cpRight < 0) {
                    vertexIndex.push(index);
                }
                cpLeft = cpRight;
            }
            try {
                for (var vertexIndex_3 = (e_5 = void 0, __values(vertexIndex)), vertexIndex_3_1 = vertexIndex_3.next(); !vertexIndex_3_1.done; vertexIndex_3_1 = vertexIndex_3.next()) {
                    var index = vertexIndex_3_1.value;
                    var uLeft = greville[index - 1];
                    var uRight = greville[index];
                    if (uRight - uLeft > maximum) {
                        maximum = uRight - uLeft;
                    }
                    if (uRight - uLeft > tolerance) {
                        lastInsertedKnot = (uLeft + uRight) / 2;
                        spline.insertKnot(lastInsertedKnot);
                        greville = spline.grevilleAbscissae();
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (vertexIndex_3_1 && !vertexIndex_3_1.done && (_a = vertexIndex_3.return)) _a.call(vertexIndex_3);
                }
                finally { if (e_5) throw e_5.error; }
            }
            maxError = maximum;
        }
        return result;
    };
    AbstractBSplineR1toR1.prototype.getExtremumClosestToZero = function () {
        var locExtremum = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
        var valExtremum = 0.0;
        var locExtrema = this.derivative().zeros();
        if (locExtrema.length > 1) {
            var closestVal = this.evaluate(locExtrema[0]);
            var locExtremum_1 = locExtrema[0];
            for (var location_1 = 1; location_1 < locExtrema.length; location_1++) {
                var currentVal = this.evaluate(locExtrema[location_1]);
                if (Math.abs(currentVal) < Math.abs(closestVal)) {
                    closestVal = currentVal;
                    locExtremum_1 = locExtrema[location_1];
                }
            }
            return { location: locExtremum_1, value: closestVal };
        }
        else if (locExtrema.length === 1) {
            return { location: locExtrema[0], value: this.evaluate(locExtrema[0]) };
        }
        return { location: locExtremum, value: valExtremum };
    };
    return AbstractBSplineR1toR1;
}());
exports.AbstractBSplineR1toR1 = AbstractBSplineR1toR1;
function findControlPointsFollowingSignChanges(spline) {
    var cpLeft = spline.controlPoints[0];
    var vertexIndex = [];
    for (var index = 1; index < spline.controlPoints.length; index += 1) {
        var cpRight = spline.controlPoints[index];
        if (cpLeft <= 0 && cpRight > 0) {
            vertexIndex.push(index);
        }
        if (cpLeft >= 0 && cpRight < 0) {
            vertexIndex.push(index);
        }
        cpLeft = cpRight;
    }
    if (spline.controlPoints[spline.controlPoints.length - 1] == 0) {
        vertexIndex.push(spline.controlPoints.length - 1);
    }
    return vertexIndex;
}


/***/ }),

/***/ "./src/newBsplines/AbstractBSplineR1toR2.ts":
/*!**************************************************!*\
  !*** ./src/newBsplines/AbstractBSplineR1toR2.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deepCopyControlPoints = exports.AbstractBSplineR1toR2 = exports.TOL_KNOT_COINCIDENCE = exports.curveSegment = void 0;
var Piegl_Tiller_NURBS_Book_1 = __webpack_require__(/*! ./Piegl_Tiller_NURBS_Book */ "./src/newBsplines/Piegl_Tiller_NURBS_Book.ts");
var Vector2d_1 = __webpack_require__(/*! ../mathVector/Vector2d */ "./src/mathVector/Vector2d.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var Knot_1 = __webpack_require__(/*! ./Knot */ "./src/newBsplines/Knot.ts");
var AbstractOpenKnotSequenceCurve_1 = __webpack_require__(/*! ./AbstractOpenKnotSequenceCurve */ "./src/newBsplines/AbstractOpenKnotSequenceCurve.ts");
var curveSegment;
(function (curveSegment) {
    curveSegment[curveSegment["BEFORE"] = 0] = "BEFORE";
    curveSegment[curveSegment["AFTER"] = 1] = "AFTER";
})(curveSegment = exports.curveSegment || (exports.curveSegment = {}));
;
exports.TOL_KNOT_COINCIDENCE = 1.0E-8;
/**
 * A B-Spline function from a one dimensional real space to a two dimensional real space
 */
var AbstractBSplineR1toR2 = /** @class */ (function () {
    // protected abstract _increasingKnotSequence: IncreasingOpenKnotSequenceInterface;
    /**
     * Create a B-Spline
     * @param controlPoints The control points array
     * @param knots The knot vector
     */
    function AbstractBSplineR1toR2(controlPoints, knots) {
        if (controlPoints === void 0) { controlPoints = [new Vector2d_1.Vector2d(0, 0)]; }
        if (knots === void 0) { knots = [0, 1]; }
        this._controlPoints = deepCopyControlPoints(controlPoints);
        this._degree = this.computeDegree(knots.length);
    }
    AbstractBSplineR1toR2.prototype.computeDegree = function (knotLength) {
        var degree = knotLength - this._controlPoints.length - 1;
        if (degree < 0) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "computeDegree", "Negative degree for BSplines is inconsistent.");
            error.logMessageToConsole();
        }
        return degree;
    };
    Object.defineProperty(AbstractBSplineR1toR2.prototype, "controlPoints", {
        get: function () {
            return deepCopyControlPoints(this._controlPoints);
        },
        set: function (controlPoints) {
            this._controlPoints = deepCopyControlPoints(controlPoints);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractBSplineR1toR2.prototype, "degree", {
        get: function () {
            return this._degree;
        },
        enumerable: false,
        configurable: true
    });
    AbstractBSplineR1toR2.prototype.getControlPoint = function (index) {
        return this._controlPoints[index].clone();
    };
    /**
     * B-Spline evaluation
     * @param u The parameter
     * @returns the value of the B-Spline at u
     */
    AbstractBSplineR1toR2.prototype.evaluate = function (u) {
        var span = this._increasingKnotSequence.findSpan(u);
        var basis = Piegl_Tiller_NURBS_Book_1.basisFunctionsFromSequence(span.knotIndex, u, this._increasingKnotSequence);
        var result = new Vector2d_1.Vector2d(0, 0);
        for (var i = 0; i < this._degree + 1; i += 1) {
            if (basis[i] !== 0.0) {
                result.x += basis[i] * this._controlPoints[span.knotIndex - this._degree + i].x;
                result.y += basis[i] * this._controlPoints[span.knotIndex - this._degree + i].y;
            }
        }
        return result;
    };
    AbstractBSplineR1toR2.prototype.getControlPointsX = function () {
        var e_1, _a;
        var result = [];
        try {
            for (var _b = __values(this._controlPoints), _c = _b.next(); !_c.done; _c = _b.next()) {
                var cp = _c.value;
                result.push(cp.x);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result;
    };
    AbstractBSplineR1toR2.prototype.getControlPointsY = function () {
        var e_2, _a;
        var result = [];
        try {
            for (var _b = __values(this._controlPoints), _c = _b.next(); !_c.done; _c = _b.next()) {
                var cp = _c.value;
                result.push(cp.y);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return result;
    };
    AbstractBSplineR1toR2.prototype.getDistinctKnots = function () {
        return this._increasingKnotSequence.distinctAbscissae();
    };
    AbstractBSplineR1toR2.prototype.moveControlPoint = function (i, deltaX, deltaY) {
        if (i < 0 || i >= this._controlPoints.length - this._degree) {
            throw new Error("Control point indentifier is out of range");
        }
        this._controlPoints[i].x += deltaX;
        this._controlPoints[i].y += deltaY;
    };
    AbstractBSplineR1toR2.prototype.moveControlPoints = function (delta) {
        var n = this._controlPoints.length;
        if (delta.length !== n) {
            throw new Error("Array of unexpected dimension");
        }
        var controlPoints = this._controlPoints;
        for (var i = 0; i < n; i += 1) {
            controlPoints[i] = controlPoints[i].add(delta[i]);
        }
        return this.factory(controlPoints, this.knots);
    };
    AbstractBSplineR1toR2.prototype.setControlPointPosition = function (index, value) {
        this._controlPoints[index] = value;
    };
    AbstractBSplineR1toR2.prototype.resetKnotAbscissaToOrigin = function (knotAbscissa) {
        var result = [];
        if (Math.abs(knotAbscissa[0]) < exports.TOL_KNOT_COINCIDENCE) {
            result = knotAbscissa.slice();
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "resetKnotAbscissaToOrigin", "No need to reset the sequence of knot abscissa");
            warning.logMessageToConsole();
        }
        else {
            result.push(AbstractOpenKnotSequenceCurve_1.OPEN_KNOT_SEQUENCE_ORIGIN);
            for (var i = 1; i < knotAbscissa.length; i++) {
                result.push(knotAbscissa[i] - knotAbscissa[0]);
            }
        }
        return result;
    };
    AbstractBSplineR1toR2.prototype.insertKnot = function (u, times) {
        if (times === void 0) { times = 1; }
        // Piegl and Tiller, The NURBS book, p: 151
        if (times <= 0 || times > (this._degree + 1)) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "insertKnot", "Inconsistent multiplicity order of the knot insertion. No insertion performed.");
            error.logMessageToConsole();
            return;
        }
        var index = this._increasingKnotSequence.findSpan(u);
        var indexStrictInc = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(index);
        var multiplicity = 0;
        if (this._increasingKnotSequence.knotMultiplicityAtAbscissa(u) !== 0) {
            multiplicity = this.knotMultiplicity(indexStrictInc);
        }
        if ((multiplicity + times) > (this._degree + 1)) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "insertKnot", "The number of times the knot should be inserted is incompatible with the curve degree.");
            console.log("u = ", u, " multiplicity + times = ", (multiplicity + times));
            error.logMessageToConsole();
            return;
        }
        var newIndexStrictInc = new Knot_1.KnotIndexStrictlyIncreasingSequence();
        for (var t = 0; t < times; t += 1) {
            var newControlPoints = [];
            var upperBound = 1;
            if ((index.knotIndex - this._degree + 1) < this._controlPoints.length && (index.knotIndex - this._degree + 1) > 0) {
                upperBound = index.knotIndex - this._degree + 1;
            }
            else if ((index.knotIndex - this._degree + 1) > 0) {
                upperBound = this._controlPoints.length;
            }
            for (var i = 0; i < upperBound; i += 1) {
                newControlPoints[i] = this._controlPoints[i];
            }
            var subSequence = [];
            if ((index.knotIndex - this._degree + 1) >= 0) {
                if (index.knotIndex - multiplicity + this._degree < this._increasingKnotSequence.length()) {
                    subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(index.knotIndex - this._degree + 1), new Knot_1.KnotIndexIncreasingSequence(index.knotIndex - multiplicity + this._degree));
                }
                else {
                    subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(index.knotIndex - this._degree + 1), new Knot_1.KnotIndexIncreasingSequence(this._increasingKnotSequence.length() - 1));
                }
            }
            else {
                subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(0), 
                // new KnotIndexIncreasingSequence(index.knotIndex - multiplicity + this._degree));
                new Knot_1.KnotIndexIncreasingSequence(2 * this._degree - multiplicity - 1));
            }
            for (var i = index.knotIndex - this._degree + 1; i <= index.knotIndex - multiplicity; i += 1) {
                if (i > 0 && i < this._controlPoints.length) {
                    var offset = index.knotIndex - this._degree + 1;
                    var alpha = (u - subSequence[i - offset]) / (subSequence[i + this._degree - offset] - subSequence[i - offset]);
                    newControlPoints[i] = (this._controlPoints[i - 1].multiply(1 - alpha)).add(this._controlPoints[i].multiply(alpha));
                }
            }
            var lowerBound = this._controlPoints.length - 1;
            if (index.knotIndex - multiplicity < this._controlPoints.length)
                lowerBound = index.knotIndex - multiplicity;
            for (var i = lowerBound; i < this._controlPoints.length; i += 1) {
                newControlPoints[i + 1] = this._controlPoints[i];
            }
            if (multiplicity > 0) {
                this._increasingKnotSequence.raiseKnotMultiplicity(indexStrictInc, 1);
            }
            else if (multiplicity === 0 && t === 0) {
                this._increasingKnotSequence.insertKnot(u, 1);
                var newIndex = this._increasingKnotSequence.findSpan(u);
                newIndexStrictInc = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(newIndex);
            }
            else {
                this._increasingKnotSequence.raiseKnotMultiplicity(newIndexStrictInc, 1);
            }
            this._controlPoints = newControlPoints.slice();
            // index += 1;
        }
    };
    AbstractBSplineR1toR2.prototype.insertKnotBoehmAlgorithm = function (u, times) {
        if (times === void 0) { times = 1; }
        // Uses Boehm algorithm without restriction on the structure of the knot sequence,
        //i.e. applicable to non uniform or arbitrary knot sequences
        if (times <= 0 || times > (this._degree + 1)) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "insertKnotBoehmAlgorithm", "The knot multiplicity prescribed is incompatible with the curve degree.");
            error.logMessageToConsole();
            return;
        }
        var index = this.findSpanBoehmAlgorithm(u);
        if (u > this._increasingKnotSequence.abscissaAtIndex(index)
            && u < this._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(index.knotIndex + 1))) {
            // if(times > )
        }
        var multiplicity = 0;
        var indexStrictInc = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(index);
        if (this._increasingKnotSequence.knotMultiplicityAtAbscissa(u) !== 0) {
            multiplicity = this.knotMultiplicity(indexStrictInc);
        }
        var newIndexStrictInc = new Knot_1.KnotIndexStrictlyIncreasingSequence();
        for (var t = 0; t < times; t += 1) {
            var newControlPoints = [];
            for (var i = 0; i < index.knotIndex; i += 1) {
                newControlPoints[i] = this._controlPoints[i];
            }
            var subSequence = [];
            if ((index.knotIndex - this._degree + 1) >= 0) {
                if (index.knotIndex - multiplicity + this._degree < this._increasingKnotSequence.length()) {
                    subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(index.knotIndex - this._degree + 1), new Knot_1.KnotIndexIncreasingSequence(index.knotIndex - multiplicity + this._degree));
                }
                else {
                    subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(index.knotIndex - this._degree + 1), new Knot_1.KnotIndexIncreasingSequence(this._increasingKnotSequence.length() - 1));
                }
            }
            else {
                subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(0), 
                // new KnotIndexIncreasingSequence(index.knotIndex - multiplicity + this._degree));
                new Knot_1.KnotIndexIncreasingSequence(2 * this._degree - multiplicity - 1));
            }
            // const subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new KnotIndexIncreasingSequence(index.knotIndex - this._degree + 1),
            // new KnotIndexIncreasingSequence(index.knotIndex - multiplicity + this._degree));
            for (var i = index.knotIndex - this._degree + 1; i <= index.knotIndex - multiplicity; i += 1) {
                var offset = index.knotIndex - this._degree + 1;
                var alpha = (u - subSequence[i - offset]) / (subSequence[i + this._degree - offset] - subSequence[i - offset]);
                if ((i - 1) >= 0 && i < (this._controlPoints.length - 1)) {
                    newControlPoints[i] = (this._controlPoints[i - 1].multiply(1 - alpha)).add(this._controlPoints[i].multiply(alpha));
                }
                else if (i < (this._controlPoints.length - 1)) {
                    newControlPoints[i] = this._controlPoints[i].multiply(alpha);
                }
                else if ((i - 1) >= 0) {
                    newControlPoints[i] = this._controlPoints[i - 1].multiply(1 - alpha);
                }
                else {
                }
            }
            for (var i = index.knotIndex - multiplicity; i < this._controlPoints.length; i += 1) {
                newControlPoints[i + 1] = this._controlPoints[i];
            }
            if (multiplicity > 0) {
                this._increasingKnotSequence.raiseKnotMultiplicity(indexStrictInc, 1);
            }
            else if (multiplicity === 0 && t === 0) {
                this._increasingKnotSequence.insertKnot(u, 1);
                var newIndex = this._increasingKnotSequence.findSpan(u);
                newIndexStrictInc = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(newIndex);
            }
            else {
                this._increasingKnotSequence.raiseKnotMultiplicity(newIndexStrictInc, 1);
            }
            this._controlPoints = newControlPoints.slice();
            multiplicity += 1;
        }
    };
    AbstractBSplineR1toR2.prototype.findSpanBoehmAlgorithm = function (u) {
        // Special case
        if (u === this._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(this._increasingKnotSequence.length() - this._degree - 1))) {
            return new Knot_1.KnotIndexIncreasingSequence(this._increasingKnotSequence.length() - this._degree - 2);
        }
        // Do binary search
        var low = 0;
        var high = this._increasingKnotSequence.length() - 1 - this._degree;
        var i = Math.floor((low + high) / 2);
        while (!(this._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(i)) <= u && u < this._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(i + 1)))) {
            if (u < this._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(i))) {
                high = i;
            }
            else {
                low = i;
            }
            i = Math.floor((low + high) / 2);
        }
        return new Knot_1.KnotIndexIncreasingSequence(i);
    };
    AbstractBSplineR1toR2.prototype.knotMultiplicity = function (index) {
        var result = this._increasingKnotSequence.knotMultiplicity(index);
        return result;
    };
    AbstractBSplineR1toR2.prototype.grevilleAbscissae = function () {
        var e_3, _a;
        var result = [];
        for (var i = 0; i < this._controlPoints.length; i += 1) {
            var sum = 0;
            var subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(i + 1), new Knot_1.KnotIndexIncreasingSequence(i + this._degree));
            try {
                for (var subSequence_1 = (e_3 = void 0, __values(subSequence)), subSequence_1_1 = subSequence_1.next(); !subSequence_1_1.done; subSequence_1_1 = subSequence_1.next()) {
                    var knot = subSequence_1_1.value;
                    sum += knot;
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (subSequence_1_1 && !subSequence_1_1.done && (_a = subSequence_1.return)) _a.call(subSequence_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            result.push(sum / this._degree);
        }
        return result;
    };
    AbstractBSplineR1toR2.prototype.isAbscissaCoincidingWithKnot = function (u) {
        return this._increasingKnotSequence.isAbscissaCoincidingWithKnot(u);
    };
    AbstractBSplineR1toR2.prototype.getFirstKnotIndexCoincidentWithAbscissa = function (u) {
        var index = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
        for (var i = 0; i < this._increasingKnotSequence.length(); i++) {
            if (Math.abs(u - this.knots[i]) < exports.TOL_KNOT_COINCIDENCE) {
                index = i;
                break;
            }
        }
        if (index < this._degree || index > (this._increasingKnotSequence.length() - 1 - this._degree)) {
            index = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
        }
        return new Knot_1.KnotIndexIncreasingSequence(index);
    };
    AbstractBSplineR1toR2.prototype.clamp = function (u) {
        // Piegl and Tiller, The NURBS book, p: 151
        var index = this._increasingKnotSequence.findSpan(u);
        var indexStrictInc = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(index);
        var newControlPoints = [];
        var multiplicity = 0;
        if (this._increasingKnotSequence.isAbscissaCoincidingWithKnot(u)
            && Math.abs(u - this._increasingKnotSequence.abscissaAtIndex(index)) < exports.TOL_KNOT_COINCIDENCE) {
            multiplicity = this.knotMultiplicity(indexStrictInc);
        }
        var times = this._degree - multiplicity + 1;
        for (var t = 0; t < times; t += 1) {
            for (var i = 0; i < index.knotIndex - this._degree + 1; i += 1) {
                newControlPoints[i] = this._controlPoints[i];
            }
            if ((index.knotIndex - this._degree + 1) <= (index.knotIndex - multiplicity)) {
                var subSequence = [];
                if ((index.knotIndex + this._degree - multiplicity) > (index.knotIndex + 1)) {
                    subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(index.knotIndex - this._degree + 1), new Knot_1.KnotIndexIncreasingSequence(index.knotIndex + this._degree - multiplicity));
                }
                else {
                    subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(index.knotIndex - this._degree + 1), new Knot_1.KnotIndexIncreasingSequence(index.knotIndex + 1));
                }
                var offset = index.knotIndex - this._degree + 1;
                for (var i = index.knotIndex - this._degree + 1; i <= index.knotIndex - multiplicity; i += 1) {
                    var alpha = (u - subSequence[i - offset]) / (subSequence[i + this._degree - offset] - subSequence[i - offset]);
                    newControlPoints[i] = (this._controlPoints[i - 1].multiply(1 - alpha)).add(this._controlPoints[i].multiply(alpha));
                }
            }
            for (var i = index.knotIndex - multiplicity; i < this._controlPoints.length; i += 1) {
                newControlPoints[i + 1] = this._controlPoints[i];
            }
            if (multiplicity > 0) {
                this._increasingKnotSequence.raiseKnotMultiplicity(indexStrictInc, 1);
            }
            else if (multiplicity === 0 && t === 0) {
                this._increasingKnotSequence.insertKnot(u, 1);
                var newIndex = this._increasingKnotSequence.findSpan(u);
                indexStrictInc = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(newIndex);
            }
            this._controlPoints = newControlPoints.slice();
            multiplicity += 1;
            index.knotIndex += 1;
        }
    };
    AbstractBSplineR1toR2.prototype.flattenControlPointsArray = function () {
        var controlPointsArray = [];
        for (var i = 0; i < this.controlPoints.length; i++) {
            controlPointsArray.push([this.controlPoints[i].x, this.controlPoints[i].y]);
        }
        return controlPointsArray.reduce(function (acc, val) {
            return acc.concat(val);
        }, []);
    };
    return AbstractBSplineR1toR2;
}());
exports.AbstractBSplineR1toR2 = AbstractBSplineR1toR2;
function deepCopyControlPoints(controlPoints) {
    var e_4, _a;
    var result = [];
    try {
        for (var controlPoints_1 = __values(controlPoints), controlPoints_1_1 = controlPoints_1.next(); !controlPoints_1_1.done; controlPoints_1_1 = controlPoints_1.next()) {
            var cp = controlPoints_1_1.value;
            result.push(cp.clone());
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (controlPoints_1_1 && !controlPoints_1_1.done && (_a = controlPoints_1.return)) _a.call(controlPoints_1);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return result;
}
exports.deepCopyControlPoints = deepCopyControlPoints;


/***/ }),

/***/ "./src/newBsplines/AbstractBSplineR1toR2DifferentialProperties.ts":
/*!************************************************************************!*\
  !*** ./src/newBsplines/AbstractBSplineR1toR2DifferentialProperties.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractBSplineR1toR2DifferentialProperties = void 0;
var BSplineR1toR1_1 = __webpack_require__(/*! ./BSplineR1toR1 */ "./src/newBsplines/BSplineR1toR1.ts");
var AbstractBSplineR1toR2DifferentialProperties = /** @class */ (function () {
    function AbstractBSplineR1toR2DifferentialProperties(spline) {
        this._spline = spline.clone();
    }
    AbstractBSplineR1toR2DifferentialProperties.prototype.expensiveComputation = function (spline) {
        var sx = this.bSplineR1toR1Factory(spline.getControlPointsX(), spline.knots);
        var sy = this.bSplineR1toR1Factory(spline.getControlPointsY(), spline.knots);
        var sxu = sx.derivative();
        var syu = sy.derivative();
        var sxuu = sxu.derivative();
        var syuu = syu.derivative();
        var sxuuu = sxuu.derivative();
        var syuuu = syuu.derivative();
        var bdsxu = sxu.bernsteinDecomposition();
        var bdsyu = syu.bernsteinDecomposition();
        var bdsxuu = sxuu.bernsteinDecomposition();
        var bdsyuu = syuu.bernsteinDecomposition();
        var bdsxuuu = sxuuu.bernsteinDecomposition();
        var bdsyuuu = syuuu.bernsteinDecomposition();
        var h1 = (bdsxu.multiply(bdsxu)).add((bdsyu.multiply(bdsyu)));
        var h2 = (bdsxu.multiply(bdsyuuu)).subtract((bdsyu.multiply(bdsxuuu)));
        var h3 = (bdsxu.multiply(bdsxuu)).add((bdsyu.multiply(bdsyuu)));
        var h4 = (bdsxu.multiply(bdsyuu)).subtract((bdsyu.multiply(bdsxuu)));
        return {
            h1: h1,
            h2: h2,
            h3: h3,
            h4: h4
        };
    };
    AbstractBSplineR1toR2DifferentialProperties.prototype.curvatureNumerator = function () {
        var e_1, _a;
        var e = this.expensiveComputation(this._spline);
        var distinctKnots = this._spline.getDistinctKnots();
        var controlPoints = e.h4.flattenControlPointsArray();
        var curvatureNumeratorDegree = 2 * this._spline.degree - 3;
        var knots = [];
        try {
            for (var distinctKnots_1 = __values(distinctKnots), distinctKnots_1_1 = distinctKnots_1.next(); !distinctKnots_1_1.done; distinctKnots_1_1 = distinctKnots_1.next()) {
                var knot = distinctKnots_1_1.value;
                for (var j = 0; j < curvatureNumeratorDegree + 1; j += 1) {
                    knots.push(knot);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (distinctKnots_1_1 && !distinctKnots_1_1.done && (_a = distinctKnots_1.return)) _a.call(distinctKnots_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return new BSplineR1toR1_1.BSplineR1toR1(controlPoints, knots);
    };
    AbstractBSplineR1toR2DifferentialProperties.prototype.curvatureDenominator = function () {
        var curve = this.h1();
        var controlPoints1 = curve.controlPoints;
        var knots = curve.knots;
        return new BSplineR1toR1_1.BSplineR1toR1(controlPoints1, knots);
    };
    AbstractBSplineR1toR2DifferentialProperties.prototype.h1 = function () {
        var e_2, _a;
        var e = this.expensiveComputation(this._spline);
        var distinctKnots = this._spline.getDistinctKnots();
        var controlPoints = e.h1.flattenControlPointsArray();
        var h1Degree = 2 * this._spline.degree - 2;
        var knots = [];
        try {
            for (var distinctKnots_2 = __values(distinctKnots), distinctKnots_2_1 = distinctKnots_2.next(); !distinctKnots_2_1.done; distinctKnots_2_1 = distinctKnots_2.next()) {
                var knot = distinctKnots_2_1.value;
                for (var j = 0; j < h1Degree + 1; j += 1) {
                    knots.push(knot);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (distinctKnots_2_1 && !distinctKnots_2_1.done && (_a = distinctKnots_2.return)) _a.call(distinctKnots_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return new BSplineR1toR1_1.BSplineR1toR1(controlPoints, knots);
    };
    AbstractBSplineR1toR2DifferentialProperties.prototype.inflections = function (curvatureNumerator) {
        var e_3, _a;
        if (!curvatureNumerator) {
            curvatureNumerator = this.curvatureNumerator();
        }
        var zeros = curvatureNumerator.zeros();
        var result = [];
        try {
            for (var zeros_1 = __values(zeros), zeros_1_1 = zeros_1.next(); !zeros_1_1.done; zeros_1_1 = zeros_1.next()) {
                var z = zeros_1_1.value;
                result.push(this._spline.evaluate(z));
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (zeros_1_1 && !zeros_1_1.done && (_a = zeros_1.return)) _a.call(zeros_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return result;
    };
    AbstractBSplineR1toR2DifferentialProperties.prototype.curvatureDerivativeNumerator = function () {
        var e_4, _a;
        var e = this.expensiveComputation(this._spline);
        var bd_curvatureDerivativeNumerator = (e.h1.multiply(e.h2)).subtract(e.h3.multiply(e.h4).multiplyByScalar(3));
        var distinctKnots = this._spline.getDistinctKnots();
        var controlPoints = bd_curvatureDerivativeNumerator.flattenControlPointsArray();
        var curvatureDerivativeNumeratorDegree = 4 * this._spline.degree - 6;
        var knots = [];
        try {
            for (var distinctKnots_3 = __values(distinctKnots), distinctKnots_3_1 = distinctKnots_3.next(); !distinctKnots_3_1.done; distinctKnots_3_1 = distinctKnots_3.next()) {
                var knot = distinctKnots_3_1.value;
                for (var j = 0; j < curvatureDerivativeNumeratorDegree + 1; j += 1) {
                    knots.push(knot);
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (distinctKnots_3_1 && !distinctKnots_3_1.done && (_a = distinctKnots_3.return)) _a.call(distinctKnots_3);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return new BSplineR1toR1_1.BSplineR1toR1(controlPoints, knots);
    };
    AbstractBSplineR1toR2DifferentialProperties.prototype.curvatureExtrema = function (_curvatureDerivativeNumerator) {
        var e_5, _a;
        if (!_curvatureDerivativeNumerator) {
            _curvatureDerivativeNumerator = this.curvatureDerivativeNumerator();
        }
        var zeros = _curvatureDerivativeNumerator.zeros();
        var result = [];
        try {
            for (var zeros_2 = __values(zeros), zeros_2_1 = zeros_2.next(); !zeros_2_1.done; zeros_2_1 = zeros_2.next()) {
                var z = zeros_2_1.value;
                result.push(this._spline.evaluate(z));
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (zeros_2_1 && !zeros_2_1.done && (_a = zeros_2.return)) _a.call(zeros_2);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return result;
    };
    AbstractBSplineR1toR2DifferentialProperties.prototype.transitionCurvatureExtrema = function (_curvatureDerivativeNumerator) {
        var e_6, _a;
        if (!_curvatureDerivativeNumerator) {
            _curvatureDerivativeNumerator = this.curvatureDerivativeNumerator();
        }
        var zeros = _curvatureDerivativeNumerator.zerosPolygonVsFunctionDiffViewer();
        var result = [];
        try {
            for (var zeros_3 = __values(zeros), zeros_3_1 = zeros_3.next(); !zeros_3_1.done; zeros_3_1 = zeros_3.next()) {
                var z = zeros_3_1.value;
                result.push(this._spline.evaluate(z));
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (zeros_3_1 && !zeros_3_1.done && (_a = zeros_3.return)) _a.call(zeros_3);
            }
            finally { if (e_6) throw e_6.error; }
        }
        return result;
    };
    return AbstractBSplineR1toR2DifferentialProperties;
}());
exports.AbstractBSplineR1toR2DifferentialProperties = AbstractBSplineR1toR2DifferentialProperties;


/***/ }),

/***/ "./src/newBsplines/AbstractIncreasingOpenKnotSequenceCurve.ts":
/*!********************************************************************!*\
  !*** ./src/newBsplines/AbstractIncreasingOpenKnotSequenceCurve.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractIncreasingOpenKnotSequenceCurve = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var AbstractOpenKnotSequenceCurve_1 = __webpack_require__(/*! ./AbstractOpenKnotSequenceCurve */ "./src/newBsplines/AbstractOpenKnotSequenceCurve.ts");
var Knot_1 = __webpack_require__(/*! ./Knot */ "./src/newBsplines/Knot.ts");
var AbstractIncreasingOpenKnotSequenceCurve = /** @class */ (function (_super) {
    __extends(AbstractIncreasingOpenKnotSequenceCurve, _super);
    function AbstractIncreasingOpenKnotSequenceCurve(degree, knots) {
        var _this = _super.call(this, degree) || this;
        _this.knotSequence = [];
        _this._index = new Knot_1.KnotIndexIncreasingSequence();
        _this._end = new Knot_1.KnotIndexIncreasingSequence(Infinity);
        _this._isNonUniform = false;
        if (knots.length < 1) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "null length knot sequence cannot be processed.");
            error.logMessageToConsole();
            return _this;
        }
        _this.knotSequence.push(new Knot_1.Knot(knots[0], 1));
        for (var i = 1; i < knots.length; i++) {
            if (knots[i] === _this.knotSequence[_this.knotSequence.length - 1].abscissa) {
                _this.knotSequence[_this.knotSequence.length - 1].multiplicity++;
            }
            else {
                _this.knotSequence.push(new Knot_1.Knot(knots[i], 1));
            }
        }
        _this.checkSizeConsistency(knots);
        return _this;
    }
    Object.defineProperty(AbstractIncreasingOpenKnotSequenceCurve.prototype, "allAbscissae", {
        get: function () {
            var e_1, _a;
            var abscissae = [];
            try {
                for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var knot = _c.value;
                    if (knot !== undefined)
                        abscissae.push(knot);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return abscissae;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractIncreasingOpenKnotSequenceCurve.prototype, "isNonUniform", {
        get: function () {
            return this._isNonUniform;
        },
        enumerable: false,
        configurable: true
    });
    AbstractIncreasingOpenKnotSequenceCurve.prototype[Symbol.iterator] = function () {
        var e_2, _a;
        var _this = this;
        var knotAmount = 0;
        var knotIndicesKnotAbscissaChange = [];
        try {
            for (var _b = __values(this.multiplicities()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var multiplicity = _c.value;
                knotAmount = knotAmount + multiplicity;
                knotIndicesKnotAbscissaChange.push(knotAmount);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this._end = new Knot_1.KnotIndexIncreasingSequence(knotAmount - 1);
        var indexAbscissaChange = new Knot_1.KnotIndexIncreasingSequence();
        return {
            next: function () {
                if (_this._index.knotIndex <= _this._end.knotIndex) {
                    if (_this._index.knotIndex === knotIndicesKnotAbscissaChange[indexAbscissaChange.knotIndex]) {
                        indexAbscissaChange.knotIndex++;
                    }
                    _this._index.knotIndex++;
                    return { value: _this.knotSequence[indexAbscissaChange.knotIndex].abscissa, done: false };
                }
                else {
                    _this._index = new Knot_1.KnotIndexIncreasingSequence();
                    return { done: true };
                }
            }
        };
    };
    AbstractIncreasingOpenKnotSequenceCurve.prototype.revertSequence = function () {
        var seq = this.deepCopy();
        seq.revertKnots();
        return seq.allAbscissae;
    };
    AbstractIncreasingOpenKnotSequenceCurve.prototype.checkSizeConsistency = function (knots) {
        var e_3, _a, e_4, _b;
        var size = 0;
        try {
            for (var _c = __values(this.multiplicities()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var multiplicity = _d.value;
                size += multiplicity;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_3) throw e_3.error; }
        }
        var increasingSequence = [];
        try {
            for (var knots_1 = __values(knots), knots_1_1 = knots_1.next(); !knots_1_1.done; knots_1_1 = knots_1.next()) {
                var knot = knots_1_1.value;
                increasingSequence.push(knot);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (knots_1_1 && !knots_1_1.done && (_b = knots_1.return)) _b.call(knots_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        if (size !== increasingSequence.length) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkSizeConsistency", "increasing knot sequence size incompatible with the multiplicity orders of the strictly increasing sequence.");
            error.logMessageToConsole();
        }
    };
    AbstractIncreasingOpenKnotSequenceCurve.prototype.length = function () {
        var e_5, _a;
        var length = 0;
        try {
            for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
                var knot = _c.value;
                if (knot !== undefined)
                    length++;
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return length;
    };
    AbstractIncreasingOpenKnotSequenceCurve.prototype.abscissaAtIndex = function (index) {
        var e_6, _a;
        var abscissa = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
        var i = 0;
        try {
            for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
                var knot = _c.value;
                if (i === index.knotIndex && knot !== undefined)
                    abscissa = knot;
                i++;
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_6) throw e_6.error; }
        }
        return abscissa;
    };
    AbstractIncreasingOpenKnotSequenceCurve.prototype.toKnotIndexStrictlyIncreasingSequence = function (index) {
        var e_7, _a;
        var strictlyIncreasingKnotSequence = this.toStrictlyIncreasingKnotSequence();
        // const strictltIncreasingKnotSequence = new AbstractStrictlyIncreasingOpenKnotSequenceCurve(this._degree, this.distinctAbscissae(), this.multiplicities());
        var abscissa = this.abscissaAtIndex(index);
        var i = 0;
        try {
            for (var _b = __values(strictlyIncreasingKnotSequence.allAbscissae), _c = _b.next(); !_c.done; _c = _b.next()) {
                var knot = _c.value;
                if (knot !== undefined) {
                    if (knot === abscissa)
                        break;
                    i++;
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_7) throw e_7.error; }
        }
        return new Knot_1.KnotIndexStrictlyIncreasingSequence(i);
    };
    AbstractIncreasingOpenKnotSequenceCurve.prototype.extractSubsetOfAbscissae = function (knotStart, knotEnd) {
        var e_8, _a;
        var knots = [];
        if (!(knotStart.knotIndex >= 0) || !(knotEnd.knotIndex <= this.length() - 1) || !(knotStart.knotIndex <= knotEnd.knotIndex)) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "extractSubset", "start and/or end indices values are out of range. Cannot perform the extraction.");
            error.logMessageToConsole();
            return knots;
        }
        var index = 0;
        try {
            for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
                var knot = _c.value;
                if (index >= knotStart.knotIndex && index <= knotEnd.knotIndex) {
                    if (knot !== undefined)
                        knots.push(knot);
                }
                index++;
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_8) throw e_8.error; }
        }
        return knots;
    };
    return AbstractIncreasingOpenKnotSequenceCurve;
}(AbstractOpenKnotSequenceCurve_1.AbstractOpenKnotSequenceCurve));
exports.AbstractIncreasingOpenKnotSequenceCurve = AbstractIncreasingOpenKnotSequenceCurve;


/***/ }),

/***/ "./src/newBsplines/AbstractKnotSequenceCurve.ts":
/*!******************************************************!*\
  !*** ./src/newBsplines/AbstractKnotSequenceCurve.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractKnotSequenceCurve = exports.KNOT_COINCIDENCE_TOLERANCE = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var Knot_1 = __webpack_require__(/*! ./Knot */ "./src/newBsplines/Knot.ts");
// Important remark: There is an interaction between KNOT_COINCIDENCE_TOLERANCE and CONVERGENCE_TOLERANCE_FOR_ZEROS_COMPUTATION
// when computing the zeros of a BSplineR1toR1. KNOT_COINCIDENCE_TOLERANCE currently set to 10E-2 CONVERGENCE_TOLERANCE_FOR_ZEROS_COMPUTATION
// It may be needed to check if there are side effects (JCL 2024/05/06).
exports.KNOT_COINCIDENCE_TOLERANCE = 10E-10;
var AbstractKnotSequenceCurve = /** @class */ (function () {
    function AbstractKnotSequenceCurve(degree) {
        this._degree = degree;
        this._isUniform = true;
    }
    Object.defineProperty(AbstractKnotSequenceCurve.prototype, "degree", {
        get: function () {
            return this._degree;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractKnotSequenceCurve.prototype, "isUniform", {
        get: function () {
            return this._isUniform;
        },
        enumerable: false,
        configurable: true
    });
    AbstractKnotSequenceCurve.prototype.distinctAbscissae = function () {
        var e_1, _a;
        var abscissae = [];
        try {
            for (var _b = __values(this.knotSequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                var knot = _c.value;
                abscissae.push(knot.abscissa);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return abscissae;
    };
    AbstractKnotSequenceCurve.prototype.multiplicities = function () {
        var e_2, _a;
        var multiplicities = [];
        try {
            for (var _b = __values(this.knotSequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                var knot = _c.value;
                multiplicities.push(knot.multiplicity);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return multiplicities;
    };
    AbstractKnotSequenceCurve.prototype.checkDegreeConsistency = function () {
        var e_3, _a;
        try {
            for (var _b = __values(this.knotSequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                var knot = _c.value;
                if (knot.multiplicity > (this._degree + 1)) {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkDegreeConsistency", "inconsistent order of multiplicity: too large.");
                    error.logMessageToConsole();
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    AbstractKnotSequenceCurve.prototype.checkUniformity = function () {
        var e_4, _a;
        this._isUniform = true;
        try {
            for (var _b = __values(this.knotSequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                var knot = _c.value;
                if (knot.multiplicity !== 1)
                    this._isUniform = false;
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return;
    };
    AbstractKnotSequenceCurve.prototype.isAbscissaCoincidingWithKnot = function (abscissa) {
        var e_5, _a;
        var coincident = false;
        try {
            for (var _b = __values(this.knotSequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                var knot = _c.value;
                if (Math.abs(abscissa - knot.abscissa) < exports.KNOT_COINCIDENCE_TOLERANCE)
                    coincident = true;
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return coincident;
    };
    AbstractKnotSequenceCurve.prototype.isKnotlMultiplicityZero = function (abscissa) {
        var multiplicityZero = true;
        if (this.isAbscissaCoincidingWithKnot(abscissa))
            multiplicityZero = false;
        return multiplicityZero;
    };
    AbstractKnotSequenceCurve.prototype.knotMultiplicity = function (index) {
        var result = this.knotSequence[index.knotIndex].multiplicity;
        return result;
    };
    AbstractKnotSequenceCurve.prototype.revertKnots = function () {
        var e_6, _a, e_7, _b;
        var sequence = [];
        try {
            for (var _c = __values(this.knotSequence), _d = _c.next(); !_d.done; _d = _c.next()) {
                var knot = _d.value;
                sequence.push(new Knot_1.Knot(0.0));
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_6) throw e_6.error; }
        }
        var i = 0;
        try {
            for (var _e = __values(this.knotSequence), _f = _e.next(); !_f.done; _f = _e.next()) {
                var knot = _f.value;
                sequence[this.knotSequence.length - i - 1].abscissa = this.knotSequence[this.knotSequence.length - 1].abscissa - (knot.abscissa - this.knotSequence[0].abscissa);
                sequence[this.knotSequence.length - i - 1].multiplicity = knot.multiplicity;
                i++;
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_7) throw e_7.error; }
        }
        this.knotSequence = sequence.slice();
        return;
    };
    return AbstractKnotSequenceCurve;
}());
exports.AbstractKnotSequenceCurve = AbstractKnotSequenceCurve;


/***/ }),

/***/ "./src/newBsplines/AbstractOpenKnotSequenceCurve.ts":
/*!**********************************************************!*\
  !*** ./src/newBsplines/AbstractOpenKnotSequenceCurve.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractOpenKnotSequenceCurve = exports.OPEN_KNOT_SEQUENCE_ORIGIN = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var AbstractKnotSequenceCurve_1 = __webpack_require__(/*! ./AbstractKnotSequenceCurve */ "./src/newBsplines/AbstractKnotSequenceCurve.ts");
var Knot_1 = __webpack_require__(/*! ./Knot */ "./src/newBsplines/Knot.ts");
exports.OPEN_KNOT_SEQUENCE_ORIGIN = 0.0;
var AbstractOpenKnotSequenceCurve = /** @class */ (function (_super) {
    __extends(AbstractOpenKnotSequenceCurve, _super);
    function AbstractOpenKnotSequenceCurve() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbstractOpenKnotSequenceCurve.prototype.knotMultiplicityAtAbscissa = function (abcissa) {
        var e_1, _a;
        var multiplicity = 0;
        try {
            for (var _b = __values(this.knotSequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                var knot = _c.value;
                if (Math.abs(abcissa - knot.abscissa) < AbstractKnotSequenceCurve_1.KNOT_COINCIDENCE_TOLERANCE) {
                    multiplicity = knot.multiplicity;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (multiplicity === 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "getMultiplicityOfKnotAt", "knot abscissa cannot be found within the knot sequence.");
            warning.logMessageToConsole();
        }
        return multiplicity;
    };
    AbstractOpenKnotSequenceCurve.prototype.insertKnot = function (abscissa, multiplicity) {
        if (multiplicity === void 0) { multiplicity = 1; }
        var insertion = true;
        if (this.isAbscissaCoincidingWithKnot(abscissa)) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "insertKnot", "abscissa is too close from an existing knot: raise multiplicity of an existing knot.");
            warning.logMessageToConsole();
            insertion = false;
            return insertion;
        }
        else if (multiplicity >= (this._degree + 1)) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "insertKnot", "the order of multiplicity of the new knot is not compatible with the curve degree");
            warning.logMessageToConsole();
            insertion = false;
            return insertion;
        }
        if (insertion) {
            var knot = new Knot_1.Knot(abscissa, multiplicity);
            if (abscissa < this.knotSequence[0].abscissa) {
                this.knotSequence.splice(0, 0, knot);
            }
            else {
                var i = 0;
                while (i < (this.knotSequence.length - 1)) {
                    if (this.knotSequence[i].abscissa < abscissa && abscissa < this.knotSequence[i + 1].abscissa)
                        break;
                    i++;
                }
                if (i === (this.knotSequence.length - 1)) {
                    this.knotSequence.push(knot);
                }
                else {
                    this.knotSequence.splice((i + 1), 0, knot);
                }
            }
            this.checkUniformity();
            this.checkNonUniformStructure();
        }
        return insertion;
    };
    AbstractOpenKnotSequenceCurve.prototype.raiseKnotMultiplicity = function (index, multiplicity) {
        if (index.knotIndex < 0 || index.knotIndex > this.knotSequence.length - 1) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "raiseKnotMultiplicity", "Index value is out of range.");
            error.logMessageToConsole();
            return;
        }
        this.knotSequence[index.knotIndex].multiplicity += multiplicity;
        this.checkUniformity();
        this.checkNonUniformStructure();
    };
    AbstractOpenKnotSequenceCurve.prototype.decrementKnotMultiplicity = function (index) {
        var e_2, _a;
        if (index.knotIndex < 0 || index.knotIndex > this.knotSequence.length - 1) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "decrementKnotMultiplicity", "Index value is out of range.");
            error.logMessageToConsole();
            return;
        }
        this.knotSequence[index.knotIndex].multiplicity--;
        if (this.knotSequence[index.knotIndex].multiplicity === 0) {
            var abscissae = this.distinctAbscissae();
            var multiplicities = this.multiplicities();
            abscissae.splice(index.knotIndex, 1);
            multiplicities.splice(index.knotIndex, 1);
            this.knotSequence = [];
            var i = 0;
            try {
                for (var abscissae_1 = __values(abscissae), abscissae_1_1 = abscissae_1.next(); !abscissae_1_1.done; abscissae_1_1 = abscissae_1.next()) {
                    var abscissa = abscissae_1_1.value;
                    var knot = new Knot_1.Knot(abscissa, multiplicities[i]);
                    this.knotSequence.push(knot);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (abscissae_1_1 && !abscissae_1_1.done && (_a = abscissae_1.return)) _a.call(abscissae_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        this.checkUniformity();
        this.checkNonUniformStructure();
    };
    return AbstractOpenKnotSequenceCurve;
}(AbstractKnotSequenceCurve_1.AbstractKnotSequenceCurve));
exports.AbstractOpenKnotSequenceCurve = AbstractOpenKnotSequenceCurve;


/***/ }),

/***/ "./src/newBsplines/AbstractStrictlyIncreasingOpenKnotSequenceCurve.ts":
/*!****************************************************************************!*\
  !*** ./src/newBsplines/AbstractStrictlyIncreasingOpenKnotSequenceCurve.ts ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractStrictlyIncreasingOpenKnotSequenceCurve = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var AbstractOpenKnotSequenceCurve_1 = __webpack_require__(/*! ./AbstractOpenKnotSequenceCurve */ "./src/newBsplines/AbstractOpenKnotSequenceCurve.ts");
var Knot_1 = __webpack_require__(/*! ./Knot */ "./src/newBsplines/Knot.ts");
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var AbstractStrictlyIncreasingOpenKnotSequenceCurve = /** @class */ (function (_super) {
    __extends(AbstractStrictlyIncreasingOpenKnotSequenceCurve, _super);
    function AbstractStrictlyIncreasingOpenKnotSequenceCurve(degree, knots, multiplicities) {
        var _this = _super.call(this, degree) || this;
        _this.knotSequence = [];
        _this._index = new Knot_1.KnotIndexStrictlyIncreasingSequence();
        _this._end = new Knot_1.KnotIndexStrictlyIncreasingSequence(Infinity);
        if (knots.length !== multiplicities.length) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "size of multiplicities array does not the size of knot abscissae array.");
            error.logMessageToConsole();
        }
        for (var i = 0; i < knots.length; i++) {
            _this.knotSequence.push(new Knot_1.Knot(knots[i], multiplicities[i]));
        }
        _this._isNonUniform = false;
        return _this;
    }
    Object.defineProperty(AbstractStrictlyIncreasingOpenKnotSequenceCurve.prototype, "allAbscissae", {
        get: function () {
            var e_1, _a;
            var abscissae = [];
            try {
                for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var knot = _c.value;
                    if (knot !== undefined)
                        abscissae.push(knot.abscissa);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return abscissae;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractStrictlyIncreasingOpenKnotSequenceCurve.prototype, "isNonUniform", {
        get: function () {
            return this._isNonUniform;
        },
        enumerable: false,
        configurable: true
    });
    AbstractStrictlyIncreasingOpenKnotSequenceCurve.prototype[Symbol.iterator] = function () {
        var _this = this;
        this._end = new Knot_1.KnotIndexStrictlyIncreasingSequence(this.knotSequence.length - 1);
        return {
            next: function () {
                if (_this._index.knotIndex <= _this._end.knotIndex) {
                    var abscissa = _this.knotSequence[_this._index.knotIndex].abscissa;
                    var multiplicity = _this.knotSequence[_this._index.knotIndex].multiplicity;
                    _this._index.knotIndex++;
                    return { value: { abscissa: abscissa, multiplicity: multiplicity },
                        done: false };
                }
                else {
                    _this._index = new Knot_1.KnotIndexStrictlyIncreasingSequence();
                    return { done: true };
                }
            }
        };
    };
    AbstractStrictlyIncreasingOpenKnotSequenceCurve.prototype.checkNonUniformStructure = function () {
        this._isNonUniform = false;
    };
    AbstractStrictlyIncreasingOpenKnotSequenceCurve.prototype.revertSequence = function () {
        var seq = this.deepCopy();
        seq.revertKnots();
        return seq.distinctAbscissae();
    };
    AbstractStrictlyIncreasingOpenKnotSequenceCurve.prototype.length = function () {
        return this.knotSequence.length;
    };
    AbstractStrictlyIncreasingOpenKnotSequenceCurve.prototype.abscissaAtIndex = function (index) {
        var e_2, _a;
        var abscissa = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
        var i = 0;
        try {
            for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
                var knot = _c.value;
                if (i === index.knotIndex && knot !== undefined)
                    abscissa = knot.abscissa;
                i++;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return abscissa;
    };
    AbstractStrictlyIncreasingOpenKnotSequenceCurve.prototype.incrementKnotMultiplicity = function (index, multiplicity) {
        if (multiplicity === void 0) { multiplicity = 1; }
        var increment = true;
        if (index.knotIndex < 0 || index.knotIndex > (this.knotSequence.length - 1)) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "incrementKnotMultiplicity", "the index parameter is out of range. Cannot increment knot multiplicity.");
            error.logMessageToConsole();
            increment = false;
        }
        else {
            this.knotSequence[index.knotIndex].multiplicity += multiplicity;
            this.checkDegreeConsistency();
        }
        return increment;
    };
    return AbstractStrictlyIncreasingOpenKnotSequenceCurve;
}(AbstractOpenKnotSequenceCurve_1.AbstractOpenKnotSequenceCurve));
exports.AbstractStrictlyIncreasingOpenKnotSequenceCurve = AbstractStrictlyIncreasingOpenKnotSequenceCurve;


/***/ }),

/***/ "./src/newBsplines/BSplineR1toR1.ts":
/*!******************************************!*\
  !*** ./src/newBsplines/BSplineR1toR1.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BSplineR1toR1 = exports.KNOT_REMOVAL_TOLERANCE = void 0;
var Piegl_Tiller_NURBS_Book_1 = __webpack_require__(/*! ./Piegl_Tiller_NURBS_Book */ "./src/newBsplines/Piegl_Tiller_NURBS_Book.ts");
var Vector2d_1 = __webpack_require__(/*! ../mathVector/Vector2d */ "./src/mathVector/Vector2d.ts");
var AbstractBSplineR1toR1_1 = __webpack_require__(/*! ./AbstractBSplineR1toR1 */ "./src/newBsplines/AbstractBSplineR1toR1.ts");
var BernsteinDecompositionR1toR1_1 = __webpack_require__(/*! ./BernsteinDecompositionR1toR1 */ "./src/newBsplines/BernsteinDecompositionR1toR1.ts");
var BSplineR1toR2_1 = __webpack_require__(/*! ./BSplineR1toR2 */ "./src/newBsplines/BSplineR1toR2.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var IncreasingOpenKnotSequenceOpenCurve_1 = __webpack_require__(/*! ./IncreasingOpenKnotSequenceOpenCurve */ "./src/newBsplines/IncreasingOpenKnotSequenceOpenCurve.ts");
var Knot_1 = __webpack_require__(/*! ./Knot */ "./src/newBsplines/Knot.ts");
var AbstractKnotSequenceCurve_1 = __webpack_require__(/*! ./AbstractKnotSequenceCurve */ "./src/newBsplines/AbstractKnotSequenceCurve.ts");
exports.KNOT_REMOVAL_TOLERANCE = 10e-5;
/**
 * A B-Spline function from a one dimensional real space to a one dimensional real space
 */
var BSplineR1toR1 = /** @class */ (function (_super) {
    __extends(BSplineR1toR1, _super);
    /**
     * Create a B-Spline
     * @param controlPoints The control points array
     * @param knots The knot vector
     */
    function BSplineR1toR1(controlPoints, knots) {
        if (controlPoints === void 0) { controlPoints = [0]; }
        if (knots === void 0) { knots = [0, 1]; }
        var _this = _super.call(this, controlPoints, knots) || this;
        _this._increasingKnotSequence = new IncreasingOpenKnotSequenceOpenCurve_1.IncreasingOpenKnotSequenceOpenCurve(_this._degree, knots);
        return _this;
    }
    Object.defineProperty(BSplineR1toR1.prototype, "knots", {
        get: function () {
            return this._increasingKnotSequence.allAbscissae;
        },
        set: function (knots) {
            this._degree = this.computeDegree(knots.length);
            this._increasingKnotSequence = new IncreasingOpenKnotSequenceOpenCurve_1.IncreasingOpenKnotSequenceOpenCurve(this._degree, knots);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BSplineR1toR1.prototype, "increasingKnotSequence", {
        get: function () {
            return this._increasingKnotSequence;
        },
        enumerable: false,
        configurable: true
    });
    BSplineR1toR1.prototype.bernsteinDecomposition = function () {
        // Piegl_Tiller_NURBS_Book.ts
        return new BernsteinDecompositionR1toR1_1.BernsteinDecompositionR1toR1(Piegl_Tiller_NURBS_Book_1.decomposeFunction(this));
    };
    BSplineR1toR1.prototype.clone = function () {
        return new BSplineR1toR1(this._controlPoints.slice(), this._increasingKnotSequence.allAbscissae.slice());
    };
    BSplineR1toR1.prototype.derivative = function () {
        var e_1, _a;
        var newControlPoints = [];
        var knotIdx_MultDegPlusOne = [];
        var strictlyIncSeq = this._increasingKnotSequence.toStrictlyIncreasingKnotSequence();
        var strictlyIncSeq_Mult = strictlyIncSeq.multiplicities();
        for (var i = 0; i < strictlyIncSeq_Mult.length; i++) {
            if (strictlyIncSeq_Mult[i] === (this._degree + 1) && i !== 0 && i !== (strictlyIncSeq.length() - 1))
                knotIdx_MultDegPlusOne.push(i);
        }
        for (var i = 0; i < this._controlPoints.length - 1; i += 1) {
            var indexIncSeq1 = new Knot_1.KnotIndexIncreasingSequence(i + this._degree + 1);
            var indexStrictIncSeq1 = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(indexIncSeq1);
            var indexIncSeq2 = new Knot_1.KnotIndexIncreasingSequence(i + 1);
            var indexStrictIncSeq2 = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(indexIncSeq2);
            if (indexStrictIncSeq1.knotIndex !== indexStrictIncSeq2.knotIndex) {
                var newCtrlPt = (this._controlPoints[i + 1] - (this._controlPoints[i])) * (this._degree /
                    (this._increasingKnotSequence.abscissaAtIndex(indexIncSeq1) - this._increasingKnotSequence.abscissaAtIndex(indexIncSeq2)));
                newControlPoints.push(newCtrlPt);
            }
        }
        try {
            for (var knotIdx_MultDegPlusOne_1 = __values(knotIdx_MultDegPlusOne), knotIdx_MultDegPlusOne_1_1 = knotIdx_MultDegPlusOne_1.next(); !knotIdx_MultDegPlusOne_1_1.done; knotIdx_MultDegPlusOne_1_1 = knotIdx_MultDegPlusOne_1.next()) {
                var multiplicity = knotIdx_MultDegPlusOne_1_1.value;
                strictlyIncSeq.decrementKnotMultiplicity(new Knot_1.KnotIndexStrictlyIncreasingSequence(multiplicity));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (knotIdx_MultDegPlusOne_1_1 && !knotIdx_MultDegPlusOne_1_1.done && (_a = knotIdx_MultDegPlusOne_1.return)) _a.call(knotIdx_MultDegPlusOne_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var newIncKnotSeq = strictlyIncSeq.toIncreasingKnotSequence();
        var newKnots = newIncKnotSeq.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(1), new Knot_1.KnotIndexIncreasingSequence(newIncKnotSeq.length() - 2));
        if (newKnots[0] !== 0.0) {
            var offset = newKnots[0];
            for (var i = 0; i < newKnots.length; i++) {
                newKnots[i] -= offset;
            }
        }
        return new BSplineR1toR1(newControlPoints, newKnots);
    };
    /* JCL 2024/05/11 increase the degree of the spline while preserving its shape (Prautzsch algorithm) */
    BSplineR1toR1.prototype.degreeIncrement = function () {
        var intermSplKnotsAndCPs = this.generateIntermediateSplinesForDegreeElevation();
        var splineHigherDegree = new BSplineR1toR1(intermSplKnotsAndCPs.CPs[0], intermSplKnotsAndCPs.knotVectors[0]);
        for (var i = 1; i <= this._degree; i += 1) {
            var splineTemp = new BSplineR1toR1(intermSplKnotsAndCPs.CPs[i], intermSplKnotsAndCPs.knotVectors[i]);
            var j = 0, k = 0;
            while (j < splineHigherDegree._increasingKnotSequence.length()) {
                if (splineHigherDegree._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(j)) !== splineTemp._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(k))
                    && splineHigherDegree._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(j)) < splineTemp._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(k))) {
                    splineTemp.insertKnotBoehmAlgorithm(splineHigherDegree._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(j)), 1);
                }
                else if (splineHigherDegree._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(j)) !== splineTemp._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(k))
                    && splineHigherDegree._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(j)) > splineTemp._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(k))) {
                    splineHigherDegree.insertKnotBoehmAlgorithm(splineTemp.knots[k], 1);
                }
                j += 1;
                k += 1;
            }
            var tempCPs = [];
            for (var ind = 0; ind < splineHigherDegree.controlPoints.length; ind += 1) {
                tempCPs[ind] = splineHigherDegree.controlPoints[ind] + splineTemp.controlPoints[ind];
            }
            splineHigherDegree.controlPoints = tempCPs;
        }
        var tempHigherDegCP = [];
        for (var j = 0; j < splineHigherDegree.controlPoints.length; j += 1) {
            tempHigherDegCP[j] = splineHigherDegree.controlPoints[j] * (1 / (this.degree + 1));
        }
        splineHigherDegree.controlPoints = tempHigherDegCP;
        console.log("degreeIncrease: " + splineHigherDegree._increasingKnotSequence.allAbscissae);
        return new BSplineR1toR1(splineHigherDegree.controlPoints, splineHigherDegree._increasingKnotSequence.allAbscissae);
    };
    BSplineR1toR1.prototype.generateIntermediateSplinesForDegreeElevation = function () {
        var knotSequences = [];
        var controlPolygons = [];
        for (var i = 0; i <= this._degree; i += 1) {
            var knotSequence = this._increasingKnotSequence.deepCopy();
            var controlPolygon = this._controlPoints.slice();
            var k = 0;
            for (var j = i; j < this._increasingKnotSequence.length(); j += this._degree + 1) {
                var indexStrctIncreasingSeq = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(new Knot_1.KnotIndexIncreasingSequence(j));
                knotSequence.raiseKnotMultiplicity(indexStrctIncreasingSeq, 1);
                if (j < this._controlPoints.length) {
                    var controlPoint = this._controlPoints[j];
                    controlPolygon.splice((j + k), 0, controlPoint);
                }
                k += 1;
            }
            knotSequences.push(knotSequence.allAbscissae);
            controlPolygons.push(controlPolygon);
        }
        return {
            knotVectors: knotSequences,
            CPs: controlPolygons
        };
    };
    BSplineR1toR1.prototype.insertKnotBoehmAlgorithm = function (u, times) {
        if (times === void 0) { times = 1; }
        // Uses Boehm algorithm without restriction on the structure of the knot sequence,
        //i.e. applicable to non uniform or arbitrary knot sequences
        if (times <= 0) {
            return;
        }
        var index = this.findSpanBoehmAlgorithm(u);
        if (u > this._increasingKnotSequence.abscissaAtIndex(index) && u < this._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(index.knotIndex + 1))) {
            // if(times > )
        }
        var multiplicity = 0;
        if (this._increasingKnotSequence.isAbscissaCoincidingWithKnot(u)
            && Math.abs(u - this._increasingKnotSequence.abscissaAtIndex(index)) < AbstractKnotSequenceCurve_1.KNOT_COINCIDENCE_TOLERANCE) {
            multiplicity = this._increasingKnotSequence.knotMultiplicityAtAbscissa(this._increasingKnotSequence.abscissaAtIndex(index));
        }
        if ((multiplicity + times) > (this._degree + 1)) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "insertKnot", "The number of times the knot should be inserted is incompatible with the curve degree.");
            console.log("u = ", u, " multiplicity + times = ", (multiplicity + times));
            error.logMessageToConsole();
            return;
        }
        var indexStrictInc = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(index);
        var newIndexStrictInc = new Knot_1.KnotIndexStrictlyIncreasingSequence();
        for (var t = 0; t < times; t += 1) {
            var newControlPoints = [];
            for (var i = 0; i < index.knotIndex; i += 1) {
                newControlPoints[i] = this._controlPoints[i];
            }
            var subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(index.knotIndex - this._degree + 1), new Knot_1.KnotIndexIncreasingSequence(index.knotIndex - multiplicity + this._degree));
            for (var i = index.knotIndex - this._degree + 1; i <= index.knotIndex - multiplicity; i += 1) {
                var offset = index.knotIndex - this._degree + 1;
                // let alpha = (u - this._increasingKnotSequence.abscissaAtIndex(new KnotIndexIncreasingSequence(i)))
                // / (this._increasingKnotSequence.abscissaAtIndex(new KnotIndexIncreasingSequence(i + this._degree)) - this._increasingKnotSequence.abscissaAtIndex(new KnotIndexIncreasingSequence(i)));
                var alpha = (u - subSequence[i - offset]) / (subSequence[i + this._degree - offset] - subSequence[i - offset]);
                newControlPoints[i] = this._controlPoints[i - 1] * (1 - alpha) + this._controlPoints[i] * (alpha);
            }
            for (var i = index.knotIndex - multiplicity; i < this._controlPoints.length; i += 1) {
                newControlPoints[i + 1] = this._controlPoints[i];
            }
            if (multiplicity > 0) {
                this._increasingKnotSequence.raiseKnotMultiplicity(indexStrictInc, 1);
            }
            else if (multiplicity === 0 && t === 0) {
                this._increasingKnotSequence.insertKnot(u, 1);
                var newIndex = this._increasingKnotSequence.findSpan(u);
                newIndexStrictInc = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(newIndex);
            }
            else {
                this._increasingKnotSequence.raiseKnotMultiplicity(newIndexStrictInc, 1);
            }
            // this._knots.splice(index + 1, 0, u);
            this._controlPoints = newControlPoints.slice();
            multiplicity += 1;
            index.knotIndex += 1;
        }
    };
    BSplineR1toR1.prototype.findSpanBoehmAlgorithm = function (u) {
        // Special case
        if (u === this._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(this._increasingKnotSequence.length() - this._degree - 1))) {
            return new Knot_1.KnotIndexIncreasingSequence(this._increasingKnotSequence.length() - this._degree - 2);
        }
        // Do binary search
        var low = 0;
        var high = this._increasingKnotSequence.length() - 1 - this._degree;
        var i = Math.floor((low + high) / 2);
        while (!(this._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(i)) <= u && u < this._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(i + 1)))) {
            if (u < this._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(i))) {
                high = i;
            }
            else {
                low = i;
            }
            i = Math.floor((low + high) / 2);
        }
        return new Knot_1.KnotIndexIncreasingSequence(i);
    };
    BSplineR1toR1.prototype.elevateDegree = function (times) {
        if (times === void 0) { times = 1; }
        var bds = this.bernsteinDecomposition();
        bds.elevateDegree();
        var knots = this.distinctKnots();
        var newSpline = BernsteinDecompositionR1toR1_1.splineRecomposition(bds, knots);
        for (var i = 0; i < knots.length; i += 1) {
            var m = this.knotMultiplicity(this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(this._increasingKnotSequence.findSpan(knots[i])));
            for (var j = 0; j < newSpline.degree - m - 1; j += 1) {
                newSpline.removeKnot(newSpline.increasingKnotSequence.findSpan(newSpline.knots[i]).knotIndex);
            }
        }
        this.controlPoints = newSpline.controlPoints;
        this._increasingKnotSequence = new IncreasingOpenKnotSequenceOpenCurve_1.IncreasingOpenKnotSequenceOpenCurve(newSpline.degree, newSpline.knots);
        this._degree = newSpline.degree;
    };
    BSplineR1toR1.prototype.removeKnot = function (indexFromFindSpan, tolerance) {
        //Piegl and Tiller, The NURBS book, p : 185
        if (tolerance === void 0) { tolerance = exports.KNOT_REMOVAL_TOLERANCE; }
        var index = indexFromFindSpan;
        // end knots are not removed
        // if (index > this._degree && index < this._knots.length - this._degree - 1) {
        if (index > this._degree && index < this._increasingKnotSequence.length() - this._degree - 1) {
            throw new Error("index out of range");
        }
        var indexIncSeq = new Knot_1.KnotIndexIncreasingSequence(index);
        var multiplicity = this.knotMultiplicity(this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(indexIncSeq));
        var last = index - multiplicity;
        var first = index - this.degree;
        var offset = first - 1;
        //std::vector<vectorType> local(2*degree+1);
        var local = [];
        local[0] = this.controlPoints[offset];
        local[last + 1 - offset] = this.controlPoints[last + 1];
        var i = first;
        var j = last;
        var ii = 1;
        var jj = last - offset;
        var removable = false;
        var subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(first), new Knot_1.KnotIndexIncreasingSequence(last + this.degree + 1));
        // Compute new control points for one removal step
        var offset_i = first;
        while (j > i) {
            var offset_j = last;
            var alpha_i = (this._increasingKnotSequence.abscissaAtIndex(indexIncSeq) - subSequence[i - offset_i]) / (subSequence[i + this.degree + 1 - offset_i] - subSequence[i - offset_i]);
            var alpha_j = (this._increasingKnotSequence.abscissaAtIndex(indexIncSeq) - subSequence[j - offset_j]) / (subSequence[j + this.degree + 1 - offset_j] - subSequence[j - offset_j]);
            local[ii] = (this.controlPoints[i] - (local[ii - 1] * (1.0 - alpha_i))) / alpha_i;
            local[jj] = (this.controlPoints[j] - (local[jj + 1] * (alpha_j))) / (1.0 - alpha_j);
            ++i;
            ++ii;
            --j;
            --jj;
        }
        if (j < i) {
            if ((local[ii - 1] - (local[jj + 1])) <= tolerance) {
                removable = true;
            }
        }
        else {
            var alpha_i = (this._increasingKnotSequence.abscissaAtIndex(indexIncSeq) - subSequence[i - offset_i]) / (subSequence[i + this.degree + 1 - offset_i] - subSequence[i - offset_i]);
            if (((this.controlPoints[i] - (local[ii + 1] * (alpha_i))) + (local[ii - 1] * (1.0 - alpha_i))) <= tolerance) {
                removable = true;
            }
        }
        if (!removable)
            return;
        else {
            var indInc = first;
            var indDec = last;
            while (indDec > indInc) {
                this.controlPoints[indInc] = local[indInc - offset];
                this.controlPoints[indDec] = local[indDec - offset];
                ++indInc;
                --indDec;
            }
        }
        this._increasingKnotSequence.decrementKnotMultiplicity(this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(indexIncSeq));
        var fout = (2 * index - multiplicity - this.degree) / 2;
        this._controlPoints.splice(fout, 1);
    };
    BSplineR1toR1.prototype.moveControlPoint = function (i, delta) {
        if (i < 0 || i >= this.controlPoints.length) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "moveControlPoint", "Control point index is out of range.");
            error.logMessageToConsole();
            return;
        }
        this.controlPoints[i] += delta;
    };
    BSplineR1toR1.prototype.convertTocurve = function () {
        var x = this.grevilleAbscissae();
        var cp = [];
        for (var i = 0; i < x.length; i += 1) {
            cp.push(new Vector2d_1.Vector2d(x[i], this._controlPoints[i]));
        }
        return new BSplineR1toR2_1.BSplineR1toR2(cp, this._increasingKnotSequence.allAbscissae);
    };
    BSplineR1toR1.prototype.evaluateOutsideRefInterval = function (u) {
        var result;
        var spline = this.clone();
        var knots = spline.distinctKnots().slice();
        if (u >= knots[0] && u <= knots[knots.length - 1]) {
            result = 0.0;
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "evaluateOutsideRefInterval", "Parameter value for evaluation is not outside the knot interval.");
            error.logMessageToConsole();
        }
        else {
            var extendedSpline = spline.extend(u);
            if (u < knots[0]) {
                result = extendedSpline.evaluate(0.0);
            }
            else {
                result = extendedSpline.evaluate(knots[knots.length - 1]);
            }
        }
        return result;
    };
    BSplineR1toR1.prototype.extend = function (uAbsc) {
        var result = new BSplineR1toR1();
        var knots = this.distinctKnots().slice();
        if (uAbsc >= knots[0] && uAbsc <= knots[knots.length - 1]) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "extend", "Parameter value for extension is not outside the knot interval.");
            error.logMessageToConsole();
        }
        else {
            var tempCurve = this.clone();
            var reversed = false;
            var u = void 0;
            if (uAbsc > knots[knots.length - 1]) {
                tempCurve = this.revertCurve();
                u = knots[knots.length - 1] - uAbsc;
                reversed = true;
            }
            else {
                u = uAbsc;
            }
            var tempCtrlPoly = tempCurve._controlPoints;
            var tempKnots = tempCurve._increasingKnotSequence.allAbscissae;
            var vertices = [];
            for (var i = 1; i < this._degree + 1; i++) {
                var controlPolygon = [];
                controlPolygon.push(tempCtrlPoly[i]);
                var u1 = (tempKnots[this._degree + i] - u) / (tempKnots[this._degree + i] - tempKnots[0]);
                var u2 = (u - tempKnots[0]) / (tempKnots[this._degree + i] - tempKnots[0]);
                var vertex = tempCtrlPoly[i - 1] * u1 + tempCtrlPoly[i] * u2;
                controlPolygon.splice(0, 0, vertex);
                for (var j = 1; j < i; j++) {
                    var u1_1 = (tempKnots[this._degree + i - j] - u) / (tempKnots[this._degree + i - j] - tempKnots[0]);
                    var u2_1 = (u - tempKnots[0]) / (tempKnots[this._degree + i - j] - tempKnots[0]);
                    var vertex_1 = vertices[i - 2][vertices[i - 2].length - 1 - j] * u1_1 + controlPolygon[0] * u2_1;
                    controlPolygon.splice(0, 0, vertex_1);
                }
                vertices.push(controlPolygon);
            }
            for (var k = 0; k < this._degree + 1; k++) {
                tempCtrlPoly[k] = vertices[vertices.length - 1][k];
                tempKnots[k] = u;
            }
            // const intervalSpan = tempKnots[tempKnots.length - 1] - tempKnots[0];
            var offset = tempKnots[0];
            for (var i = 0; i < tempKnots.length; i++) {
                // tempKnots[i] = tempKnots[tempKnots.length - 1] - (tempKnots[tempKnots.length - 1] - tempKnots[i]) / intervalSpan;
                tempKnots[i] = tempKnots[i] - offset;
            }
            result = new BSplineR1toR1(tempCtrlPoly, tempKnots);
            if (reversed)
                result = result.revertCurve();
        }
        return result;
    };
    BSplineR1toR1.prototype.revertCurve = function () {
        var vertices = [];
        for (var i = 0; i < this._controlPoints.length; i++) {
            vertices.push(this._controlPoints[this._controlPoints.length - 1 - i]);
        }
        var result = new BSplineR1toR1(vertices, this._increasingKnotSequence.revertSequence());
        return result;
    };
    return BSplineR1toR1;
}(AbstractBSplineR1toR1_1.AbstractBSplineR1toR1));
exports.BSplineR1toR1 = BSplineR1toR1;


/***/ }),

/***/ "./src/newBsplines/BSplineR1toR2.ts":
/*!******************************************!*\
  !*** ./src/newBsplines/BSplineR1toR2.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.create_BSplineR1toR2V2d = exports.create_BSplineR1toR2 = exports.BSplineR1toR2 = void 0;
var Piegl_Tiller_NURBS_Book_1 = __webpack_require__(/*! ./Piegl_Tiller_NURBS_Book */ "./src/newBsplines/Piegl_Tiller_NURBS_Book.ts");
var Vector2d_1 = __webpack_require__(/*! ../mathVector/Vector2d */ "./src/mathVector/Vector2d.ts");
var AbstractBSplineR1toR2_1 = __webpack_require__(/*! ./AbstractBSplineR1toR2 */ "./src/newBsplines/AbstractBSplineR1toR2.ts");
var BSplineR1toR1_1 = __webpack_require__(/*! ./BSplineR1toR1 */ "./src/newBsplines/BSplineR1toR1.ts");
var BernsteinDecompositionR1toR1_1 = __webpack_require__(/*! ./BernsteinDecompositionR1toR1 */ "./src/newBsplines/BernsteinDecompositionR1toR1.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var IncreasingOpenKnotSequenceOpenCurve_1 = __webpack_require__(/*! ./IncreasingOpenKnotSequenceOpenCurve */ "./src/newBsplines/IncreasingOpenKnotSequenceOpenCurve.ts");
var Knot_1 = __webpack_require__(/*! ./Knot */ "./src/newBsplines/Knot.ts");
/**
 * A B-Spline function from a one dimensional real space to a two dimensional real space
 */
var BSplineR1toR2 = /** @class */ (function (_super) {
    __extends(BSplineR1toR2, _super);
    /**
     * Create a B-Spline
     * @param controlPoints The control points array
     * @param knots The knot vector
     */
    function BSplineR1toR2(controlPoints, knots) {
        if (controlPoints === void 0) { controlPoints = [new Vector2d_1.Vector2d(0, 0)]; }
        if (knots === void 0) { knots = [0, 1]; }
        var _this = _super.call(this, controlPoints, knots) || this;
        _this._increasingKnotSequence = new IncreasingOpenKnotSequenceOpenCurve_1.IncreasingOpenKnotSequenceOpenCurve(_this._degree, knots);
        return _this;
    }
    Object.defineProperty(BSplineR1toR2.prototype, "knots", {
        get: function () {
            return this._increasingKnotSequence.allAbscissae;
        },
        set: function (knots) {
            this._degree = this.computeDegree(knots.length);
            this._increasingKnotSequence = new IncreasingOpenKnotSequenceOpenCurve_1.IncreasingOpenKnotSequenceOpenCurve(this._degree, knots);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BSplineR1toR2.prototype, "increasingKnotSequence", {
        get: function () {
            return this._increasingKnotSequence;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BSplineR1toR2.prototype, "freeControlPoints", {
        get: function () {
            return this.controlPoints;
        },
        enumerable: false,
        configurable: true
    });
    // protected override factory(controlPoints: readonly Vector2d[] = [new Vector2d(0, 0)], knots: readonly number[] = [0, 1]) {
    BSplineR1toR2.prototype.factory = function (controlPoints, knots) {
        if (controlPoints === void 0) { controlPoints = [new Vector2d_1.Vector2d(0, 0)]; }
        if (knots === void 0) { knots = [0, 1]; }
        return new BSplineR1toR2(controlPoints, knots);
    };
    /**
     * Return a deep copy of this b-spline
     */
    BSplineR1toR2.prototype.clone = function () {
        var cloneControlPoints = AbstractBSplineR1toR2_1.deepCopyControlPoints(this._controlPoints);
        return new BSplineR1toR2(cloneControlPoints, this.knots.slice());
    };
    BSplineR1toR2.prototype.optimizerStep = function (step) {
        for (var i = 0; i < this._controlPoints.length; i += 1) {
            this._controlPoints[i].x += step[i];
            this._controlPoints[i].y += step[i + this._controlPoints.length];
        }
    };
    BSplineR1toR2.prototype.elevateDegree = function (times) {
        if (times === void 0) { times = 1; }
        var sx = new BSplineR1toR1_1.BSplineR1toR1(this.getControlPointsX(), this.knots);
        var sy = new BSplineR1toR1_1.BSplineR1toR1(this.getControlPointsY(), this.knots);
        var bdsx = sx.bernsteinDecomposition();
        var bdsy = sy.bernsteinDecomposition();
        bdsx.elevateDegree();
        bdsy.elevateDegree();
        var knots = this.getDistinctKnots();
        var sxNew = BernsteinDecompositionR1toR1_1.splineRecomposition(bdsx, knots);
        var syNew = BernsteinDecompositionR1toR1_1.splineRecomposition(bdsy, knots);
        var newcp = [];
        for (var i = 0; i < sxNew.controlPoints.length; i += 1) {
            newcp.push(new Vector2d_1.Vector2d(sxNew.controlPoints[i], syNew.controlPoints[i]));
        }
        var newSpline = new BSplineR1toR2(newcp, sxNew.knots);
        for (var i = 0; i < knots.length; i += 1) {
            var m = this.knotMultiplicity(this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(this._increasingKnotSequence.findSpan(knots[i])));
            for (var j = 0; j < newSpline.degree - m - 1; j += 1) {
                newSpline.removeKnot(Piegl_Tiller_NURBS_Book_1.findSpan(newSpline.knots[i], newSpline.knots, newSpline.degree));
            }
        }
        this.controlPoints = newSpline.controlPoints;
        this._increasingKnotSequence = new IncreasingOpenKnotSequenceOpenCurve_1.IncreasingOpenKnotSequenceOpenCurve(newSpline.degree, newSpline.knots);
        this._degree = newSpline.degree;
    };
    BSplineR1toR2.prototype.removeKnot = function (indexFromFindSpan, tolerance) {
        //Piegl and Tiller, The NURBS book, p : 185
        if (tolerance === void 0) { tolerance = BSplineR1toR1_1.KNOT_REMOVAL_TOLERANCE; }
        var index = indexFromFindSpan;
        // end knots are not removed
        if (index > this._degree && index < this._increasingKnotSequence.length() - this._degree - 1) {
            throw new Error("index out of range");
        }
        var indexIncSeq = new Knot_1.KnotIndexIncreasingSequence(index);
        var multiplicity = this.knotMultiplicity(this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(indexIncSeq));
        var last = index - multiplicity;
        var first = index - this.degree;
        var offset = first - 1;
        //std::vector<vectorType> local(2*degree+1);
        var local = [];
        local[0] = this.controlPoints[offset];
        local[last + 1 - offset] = this.controlPoints[last + 1];
        var i = first;
        var j = last;
        var ii = 1;
        var jj = last - offset;
        var removable = false;
        var subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(first), new Knot_1.KnotIndexIncreasingSequence(last + this.degree + 1));
        // Compute new control point for one removal step
        var offset_i = first;
        while (j > i) {
            var offset_j = last;
            var alpha_i = (this._increasingKnotSequence.abscissaAtIndex(indexIncSeq) - subSequence[i - offset_i]) / (subSequence[i + this.degree + 1 - offset_i] - subSequence[i - offset_i]);
            var alpha_j = (this._increasingKnotSequence.abscissaAtIndex(indexIncSeq) - subSequence[j - offset_j]) / (subSequence[j + this.degree + 1 - offset_j] - subSequence[j - offset_j]);
            local[ii] = (this.controlPoints[i].substract(local[ii - 1].multiply(1.0 - alpha_i))).multiply(1 / alpha_i);
            local[jj] = (this.controlPoints[j].substract(local[jj + 1].multiply(alpha_j))).multiply(1 / (1.0 - alpha_j));
            ++i;
            ++ii;
            --j;
            --jj;
        }
        if (j < i) {
            if ((local[ii - 1].substract(local[jj + 1])).norm() <= tolerance) {
                removable = true;
            }
        }
        else {
            var alpha_i = (this._increasingKnotSequence.abscissaAtIndex(indexIncSeq) - subSequence[i - offset_i]) / (subSequence[i + this.degree + 1 - offset_i] - subSequence[i - offset_i]);
            if (((this.controlPoints[i].substract((local[ii + 1].multiply(alpha_i)))).add(local[ii - 1].multiply(1.0 - alpha_i))).norm() <= tolerance) {
                removable = true;
            }
        }
        if (!removable)
            return;
        else {
            var indInc = first;
            var indDec = last;
            while (indDec > indInc) {
                this.controlPoints[indInc] = local[indInc - offset];
                this.controlPoints[indDec] = local[indDec - offset];
                ++indInc;
                --indDec;
            }
        }
        this._increasingKnotSequence.decrementKnotMultiplicity(this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(indexIncSeq));
        var fout = (2 * index - multiplicity - this.degree) / 2;
        this._controlPoints.splice(fout, 1);
    };
    /* JCL 2020/10/06 increase the degree of the spline while preserving its shape (Prautzsch algorithm) */
    BSplineR1toR2.prototype.degreeIncrement = function () {
        var intermSplKnotsAndCPs = this.generateIntermediateSplinesForDegreeElevation();
        var splineHigherDegree = new BSplineR1toR2(intermSplKnotsAndCPs.CPs[0], intermSplKnotsAndCPs.knotVectors[0]);
        for (var i = 1; i <= this._degree; i += 1) {
            var strictIncSeq_splineHigherDegree = splineHigherDegree._increasingKnotSequence.toStrictlyIncreasingKnotSequence();
            var splineTemp = new BSplineR1toR2(intermSplKnotsAndCPs.CPs[i], intermSplKnotsAndCPs.knotVectors[i]);
            var strictIncSeq_splineTemp = splineTemp._increasingKnotSequence.toStrictlyIncreasingKnotSequence();
            for (var j = 1; j < (strictIncSeq_splineHigherDegree.length() - 1); j++) {
                var index = new Knot_1.KnotIndexStrictlyIncreasingSequence(j);
                if (strictIncSeq_splineHigherDegree.knotMultiplicity(index) > strictIncSeq_splineTemp.knotMultiplicity(index))
                    splineTemp.insertKnotBoehmAlgorithm(strictIncSeq_splineTemp.abscissaAtIndex(index));
                if (strictIncSeq_splineHigherDegree.knotMultiplicity(index) < strictIncSeq_splineTemp.knotMultiplicity(index))
                    splineHigherDegree.insertKnotBoehmAlgorithm(strictIncSeq_splineHigherDegree.abscissaAtIndex(index));
            }
            var tempCPs = [];
            for (var ind = 0; ind < splineHigherDegree.controlPoints.length; ind += 1) {
                tempCPs[ind] = splineHigherDegree.controlPoints[ind].add(splineTemp.controlPoints[ind]);
            }
            splineHigherDegree.controlPoints = tempCPs;
        }
        var tempHigherDegCP = [];
        for (var j = 0; j < splineHigherDegree.controlPoints.length; j += 1) {
            tempHigherDegCP[j] = splineHigherDegree.controlPoints[j].multiply(1 / (this._degree + 1));
        }
        splineHigherDegree.controlPoints = tempHigherDegCP;
        console.log("degreeIncrease: " + splineHigherDegree._increasingKnotSequence.allAbscissae);
        return new BSplineR1toR2(splineHigherDegree.controlPoints, splineHigherDegree._increasingKnotSequence.allAbscissae);
    };
    BSplineR1toR2.prototype.generateIntermediateSplinesForDegreeElevation = function () {
        var knotSequences = [];
        var controlPolygons = [];
        for (var i = 0; i <= this._degree; i += 1) {
            var knotSequence = this._increasingKnotSequence.deepCopy();
            var controlPolygon = this._controlPoints.slice();
            var k = 0;
            for (var j = i; j < this._increasingKnotSequence.length(); j += this._degree + 1) {
                var indexStrctIncreasingSeq = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(new Knot_1.KnotIndexIncreasingSequence(j));
                knotSequence.raiseKnotMultiplicity(indexStrctIncreasingSeq, 1);
                if (j < this._controlPoints.length) {
                    var controlPoint = this._controlPoints[j];
                    controlPolygon.splice((j + k), 0, controlPoint);
                }
                k += 1;
            }
            knotSequences.push(knotSequence.allAbscissae);
            controlPolygons.push(controlPolygon);
        }
        return {
            knotVectors: knotSequences,
            CPs: controlPolygons
        };
    };
    BSplineR1toR2.prototype.scale = function (factor) {
        var cp = [];
        this._controlPoints.forEach(function (element) {
            cp.push(element.multiply(factor));
        });
        return new BSplineR1toR2(cp, this.knots.slice());
    };
    BSplineR1toR2.prototype.scaleY = function (factor) {
        var cp = [];
        this._controlPoints.forEach(function (element) {
            cp.push(new Vector2d_1.Vector2d(element.x, element.y * factor));
        });
        return new BSplineR1toR2(cp, this.knots.slice());
    };
    BSplineR1toR2.prototype.scaleX = function (factor) {
        var cp = [];
        this._controlPoints.forEach(function (element) {
            cp.push(new Vector2d_1.Vector2d(element.x * factor, element.y));
        });
        return new BSplineR1toR2(cp, this.knots.slice());
    };
    BSplineR1toR2.prototype.extend = function (uAbsc) {
        var result = this.clone();
        var knots = this.getDistinctKnots();
        if (!this._increasingKnotSequence.isNonUniform) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "extend", "The knot sequence of the input curve is not of type non uniform. The algorithm is not operating on this category of curve.");
            warning.logMessageToConsole();
        }
        else if (uAbsc >= knots[0] && uAbsc <= knots[knots.length - 1]) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "extend", "Parameter value for extension is not outside the knot interval. No extension performed.");
            warning.logMessageToConsole();
        }
        else {
            if (this._increasingKnotSequence.isAbscissaCoincidingWithKnot(uAbsc)) {
                var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "extend", "The abscissae used to extend the curve is considered as similar to one of the end knots of curve knot sequence. However, the extension is performed.");
                warning.logMessageToConsole();
            }
            var tempCurve = this.clone();
            var reversed = false;
            var u = void 0;
            if (uAbsc > knots[knots.length - 1]) {
                tempCurve = this.revertCurve();
                u = knots[knots.length - 1] - uAbsc;
                reversed = true;
            }
            else {
                u = uAbsc;
            }
            var tempCtrlPoly = tempCurve._controlPoints;
            var tempKnots = tempCurve.increasingKnotSequence.allAbscissae;
            var vertices = [];
            for (var i = 1; i < this._degree + 1; i++) {
                var controlPolygon = [];
                controlPolygon.push(tempCtrlPoly[i]);
                var u1 = (tempKnots[this._degree + i] - u) / (tempKnots[this._degree + i] - tempKnots[0]);
                var u2 = (u - tempKnots[0]) / (tempKnots[this._degree + i] - tempKnots[0]);
                var vertex = tempCtrlPoly[i - 1].multiply(u1).add(tempCtrlPoly[i].multiply(u2));
                controlPolygon.splice(0, 0, vertex);
                for (var j = 1; j < i; j++) {
                    var u1_1 = (tempKnots[this._degree + i - j] - u) / (tempKnots[this._degree + i - j] - tempKnots[0]);
                    var u2_1 = (u - tempKnots[0]) / (tempKnots[this._degree + i - j] - tempKnots[0]);
                    var vertex_1 = vertices[i - 2][vertices[i - 2].length - 1 - j].multiply(u1_1).add(controlPolygon[0].multiply(u2_1));
                    controlPolygon.splice(0, 0, vertex_1);
                }
                vertices.push(controlPolygon);
            }
            for (var k = 0; k < this._degree + 1; k++) {
                tempCtrlPoly[k] = vertices[vertices.length - 1][k];
                tempKnots[k] = u;
            }
            var newKnots = this.resetKnotAbscissaToOrigin(tempKnots);
            result = new BSplineR1toR2(tempCtrlPoly, newKnots);
            if (reversed)
                result = result.revertCurve();
        }
        return result;
    };
    BSplineR1toR2.prototype.splitAt = function (u, segmentLocation) {
        var result = this.clone();
        var knots = this.getDistinctKnots();
        if (result.increasingKnotSequence.isAbscissaCoincidingWithKnot(u)) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "splitAt", "Method not configured to split a curve at an existing knot");
            warning.logMessageToConsole();
        }
        else if (u < knots[0] || u > knots[knots.length - 1]) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "splitAt", "The abscissae used to split the curve is outside the knot sequence interval. No split performed.");
            warning.logMessageToConsole();
        }
        else {
            result.insertKnot(u, result._degree + 1);
            var knotSequence = result.knots;
            var newControlPolygon = [];
            var newKnots = [];
            var knotIndex = result._degree + 1;
            while (knotSequence[knotIndex] !== u && knotIndex < knotSequence.length) {
                knotIndex++;
            }
            var indexBound = knotIndex + result._degree + 1;
            if (segmentLocation === AbstractBSplineR1toR2_1.curveSegment.BEFORE) {
                for (var i = 0; i < knotIndex; i++) {
                    newControlPolygon.push(result._controlPoints[i]);
                }
                for (var i = 0; i < indexBound; i++) {
                    newKnots.push(result.knots[i]);
                }
                result = new BSplineR1toR2(newControlPolygon, newKnots);
            }
            else if (segmentLocation === AbstractBSplineR1toR2_1.curveSegment.AFTER) {
                for (var i = knotIndex; i < result._controlPoints.length; i++) {
                    newControlPolygon.push(result._controlPoints[i]);
                }
                for (var i = knotIndex; i < result.knots.length; i++) {
                    newKnots.push(result.knots[i]);
                }
                var updatedKnots = this.resetKnotAbscissaToOrigin(newKnots);
                result = new BSplineR1toR2(newControlPolygon, updatedKnots);
            }
            else {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "splitAt", "undefined specification of curve interval to be extracted.");
                error.logMessageToConsole();
            }
        }
        return result;
    };
    BSplineR1toR2.prototype.evaluateOutsideRefInterval = function (u) {
        var result = new Vector2d_1.Vector2d();
        var spline = this.clone();
        var knots = spline.getDistinctKnots();
        if (u >= knots[0] && u <= knots[knots.length - 1]) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "evaluateOutsideRefInterval", "Parameter value for evaluation is not outside the knot interval.");
            error.logMessageToConsole();
        }
        else {
            var extendedSpline = spline.extend(u);
            if (u < knots[0]) {
                result = extendedSpline.evaluate(0.0);
            }
            else {
                result = extendedSpline.evaluate(knots[knots.length - 1]);
            }
        }
        return result;
    };
    BSplineR1toR2.prototype.revertCurve = function () {
        var vertices = [];
        for (var i = 0; i < this._controlPoints.length; i++) {
            vertices.push(this._controlPoints[this._controlPoints.length - 1 - i]);
        }
        var result = new BSplineR1toR2(vertices, this._increasingKnotSequence.revertSequence());
        return result;
    };
    /**
     *
     * @param from Parametric position where the section start
     * @param to Parametric position where the section end
     * @return the BSpline_R1_to_R2 section
     */
    BSplineR1toR2.prototype.extract = function (from, to) {
        var e_1, _a, e_2, _b;
        var spline = this.clone();
        var strictIncSeq = spline._increasingKnotSequence.toStrictlyIncreasingKnotSequence();
        var newFromSpan = spline._degree;
        var newToSpan = spline._increasingKnotSequence.length() - 1;
        if (spline._increasingKnotSequence.isAbscissaCoincidingWithKnot(from)) {
            var i = 0;
            try {
                for (var strictIncSeq_1 = __values(strictIncSeq), strictIncSeq_1_1 = strictIncSeq_1.next(); !strictIncSeq_1_1.done; strictIncSeq_1_1 = strictIncSeq_1.next()) {
                    var knot = strictIncSeq_1_1.value;
                    if (knot !== undefined && Math.abs(from - knot.abscissa) < AbstractBSplineR1toR2_1.TOL_KNOT_COINCIDENCE)
                        break;
                    i++;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (strictIncSeq_1_1 && !strictIncSeq_1_1.done && (_a = strictIncSeq_1.return)) _a.call(strictIncSeq_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            var indexStrictIncSeq = new Knot_1.KnotIndexStrictlyIncreasingSequence(i);
            var mult = strictIncSeq.knotMultiplicity(indexStrictIncSeq);
            if (mult !== (this._degree + 1)) {
                spline.clamp(from);
                newFromSpan = Piegl_Tiller_NURBS_Book_1.clampingFindSpan(from, spline.knots, spline._degree);
            }
        }
        else {
            spline.clamp(from);
            newFromSpan = Piegl_Tiller_NURBS_Book_1.clampingFindSpan(from, spline.knots, spline._degree);
        }
        if (spline._increasingKnotSequence.isAbscissaCoincidingWithKnot(to)) {
            var i = 0;
            try {
                for (var strictIncSeq_2 = __values(strictIncSeq), strictIncSeq_2_1 = strictIncSeq_2.next(); !strictIncSeq_2_1.done; strictIncSeq_2_1 = strictIncSeq_2.next()) {
                    var knot = strictIncSeq_2_1.value;
                    if (knot !== undefined && Math.abs(to - knot.abscissa) < AbstractBSplineR1toR2_1.TOL_KNOT_COINCIDENCE)
                        break;
                    i++;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (strictIncSeq_2_1 && !strictIncSeq_2_1.done && (_b = strictIncSeq_2.return)) _b.call(strictIncSeq_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
            var indexStrictIncSeq = new Knot_1.KnotIndexStrictlyIncreasingSequence(i);
            var mult = strictIncSeq.knotMultiplicity(indexStrictIncSeq);
            if (mult !== (this._degree + 1)) {
                spline.clamp(to);
                newToSpan = Piegl_Tiller_NURBS_Book_1.clampingFindSpan(to, spline.knots, spline._degree);
            }
        }
        else {
            spline.clamp(to);
            newToSpan = Piegl_Tiller_NURBS_Book_1.clampingFindSpan(to, spline.knots, spline._degree);
        }
        var newKnots = [];
        var newControlPoints = [];
        for (var i = newFromSpan - spline._degree; i < newToSpan + 1; i += 1) {
            newKnots.push(spline.knots[i]);
        }
        for (var i = newFromSpan - spline._degree; i < newToSpan - spline._degree; i += 1) {
            newControlPoints.push(new Vector2d_1.Vector2d(spline._controlPoints[i].x, spline._controlPoints[i].y));
        }
        var knotSequence = this.resetKnotAbscissaToOrigin(newKnots);
        return new BSplineR1toR2(newControlPoints, knotSequence);
    };
    return BSplineR1toR2;
}(AbstractBSplineR1toR2_1.AbstractBSplineR1toR2));
exports.BSplineR1toR2 = BSplineR1toR2;
function create_BSplineR1toR2(controlPoints, knots) {
    var e_3, _a;
    var newControlPoints = [];
    try {
        for (var controlPoints_1 = __values(controlPoints), controlPoints_1_1 = controlPoints_1.next(); !controlPoints_1_1.done; controlPoints_1_1 = controlPoints_1.next()) {
            var cp = controlPoints_1_1.value;
            newControlPoints.push(new Vector2d_1.Vector2d(cp[0], cp[1]));
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (controlPoints_1_1 && !controlPoints_1_1.done && (_a = controlPoints_1.return)) _a.call(controlPoints_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return new BSplineR1toR2(newControlPoints, knots);
}
exports.create_BSplineR1toR2 = create_BSplineR1toR2;
function create_BSplineR1toR2V2d(controlPoints, knots) {
    return new BSplineR1toR2(controlPoints, knots);
}
exports.create_BSplineR1toR2V2d = create_BSplineR1toR2V2d;
// export function convertToBsplR1_to_R2(spline: BSplineR1toR2): BSpline_R1_to_R2 {
//     return new BSpline_R1_to_R2(spline.controlPoints, spline.knots);
// }


/***/ }),

/***/ "./src/newBsplines/BSplineR1toR2DifferentialProperties.ts":
/*!****************************************************************!*\
  !*** ./src/newBsplines/BSplineR1toR2DifferentialProperties.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BSplineR1toR2DifferentialProperties = void 0;
var AbstractBSplineR1toR2DifferentialProperties_1 = __webpack_require__(/*! ./AbstractBSplineR1toR2DifferentialProperties */ "./src/newBsplines/AbstractBSplineR1toR2DifferentialProperties.ts");
var BSplineR1toR1_1 = __webpack_require__(/*! ./BSplineR1toR1 */ "./src/newBsplines/BSplineR1toR1.ts");
var BSplineR1toR2DifferentialProperties = /** @class */ (function (_super) {
    __extends(BSplineR1toR2DifferentialProperties, _super);
    function BSplineR1toR2DifferentialProperties(spline) {
        return _super.call(this, spline) || this;
    }
    BSplineR1toR2DifferentialProperties.prototype.bSplineR1toR1Factory = function (controlPoints, knots) {
        return new BSplineR1toR1_1.BSplineR1toR1(controlPoints, knots);
    };
    return BSplineR1toR2DifferentialProperties;
}(AbstractBSplineR1toR2DifferentialProperties_1.AbstractBSplineR1toR2DifferentialProperties));
exports.BSplineR1toR2DifferentialProperties = BSplineR1toR2DifferentialProperties;


/***/ }),

/***/ "./src/newBsplines/BernsteinDecompositionR1toR1.ts":
/*!*********************************************************!*\
  !*** ./src/newBsplines/BernsteinDecompositionR1toR1.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.splineRecomposition = exports.BernsteinDecompositionR1toR1 = void 0;
var BinomialCoefficient_1 = __webpack_require__(/*! ./BinomialCoefficient */ "./src/newBsplines/BinomialCoefficient.ts");
var BSplineR1toR1_1 = __webpack_require__(/*! ./BSplineR1toR1 */ "./src/newBsplines/BSplineR1toR1.ts");
/**
* A Bernstein decomposition of a B-Spline function from a one dimensional real space to a one dimensional real space
*/
var BernsteinDecompositionR1toR1 = /** @class */ (function () {
    /**
     *
     * @param controlPointsArray An array of array of control points
     */
    function BernsteinDecompositionR1toR1(controlPointsArray) {
        if (controlPointsArray === void 0) { controlPointsArray = []; }
        this.controlPointsArray = controlPointsArray;
    }
    BernsteinDecompositionR1toR1.prototype.add = function (bd) {
        var result = [];
        for (var i = 0; i < bd.controlPointsArray.length; i += 1) {
            result[i] = [];
            for (var j = 0; j < bd.controlPointsArray[0].length; j += 1) {
                result[i][j] = this.controlPointsArray[i][j] + bd.controlPointsArray[i][j];
            }
        }
        return new BernsteinDecompositionR1toR1(result);
    };
    BernsteinDecompositionR1toR1.prototype.subtract = function (bd) {
        var result = [];
        for (var i = 0; i < bd.controlPointsArray.length; i += 1) {
            result[i] = [];
            for (var j = 0; j < bd.controlPointsArray[0].length; j += 1) {
                result[i][j] = this.controlPointsArray[i][j] - bd.controlPointsArray[i][j];
            }
        }
        return new BernsteinDecompositionR1toR1(result);
    };
    BernsteinDecompositionR1toR1.prototype.multiply = function (bd) {
        return new BernsteinDecompositionR1toR1(this.bernsteinMultiplicationArray(this.controlPointsArray, bd.controlPointsArray));
    };
    /**
     *
     * @param bd: BernsteinDecomposition_R1_to_R1
     * @param index: Index of the basis function
     */
    BernsteinDecompositionR1toR1.prototype.multiplyRange = function (bd, start, lessThan) {
        var result = [];
        for (var i = start; i < lessThan; i += 1) {
            result[i - start] = this.bernsteinMultiplication(this.controlPointsArray[i], bd.controlPointsArray[i]);
        }
        return new BernsteinDecompositionR1toR1(result);
    };
    BernsteinDecompositionR1toR1.prototype.bernsteinMultiplicationArray = function (f, g) {
        var result = [];
        for (var i = 0; i < f.length; i += 1) {
            result[i] = this.bernsteinMultiplication(f[i], g[i]);
        }
        return result;
    };
    BernsteinDecompositionR1toR1.prototype.bernsteinMultiplication = function (f, g) {
        var f_degree = f.length - 1;
        var g_degree = g.length - 1;
        var result = [];
        for (var k = 0; k < f_degree + g_degree + 1; k += 1) {
            var cp = 0;
            for (var i = Math.max(0, k - g_degree); i < Math.min(f_degree, k) + 1; i += 1) {
                var bfu = BernsteinDecompositionR1toR1.binomial(f_degree, i);
                var bgu = BernsteinDecompositionR1toR1.binomial(g_degree, k - i);
                var bfugu = BernsteinDecompositionR1toR1.binomial(f_degree + g_degree, k);
                cp += bfu * bgu / bfugu * f[i] * g[k - i];
            }
            result[k] = cp;
        }
        return result;
    };
    BernsteinDecompositionR1toR1.prototype.multiplyByScalar = function (value) {
        var result = [];
        for (var i = 0; i < this.controlPointsArray.length; i += 1) {
            result[i] = [];
            for (var j = 0; j < this.controlPointsArray[0].length; j += 1) {
                result[i][j] = this.controlPointsArray[i][j] * value;
            }
        }
        return new BernsteinDecompositionR1toR1(result);
    };
    BernsteinDecompositionR1toR1.prototype.flattenControlPointsArray = function () {
        return this.controlPointsArray.reduce(function (acc, val) {
            return acc.concat(val);
        }, []);
    };
    BernsteinDecompositionR1toR1.prototype.subset = function (start, lessThan) {
        return new BernsteinDecompositionR1toR1(this.controlPointsArray.slice(start, lessThan));
    };
    BernsteinDecompositionR1toR1.prototype.elevateDegree = function (times) {
        var e_1, _a;
        if (times === void 0) { times = 1; }
        var newControlPointsArray = [];
        try {
            for (var _b = __values(this.controlPointsArray), _c = _b.next(); !_c.done; _c = _b.next()) {
                var controlPoint = _c.value;
                newControlPointsArray.push(this.elevateDegreeB(controlPoint, times));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.controlPointsArray = newControlPointsArray;
    };
    BernsteinDecompositionR1toR1.prototype.elevateDegreeB = function (controlPoints, times) {
        if (times === void 0) { times = 1; }
        var degree = controlPoints.length - 1;
        var result = [];
        for (var i = 0; i < controlPoints.length + times; i += 1) {
            var cp = 0;
            for (var j = Math.max(0, i - times); j <= Math.min(degree, i); j += 1) {
                var bc0 = BinomialCoefficient_1.binomialCoefficient(times, i - j);
                var bc1 = BinomialCoefficient_1.binomialCoefficient(degree, j);
                var bc2 = BinomialCoefficient_1.binomialCoefficient(degree + times, i);
                cp += bc0 * bc1 / bc2 * controlPoints[j];
            }
            result.push(cp);
        }
        return result;
    };
    BernsteinDecompositionR1toR1.prototype.splineRecomposition = function (distinctKnots) {
        var e_2, _a;
        var cp = this.flattenControlPointsArray();
        var degree = this.getDegree();
        var knots = [];
        try {
            for (var distinctKnots_1 = __values(distinctKnots), distinctKnots_1_1 = distinctKnots_1.next(); !distinctKnots_1_1.done; distinctKnots_1_1 = distinctKnots_1.next()) {
                var knot = distinctKnots_1_1.value;
                for (var j = 0; j < degree + 1; j += 1) {
                    knots.push(knot);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (distinctKnots_1_1 && !distinctKnots_1_1.done && (_a = distinctKnots_1.return)) _a.call(distinctKnots_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return new BSplineR1toR1_1.BSplineR1toR1(cp, knots);
    };
    BernsteinDecompositionR1toR1.prototype.getDegree = function () {
        return this.controlPointsArray[0].length - 1;
    };
    BernsteinDecompositionR1toR1.prototype.clone = function () {
        var decompositionCopy = new BernsteinDecompositionR1toR1(this.controlPointsArray.slice());
        return decompositionCopy;
    };
    BernsteinDecompositionR1toR1.binomial = BinomialCoefficient_1.memoizedBinomialCoefficient();
    BernsteinDecompositionR1toR1.flopsCounter = 0;
    return BernsteinDecompositionR1toR1;
}());
exports.BernsteinDecompositionR1toR1 = BernsteinDecompositionR1toR1;
function splineRecomposition(bernsteinDecomposiiton, distinctKnots) {
    var e_3, _a;
    var cp = bernsteinDecomposiiton.flattenControlPointsArray();
    var degree = bernsteinDecomposiiton.getDegree();
    var knots = [];
    try {
        for (var distinctKnots_2 = __values(distinctKnots), distinctKnots_2_1 = distinctKnots_2.next(); !distinctKnots_2_1.done; distinctKnots_2_1 = distinctKnots_2.next()) {
            var knot = distinctKnots_2_1.value;
            for (var j = 0; j < degree + 1; j += 1) {
                knots.push(knot);
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (distinctKnots_2_1 && !distinctKnots_2_1.done && (_a = distinctKnots_2.return)) _a.call(distinctKnots_2);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return new BSplineR1toR1_1.BSplineR1toR1(cp, knots);
}
exports.splineRecomposition = splineRecomposition;


/***/ }),

/***/ "./src/newBsplines/BinomialCoefficient.ts":
/*!************************************************!*\
  !*** ./src/newBsplines/BinomialCoefficient.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.memoizedBinomialCoefficient = exports.binomialCoefficient = void 0;
function binomialCoefficient(n, k) {
    var result = 1;
    if (n < k || k < 0) {
        return 0;
    }
    // take advantage of symmetry
    if (k > n - k) {
        k = n - k;
    }
    for (var x = n - k + 1; x <= n; x += 1) {
        result *= x;
    }
    for (var x = 1; x <= k; x += 1) {
        result /= x;
    }
    return result;
}
exports.binomialCoefficient = binomialCoefficient;
function memoizedBinomialCoefficient() {
    var cache = [];
    return function (n, k) {
        if (cache[n] !== undefined && cache[n][k] !== undefined) {
            return cache[n][k];
        }
        else {
            if (cache[n] === undefined) {
                cache[n] = [];
            }
            var result = binomialCoefficient(n, k);
            cache[n][k] = result;
            return result;
        }
    };
}
exports.memoizedBinomialCoefficient = memoizedBinomialCoefficient;


/***/ }),

/***/ "./src/newBsplines/IncreasingOpenKnotSequenceClosedCurve.ts":
/*!******************************************************************!*\
  !*** ./src/newBsplines/IncreasingOpenKnotSequenceClosedCurve.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IncreasingOpenKnotSequenceClosedCurve = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var AbstractKnotSequenceCurve_1 = __webpack_require__(/*! ./AbstractKnotSequenceCurve */ "./src/newBsplines/AbstractKnotSequenceCurve.ts");
var AbstractIncreasingOpenKnotSequenceCurve_1 = __webpack_require__(/*! ./AbstractIncreasingOpenKnotSequenceCurve */ "./src/newBsplines/AbstractIncreasingOpenKnotSequenceCurve.ts");
var Knot_1 = __webpack_require__(/*! ./Knot */ "./src/newBsplines/Knot.ts");
var StrictlyIncreasingOpenKnotSequenceClosedCurve_1 = __webpack_require__(/*! ./StrictlyIncreasingOpenKnotSequenceClosedCurve */ "./src/newBsplines/StrictlyIncreasingOpenKnotSequenceClosedCurve.ts");
var IncreasingOpenKnotSequenceClosedCurve = /** @class */ (function (_super) {
    __extends(IncreasingOpenKnotSequenceClosedCurve, _super);
    function IncreasingOpenKnotSequenceClosedCurve(degree, knots, subsequence) {
        if (subsequence === void 0) { subsequence = false; }
        var _this = _super.call(this, degree, knots) || this;
        _this.knotSequence = [];
        _this.indexKnotOrigin = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
        if (knots.length < 1) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "null length knot sequence cannot be processed.");
            error.logMessageToConsole();
            return _this;
        }
        _this.knotSequence.push(new Knot_1.Knot(knots[0], 1));
        for (var i = 1; i < knots.length; i++) {
            if (knots[i] === _this.knotSequence[_this.knotSequence.length - 1].abscissa) {
                _this.knotSequence[_this.knotSequence.length - 1].multiplicity++;
            }
            else if (knots[i] < _this.knotSequence[_this.knotSequence.length - 1].abscissa) {
                var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "knot abscissae must be increasing. This condition is not satisfied. Knot sequence cannot be created.");
                error.logMessageToConsole();
            }
            else {
                _this.knotSequence.push(new Knot_1.Knot(knots[i], 1));
            }
        }
        // The validity of the knot sequence should follow the given sequence of calls
        // to make sure that the sequence origin is correctly set first since it is used
        // when checking the degree consistency and knot multiplicities outside the effective curve interval
        if (!subsequence)
            _this.checkCurveOrigin();
        _this.checkDegreeConsistency();
        if (!subsequence)
            _this.checkKnotIntervalConsistency();
        _this.checkUniformity();
        return _this;
    }
    Object.defineProperty(IncreasingOpenKnotSequenceClosedCurve.prototype, "freeKnots", {
        get: function () {
            var e_1, _a;
            var freeKnots = [];
            try {
                for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var knot = _c.value;
                    if (knot !== undefined)
                        freeKnots.push(knot);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            freeKnots.splice(0, (this.indexKnotOrigin + this.knotSequence[this.indexKnotOrigin].multiplicity));
            freeKnots.splice(freeKnots.length - (this.indexKnotOrigin + this.knotSequence[this.indexKnotOrigin].multiplicity), (this.indexKnotOrigin + this.knotSequence[this.indexKnotOrigin].multiplicity));
            return freeKnots;
        },
        enumerable: false,
        configurable: true
    });
    // Assumes that checkCurveOrigin has been called before to get a consistent index of curve origin with the knot location of abscisssa = 0.0
    IncreasingOpenKnotSequenceClosedCurve.prototype.checkKnotIntervalConsistency = function () {
        var i = 0;
        if (this.knotSequence[0].multiplicity >= (this._degree + 1) && this.knotSequence[this.knotSequence.length - 1].multiplicity >= (this._degree + 1))
            return;
        while (((i + 1) < (this.knotSequence.length - 2 - i) || i < this._degree) && this.knotSequence[i].abscissa !== 0.0
            && i < this.knotSequence.length - 1) {
            var interval1 = this.knotSequence[i + 1].abscissa - this.knotSequence[i].abscissa;
            var interval2 = this.knotSequence[this.knotSequence.length - i - 2].abscissa - this.knotSequence[this.knotSequence.length - 1 - i].abscissa;
            if (Math.abs(interval1 + interval2) > AbstractKnotSequenceCurve_1.KNOT_COINCIDENCE_TOLERANCE) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkKnotIntervalConsistency", "knot intervals are not symmetrically spread around the closure point. This sequence cannot be processed.");
                error.logMessageToConsole();
                return;
            }
            i++;
        }
        var indexKnotOrigin = i;
        i = 0;
        while (indexKnotOrigin - i !== 0 && (indexKnotOrigin + i + 1) < this.knotSequence.length && (indexKnotOrigin - i) > 0) {
            var interval1 = this.knotSequence[indexKnotOrigin + i + 1].abscissa - this.knotSequence[indexKnotOrigin + i].abscissa;
            var interval2 = this.knotSequence[indexKnotOrigin - (i + 1)].abscissa - this.knotSequence[indexKnotOrigin - i].abscissa;
            if (Math.abs(interval1 + interval2) > AbstractKnotSequenceCurve_1.KNOT_COINCIDENCE_TOLERANCE) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkKnotIntervalConsistency", "knot intervals are not symmetrically spread around the closure point (left hand side). This sequence cannot be processed.");
                error.logMessageToConsole();
                return;
            }
            i++;
        }
        i = 0;
        while (indexKnotOrigin - i !== 0 && (this.knotSequence.length - indexKnotOrigin + i) < this.knotSequence.length && this.knotSequence.length - indexKnotOrigin - i > 0) {
            var interval1 = this.knotSequence[this.knotSequence.length - indexKnotOrigin + i].abscissa - this.knotSequence[this.knotSequence.length - indexKnotOrigin + i - 1].abscissa;
            var interval2 = this.knotSequence[this.knotSequence.length - indexKnotOrigin - (i + 2)].abscissa - this.knotSequence[this.knotSequence.length - indexKnotOrigin - i - 1].abscissa;
            if (Math.abs(interval1 + interval2) > AbstractKnotSequenceCurve_1.KNOT_COINCIDENCE_TOLERANCE) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkKnotIntervalConsistency", "knot intervals are not symmetrically spread around the closure point (right hand side). This sequence cannot be processed.");
                error.logMessageToConsole();
                return;
            }
            i++;
        }
    };
    IncreasingOpenKnotSequenceClosedCurve.prototype.checkDegreeConsistency = function () {
        var e_2, _a;
        var i = 0;
        var cumulativeMultiplicity = 0;
        while (i !== this.indexKnotOrigin) {
            if (this.knotSequence[i].multiplicity !== 1) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkDegreeConsistency", "inconsistent order of multiplicity of knots before the curve origin.");
                error.logMessageToConsole();
                return;
            }
            if (this.knotSequence[i].multiplicity !== this.knotSequence[this.knotSequence.length - 1 - i].multiplicity) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkDegreeConsistency", "inconsistent order of multiplicity of knots located outside the interval of definition of the curve.");
                error.logMessageToConsole();
                return;
            }
            cumulativeMultiplicity += this.knotSequence[i].multiplicity;
            i++;
        }
        if (cumulativeMultiplicity !== this.indexKnotOrigin) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkDegreeConsistency", "inconsistent order of multiplicity of knots contributing to the closure area of the curve.");
            error.logMessageToConsole();
            return;
        }
        try {
            for (var _b = __values(this.knotSequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                var knot = _c.value;
                if (knot.multiplicity > (this._degree + 1)) {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkDegreeConsistency", "inconsistent order of multiplicity of a knot.");
                    error.logMessageToConsole();
                    return;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    IncreasingOpenKnotSequenceClosedCurve.prototype.checkCurveOrigin = function () {
        var i = 0;
        var cumulativeMultiplicity = 0;
        while (cumulativeMultiplicity < (this._degree + 1)) {
            cumulativeMultiplicity += this.knotSequence[i].multiplicity;
            i++;
        }
        this.indexKnotOrigin = i - 1;
        if (this.knotSequence[this.indexKnotOrigin].abscissa !== 0.0) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkCurveOrigin", "curve origin is not zero. Curve origin must be set to 0.0. Not able to process this not sequence.");
            error.logMessageToConsole();
        }
    };
    IncreasingOpenKnotSequenceClosedCurve.prototype.checkNonUniformStructure = function () {
        this._isNonUniform = false;
    };
    IncreasingOpenKnotSequenceClosedCurve.prototype.deepCopy = function () {
        return new IncreasingOpenKnotSequenceClosedCurve(this._degree, this.allAbscissae);
    };
    IncreasingOpenKnotSequenceClosedCurve.prototype.toStrictlyIncreasingKnotSequence = function () {
        return new StrictlyIncreasingOpenKnotSequenceClosedCurve_1.StrictlyIncreasingOpenKnotSequenceClosedCurve(this._degree, this.distinctAbscissae(), this.multiplicities());
    };
    IncreasingOpenKnotSequenceClosedCurve.prototype.getIndexKnotOrigin = function () {
        return new Knot_1.KnotIndexIncreasingSequence(this.indexKnotOrigin);
    };
    IncreasingOpenKnotSequenceClosedCurve.prototype.isAbscissaCoincidingWithKnot = function (abscissa) {
        var e_3, _a;
        var coincident = false;
        var indexCoincidentKnot = 0;
        try {
            for (var _b = __values(this.knotSequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                var knot = _c.value;
                if (Math.abs(abscissa - knot.abscissa) < AbstractKnotSequenceCurve_1.KNOT_COINCIDENCE_TOLERANCE) {
                    coincident = true;
                    break;
                }
                indexCoincidentKnot++;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (coincident) {
            if (indexCoincidentKnot < this.indexKnotOrigin || indexCoincidentKnot > this.knotSequence.length - this.indexKnotOrigin - 1) {
                coincident = false;
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "isAbscissaCoincidingWithKnot", "knot abscissa is outside the definition interval of the closed curve.");
                error.logMessageToConsole();
            }
        }
        return coincident;
    };
    IncreasingOpenKnotSequenceClosedCurve.prototype.getKnotMultiplicityAtCurveOrigin = function () {
        var multiplicity = this.knotSequence[this.indexKnotOrigin].multiplicity;
        return multiplicity;
    };
    IncreasingOpenKnotSequenceClosedCurve.prototype.findSpan = function (u) {
        var e_4, _a;
        var index = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
        if (u < this.knotSequence[this.indexKnotOrigin].abscissa || u > this.knotSequence[this.knotSequence.length - this.indexKnotOrigin - 1].abscissa) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "findSpan", "Parameter u is outside valid span");
            error.logMessageToConsole();
        }
        else {
            if (this.isAbscissaCoincidingWithKnot(u)) {
                index = 0;
                try {
                    for (var _b = __values(this.knotSequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var knot = _c.value;
                        index += knot.multiplicity;
                        if (Math.abs(u - knot.abscissa) < AbstractKnotSequenceCurve_1.KNOT_COINCIDENCE_TOLERANCE) {
                            if (knot.abscissa === this.knotSequence[this.knotSequence.length - this.indexKnotOrigin - 1].abscissa
                                && this.knotSequence[this.knotSequence.length - this.indexKnotOrigin - 1].multiplicity === (this._degree + 1)) {
                                index -= this.knotSequence[this.knotSequence.length - this.indexKnotOrigin - 1].multiplicity;
                            }
                            if (this._isUniform && index === (this.knotSequence.length - this._degree))
                                index -= 1;
                            return new Knot_1.KnotIndexIncreasingSequence(index - 1);
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
            // Do binary search
            var low = this.indexKnotOrigin;
            var high = this.knotSequence.length - 1 - this.indexKnotOrigin;
            index = Math.floor((low + high) / 2);
            while (!(this.knotSequence[index].abscissa < u && u < this.knotSequence[index + 1].abscissa)) {
                if (u < this.knotSequence[index].abscissa) {
                    high = index;
                }
                else {
                    low = index;
                }
                index = Math.floor((low + high) / 2);
            }
            var indexSeq = 0;
            for (var i = 0; i < (index + 1); i++) {
                indexSeq += this.knotSequence[i].multiplicity;
            }
            index = indexSeq - 1;
            return new Knot_1.KnotIndexIncreasingSequence(index);
        }
        return new Knot_1.KnotIndexIncreasingSequence(index);
    };
    IncreasingOpenKnotSequenceClosedCurve.prototype.decrementDegree = function () {
        var e_5, _a;
        var strictlyIncSeq = this.toStrictlyIncreasingKnotSequence();
        var strictlyIncSeq_Mult = strictlyIncSeq.multiplicities();
        var knotIdx_MultDegPlusOne = [];
        for (var i = 0; i < strictlyIncSeq_Mult.length; i++) {
            if (strictlyIncSeq_Mult[i] === (this._degree + 1))
                knotIdx_MultDegPlusOne.push(i);
        }
        try {
            for (var knotIdx_MultDegPlusOne_1 = __values(knotIdx_MultDegPlusOne), knotIdx_MultDegPlusOne_1_1 = knotIdx_MultDegPlusOne_1.next(); !knotIdx_MultDegPlusOne_1_1.done; knotIdx_MultDegPlusOne_1_1 = knotIdx_MultDegPlusOne_1.next()) {
                var multiplicity = knotIdx_MultDegPlusOne_1_1.value;
                strictlyIncSeq.decrementKnotMultiplicity(new Knot_1.KnotIndexStrictlyIncreasingSequence(multiplicity));
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (knotIdx_MultDegPlusOne_1_1 && !knotIdx_MultDegPlusOne_1_1.done && (_a = knotIdx_MultDegPlusOne_1.return)) _a.call(knotIdx_MultDegPlusOne_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        var newKnots = [];
        if (this._degree > 1 || (this._degree === 1 &&
            (knotIdx_MultDegPlusOne.length > 0 && knotIdx_MultDegPlusOne[0] !== this.indexKnotOrigin ||
                knotIdx_MultDegPlusOne.length === 0))) {
            var newIncKnotSeq = strictlyIncSeq.toIncreasingKnotSequence();
            newKnots = newIncKnotSeq.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(1), new Knot_1.KnotIndexIncreasingSequence(newIncKnotSeq.length() - 2));
        }
        else {
            newKnots = new IncreasingOpenKnotSequenceClosedCurve(0, strictlyIncSeq.allAbscissae).allAbscissae;
        }
        return new IncreasingOpenKnotSequenceClosedCurve(this._degree - 1, newKnots);
    };
    return IncreasingOpenKnotSequenceClosedCurve;
}(AbstractIncreasingOpenKnotSequenceCurve_1.AbstractIncreasingOpenKnotSequenceCurve));
exports.IncreasingOpenKnotSequenceClosedCurve = IncreasingOpenKnotSequenceClosedCurve;


/***/ }),

/***/ "./src/newBsplines/IncreasingOpenKnotSequenceOpenCurve.ts":
/*!****************************************************************!*\
  !*** ./src/newBsplines/IncreasingOpenKnotSequenceOpenCurve.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IncreasingOpenKnotSequenceOpenCurve = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var AbstractKnotSequenceCurve_1 = __webpack_require__(/*! ./AbstractKnotSequenceCurve */ "./src/newBsplines/AbstractKnotSequenceCurve.ts");
var AbstractIncreasingOpenKnotSequenceCurve_1 = __webpack_require__(/*! ./AbstractIncreasingOpenKnotSequenceCurve */ "./src/newBsplines/AbstractIncreasingOpenKnotSequenceCurve.ts");
var Knot_1 = __webpack_require__(/*! ./Knot */ "./src/newBsplines/Knot.ts");
var StrictlyIncreasingOpenKnotSequenceOpenCurve_1 = __webpack_require__(/*! ./StrictlyIncreasingOpenKnotSequenceOpenCurve */ "./src/newBsplines/StrictlyIncreasingOpenKnotSequenceOpenCurve.ts");
var IncreasingOpenKnotSequenceOpenCurve = /** @class */ (function (_super) {
    __extends(IncreasingOpenKnotSequenceOpenCurve, _super);
    function IncreasingOpenKnotSequenceOpenCurve(degree, knots, subsequence) {
        if (subsequence === void 0) { subsequence = false; }
        var _this = _super.call(this, degree, knots) || this;
        _this.knotSequence = [];
        if (knots.length < 1) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "null length knot sequence cannot be processed.");
            error.logMessageToConsole();
            return _this;
        }
        _this.knotSequence.push(new Knot_1.Knot(knots[0], 1));
        for (var i = 1; i < knots.length; i++) {
            if (knots[i] === _this.knotSequence[_this.knotSequence.length - 1].abscissa) {
                _this.knotSequence[_this.knotSequence.length - 1].multiplicity++;
            }
            else {
                _this.knotSequence.push(new Knot_1.Knot(knots[i], 1));
            }
        }
        if (!subsequence)
            _this.checkCurveOrigin();
        _this.checkDegreeConsistency();
        _this.checkNonUniformStructure();
        _this.checkUniformity();
        return _this;
    }
    IncreasingOpenKnotSequenceOpenCurve.prototype.checkCurveOrigin = function () {
        if (this.knotSequence[0].abscissa !== 0.0) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkCurveOrigin", "curve origin is not zero. Curve origin must be set to 0.0. Not able to process this knot sequence.");
            error.logMessageToConsole();
        }
    };
    IncreasingOpenKnotSequenceOpenCurve.prototype.checkNonUniformStructure = function () {
        this._isNonUniform = false;
        if (this.knotSequence[0].multiplicity === (this._degree + 1) &&
            this.knotSequence[this.knotSequence.length - 1].multiplicity === (this._degree + 1))
            this._isNonUniform = true;
    };
    IncreasingOpenKnotSequenceOpenCurve.prototype.deepCopy = function () {
        return new IncreasingOpenKnotSequenceOpenCurve(this._degree, this.allAbscissae);
    };
    IncreasingOpenKnotSequenceOpenCurve.prototype.toStrictlyIncreasingKnotSequence = function () {
        return new StrictlyIncreasingOpenKnotSequenceOpenCurve_1.StrictlyIncreasingOpenKnotSequenceOpenCurve(this._degree, this.distinctAbscissae(), this.multiplicities());
    };
    IncreasingOpenKnotSequenceOpenCurve.prototype.findSpan = function (u) {
        var e_1, _a;
        var index = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
        if (u < this.knotSequence[0].abscissa || u > this.knotSequence[this.knotSequence.length - 1].abscissa) {
            console.log(u);
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "findSpan", "Parameter u is outside valid span");
            error.logMessageToConsole();
        }
        else {
            if (this.isAbscissaCoincidingWithKnot(u)) {
                index = 0;
                try {
                    for (var _b = __values(this.knotSequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var knot = _c.value;
                        index += knot.multiplicity;
                        if (Math.abs(u - knot.abscissa) < AbstractKnotSequenceCurve_1.KNOT_COINCIDENCE_TOLERANCE) {
                            if (knot.abscissa === this.knotSequence[this.knotSequence.length - 1].abscissa) {
                                index -= this.knotSequence[this.knotSequence.length - 1].multiplicity;
                            }
                            if (this.isUniform && index === (this.knotSequence.length - this._degree))
                                index -= 1;
                            return new Knot_1.KnotIndexIncreasingSequence(index - 1);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            // Do binary search
            var low = 0;
            var high = this.knotSequence.length - 1;
            index = Math.floor((low + high) / 2);
            while (!(this.knotSequence[index].abscissa < u && u < this.knotSequence[index + 1].abscissa)) {
                if (u < this.knotSequence[index].abscissa) {
                    high = index;
                }
                else {
                    low = index;
                }
                index = Math.floor((low + high) / 2);
            }
            var indexSeq = 0;
            for (var i = 0; i < (index + 1); i++) {
                indexSeq += this.knotSequence[i].multiplicity;
            }
            index = indexSeq - 1;
            return new Knot_1.KnotIndexIncreasingSequence(index);
        }
        return new Knot_1.KnotIndexIncreasingSequence(index);
    };
    return IncreasingOpenKnotSequenceOpenCurve;
}(AbstractIncreasingOpenKnotSequenceCurve_1.AbstractIncreasingOpenKnotSequenceCurve));
exports.IncreasingOpenKnotSequenceOpenCurve = IncreasingOpenKnotSequenceOpenCurve;


/***/ }),

/***/ "./src/newBsplines/Knot.ts":
/*!*********************************!*\
  !*** ./src/newBsplines/Knot.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getDistinctKnots = exports.KnotIndexLastKnotInIncreasingSequence = exports.KnotIndexIncreasingSequence = exports.KnotIndexStrictlyIncreasingSequence = exports.AbstractKnotIndex = exports.Knot = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var Knot = /** @class */ (function () {
    function Knot(abscissa, multiplicity) {
        this._abscissa = abscissa;
        if (multiplicity !== undefined) {
            this._multiplicity = multiplicity;
            if (multiplicity < 1) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "constructor", "Knot multiplicity value out of range");
                error.logMessageToConsole();
            }
        }
        else {
            this._multiplicity = 1;
        }
    }
    Object.defineProperty(Knot.prototype, "abscissa", {
        get: function () {
            return this._abscissa;
        },
        set: function (abscissa) {
            this._abscissa = abscissa;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Knot.prototype, "multiplicity", {
        get: function () {
            return this._multiplicity;
        },
        set: function (multiplicity) {
            this._multiplicity = multiplicity;
        },
        enumerable: false,
        configurable: true
    });
    Knot.prototype.incrementMultiplicity = function () {
        this._multiplicity++;
        return;
    };
    Knot.prototype.decrementMultiplicity = function () {
        this._multiplicity--;
        if (this._multiplicity < 1) {
        }
        return;
    };
    return Knot;
}());
exports.Knot = Knot;
var AbstractKnotIndex = /** @class */ (function () {
    function AbstractKnotIndex(value) {
        this._knotIndex = 0;
        if (value !== undefined) {
            this._knotIndex = value;
        }
    }
    Object.defineProperty(AbstractKnotIndex.prototype, "knotIndex", {
        get: function () {
            return this._knotIndex;
        },
        set: function (value) {
            this._knotIndex = value;
            return;
        },
        enumerable: false,
        configurable: true
    });
    return AbstractKnotIndex;
}());
exports.AbstractKnotIndex = AbstractKnotIndex;
var KnotIndexStrictlyIncreasingSequence = /** @class */ (function (_super) {
    __extends(KnotIndexStrictlyIncreasingSequence, _super);
    function KnotIndexStrictlyIncreasingSequence(value) {
        return _super.call(this, value) || this;
    }
    return KnotIndexStrictlyIncreasingSequence;
}(AbstractKnotIndex));
exports.KnotIndexStrictlyIncreasingSequence = KnotIndexStrictlyIncreasingSequence;
var KnotIndexIncreasingSequence = /** @class */ (function (_super) {
    __extends(KnotIndexIncreasingSequence, _super);
    function KnotIndexIncreasingSequence(value) {
        return _super.call(this, value) || this;
    }
    return KnotIndexIncreasingSequence;
}(AbstractKnotIndex));
exports.KnotIndexIncreasingSequence = KnotIndexIncreasingSequence;
var KnotIndexLastKnotInIncreasingSequence = /** @class */ (function (_super) {
    __extends(KnotIndexLastKnotInIncreasingSequence, _super);
    function KnotIndexLastKnotInIncreasingSequence(value) {
        return _super.call(this, value) || this;
    }
    return KnotIndexLastKnotInIncreasingSequence;
}(AbstractKnotIndex));
exports.KnotIndexLastKnotInIncreasingSequence = KnotIndexLastKnotInIncreasingSequence;
function getDistinctKnots(knots) {
    var result = [knots[0]];
    var temp = result[0];
    for (var i = 1; i < knots.length; i += 1) {
        if (knots[i] !== temp) {
            result.push(knots[i]);
            temp = knots[i];
        }
    }
    return result;
}
exports.getDistinctKnots = getDistinctKnots;


/***/ }),

/***/ "./src/newBsplines/PeriodicBSplineR1toR1.ts":
/*!**************************************************!*\
  !*** ./src/newBsplines/PeriodicBSplineR1toR1.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PeriodicBSplineR1toR1 = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var Vector2d_1 = __webpack_require__(/*! ../mathVector/Vector2d */ "./src/mathVector/Vector2d.ts");
var AbstractBSplineR1toR1_1 = __webpack_require__(/*! ./AbstractBSplineR1toR1 */ "./src/newBsplines/AbstractBSplineR1toR1.ts");
var BernsteinDecompositionR1toR1_1 = __webpack_require__(/*! ./BernsteinDecompositionR1toR1 */ "./src/newBsplines/BernsteinDecompositionR1toR1.ts");
var BSplineR1toR1_1 = __webpack_require__(/*! ./BSplineR1toR1 */ "./src/newBsplines/BSplineR1toR1.ts");
var BSplineR1toR2_1 = __webpack_require__(/*! ./BSplineR1toR2 */ "./src/newBsplines/BSplineR1toR2.ts");
var IncreasingOpenKnotSequenceClosedCurve_1 = __webpack_require__(/*! ./IncreasingOpenKnotSequenceClosedCurve */ "./src/newBsplines/IncreasingOpenKnotSequenceClosedCurve.ts");
var Knot_1 = __webpack_require__(/*! ./Knot */ "./src/newBsplines/Knot.ts");
var Piegl_Tiller_NURBS_Book_1 = __webpack_require__(/*! ./Piegl_Tiller_NURBS_Book */ "./src/newBsplines/Piegl_Tiller_NURBS_Book.ts");
/**
 * A B-Spline function from a one dimensional real periodic space to a one dimensional real space
 */
var PeriodicBSplineR1toR1 = /** @class */ (function (_super) {
    __extends(PeriodicBSplineR1toR1, _super);
    function PeriodicBSplineR1toR1(controlPoints, knots) {
        if (controlPoints === void 0) { controlPoints = [0]; }
        if (knots === void 0) { knots = [0, 1]; }
        var _this = _super.call(this, controlPoints, knots) || this;
        _this._increasingKnotSequence = new IncreasingOpenKnotSequenceClosedCurve_1.IncreasingOpenKnotSequenceClosedCurve(_this._degree, knots);
        return _this;
    }
    Object.defineProperty(PeriodicBSplineR1toR1.prototype, "knots", {
        get: function () {
            var e_1, _a;
            var knots = [];
            try {
                for (var _b = __values(this._increasingKnotSequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var knot = _c.value;
                    if (knot !== undefined)
                        knots.push(knot);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return knots;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PeriodicBSplineR1toR1.prototype, "increasingKnotSequence", {
        get: function () {
            return this._increasingKnotSequence;
        },
        enumerable: false,
        configurable: true
    });
    PeriodicBSplineR1toR1.prototype.bernsteinDecomposition = function () {
        var s = this.clone();
        var degree = this._degree;
        var newControlPoints = [];
        var newKnots = [];
        if (degree === 0) {
            newControlPoints = s.controlPoints;
            newKnots = s.knots;
        }
        else {
            s.clamp(s.knots[degree]);
            s.clamp(s.knots[s.knots.length - degree - 1]);
            var indexKnotOrigin = s._increasingKnotSequence.getIndexKnotOrigin();
            var lastIndex = new Knot_1.KnotIndexIncreasingSequence(s._increasingKnotSequence.length() - indexKnotOrigin.knotIndex - 1);
            newControlPoints = s.controlPoints.slice(indexKnotOrigin.knotIndex, s.controlPoints.length - indexKnotOrigin.knotIndex);
            newKnots = s._increasingKnotSequence.extractSubsetOfAbscissae(indexKnotOrigin, lastIndex);
        }
        return new BernsteinDecompositionR1toR1_1.BernsteinDecompositionR1toR1(Piegl_Tiller_NURBS_Book_1.decomposeFunction(new BSplineR1toR1_1.BSplineR1toR1(newControlPoints, newKnots)));
    };
    PeriodicBSplineR1toR1.prototype.clone = function () {
        return new PeriodicBSplineR1toR1(this._controlPoints.slice(), this._increasingKnotSequence.allAbscissae.slice());
    };
    PeriodicBSplineR1toR1.prototype.derivative = function () {
        var newControlPoints = [];
        for (var i = 0; i < this._controlPoints.length - 1; i += 1) {
            var indexIncSeq1 = new Knot_1.KnotIndexIncreasingSequence(i + this._degree + 1);
            var indexStrictIncSeq1 = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(indexIncSeq1);
            var indexIncSeq2 = new Knot_1.KnotIndexIncreasingSequence(i + 1);
            var indexStrictIncSeq2 = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(indexIncSeq2);
            if (indexStrictIncSeq1.knotIndex !== indexStrictIncSeq2.knotIndex) {
                var newCtrlPt = (this._controlPoints[i + 1] - (this._controlPoints[i])) * (this._degree /
                    (this._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(i + this._degree + 1)) - this._increasingKnotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(i + 1))));
                newControlPoints.push(newCtrlPt);
            }
        }
        var newKnots = this._increasingKnotSequence.decrementDegree().allAbscissae;
        return new PeriodicBSplineR1toR1(newControlPoints, newKnots);
    };
    PeriodicBSplineR1toR1.prototype.getBasisFunctionSpanWithKnotMultiplicityEqualDegreePlusOne = function () {
        var spanWithMultiplicityDegreePlusOne = [];
        for (var i = 0; i < this._controlPoints.length - 1; i++) {
            spanWithMultiplicityDegreePlusOne.push(false);
            var indexStrictInc = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(new Knot_1.KnotIndexIncreasingSequence(i + 1));
            var multiplicity = this.knotMultiplicity(indexStrictInc);
            if (multiplicity >= (this.degree + 1)) {
                spanWithMultiplicityDegreePlusOne[i - this.degree] = true;
            }
        }
        return spanWithMultiplicityDegreePlusOne;
    };
    PeriodicBSplineR1toR1.prototype.curve = function () {
        var x = this.grevilleAbscissae();
        var cp = [];
        for (var i = 0; i < x.length; i += 1) {
            cp.push(new Vector2d_1.Vector2d(x[i], this._controlPoints[i]));
        }
        return new BSplineR1toR2_1.BSplineR1toR2(cp, this._increasingKnotSequence.allAbscissae);
    };
    PeriodicBSplineR1toR1.prototype.evaluateOutsideRefInterval = function (u) {
        var result = 0.0;
        var knots = this.distinctKnots().slice();
        if (u >= knots[0] && u <= knots[knots.length - 1]) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "evaluateOutsideRefInterval", "Parameter value for evaluation is not outside the knot interval.");
            error.logMessageToConsole();
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "evaluateOutsideRefInterval", "Method not implemented yet.");
            error.logMessageToConsole();
        }
        return result;
    };
    return PeriodicBSplineR1toR1;
}(AbstractBSplineR1toR1_1.AbstractBSplineR1toR1));
exports.PeriodicBSplineR1toR1 = PeriodicBSplineR1toR1;


/***/ }),

/***/ "./src/newBsplines/PeriodicBSplineR1toR2DifferentialProperties.ts":
/*!************************************************************************!*\
  !*** ./src/newBsplines/PeriodicBSplineR1toR2DifferentialProperties.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PeriodicBSplineR1toR2DifferentialProperties = void 0;
var AbstractBSplineR1toR2DifferentialProperties_1 = __webpack_require__(/*! ./AbstractBSplineR1toR2DifferentialProperties */ "./src/newBsplines/AbstractBSplineR1toR2DifferentialProperties.ts");
var PeriodicBSplineR1toR1_1 = __webpack_require__(/*! ./PeriodicBSplineR1toR1 */ "./src/newBsplines/PeriodicBSplineR1toR1.ts");
var PeriodicBSplineR1toR2DifferentialProperties = /** @class */ (function (_super) {
    __extends(PeriodicBSplineR1toR2DifferentialProperties, _super);
    function PeriodicBSplineR1toR2DifferentialProperties(spline) {
        return _super.call(this, spline) || this;
    }
    PeriodicBSplineR1toR2DifferentialProperties.prototype.bSplineR1toR1Factory = function (controlPoints, knots) {
        return new PeriodicBSplineR1toR1_1.PeriodicBSplineR1toR1(controlPoints, knots);
    };
    PeriodicBSplineR1toR2DifferentialProperties.prototype.curvatureExtrema = function (curvatureDerivativeNumerator) {
        var e_1, _a;
        if (!curvatureDerivativeNumerator) {
            curvatureDerivativeNumerator = this.curvatureDerivativeNumerator();
        }
        var zeros = curvatureDerivativeNumerator.zeros(10e-3);
        var result = [];
        try {
            for (var zeros_1 = __values(zeros), zeros_1_1 = zeros_1.next(); !zeros_1_1.done; zeros_1_1 = zeros_1.next()) {
                var z = zeros_1_1.value;
                result.push(this._spline.evaluate(z));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (zeros_1_1 && !zeros_1_1.done && (_a = zeros_1.return)) _a.call(zeros_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var a = curvatureDerivativeNumerator.controlPoints[0];
        var b = curvatureDerivativeNumerator.controlPoints[curvatureDerivativeNumerator.controlPoints.length - 1];
        if (a * b < 0) { // a and b have different sign
            var u = curvatureDerivativeNumerator.knots[curvatureDerivativeNumerator.knots.length - 1];
            result.push(this._spline.evaluate(u));
        }
        return result;
    };
    return PeriodicBSplineR1toR2DifferentialProperties;
}(AbstractBSplineR1toR2DifferentialProperties_1.AbstractBSplineR1toR2DifferentialProperties));
exports.PeriodicBSplineR1toR2DifferentialProperties = PeriodicBSplineR1toR2DifferentialProperties;


/***/ }),

/***/ "./src/newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence.ts":
/*!**********************************************************************!*\
  !*** ./src/newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.create_PeriodicBSplineR1toR2 = exports.PeriodicBSplineR1toR2withOpenKnotSequence = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var Vector2d_1 = __webpack_require__(/*! ../mathVector/Vector2d */ "./src/mathVector/Vector2d.ts");
var AbstractBSplineR1toR2_1 = __webpack_require__(/*! ./AbstractBSplineR1toR2 */ "./src/newBsplines/AbstractBSplineR1toR2.ts");
var BernsteinDecompositionR1toR1_1 = __webpack_require__(/*! ./BernsteinDecompositionR1toR1 */ "./src/newBsplines/BernsteinDecompositionR1toR1.ts");
var BSplineR1toR1_1 = __webpack_require__(/*! ./BSplineR1toR1 */ "./src/newBsplines/BSplineR1toR1.ts");
var BSplineR1toR2_1 = __webpack_require__(/*! ./BSplineR1toR2 */ "./src/newBsplines/BSplineR1toR2.ts");
var IncreasingOpenKnotSequenceClosedCurve_1 = __webpack_require__(/*! ./IncreasingOpenKnotSequenceClosedCurve */ "./src/newBsplines/IncreasingOpenKnotSequenceClosedCurve.ts");
var Knot_1 = __webpack_require__(/*! ./Knot */ "./src/newBsplines/Knot.ts");
var PeriodicBSplineR1toR1_1 = __webpack_require__(/*! ./PeriodicBSplineR1toR1 */ "./src/newBsplines/PeriodicBSplineR1toR1.ts");
var Piegl_Tiller_NURBS_Book_1 = __webpack_require__(/*! ./Piegl_Tiller_NURBS_Book */ "./src/newBsplines/Piegl_Tiller_NURBS_Book.ts");
/**
 * A B-Spline function from a one dimensional real periodic space to a two dimensional real space
 */
var PeriodicBSplineR1toR2withOpenKnotSequence = /** @class */ (function (_super) {
    __extends(PeriodicBSplineR1toR2withOpenKnotSequence, _super);
    /**
     * Create a B-Spline
     * @param controlPoints The control points array
     * @param knots The knot vector
     */
    function PeriodicBSplineR1toR2withOpenKnotSequence(controlPoints, knots) {
        if (controlPoints === void 0) { controlPoints = [new Vector2d_1.Vector2d(0, 0)]; }
        if (knots === void 0) { knots = [0, 1]; }
        var _this = _super.call(this, controlPoints, knots) || this;
        _this._increasingKnotSequence = new IncreasingOpenKnotSequenceClosedCurve_1.IncreasingOpenKnotSequenceClosedCurve(_this._degree, knots);
        return _this;
    }
    Object.defineProperty(PeriodicBSplineR1toR2withOpenKnotSequence.prototype, "knots", {
        get: function () {
            var e_1, _a;
            var knots = [];
            try {
                for (var _b = __values(this._increasingKnotSequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var knot = _c.value;
                    if (knot !== undefined)
                        knots.push(knot);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return knots;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PeriodicBSplineR1toR2withOpenKnotSequence.prototype, "periodicControlPointsLength", {
        get: function () {
            var indexOrigin = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(this._increasingKnotSequence.getIndexKnotOrigin());
            var multiplicityBoundary = this.knotMultiplicity(indexOrigin);
            return this._controlPoints.length - this._degree + (multiplicityBoundary - 1);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PeriodicBSplineR1toR2withOpenKnotSequence.prototype, "freeControlPoints", {
        get: function () {
            var periodicControlPoints = [];
            for (var i = 0; i < this.periodicControlPointsLength; i += 1) {
                periodicControlPoints.push(this._controlPoints[i].clone());
            }
            return periodicControlPoints;
        },
        enumerable: false,
        configurable: true
    });
    // protected override factory(controlPoints: readonly Vector2d[] = [new Vector2d(0, 0)], knots: readonly number[] = [0, 1]) {
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.factory = function (controlPoints, knots) {
        if (controlPoints === void 0) { controlPoints = [new Vector2d_1.Vector2d(0, 0)]; }
        if (knots === void 0) { knots = [0, 1]; }
        return new PeriodicBSplineR1toR2withOpenKnotSequence(controlPoints, knots);
    };
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.getClampSpline = function () {
        var s = this.clone();
        var degree = this._degree;
        s.clamp(s.knots[degree]);
        s.clamp(s.knots[s.knots.length - degree - 1]);
        var newControlPoints = s.controlPoints.slice(degree, s.controlPoints.length - degree);
        var newKnots = s.knots.slice(degree, s.knots.length - degree);
        return new BSplineR1toR2_1.BSplineR1toR2(newControlPoints, newKnots);
    };
    /**
     * Return a deep copy of this b-spline
     */
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.clone = function () {
        var cloneControlPoints = AbstractBSplineR1toR2_1.deepCopyControlPoints(this._controlPoints);
        return new PeriodicBSplineR1toR2withOpenKnotSequence(cloneControlPoints, this._increasingKnotSequence.allAbscissae.slice());
    };
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.optimizerStep = function (step) {
        var n = this.periodicControlPointsLength;
        for (var i = 0; i < n; i += 1) {
            this.moveControlPoint(i, step[i], step[i + n]);
        }
    };
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.moveControlPoint = function (i, deltaX, deltaY) {
        if (i < 0 || i >= this.periodicControlPointsLength) {
            throw new Error("Control point indentifier is out of range");
        }
        _super.prototype.moveControlPoint.call(this, i, deltaX, deltaY);
        var n = this.periodicControlPointsLength;
        if (i < this.degree) {
            _super.prototype.setControlPointPosition.call(this, n + i, this.getControlPoint(i));
        }
    };
    /**
     *
     * @param fromU Parametric position where the section start
     * @param toU Parametric position where the section end
     * @retrun the BSpline_R1_to_R2 section
     */
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.extract = function (fromU, toU) {
        var spline = this.clone();
        spline.clamp(fromU);
        spline.clamp(toU);
        var newFromSpan = Piegl_Tiller_NURBS_Book_1.clampingFindSpan(fromU, spline.knots, spline._degree);
        var newToSpan = Piegl_Tiller_NURBS_Book_1.clampingFindSpan(toU, spline.knots, spline._degree);
        var newKnots = [];
        var newControlPoints = [];
        for (var i = newFromSpan - spline._degree; i < newToSpan + 1; i += 1) {
            newKnots.push(spline.knots[i]);
        }
        for (var i = newFromSpan - spline._degree; i < newToSpan - spline._degree; i += 1) {
            newControlPoints.push(new Vector2d_1.Vector2d(spline._controlPoints[i].x, spline._controlPoints[i].y));
        }
        return new BSplineR1toR2_1.BSplineR1toR2(newControlPoints, newKnots);
    };
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.elevateDegree = function (times) {
        if (times === void 0) { times = 1; }
        var sx = new PeriodicBSplineR1toR1_1.PeriodicBSplineR1toR1(this.getControlPointsX(), this.knots);
        var sy = new PeriodicBSplineR1toR1_1.PeriodicBSplineR1toR1(this.getControlPointsY(), this.knots);
        var bdsx = sx.bernsteinDecomposition();
        var bdsy = sy.bernsteinDecomposition();
        bdsx.elevateDegree();
        bdsy.elevateDegree();
        var knots = this.getDistinctKnots();
        var sxNew = BernsteinDecompositionR1toR1_1.splineRecomposition(bdsx, knots);
        var syNew = BernsteinDecompositionR1toR1_1.splineRecomposition(bdsy, knots);
        var newcp = [];
        for (var i = 0; i < sxNew.controlPoints.length; i += 1) {
            newcp.push(new Vector2d_1.Vector2d(sxNew.controlPoints[i], syNew.controlPoints[i]));
        }
        var newSpline = new PeriodicBSplineR1toR2withOpenKnotSequence(newcp, sxNew.knots);
        for (var i = 0; i < knots.length; i += 1) {
            var m = this.knotMultiplicity(this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(this._increasingKnotSequence.findSpan(knots[i])));
            for (var j = 0; j < newSpline.degree - m - 1; j += 1) {
                newSpline.removeKnot(Piegl_Tiller_NURBS_Book_1.findSpan(newSpline.knots[i], newSpline.knots, newSpline.degree));
            }
        }
        this._controlPoints = newSpline.controlPoints;
        this._increasingKnotSequence = new IncreasingOpenKnotSequenceClosedCurve_1.IncreasingOpenKnotSequenceClosedCurve(newSpline.degree, newSpline.knots);
        this._degree = newSpline.degree;
    };
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.generateKnotSequenceOfBSplineR1toR2 = function () {
        var knotSequence = this._increasingKnotSequence.allAbscissae;
        var distinctKnots = this.getDistinctKnots();
        var knotMultiplicity = this._increasingKnotSequence.toStrictlyIncreasingKnotSequence().multiplicities();
        if (knotMultiplicity.length !== distinctKnots.length) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "generateKnotSequenceOfBSplineR1toR2", "inconsistent set of knot multiplicities compared to the disctinct knot values.");
            error.logMessageToConsole();
        }
        else if (knotMultiplicity[0] !== knotMultiplicity[knotMultiplicity.length - 1]) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "generateKnotSequenceOfBSplineR1toR2", "knot multiplicities at sequence extremities differ. Cannot generate the knot sequence of the corresponding open curve.");
            error.logMessageToConsole();
        }
        var knotToAddAtOrigin = [];
        for (var j = 0; j < (this._degree - knotMultiplicity[0] + 2); j++) {
            knotToAddAtOrigin.push(knotSequence[0] + (knotSequence[knotSequence.length - 1 - this._degree - j] - knotSequence[knotSequence.length - 1]));
        }
        var knotToAddAtExtremity = [];
        for (var j = 0; j < (this._degree - knotMultiplicity[knotMultiplicity.length - 1] + 2); j++) {
            knotToAddAtExtremity.push(knotSequence[knotSequence.length - 1] + (knotSequence[j + 1] - knotSequence[0]));
        }
        var result = knotToAddAtOrigin.concat(knotSequence).concat(knotToAddAtExtremity);
        return result;
    };
    // generateKnotSequenceOfBSplineR1toR2(): number[] {
    //     const knotSequence = this._knots;
    //     const distinctKnots = this.getDistinctKnots();
    //     const knotMultiplicity: number[] = [];
    //     let i = this._knots.length - 1;
    //     while(i > 0) {
    //         const multiplicity = this.knotMultiplicity(i);
    //         knotMultiplicity.splice(0, 0, multiplicity);
    //         i = i - multiplicity;
    //     }
    //     if(knotMultiplicity.length !== distinctKnots.length) {
    //         const error = new ErrorLog(this.constructor.name, "generateKnotSequenceOfBSplineR1toR2", "inconsistent set of knot multiplicities compared to the disctinct knot values.");
    //         error.logMessageToConsole();
    //     } else if(knotMultiplicity[0] !== knotMultiplicity[knotMultiplicity.length - 1]) {
    //         const error = new ErrorLog(this.constructor.name, "generateKnotSequenceOfBSplineR1toR2", "knot multiplicities at sequence extremities differ. Cannot generate the knot sequence of the corresponding open curve.");
    //         error.logMessageToConsole();
    //     }
    //     const knotToAddAtOrigin: number[] = [];
    //     for(let j = 0; j < (this._degree - knotMultiplicity[0] + 2); j++) {
    //         knotToAddAtOrigin.push(knotSequence[0] + (knotSequence[knotSequence.length - 1 - this._degree - j] - knotSequence[knotSequence.length - 1]));
    //     }
    //     const knotToAddAtExtremity: number[] = [];
    //     for(let j = 0; j < (this._degree - knotMultiplicity[knotMultiplicity.length - 1] + 2); j++) {
    //         knotToAddAtExtremity.push(knotSequence[knotSequence.length - 1] + (knotSequence[j + 1] - knotSequence[0]));
    //     }
    //     let result =  knotToAddAtOrigin.concat(knotSequence).concat(knotToAddAtExtremity);
    //     return result;
    // }
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.generateKnotSequenceOfPeriodicBSplineR1toR2 = function (bSplineDegreeUp) {
        var knotSequenceDegreeUp = bSplineDegreeUp.increasingKnotSequence.allAbscissae;
        while (knotSequenceDegreeUp[0] !== this._increasingKnotSequence.allAbscissae[0]) {
            knotSequenceDegreeUp.splice(0, 1);
        }
        while (knotSequenceDegreeUp[knotSequenceDegreeUp.length - 1] !== this._increasingKnotSequence.allAbscissae[this._increasingKnotSequence.length() - 1]) {
            knotSequenceDegreeUp.splice((knotSequenceDegreeUp.length - 1), 1);
        }
        return knotSequenceDegreeUp;
    };
    // generateKnotSequenceOfPeriodicBSplineR1toR2(bSplineDegreeUp: BSplineR1toR2): number[] {
    //     let knotSequenceDegreeUp = bSplineDegreeUp.knots;
    //     while(knotSequenceDegreeUp[0] !== this._knots[0]) {
    //         knotSequenceDegreeUp.splice(0, 1);
    //     }
    //     while(knotSequenceDegreeUp[knotSequenceDegreeUp.length - 1] !== this._knots[this._knots.length - 1]) {
    //         knotSequenceDegreeUp.splice((knotSequenceDegreeUp.length - 1), 1);
    //     }
    //     return knotSequenceDegreeUp;
    // }
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.generateControlPolygonOfBSplineR1toR2 = function () {
        var result = [];
        var knotMultiplicity = this._increasingKnotSequence.toStrictlyIncreasingKnotSequence().multiplicities();
        if (knotMultiplicity[0] === (this._degree + 1)) {
            result = this._controlPoints;
        }
        else {
            var controlPtsToAddAtOrigin = [];
            for (var j = 0; j < (this._degree - knotMultiplicity[0] + 2); j++) {
                controlPtsToAddAtOrigin.push(this._controlPoints[this._controlPoints.length - 1 - j]);
            }
            result = controlPtsToAddAtOrigin.concat(this._controlPoints);
        }
        return result;
    };
    // generateControlPolygonOfBSplineR1toR2(): Vector2d[] {
    //     let result: Vector2d[] = [];
    //     const knotMultiplicity: number[] = [];
    //     let i = this._knots.length - 1;
    //     while(i > 0) {
    //         const multiplicity = this.knotMultiplicity(i);
    //         knotMultiplicity.splice(0, 0, multiplicity);
    //         i = i - multiplicity;
    //     }
    //     if(knotMultiplicity[0] === (this._degree + 1)) {
    //         result = this._controlPoints;
    //     } else {
    //         const controlPtsToAddAtOrigin: Vector2d[] = [];
    //         for(let j = 0; j < (this._degree - knotMultiplicity[0] + 2); j++) {
    //             controlPtsToAddAtOrigin.push(this._controlPoints[this._controlPoints.length - 1 - j]);
    //         }
    //         result = controlPtsToAddAtOrigin.concat(this._controlPoints);
    //     }
    //     return result;
    // }
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.generateControlPolygonOfPeriodicBSplineR1toR2 = function (bSplineDegreeUp) {
        var controlPolygonDegreeUp = bSplineDegreeUp.controlPoints;
        controlPolygonDegreeUp.splice(0, bSplineDegreeUp.degree);
        controlPolygonDegreeUp.splice((controlPolygonDegreeUp.length - 1), 1);
        return controlPolygonDegreeUp;
    };
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.generateBSplineR1toR2 = function () {
        return new BSplineR1toR2_1.BSplineR1toR2(this._controlPoints, this._increasingKnotSequence.allAbscissae);
    };
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.generateIntermediateSplinesForDegreeElevation = function () {
        var knotSequences = [];
        var controlPolygons = [];
        var strictIncSeq = this._increasingKnotSequence.toStrictlyIncreasingKnotSequence();
        var indexOrigin = strictIncSeq.getIndexKnotOrigin();
        var lastIndex = new Knot_1.KnotIndexStrictlyIncreasingSequence(strictIncSeq.length() - strictIncSeq.degree - 1);
        for (var i = 0; i <= this._degree; i += 1) {
            var knotSequence = this._increasingKnotSequence.deepCopy();
            var controlPolygon = this._controlPoints.slice();
            var k = 0;
            for (var j = i; j < this._increasingKnotSequence.length(); j += this._degree + 1) {
                // for(let j = i + indexOrigin.knotIndex; j < this._increasingKnotSequence.length() - indexOrigin.knotIndex; j += this._degree + 1) {
                var indexStrctIncreasingSeq = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(new Knot_1.KnotIndexIncreasingSequence(j));
                knotSequence.raiseKnotMultiplicity(indexStrctIncreasingSeq, 1);
                if (j < this._controlPoints.length) {
                    var controlPoint = this._controlPoints[j];
                    controlPolygon.splice((j + k), 0, controlPoint);
                }
                k += 1;
            }
            var strictIncKnotSequence = knotSequence.toStrictlyIncreasingKnotSequence();
            // k = 0;
            // for(let idx = indexOrigin.knotIndex; idx <= (indexOrigin.knotIndex + strictIncKnotSequence.degree + 1); idx++) {
            //     if(strictIncKnotSequence.KnotMultiplicityAtAbscissa(strictIncKnotSequence.abscissaAtIndex(new KnotIndexStrictlyIncreasingSequence(idx))) >
            //         strictIncKnotSequence.KnotMultiplicityAtAbscissa(strictIncKnotSequence.abscissaAtIndex(new KnotIndexStrictlyIncreasingSequence(lastIndex.knotIndex - idx + indexOrigin.knotIndex)))) {
            //         const idxStrctIncSeq = new KnotIndexStrictlyIncreasingSequence(lastIndex.knotIndex - idx + indexOrigin.knotIndex);
            //         strictIncKnotSequence.raiseKnotMultiplicity(idxStrctIncSeq, 1);
            //         const indexCtrlPt = strictIncKnotSequence.toKnotIndexIncreasingSequence(idxStrctIncSeq).knotIndex;
            //         if(indexCtrlPt < controlPolygon.length) {
            //             const controlPoint = controlPolygon[indexCtrlPt];
            //             controlPolygon.splice(indexCtrlPt, 0, controlPoint);
            //         }
            //         k += 1;
            //     } else if(strictIncKnotSequence.KnotMultiplicityAtAbscissa(strictIncKnotSequence.abscissaAtIndex(new KnotIndexStrictlyIncreasingSequence(idx))) <
            //         strictIncKnotSequence.KnotMultiplicityAtAbscissa(strictIncKnotSequence.abscissaAtIndex(new KnotIndexStrictlyIncreasingSequence(lastIndex.knotIndex - idx + indexOrigin.knotIndex)))) {
            //         const idxStrctIncSeq = new KnotIndexStrictlyIncreasingSequence(idx);
            //         strictIncKnotSequence.raiseKnotMultiplicity(idxStrctIncSeq, 1);
            //         const indexCtrlPt = strictIncKnotSequence.toKnotIndexIncreasingSequence(idxStrctIncSeq).knotIndex;
            //         if(indexCtrlPt < controlPolygon.length) {
            //             const controlPoint = controlPolygon[indexCtrlPt];
            //             controlPolygon.splice(indexCtrlPt, 0, controlPoint);
            //         }
            //         k += 1;
            //     }
            // }
            // if(i === 0) {
            //     controlPolygon.splice(controlPolygon.length, 0, this._controlPoints[this._degree]);
            // }
            knotSequence = strictIncKnotSequence.toIncreasingKnotSequence();
            knotSequences.push(knotSequence.allAbscissae);
            controlPolygons.push(controlPolygon);
        }
        return {
            knotVectors: knotSequences,
            CPs: controlPolygons
        };
    };
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.degreeIncrement = function () {
        var intermSplKnotsAndCPs = this.generateIntermediateSplinesForDegreeElevation();
        var splineHigherDegree = new PeriodicBSplineR1toR2withOpenKnotSequence(intermSplKnotsAndCPs.CPs[0], intermSplKnotsAndCPs.knotVectors[0]);
        // const strictIncSeq_splineHigherDegree = splineHigherDegree._increasingKnotSequence.toStrictlyIncreasingKnotSequence();
        for (var i = 1; i <= this._degree; i += 1) {
            var strictIncSeq_splineHigherDegree = splineHigherDegree._increasingKnotSequence.toStrictlyIncreasingKnotSequence();
            var splineTemp = new PeriodicBSplineR1toR2withOpenKnotSequence(intermSplKnotsAndCPs.CPs[i], intermSplKnotsAndCPs.knotVectors[i]);
            var strictIncSeq_splineTemp = splineTemp._increasingKnotSequence.toStrictlyIncreasingKnotSequence();
            // for(let j = 1; j < (strictIncSeq_splineHigherDegree.length() - 1); j++) {
            for (var j = 0; j < strictIncSeq_splineHigherDegree.length(); j++) {
                var index = new Knot_1.KnotIndexStrictlyIncreasingSequence(j);
                if (strictIncSeq_splineHigherDegree.knotMultiplicity(index) > strictIncSeq_splineTemp.knotMultiplicity(index))
                    // if(strictIncSeq_splineHigherDegree.knotMultiplicity(index) > strictIncSeq_splineTemp.knotMultiplicity(index)
                    //     && splineTemp._increasingKnotSequence.knotMultiplicity(index) !== splineHigherDegree._increasingKnotSequence.knotMultiplicity(index))
                    splineTemp.insertKnotBoehmAlgorithm(strictIncSeq_splineTemp.abscissaAtIndex(index));
                // splineTemp.insertKnotIntoTempSpline(strictIncSeq_splineTemp.abscissaAtIndex(index));
                if (strictIncSeq_splineHigherDegree.knotMultiplicity(index) < strictIncSeq_splineTemp.knotMultiplicity(index))
                    // if(strictIncSeq_splineHigherDegree.knotMultiplicity(index) < strictIncSeq_splineTemp.knotMultiplicity(index)
                    //     && splineTemp._increasingKnotSequence.knotMultiplicity(index) !== splineHigherDegree._increasingKnotSequence.knotMultiplicity(index))
                    splineHigherDegree.insertKnotBoehmAlgorithm(strictIncSeq_splineHigherDegree.abscissaAtIndex(index));
                // splineHigherDegree.insertKnotIntoTempSpline(strictIncSeq_splineHigherDegree.abscissaAtIndex(index));
            }
            var tempCPs = [];
            for (var ind = 0; ind < splineHigherDegree.controlPoints.length; ind += 1) {
                tempCPs[ind] = splineHigherDegree.controlPoints[ind].add(splineTemp.controlPoints[ind]);
            }
            splineHigherDegree.controlPoints = tempCPs;
        }
        var tempHigherDegCP = [];
        for (var j = 0; j < splineHigherDegree.controlPoints.length; j += 1) {
            tempHigherDegCP[j] = splineHigherDegree.controlPoints[j].multiply(1 / (this._degree + 1));
        }
        splineHigherDegree.controlPoints = tempHigherDegCP.slice(0, tempHigherDegCP.length - 1);
        console.log("degreeIncrease: " + splineHigherDegree._increasingKnotSequence.allAbscissae);
        return new PeriodicBSplineR1toR2withOpenKnotSequence(splineHigherDegree.controlPoints, splineHigherDegree._increasingKnotSequence.allAbscissae);
    };
    // degreeIncrement(): PeriodicBSplineR1toR2 {
    //     const bSpline = this.generateBSplineR1toR2();
    //     const bSplineDegreeUp = bSpline.degreeIncrement();
    //     const newKnots = this.generateKnotSequenceOfPeriodicBSplineR1toR2(bSplineDegreeUp);
    //     const newControlPolygon = this.generateControlPolygonOfPeriodicBSplineR1toR2(bSplineDegreeUp);
    //     return new PeriodicBSplineR1toR2(newControlPolygon, newKnots);
    // }
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.grevilleAbscissae = function () {
        var e_2, _a;
        var result = [];
        for (var i = 0; i < this.freeControlPoints.length; i += 1) {
            var sum = 0;
            var subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(i + this._degree - 1), new Knot_1.KnotIndexIncreasingSequence(i + 2 * this._degree - 2));
            try {
                for (var subSequence_1 = (e_2 = void 0, __values(subSequence)), subSequence_1_1 = subSequence_1.next(); !subSequence_1_1.done; subSequence_1_1 = subSequence_1.next()) {
                    var knot = subSequence_1_1.value;
                    sum += knot;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (subSequence_1_1 && !subSequence_1_1.done && (_a = subSequence_1.return)) _a.call(subSequence_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            result.push(sum / this._degree);
        }
        return result;
    };
    // Probably not compatible with periodic BSplines -> to be modified
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.removeKnot = function (indexFromFindSpan, tolerance) {
        //Piegl and Tiller, The NURBS book, p : 185
        if (tolerance === void 0) { tolerance = BSplineR1toR1_1.KNOT_REMOVAL_TOLERANCE; }
        var index = indexFromFindSpan;
        // end knots are not removed
        if (index > this._degree && index < this._increasingKnotSequence.length() - this._degree - 1) {
            throw new Error("index out of range");
        }
        var indexIncSeq = new Knot_1.KnotIndexIncreasingSequence(index);
        var multiplicity = this.knotMultiplicity(this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(indexIncSeq));
        var last = index - multiplicity;
        var first = index - this._degree;
        var offset = first - 1;
        //std::vector<vectorType> local(2*degree+1);
        var local = [];
        local[0] = this.controlPoints[offset];
        local[last + 1 - offset] = this.controlPoints[last + 1];
        var i = first;
        var j = last;
        var ii = 1;
        var jj = last - offset;
        var removable = false;
        var subSequence = this._increasingKnotSequence.extractSubsetOfAbscissae(new Knot_1.KnotIndexIncreasingSequence(first), new Knot_1.KnotIndexIncreasingSequence(last + this.degree + 1));
        // Compute new control point for one removal step
        var offset_i = first;
        while (j > i) {
            var offset_j = last;
            var alpha_i = (this._increasingKnotSequence.abscissaAtIndex(indexIncSeq) - subSequence[i - offset_i]) / (subSequence[i + this.degree + 1 - offset_i] - subSequence[i - offset_i]);
            var alpha_j = (this._increasingKnotSequence.abscissaAtIndex(indexIncSeq) - subSequence[j - offset_j]) / (subSequence[j + this.degree + 1 - offset_j] - subSequence[j - offset_j]);
            local[ii] = (this.controlPoints[i].substract(local[ii - 1].multiply(1.0 - alpha_i))).multiply(1 / alpha_i);
            local[jj] = (this.controlPoints[j].substract(local[jj + 1].multiply(alpha_j))).multiply(1 / (1.0 - alpha_j));
            ++i;
            ++ii;
            --j;
            --jj;
        }
        if (j < i) {
            if ((local[ii - 1].substract(local[jj + 1])).norm() <= tolerance) {
                removable = true;
            }
        }
        else {
            var alpha_i = (this._increasingKnotSequence.abscissaAtIndex(indexIncSeq) - subSequence[i - offset_i]) / (subSequence[i + this.degree + 1 - offset_i] - subSequence[i - offset_i]);
            if (((this.controlPoints[i].substract((local[ii + 1].multiply(alpha_i)))).add(local[ii - 1].multiply(1.0 - alpha_i))).norm() <= tolerance) {
                removable = true;
            }
        }
        if (!removable)
            return;
        else {
            var indInc = first;
            var indDec = last;
            while (indDec > indInc) {
                this.controlPoints[indInc] = local[indInc - offset];
                this.controlPoints[indDec] = local[indDec - offset];
                ++indInc;
                --indDec;
            }
        }
        // this.knots.splice(index, 1);
        this._increasingKnotSequence.decrementKnotMultiplicity(this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(indexIncSeq));
        var fout = (2 * index - multiplicity - this.degree) / 2;
        this._controlPoints.splice(fout, 1);
    };
    // removeKnot(indexFromFindSpan: number, tolerance: number = 10e-5): void {
    //     //Piegl and Tiller, The NURBS book, p : 185
    //     const index = indexFromFindSpan;
    //     // end knots are not removed
    //     if (index > this._degree && index < this.knots.length-this._degree - 1) {
    //         throw new Error("index out of range");
    //     }
    //     //const double tolerance = 1;
    //     const multiplicity = this.knotMultiplicity(index);
    //     const last = index - multiplicity;
    //     const first = index -this.degree;
    //     const offset = first -1;
    //     //std::vector<vectorType> local(2*degree+1);
    //     let local: Vector2d[] = [];
    //     local[0] = this.controlPoints[offset];
    //     local[last+1-offset] = this.controlPoints[last+1];
    //     let i = first;
    //     let j = last;
    //     let ii = 1;
    //     let jj = last - offset;
    //     let removable = false;
    //     // Compute new control point for one removal step
    //     while (j>i){
    //         let alpha_i = (this.knots[index] - this.knots[i])/(this.knots[i+this.degree+1]-this.knots[i]);
    //         let alpha_j = (this.knots[index] - this.knots[j])/(this.knots[j+this.degree+1] - this.knots[j]);
    //         local[ii] = (this.controlPoints[i].substract(local[ii-1].multiply(1.0-alpha_i))).multiply(1 / alpha_i ) 
    //         local[jj] = (this.controlPoints[j].substract(local[jj+1].multiply(alpha_j))).multiply(1 / (1.0-alpha_j) )
    //         ++i;
    //         ++ii;
    //         --j;
    //         --jj;
    //     }
    //     if (j < i) {
    //         if ((local[ii-1].substract(local[jj+1])).norm() <= tolerance){
    //             removable = true;
    //         }
    //     }
    //     else {
    //         const alpha_i = (this.knots[index] - this.knots[i]) / (this.knots[i+this.degree+1]-this.knots[i]) ;
    //         if ( ((this.controlPoints[i].substract((local[ii+1].multiply(alpha_i)))).add (local[ii-1].multiply(1.0- alpha_i))).norm() <= tolerance) {
    //             removable = true;
    //         }
    //     }
    //     if (!removable) return;
    //     else {
    //         let indInc = first;
    //         let indDec = last;
    //         while (indDec > indInc) {
    //             this.controlPoints[indInc] = local[indInc-offset];
    //             this.controlPoints[indDec] = local[indDec-offset];
    //             ++indInc;
    //             --indDec;
    //         }
    //     }
    //     this.knots.splice(index, 1);
    //     const fout = (2*index - multiplicity - this.degree) / 2;
    //     this._controlPoints.splice(fout, 1);
    // }
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.getDistinctKnots = function () {
        var indexStrctInc = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(this._increasingKnotSequence.getIndexKnotOrigin());
        var multiplicityBoundary = this.knotMultiplicity(indexStrctInc);
        var result = _super.prototype.getDistinctKnots.call(this);
        return result.slice(this.degree - (multiplicityBoundary - 1), result.length - this.degree + (multiplicityBoundary - 1));
    };
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.setControlPointPosition = function (i, value) {
        if (i < 0 || i >= this.periodicControlPointsLength) {
            throw new Error("Control point indentifier is out of range");
        }
        _super.prototype.setControlPointPosition.call(this, i, value.clone());
        if (i < this._degree) {
            var j = this.periodicControlPointsLength + i;
            _super.prototype.setControlPointPosition.call(this, j, value.clone());
        }
    };
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.isKnotlMultiplicityZero = function (u) {
        var multiplicityZero = true;
        if (this.isAbscissaCoincidingWithKnot(u))
            multiplicityZero = false;
        return multiplicityZero;
    };
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.findCoincidentKnot = function (u) {
        var index = new Knot_1.KnotIndexIncreasingSequence();
        if (!this.isKnotlMultiplicityZero(u))
            index = this.getFirstKnotIndexCoincidentWithAbscissa(u);
        return index;
    };
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.insertKnot = function (u) {
        var uToInsert = u;
        var index = new Knot_1.KnotIndexIncreasingSequence();
        if (!this.isKnotlMultiplicityZero(u)) {
            index = this.findCoincidentKnot(u);
            var indexSpan = this._increasingKnotSequence.findSpan(this._increasingKnotSequence.abscissaAtIndex(index));
            uToInsert = this._increasingKnotSequence.abscissaAtIndex(indexSpan);
        }
        if (uToInsert < this.knots[2 * this._degree] || uToInsert > this.knots[this.knots.length - 2 * this._degree - 1]) {
            var knotAbsc = this._increasingKnotSequence.allAbscissae;
            var indexOrigin = this._increasingKnotSequence.getIndexKnotOrigin();
            var knotAbscResetOrigin = this.resetKnotAbscissaToOrigin(knotAbsc);
            var sameSplineOpenCurve = new BSplineR1toR2_1.BSplineR1toR2(this.controlPoints, knotAbscResetOrigin);
            var newUToInsert = sameSplineOpenCurve.increasingKnotSequence.abscissaAtIndex(indexOrigin) + uToInsert;
            var indexSpan = this._increasingKnotSequence.findSpan(uToInsert);
            var indexStrictIncSeq = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(indexSpan);
            var knotMultiplicity = this.knotMultiplicity(indexStrictIncSeq);
            if (knotMultiplicity === this._degree) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "insertKnot", "cannot insert knot. Current knot multiplicity already equals curve degree.");
                error.logMessageToConsole();
            }
            else {
                // two knot insertions must take place to preserve the periodic structure of the function basis
                // unless if uToInsert = uSymmetric. In this case, only one knot insertion is possible
                var uSymmetric = this.findKnotAbscissaeRightBound() + knotAbscResetOrigin[indexOrigin.knotIndex];
                sameSplineOpenCurve.insertKnot(newUToInsert, 1);
                if ((uSymmetric - uToInsert) !== uToInsert) {
                    sameSplineOpenCurve.insertKnot(uSymmetric - uToInsert, 1);
                }
                var newKnotAbsc = sameSplineOpenCurve.increasingKnotSequence.allAbscissae;
                for (var i = 0; i < newKnotAbsc.length; i++) {
                    newKnotAbsc[i] -= knotAbscResetOrigin[indexOrigin.knotIndex];
                }
                var newCtrlPts = sameSplineOpenCurve.controlPoints;
                if (indexSpan.knotIndex === indexOrigin.knotIndex) {
                    // the knot inserted is located at the origin of the periodic curve. To obtain the new knot
                    // sequence, the extreme knots must be removed as well as the corresponding control points
                    newKnotAbsc = newKnotAbsc.slice(1, newKnotAbsc.length - 1);
                    newCtrlPts = sameSplineOpenCurve.controlPoints.slice(1, sameSplineOpenCurve.controlPoints.length - 1);
                }
                this._controlPoints = newCtrlPts;
                this._increasingKnotSequence = new IncreasingOpenKnotSequenceClosedCurve_1.IncreasingOpenKnotSequenceClosedCurve(this._degree, newKnotAbsc);
            }
            return;
        }
        else {
            _super.prototype.insertKnot.call(this, uToInsert, 1);
        }
    };
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.insertKnotIntoTempSpline = function (u) {
        var uToInsert = u;
        var index = new Knot_1.KnotIndexIncreasingSequence();
        if (!this.isKnotlMultiplicityZero(u)) {
            index = this.findCoincidentKnot(u);
            var indexSpan = this._increasingKnotSequence.findSpan(this._increasingKnotSequence.abscissaAtIndex(index));
            uToInsert = this._increasingKnotSequence.abscissaAtIndex(indexSpan);
        }
        if (uToInsert < this.knots[2 * this._degree] || uToInsert > this.knots[this.knots.length - 2 * this._degree - 1]) {
            var knotAbsc = this._increasingKnotSequence.allAbscissae;
            var indexOrigin = this._increasingKnotSequence.getIndexKnotOrigin();
            var knotAbscResetOrigin = this.resetKnotAbscissaToOrigin(knotAbsc);
            var sameSplineOpenCurve = new BSplineR1toR2_1.BSplineR1toR2(this.controlPoints, knotAbscResetOrigin);
            var newUToInsert = sameSplineOpenCurve.increasingKnotSequence.abscissaAtIndex(indexOrigin) + uToInsert;
            var indexSpan = this._increasingKnotSequence.findSpan(uToInsert);
            var indexStrictIncSeq = this._increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(indexSpan);
            var knotMultiplicity = this.knotMultiplicity(indexStrictIncSeq);
            if (knotMultiplicity === this._degree) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "insertKnot", "cannot insert knot. Current knot multiplicity already equals curve degree.");
                error.logMessageToConsole();
            }
            else {
                // two knot insertions must take place to preserve the periodic structure of the function basis
                // unless if uToInsert = uSymmetric. In this case, only one knot insertion is possible
                var uSymmetric = this.findKnotAbscissaeRightBound() + knotAbscResetOrigin[indexOrigin.knotIndex];
                sameSplineOpenCurve.insertKnot(newUToInsert, 1);
                if ((uSymmetric - uToInsert) !== uToInsert) {
                    sameSplineOpenCurve.insertKnot(uSymmetric - uToInsert, 1);
                }
                var newKnotAbsc = sameSplineOpenCurve.increasingKnotSequence.allAbscissae;
                for (var i = 0; i < newKnotAbsc.length; i++) {
                    newKnotAbsc[i] -= knotAbscResetOrigin[indexOrigin.knotIndex];
                }
                var newCtrlPts = sameSplineOpenCurve.controlPoints;
                // if(indexSpan.knotIndex === indexOrigin.knotIndex) {
                //     // the knot inserted is located at the origin of the periodic curve. To obtain the new knot
                //     // sequence, the extreme knots must be removed as well as the corresponding control points
                //     newKnotAbsc = newKnotAbsc.slice(1, newKnotAbsc.length - 1);
                //     newCtrlPts = sameSplineOpenCurve.controlPoints.slice(1, sameSplineOpenCurve.controlPoints.length - 1);
                // }
                this._controlPoints = newCtrlPts;
                this._increasingKnotSequence = new IncreasingOpenKnotSequenceClosedCurve_1.IncreasingOpenKnotSequenceClosedCurve(this._degree, newKnotAbsc);
            }
            return;
        }
        else {
            _super.prototype.insertKnot.call(this, uToInsert, 1);
        }
    };
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.findKnotAbscissaeRightBound = function () {
        var result = 0.0;
        var cumulativeMultiplicity = 0;
        var strictIncSeq = this._increasingKnotSequence.toStrictlyIncreasingKnotSequence();
        var indexOrigin = this._increasingKnotSequence.getIndexKnotOrigin();
        for (var j = 0; j < indexOrigin.knotIndex; j++) {
            cumulativeMultiplicity += strictIncSeq.knotMultiplicity(new Knot_1.KnotIndexStrictlyIncreasingSequence(j));
        }
        var multiplicityAtOrigin = strictIncSeq.knotMultiplicity(indexOrigin);
        var cumulativeMultRightBound = 0;
        for (var i = strictIncSeq.length() - 1; i >= strictIncSeq.length() - indexOrigin.knotIndex; i--) {
            cumulativeMultRightBound += strictIncSeq.knotMultiplicity(new Knot_1.KnotIndexStrictlyIncreasingSequence(i));
        }
        if (multiplicityAtOrigin === strictIncSeq.knotMultiplicity(new Knot_1.KnotIndexStrictlyIncreasingSequence(strictIncSeq.length() - indexOrigin.knotIndex - 1)))
            result = strictIncSeq.abscissaAtIndex(new Knot_1.KnotIndexStrictlyIncreasingSequence(strictIncSeq.length() - indexOrigin.knotIndex - 1));
        return result;
    };
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.scale = function (factor) {
        var cp = [];
        this._controlPoints.forEach(function (element) {
            cp.push(element.multiply(factor));
        });
        return new PeriodicBSplineR1toR2withOpenKnotSequence(cp, this.knots.slice());
    };
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.scaleY = function (factor) {
        var cp = [];
        this._controlPoints.forEach(function (element) {
            cp.push(new Vector2d_1.Vector2d(element.x, element.y * factor));
        });
        return new PeriodicBSplineR1toR2withOpenKnotSequence(cp, this.knots.slice());
    };
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.scaleX = function (factor) {
        var cp = [];
        this._controlPoints.forEach(function (element) {
            cp.push(new Vector2d_1.Vector2d(element.x * factor, element.y));
        });
        return new PeriodicBSplineR1toR2withOpenKnotSequence(cp, this.knots.slice());
    };
    PeriodicBSplineR1toR2withOpenKnotSequence.prototype.evaluateOutsideRefInterval = function (u) {
        var result = new Vector2d_1.Vector2d();
        var knots = this.getDistinctKnots();
        if (u >= knots[0] && u <= knots[knots.length - 1]) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "evaluateOutsideRefInterval", "Parameter value for evaluation is not outside the knot interval.");
            error.logMessageToConsole();
        }
        else {
            u = u % (knots[knots.length - 1] - knots[0]);
            result = this.evaluate(u);
        }
        return result;
    };
    return PeriodicBSplineR1toR2withOpenKnotSequence;
}(AbstractBSplineR1toR2_1.AbstractBSplineR1toR2));
exports.PeriodicBSplineR1toR2withOpenKnotSequence = PeriodicBSplineR1toR2withOpenKnotSequence;
function create_PeriodicBSplineR1toR2(controlPoints, knots) {
    var e_3, _a;
    var newControlPoints = [];
    try {
        for (var controlPoints_1 = __values(controlPoints), controlPoints_1_1 = controlPoints_1.next(); !controlPoints_1_1.done; controlPoints_1_1 = controlPoints_1.next()) {
            var cp = controlPoints_1_1.value;
            newControlPoints.push(new Vector2d_1.Vector2d(cp[0], cp[1]));
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (controlPoints_1_1 && !controlPoints_1_1.done && (_a = controlPoints_1.return)) _a.call(controlPoints_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return new PeriodicBSplineR1toR2withOpenKnotSequence(newControlPoints, knots);
}
exports.create_PeriodicBSplineR1toR2 = create_PeriodicBSplineR1toR2;


/***/ }),

/***/ "./src/newBsplines/Piegl_Tiller_NURBS_Book.ts":
/*!****************************************************!*\
  !*** ./src/newBsplines/Piegl_Tiller_NURBS_Book.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.decomposeFunction = exports.basisFunctionsFromSequence = exports.basisFunctions = exports.clampingFindSpan = exports.findSpan = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var Knot_1 = __webpack_require__(/*! ./Knot */ "./src/newBsplines/Knot.ts");
/**
 * Returns the span index
 * @param u parameter
 * @param knots knot vector
 * @param degree degree
 * @returns span index i for which knots[i] ≤ u < knots[i+1]
 */
function findSpan(u, knots, degree) {
    // Bibliographic reference : Piegl and Tiller, The NURBS book, p: 68
    if (u < knots[degree] || u > knots[knots.length - degree - 1]) {
        console.log("u: " + u);
        console.log("knots: " + knots);
        console.log("degree: " + degree);
        // throw new Error("Error: parameter u is outside valid span");
        var error = new ErrorLoging_1.ErrorLog("function", "findSpan", "parameter u is outside valid span");
        error.logMessageToConsole();
    }
    // Special case
    if (u === knots[knots.length - degree - 1]) {
        return knots.length - degree - 2;
    }
    // Do binary search
    var low = degree;
    var high = knots.length - 1 - degree;
    var i = Math.floor((low + high) / 2);
    while (!(knots[i] <= u && u < knots[i + 1])) {
        if (u < knots[i]) {
            high = i;
        }
        else {
            low = i;
        }
        i = Math.floor((low + high) / 2);
    }
    return i;
}
exports.findSpan = findSpan;
/**
 * Returns the span index used for clamping a periodic B-Spline
 * Note: The only difference with findSpan is the special case u = knots[-degree - 1]
 * @param u parameter
 * @param knots knot vector
 * @param degree degree
 * @returns span index i for which knots[i] ≤ u < knots[i+1]
 */
function clampingFindSpan(u, knots, degree) {
    // Bibliographic reference : Piegl and Tiller, The NURBS book, p: 68
    if (u < knots[degree] || u > knots[knots.length - degree - 1]) {
        throw new Error("Error: parameter u is outside valid span");
    }
    // Special case
    if (u === knots[knots.length - degree - 1]) {
        var sameKnot = knots[knots.length - 1];
        var returnIndex = knots.length - degree - 1;
        for (var i_1 = knots.length - 2; i_1 > knots.length - degree - 2; i_1--) {
            if (sameKnot === knots[i_1]) {
                returnIndex = returnIndex - 1;
            }
            else {
                sameKnot = knots[i_1];
            }
        }
        console.log("findSpan index = " + (knots.length - degree - 1) + " returnIndex = " + returnIndex);
        // return knots.length - degree - 1;
        return returnIndex;
    }
    // Do binary search
    var low = degree;
    var high = knots.length - 1 - degree;
    var i = Math.floor((low + high) / 2);
    while (!(knots[i] <= u && u < knots[i + 1])) {
        if (u < knots[i]) {
            high = i;
        }
        else {
            low = i;
        }
        i = Math.floor((low + high) / 2);
    }
    return i;
}
exports.clampingFindSpan = clampingFindSpan;
/**
 * Returns the basis functions values
 * @param span span index
 * @param u parameter
 * @param knots knot vector
 * @param degree degree
 * @returns the array of values evaluated at u
 */
function basisFunctions(span, u, knots, degree) {
    // Bibliographic reference : The NURBS BOOK, p.70
    var result = [1];
    var left = [];
    var right = [];
    for (var j = 1; j <= degree; j += 1) {
        left[j] = u - knots[span + 1 - j];
        right[j] = knots[span + j] - u;
        var saved = 0.0;
        for (var r = 0; r < j; r += 1) {
            var temp = result[r] / (right[r + 1] + left[j - r]);
            result[r] = saved + right[r + 1] * temp;
            saved = left[j - r] * temp;
        }
        result[j] = saved;
    }
    return result;
}
exports.basisFunctions = basisFunctions;
function basisFunctionsFromSequence(span, u, knotSequence) {
    // Bibliographic reference : The NURBS BOOK, p.70
    var result = [1];
    var left = [];
    var right = [];
    for (var j = 1; j <= knotSequence.degree; j += 1) {
        left[j] = u - knotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(span + 1 - j));
        right[j] = knotSequence.abscissaAtIndex(new Knot_1.KnotIndexIncreasingSequence(span + j)) - u;
        var saved = 0.0;
        for (var r = 0; r < j; r += 1) {
            var temp = result[r] / (right[r + 1] + left[j - r]);
            result[r] = saved + right[r + 1] * temp;
            saved = left[j - r] * temp;
        }
        result[j] = saved;
    }
    return result;
}
exports.basisFunctionsFromSequence = basisFunctionsFromSequence;
/**
 * Decompose a BSpline function into Bézier segments
 */
function decomposeFunction(spline) {
    //Piegl and Tiller, The NURBS book, p.173
    var result = [];
    var number_of_bezier_segments = spline.distinctKnots().length - 1;
    for (var i = 0; i < number_of_bezier_segments; i += 1) {
        result.push([]);
    }
    var a = 0;
    var b = 0;
    var index = findSpan(ComparatorOfSequencesDiffEvents_1.LOWER_BOUND_CURVE_INTERVAL, spline.knots, spline.degree);
    var indexIncSeq = new Knot_1.KnotIndexIncreasingSequence(index);
    var indexStrictIncSeq = spline.increasingKnotSequence.toKnotIndexStrictlyIncreasingSequence(indexIncSeq);
    if (spline.degree > 0) {
        for (var i = 0; i <= spline.degree; i += 1) {
            result[0][i] = spline.controlPoints[i];
        }
        a = spline.degree;
        b = spline.degree + 1;
    }
    else if (spline.degree === 0 && spline.knotMultiplicity(indexStrictIncSeq) > 1) {
        console.log("multiplicity 0:", spline.knotMultiplicity(indexStrictIncSeq));
        // result[0][0] = spline.controlPoints[0];
        // a = spline.degree;
        // b = spline.degree + 1;
        result[0][0] = spline.controlPoints[1];
        a = spline.degree + 1;
        b = spline.degree + 2;
    }
    else if (spline.degree === 0 && spline.knotMultiplicity(indexStrictIncSeq) === 1) {
        result[0][0] = spline.controlPoints[0];
        a = spline.degree;
        b = spline.degree + 1;
    }
    var bezier_segment = 0;
    var alphas = [];
    while (b < spline.knots.length - 1) {
        var i = b;
        while (b < spline.knots.length - 1 && spline.knots[b + 1] === spline.knots[b]) {
            b += 1;
        }
        var mult = b - i + 1;
        if (mult < spline.degree) {
            var numer = spline.knots[b] - spline.knots[a]; // Numerator of alpha
            // Compute and store alphas
            for (var j = spline.degree; j > mult; j -= 1) {
                alphas[j - mult - 1] = numer / (spline.knots[a + j] - spline.knots[a]);
            }
            var r = spline.degree - mult; // insert knot r times
            for (var j = 1; j <= r; j += 1) {
                var save = r - j;
                var s = mult + j; // this many new controlPoints
                for (var k = spline.degree; k >= s; k -= 1) {
                    var alpha = alphas[k - s];
                    result[bezier_segment][k] = (result[bezier_segment][k] * alpha) + (result[bezier_segment][k - 1] * (1 - alpha));
                }
                if (b < spline.knots.length) {
                    result[bezier_segment + 1][save] = result[bezier_segment][spline.degree]; // next segment
                }
            }
        }
        bezier_segment += 1; // Bezier segment completed
        if (b < spline.knots.length - 1) {
            //initialize next bezier_segment
            for (i = Math.max(0, spline.degree - mult); i <= spline.degree; i += 1) {
                result[bezier_segment][i] = spline.controlPoints[b - spline.degree + i];
            }
            a = b;
            b += 1;
        }
    }
    return result;
}
exports.decomposeFunction = decomposeFunction;


/***/ }),

/***/ "./src/newBsplines/StrictlyIncreasingOpenKnotSequenceClosedCurve.ts":
/*!**************************************************************************!*\
  !*** ./src/newBsplines/StrictlyIncreasingOpenKnotSequenceClosedCurve.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StrictlyIncreasingOpenKnotSequenceClosedCurve = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var AbstractKnotSequenceCurve_1 = __webpack_require__(/*! ./AbstractKnotSequenceCurve */ "./src/newBsplines/AbstractKnotSequenceCurve.ts");
var IncreasingOpenKnotSequenceClosedCurve_1 = __webpack_require__(/*! ./IncreasingOpenKnotSequenceClosedCurve */ "./src/newBsplines/IncreasingOpenKnotSequenceClosedCurve.ts");
var Knot_1 = __webpack_require__(/*! ./Knot */ "./src/newBsplines/Knot.ts");
var AbstractStrictlyIncreasingOpenKnotSequenceCurve_1 = __webpack_require__(/*! ./AbstractStrictlyIncreasingOpenKnotSequenceCurve */ "./src/newBsplines/AbstractStrictlyIncreasingOpenKnotSequenceCurve.ts");
var StrictlyIncreasingOpenKnotSequenceClosedCurve = /** @class */ (function (_super) {
    __extends(StrictlyIncreasingOpenKnotSequenceClosedCurve, _super);
    function StrictlyIncreasingOpenKnotSequenceClosedCurve(degree, knots, multiplicities) {
        var _this = _super.call(this, degree, knots, multiplicities) || this;
        _this.knotSequence = [];
        _this.indexKnotOrigin = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
        if (knots.length !== multiplicities.length) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "size of multiplicities array does not match the size of knot abscissae array.");
            error.logMessageToConsole();
        }
        for (var i = 0; i < knots.length; i++) {
            if (_this.knotSequence.length === 0) {
                _this.knotSequence.push(new Knot_1.Knot(knots[i], multiplicities[i]));
            }
            else if (!_this.isAbscissaCoincidingWithKnot(knots[i]) && knots[i] > _this.knotSequence[_this.knotSequence.length - 1].abscissa) {
                _this.knotSequence.push(new Knot_1.Knot(knots[i], multiplicities[i]));
            }
            else {
                var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "knot abscissa cannot be duplicated and must be increasing. These conditions are not satisfied. Knot sequence cannot be created.");
                error.logMessageToConsole();
            }
        }
        // The validity of the knot sequence should follow the given sequence of calls
        // to make sure that the sequence origin is correctly set first since it is used
        // when checking the degree consistency and knot multiplicities outside the effective curve interval
        _this.checkCurveOrigin();
        _this.checkDegreeConsistency();
        _this.checkKnotIntervalConsistency();
        _this.checkUniformity();
        _this.checkNonUniformStructure();
        return _this;
    }
    Object.defineProperty(StrictlyIncreasingOpenKnotSequenceClosedCurve.prototype, "freeKnots", {
        get: function () {
            var e_1, _a;
            var freeKnots = [];
            try {
                for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var knot = _c.value;
                    if (knot !== undefined)
                        freeKnots.push(knot.abscissa);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            freeKnots.splice(0, this.indexKnotOrigin + 1);
            freeKnots.splice(freeKnots.length - this.indexKnotOrigin - 1, this.indexKnotOrigin + 1);
            return freeKnots;
        },
        enumerable: false,
        configurable: true
    });
    StrictlyIncreasingOpenKnotSequenceClosedCurve.prototype.checkNonUniformStructure = function () {
        this._isNonUniform = false;
    };
    StrictlyIncreasingOpenKnotSequenceClosedCurve.prototype.checkKnotIntervalConsistency = function () {
        var i = 0;
        if (this.knotSequence[0].multiplicity >= (this._degree + 1) && this.knotSequence[this.knotSequence.length - 1].multiplicity >= (this._degree + 1))
            return;
        while (((i + 1) < (this.knotSequence.length - 2 - i) || i < this._degree) && this.knotSequence[i].abscissa !== 0.0
            && i < this.knotSequence.length - 1) {
            var interval1 = this.knotSequence[i + 1].abscissa - this.knotSequence[i].abscissa;
            var interval2 = this.knotSequence[this.knotSequence.length - i - 2].abscissa - this.knotSequence[this.knotSequence.length - 1 - i].abscissa;
            if (Math.abs(interval1 + interval2) > AbstractKnotSequenceCurve_1.KNOT_COINCIDENCE_TOLERANCE) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkKnotIntervalConsistency", "knot intervals are not symmetrically spread around the closure point. This sequence cannot be processed.");
                error.logMessageToConsole();
                return;
            }
            i++;
        }
        var indexKnotOrigin = i;
        i = 0;
        while (indexKnotOrigin - i !== 0 && (indexKnotOrigin + i + 1) < this.knotSequence.length && (indexKnotOrigin - i) > 0) {
            var interval1 = this.knotSequence[indexKnotOrigin + i + 1].abscissa - this.knotSequence[indexKnotOrigin + i].abscissa;
            var interval2 = this.knotSequence[indexKnotOrigin - (i + 1)].abscissa - this.knotSequence[indexKnotOrigin - i].abscissa;
            if (Math.abs(interval1 + interval2) > AbstractKnotSequenceCurve_1.KNOT_COINCIDENCE_TOLERANCE) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkKnotIntervalConsistency", "knot intervals are not symmetrically spread around the closure point (left hand side). This sequence cannot be processed.");
                error.logMessageToConsole();
                return;
            }
            i++;
        }
        i = 0;
        while (indexKnotOrigin - i !== 0 && (this.knotSequence.length - indexKnotOrigin + i) < this.knotSequence.length && this.knotSequence.length - indexKnotOrigin - i > 0) {
            var interval1 = this.knotSequence[this.knotSequence.length - indexKnotOrigin + i].abscissa - this.knotSequence[this.knotSequence.length - indexKnotOrigin + i - 1].abscissa;
            var interval2 = this.knotSequence[this.knotSequence.length - indexKnotOrigin - (i + 2)].abscissa - this.knotSequence[this.knotSequence.length - indexKnotOrigin - i - 1].abscissa;
            if (Math.abs(interval1 + interval2) > AbstractKnotSequenceCurve_1.KNOT_COINCIDENCE_TOLERANCE) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkKnotIntervalConsistency", "knot intervals are not symmetrically spread around the closure point (right hand side). This sequence cannot be processed.");
                error.logMessageToConsole();
                return;
            }
            i++;
        }
    };
    StrictlyIncreasingOpenKnotSequenceClosedCurve.prototype.checkDegreeConsistency = function () {
        var e_2, _a;
        var i = 0;
        var cumulativeMultiplicity = 0;
        while (i !== this.indexKnotOrigin) {
            if (this.knotSequence[i].multiplicity !== 1) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkDegreeConsistency", "inconsistent order of multiplicity of knots before the curve origin.");
                error.logMessageToConsole();
                return;
            }
            if (this.knotSequence[i].multiplicity !== this.knotSequence[this.knotSequence.length - 1 - i].multiplicity) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkDegreeConsistency", "inconsistent order of multiplicity of knots located outside the interval of definition of the curve.");
                error.logMessageToConsole();
                return;
            }
            cumulativeMultiplicity += this.knotSequence[i].multiplicity;
            i++;
        }
        if (cumulativeMultiplicity !== this.indexKnotOrigin) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkDegreeConsistency", "inconsistent order of multiplicity of knots contributing to the closure area of the curve.");
            error.logMessageToConsole();
            return;
        }
        try {
            for (var _b = __values(this.knotSequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                var knot = _c.value;
                if (knot.multiplicity > (this._degree + 1)) {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkDegreeConsistency", "inconsistent order of multiplicity of a knot.");
                    error.logMessageToConsole();
                    return;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    StrictlyIncreasingOpenKnotSequenceClosedCurve.prototype.getIndexKnotOrigin = function () {
        return new Knot_1.KnotIndexStrictlyIncreasingSequence(this.indexKnotOrigin);
    };
    StrictlyIncreasingOpenKnotSequenceClosedCurve.prototype.checkCurveOrigin = function () {
        var i = 0;
        var cumulativeMultiplicity = 0;
        while (cumulativeMultiplicity < (this._degree + 1)) {
            cumulativeMultiplicity += this.knotSequence[i].multiplicity;
            i++;
        }
        this.indexKnotOrigin = i - 1;
        if (this.knotSequence[this.indexKnotOrigin].abscissa !== 0.0) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkCurveOrigin", "curve origin is not zero. Curve origin must be set to 0.0. Not able to process this not sequence.");
            error.logMessageToConsole();
        }
    };
    StrictlyIncreasingOpenKnotSequenceClosedCurve.prototype.isAbscissaCoincidingWithKnot = function (abscissa) {
        var e_3, _a;
        var coincident = false;
        var indexCoincidentKnot = 0;
        try {
            for (var _b = __values(this.knotSequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                var knot = _c.value;
                if (Math.abs(abscissa - knot.abscissa) < AbstractKnotSequenceCurve_1.KNOT_COINCIDENCE_TOLERANCE) {
                    coincident = true;
                    break;
                }
                indexCoincidentKnot++;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (coincident) {
            if (indexCoincidentKnot < this.indexKnotOrigin || indexCoincidentKnot > this.knotSequence.length - this.indexKnotOrigin - 1) {
                coincident = false;
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "isAbscissaCoincidingWithKnot", "knot abscissa is outside the definition interval of the closed curve.");
                error.logMessageToConsole();
            }
        }
        return coincident;
    };
    StrictlyIncreasingOpenKnotSequenceClosedCurve.prototype.getKnotMultiplicityAtCurveOrigin = function () {
        var multiplicity = this.knotSequence[this.indexKnotOrigin].multiplicity;
        return multiplicity;
    };
    StrictlyIncreasingOpenKnotSequenceClosedCurve.prototype.toIncreasingKnotSequence = function () {
        var e_4, _a;
        var knotAbscissae = [];
        try {
            for (var _b = __values(this.knotSequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                var knot = _c.value;
                for (var i = 0; i < knot.multiplicity; i++) {
                    knotAbscissae.push(knot.abscissa);
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return new IncreasingOpenKnotSequenceClosedCurve_1.IncreasingOpenKnotSequenceClosedCurve(this._degree, knotAbscissae);
    };
    // This index transformation is not unique. The convention followed here is the assignment of the first index of the increasing
    // sequence where the abscissa at index (sttrictly increasing sequence) appears
    StrictlyIncreasingOpenKnotSequenceClosedCurve.prototype.toKnotIndexIncreasingSequence = function (index) {
        var indexIncSeq = 0;
        for (var i = 0; i < index.knotIndex; i++) {
            indexIncSeq += this.knotSequence[i].multiplicity;
        }
        // if(index.knotIndex !== 0) indexIncSeq++;
        return new Knot_1.KnotIndexIncreasingSequence(indexIncSeq);
    };
    StrictlyIncreasingOpenKnotSequenceClosedCurve.prototype.deepCopy = function () {
        return new StrictlyIncreasingOpenKnotSequenceClosedCurve(this._degree, this.distinctAbscissae(), this.multiplicities());
    };
    StrictlyIncreasingOpenKnotSequenceClosedCurve.prototype.findSpan = function (u) {
        var e_5, _a;
        var index = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
        if (u < this.knotSequence[this.indexKnotOrigin].abscissa || u > this.knotSequence[this.knotSequence.length - this.indexKnotOrigin - 1].abscissa) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "findSpan", "Parameter u is outside valid span");
            error.logMessageToConsole();
        }
        else {
            if (this.isAbscissaCoincidingWithKnot(u)) {
                index = 0;
                try {
                    for (var _b = __values(this.knotSequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var knot = _c.value;
                        index++;
                        if (Math.abs(u - knot.abscissa) < AbstractKnotSequenceCurve_1.KNOT_COINCIDENCE_TOLERANCE) {
                            if (knot.abscissa === this.knotSequence[this.knotSequence.length - this.indexKnotOrigin - 1].abscissa) {
                                index = this.knotSequence.length - this.indexKnotOrigin - 1;
                            }
                            return new Knot_1.KnotIndexStrictlyIncreasingSequence(index - 1);
                        }
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
            }
            // Do binary search
            var low = this.indexKnotOrigin;
            var high = this.knotSequence.length - 1 - this.indexKnotOrigin;
            index = Math.floor((low + high) / 2);
            while (!(this.knotSequence[index].abscissa < u && u < this.knotSequence[index + 1].abscissa)) {
                if (u < this.knotSequence[index].abscissa) {
                    high = index;
                }
                else {
                    low = index;
                }
                index = Math.floor((low + high) / 2);
            }
            return new Knot_1.KnotIndexStrictlyIncreasingSequence(index);
        }
        return new Knot_1.KnotIndexStrictlyIncreasingSequence(index);
    };
    return StrictlyIncreasingOpenKnotSequenceClosedCurve;
}(AbstractStrictlyIncreasingOpenKnotSequenceCurve_1.AbstractStrictlyIncreasingOpenKnotSequenceCurve));
exports.StrictlyIncreasingOpenKnotSequenceClosedCurve = StrictlyIncreasingOpenKnotSequenceClosedCurve;


/***/ }),

/***/ "./src/newBsplines/StrictlyIncreasingOpenKnotSequenceOpenCurve.ts":
/*!************************************************************************!*\
  !*** ./src/newBsplines/StrictlyIncreasingOpenKnotSequenceOpenCurve.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StrictlyIncreasingOpenKnotSequenceOpenCurve = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var AbstractKnotSequenceCurve_1 = __webpack_require__(/*! ./AbstractKnotSequenceCurve */ "./src/newBsplines/AbstractKnotSequenceCurve.ts");
var IncreasingOpenKnotSequenceOpenCurve_1 = __webpack_require__(/*! ./IncreasingOpenKnotSequenceOpenCurve */ "./src/newBsplines/IncreasingOpenKnotSequenceOpenCurve.ts");
var Knot_1 = __webpack_require__(/*! ./Knot */ "./src/newBsplines/Knot.ts");
var AbstractStrictlyIncreasingOpenKnotSequenceCurve_1 = __webpack_require__(/*! ./AbstractStrictlyIncreasingOpenKnotSequenceCurve */ "./src/newBsplines/AbstractStrictlyIncreasingOpenKnotSequenceCurve.ts");
var StrictlyIncreasingOpenKnotSequenceOpenCurve = /** @class */ (function (_super) {
    __extends(StrictlyIncreasingOpenKnotSequenceOpenCurve, _super);
    function StrictlyIncreasingOpenKnotSequenceOpenCurve(degree, knots, multiplicities) {
        var _this = _super.call(this, degree, knots, multiplicities) || this;
        _this.knotSequence = [];
        if (knots.length !== multiplicities.length) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "size of multiplicities array does not match the size of knot abscissae array.");
            error.logMessageToConsole();
        }
        for (var i = 0; i < knots.length; i++) {
            _this.knotSequence.push(new Knot_1.Knot(knots[i], multiplicities[i]));
        }
        _this.checkCurveOrigin();
        _this.checkDegreeConsistency();
        _this.checkNonUniformStructure();
        _this.checkUniformity();
        return _this;
    }
    StrictlyIncreasingOpenKnotSequenceOpenCurve.prototype.checkCurveOrigin = function () {
        if (this.knotSequence[0].abscissa !== 0.0) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkCurveOrigin", "curve origin is not zero. Curve origin must be set to 0.0. Not able to process this knot sequence.");
            error.logMessageToConsole();
        }
    };
    StrictlyIncreasingOpenKnotSequenceOpenCurve.prototype.checkNonUniformStructure = function () {
        this._isNonUniform = false;
        if (this.knotSequence[0].multiplicity === (this._degree + 1) &&
            this.knotSequence[this.knotSequence.length - 1].multiplicity === (this._degree + 1))
            this._isNonUniform = true;
    };
    StrictlyIncreasingOpenKnotSequenceOpenCurve.prototype.deepCopy = function () {
        return new StrictlyIncreasingOpenKnotSequenceOpenCurve(this._degree, this.distinctAbscissae(), this.multiplicities());
    };
    StrictlyIncreasingOpenKnotSequenceOpenCurve.prototype.toIncreasingKnotSequence = function () {
        var e_1, _a;
        var knotAbscissae = [];
        try {
            for (var _b = __values(this.knotSequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                var knot = _c.value;
                for (var i = 0; i < knot.multiplicity; i++) {
                    knotAbscissae.push(knot.abscissa);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return new IncreasingOpenKnotSequenceOpenCurve_1.IncreasingOpenKnotSequenceOpenCurve(this._degree, knotAbscissae);
    };
    StrictlyIncreasingOpenKnotSequenceOpenCurve.prototype.findSpan = function (u) {
        var e_2, _a;
        var index = ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE;
        if (u < this.knotSequence[0].abscissa || u > this.knotSequence[this.knotSequence.length - 1].abscissa) {
            console.log(u);
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "findSpan", "Parameter u is outside valid span");
            error.logMessageToConsole();
        }
        else {
            if (this.isAbscissaCoincidingWithKnot(u)) {
                index = 0;
                try {
                    for (var _b = __values(this.knotSequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var knot = _c.value;
                        index++;
                        if (Math.abs(u - knot.abscissa) < AbstractKnotSequenceCurve_1.KNOT_COINCIDENCE_TOLERANCE) {
                            if (knot.abscissa === this.knotSequence[this.knotSequence.length - 1].abscissa) {
                                index = this.knotSequence.length - 1;
                            }
                            return new Knot_1.KnotIndexStrictlyIncreasingSequence(index - 1);
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            // Do binary search
            var low = 0;
            var high = this.knotSequence.length - 1;
            index = Math.floor((low + high) / 2);
            while (!(this.knotSequence[index].abscissa < u && u < this.knotSequence[index + 1].abscissa)) {
                if (u < this.knotSequence[index].abscissa) {
                    high = index;
                }
                else {
                    low = index;
                }
                index = Math.floor((low + high) / 2);
            }
            return new Knot_1.KnotIndexStrictlyIncreasingSequence(index);
        }
        return new Knot_1.KnotIndexStrictlyIncreasingSequence(index);
    };
    return StrictlyIncreasingOpenKnotSequenceOpenCurve;
}(AbstractStrictlyIncreasingOpenKnotSequenceCurve_1.AbstractStrictlyIncreasingOpenKnotSequenceCurve));
exports.StrictlyIncreasingOpenKnotSequenceOpenCurve = StrictlyIncreasingOpenKnotSequenceOpenCurve;


/***/ }),

/***/ "./src/newModels/AbstractCurveModel.ts":
/*!*********************************************!*\
  !*** ./src/newModels/AbstractCurveModel.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractCurveModel = exports.DEFAULT_CURVE_DEGREE = void 0;
var Vector2d_1 = __webpack_require__(/*! ../mathVector/Vector2d */ "./src/mathVector/Vector2d.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
// import { Optimizer } from "../optimizers/Optimizer"
// import { ActiveControl } from "../bsplinesOptimizationProblems/AbstractOptimizationProblemBSplineR1toR2"
exports.DEFAULT_CURVE_DEGREE = 3;
var AbstractCurveModel = /** @class */ (function () {
    function AbstractCurveModel() {
        this._observers = [];
        this.observersCP = [];
        // protected activeControl: ActiveControl = ActiveControl.both;
        this.activeOptimizer = true;
        // optimize(selectedControlPoint: number, ndcX: number, ndcY: number): void {
        //     if (this.optimizationProblem && this.optimizer) {
        //         //const p = this._spline.freeControlPoints[selectedControlPoint].clone()
        //         const p = this.optimizationProblem.spline.freeControlPoints[selectedControlPoint].clone();
        //         const distance = Math.sqrt(Math.pow(ndcX - p.x, 2) + Math.pow(ndcY - p.y, 2));
        //         //console.log(ndcX - p.x)
        //         const numberOfStep = 3 * Math.ceil(distance * 10);
        //         //const numberOfStep = 1
        //         for (let i = 1; i <= numberOfStep; i += 1) {
        //             let alpha = Math.pow(i / numberOfStep, 3);
        //             this._spline.setControlPointPosition(selectedControlPoint, new Vector2d((1-alpha)*p.x + alpha * ndcX, (1-alpha)*p.y + alpha * ndcY));
        //             this.optimizationProblem.setTargetSpline(this._spline);
        //             try {
        //                 this.optimizer.optimize_using_trust_region(10e-6, 1000, 800);
        //                 if (this.optimizer.success === true) {
        //                     this.setSpline(this.optimizationProblem.spline.clone());
        //                 }
        //             }
        //             catch(e) {
        //                 this._spline.setControlPointPosition(selectedControlPoint, new Vector2d(p.x, p.y));
        //                 console.log(e);
        //             }
        //         }
        //     }
        // }
    }
    Object.defineProperty(AbstractCurveModel.prototype, "observers", {
        get: function () {
            return this._observers;
        },
        enumerable: false,
        configurable: true
    });
    AbstractCurveModel.prototype.registerObserver = function (observer, kind) {
        switch (kind) {
            case 'curve':
                this.observers.push(observer);
                // console.log("CurveModel: registerObs as curve: " + observer.constructor.name)
                break;
            case 'control points':
                this.observersCP.push(observer);
                // console.log("CurveModel: registerObs as CP: " + observer.constructor.name)
                break;
            default:
                throw Error("unknown kind");
        }
    };
    AbstractCurveModel.prototype.checkObservers = function () {
        var e_1, _a, e_2, _b;
        var i = 0;
        try {
            for (var _c = __values(this.observers), _d = _c.next(); !_d.done; _d = _c.next()) {
                var observer = _d.value;
                var indexObs = this.observers.indexOf(observer);
                if (indexObs === -1) {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkObservers", "Unable to locate the " + i + "th observer in the list of observers.");
                    error.logMessageToConsole();
                }
                i++;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        i = 0;
        try {
            for (var _e = __values(this.observersCP), _f = _e.next(); !_f.done; _f = _e.next()) {
                var observer = _f.value;
                var indexObsCP = this.observersCP.indexOf(observer);
                if (indexObsCP === -1) {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkObservers", "Unable to locate the " + i + "th observerCP in the list of observersCP.");
                    error.logMessageToConsole();
                }
                i++;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    AbstractCurveModel.prototype.removeObserver = function (observer, kind) {
        switch (kind) {
            case 'curve':
                var indexObs = this.observers.indexOf(observer);
                if (indexObs === -1) {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "removeObserver", "Unable to locate the observer " + observer + " in the list of observers.");
                    error.logMessageToConsole();
                }
                this.observers.splice(this.observers.indexOf(observer), 1);
                break;
            case 'control points':
                var indexObsCP = this.observersCP.indexOf(observer);
                if (indexObsCP === -1) {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "removeObserver", "Unable to locate the observer " + observer + " in the list of observers.");
                    error.logMessageToConsole();
                }
                this.observersCP.splice(this.observersCP.indexOf(observer), 1);
                break;
        }
    };
    AbstractCurveModel.prototype.notifyObservers = function () {
        var e_3, _a, e_4, _b;
        try {
            for (var _c = __values(this.observers), _d = _c.next(); !_d.done; _d = _c.next()) {
                var observer = _d.value;
                // console.log("CurveModel: update as curve: " + observer.constructor.name)
                observer.update(this._spline.clone());
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            for (var _e = __values(this.observersCP), _f = _e.next(); !_f.done; _f = _e.next()) {
                var observer = _f.value;
                // console.log("CurveModel: update as CP: " + observer.constructor.name)
                observer.update(this._spline.clone());
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_4) throw e_4.error; }
        }
        this.checkObservers();
    };
    AbstractCurveModel.prototype.setControlPointPosition = function (controlPointIndex, x, y) {
        this._spline.setControlPointPosition(controlPointIndex, new Vector2d_1.Vector2d(x, y));
        this.notifyObservers();
        // if (this.activeOptimizer) {
        //     this.optimize(controlPointIndex, x, y);
        // }
    };
    return AbstractCurveModel;
}());
exports.AbstractCurveModel = AbstractCurveModel;


/***/ }),

/***/ "./src/newModels/ClosedCurveModel.ts":
/*!*******************************************!*\
  !*** ./src/newModels/ClosedCurveModel.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClosedCurveModel = void 0;
var PeriodicBSplineR1toR2withOpenKnotSequence_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence */ "./src/newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence.ts");
// import { OptimizationProblemPeriodicBSplineR1toR2 } from "../bsplinesOptimizationProblems/OptimizationProblemPeriodicBSplineR1toR2"
// import { Optimizer } from "../optimizers/Optimizer"
var AbstractCurveModel_1 = __webpack_require__(/*! ./AbstractCurveModel */ "./src/newModels/AbstractCurveModel.ts");
var ClosedCurveModel = /** @class */ (function (_super) {
    __extends(ClosedCurveModel, _super);
    // protected optimizationProblem: OptimizationProblemPeriodicBSplineR1toR2;
    function ClosedCurveModel() {
        var e_1, _a;
        var _this = _super.call(this) || this;
        var px0 = 0, px1 = 0.15, px2 = 0.27, px3 = 0.3;
        var py0 = 0, py2 = 0.35, py4 = 0.6, py5 = 0.72;
        var cp = [[-px2, -py2], [-px3, py0], [-px2, py2], [-px1, py4],
            [px0, py5], [px1, py4], [px2, py2], [px3, py0],
            [px2, -py2], [px1, -py4], [px0, -py5], [-px1, -py4],
            [-px2, -py2], [-px3, py0], [-px2, py2]];
        var cp1 = [];
        try {
            for (var cp_1 = __values(cp), cp_1_1 = cp_1.next(); !cp_1_1.done; cp_1_1 = cp_1.next()) {
                var cpi = cp_1_1.value;
                cp1.push([cpi[1], -cpi[0]]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (cp_1_1 && !cp_1_1.done && (_a = cp_1.return)) _a.call(cp_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var knots = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
        _this._spline = PeriodicBSplineR1toR2withOpenKnotSequence_1.create_PeriodicBSplineR1toR2(cp1, knots);
        // this.optimizationProblem = new  OptimizationProblemPeriodicBSplineR1toR2(this._spline.clone(), this._spline.clone(), this.activeControl)
        // this.optimizer = new Optimizer(this.optimizationProblem)
        console.log("end constructor ClosedCurveModel");
        return _this;
    }
    Object.defineProperty(ClosedCurveModel.prototype, "isClosed", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosedCurveModel.prototype, "spline", {
        get: function () {
            return this._spline.clone();
        },
        enumerable: false,
        configurable: true
    });
    ClosedCurveModel.prototype.setSpline = function (spline) {
        this._spline = spline;
        this.notifyObservers();
    };
    ClosedCurveModel.prototype.addControlPoint = function (controlPointIndex) {
        var cp = controlPointIndex;
        if (cp != null) {
            if (cp === 0) {
                cp += 1;
            }
            if (cp === this._spline.freeControlPoints.length - 1) {
                cp -= 1;
            }
            var grevilleAbscissae = this._spline.grevilleAbscissae();
            var meanGA = (grevilleAbscissae[cp] + grevilleAbscissae[cp + 1]) / 2;
            if (meanGA < this._spline.knots[this._spline.degree]) {
                var index = this._spline.degree;
                meanGA = (this._spline.knots[index] + this._spline.knots[index + 1]) / 2;
            }
            else if (meanGA > this._spline.knots[this._spline.knots.length - this._spline.degree - 1]) {
                var index = this._spline.knots.length - this._spline.degree - 1;
                meanGA = (this._spline.knots[index] + this._spline.knots[index - 1]) / 2;
            }
            this._spline.insertKnot(meanGA);
        }
        // this.optimizationProblem = new  OptimizationProblemPeriodicBSplineR1toR2(this._spline.clone(), this._spline.clone(), this.activeControl)
        // this.optimizer = new Optimizer(this.optimizationProblem)
        this.notifyObservers();
    };
    ClosedCurveModel.prototype.setActiveControl = function () {
        // this.optimizationProblem = new  OptimizationProblemPeriodicBSplineR1toR2(this._spline.clone(), this._spline.clone(), this.activeControl)
        // this.optimizer = new Optimizer(this.optimizationProblem)
        this.notifyObservers();
    };
    ClosedCurveModel.prototype.setControlPoints = function (controlPoints) {
        this.spline.controlPoints = controlPoints;
        //this.notifyObservers()
    };
    return ClosedCurveModel;
}(AbstractCurveModel_1.AbstractCurveModel));
exports.ClosedCurveModel = ClosedCurveModel;


/***/ }),

/***/ "./src/newModels/CurveModel.ts":
/*!*************************************!*\
  !*** ./src/newModels/CurveModel.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurveModel = void 0;
var BSplineR1toR2_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2 */ "./src/newBsplines/BSplineR1toR2.ts");
var Vector2d_1 = __webpack_require__(/*! ../mathVector/Vector2d */ "./src/mathVector/Vector2d.ts");
// import { OptimizationProblemBSplineR1toR2 } from "../bsplinesOptimizationProblems/OptimizationProblemBSplineR1toR2"
// import { Optimizer } from "../optimizers/Optimizer"
var AbstractCurveModel_1 = __webpack_require__(/*! ./AbstractCurveModel */ "./src/newModels/AbstractCurveModel.ts");
var CurveModel = /** @class */ (function (_super) {
    __extends(CurveModel, _super);
    // protected optimizationProblem: OptimizationProblemBSplineR1toR2
    function CurveModel() {
        var _this = _super.call(this) || this;
        var cp0 = new Vector2d_1.Vector2d(-0.5, -0.1);
        var cp1 = new Vector2d_1.Vector2d(-0.25, -0.3);
        var cp2 = new Vector2d_1.Vector2d(0.25, -0.2);
        var cp3 = new Vector2d_1.Vector2d(0.5, 0.3);
        _this._spline = new BSplineR1toR2_1.BSplineR1toR2([cp0, cp1, cp2, cp3], [0, 0, 0, 0, 1, 1, 1, 1]);
        return _this;
        // const cp0 = new Vector2d(-0.5, 0)
        // const cp1 = new Vector2d(-0.3, 0.5)
        // const cp2 = new Vector2d(0, 0.7)
        // const cp3 = new Vector2d(0.3, 0.5)
        // const cp4 = new Vector2d(0.5, 0)
        // this._spline = new BSplineR1toR2([ cp0, cp1, cp2, cp3, cp4 ], [ 0, 0, 0, 0, 0, 1, 1, 1, 1, 1 ])
        // this.optimizationProblem = new  OptimizationProblemBSplineR1toR2(this._spline.clone(), this._spline.clone(), this.activeControl)
        // this.optimizer = new Optimizer(this.optimizationProblem)
        //this.optimizer = new QuasiNewtonOptimizer(this.optimizationProblem)
        // console.log("end constructor CurveModel.")
    }
    Object.defineProperty(CurveModel.prototype, "spline", {
        get: function () {
            return this._spline.clone();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveModel.prototype, "isClosed", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    CurveModel.prototype.setSpline = function (spline) {
        this._spline = spline;
        this.notifyObservers();
    };
    CurveModel.prototype.addControlPoint = function (controlPointIndex) {
        var cp = controlPointIndex;
        if (cp != null) {
            if (cp === 0) {
                cp += 1;
            }
            if (cp === this._spline.controlPoints.length - 1) {
                cp -= 1;
            }
            var grevilleAbscissae = this._spline.grevilleAbscissae();
            this._spline.insertKnot(grevilleAbscissae[cp]);
        }
        // this.optimizationProblem = new  OptimizationProblemBSplineR1toR2(this._spline.clone(), this._spline.clone(), this.activeControl)
        // this.optimizer = new Optimizer(this.optimizationProblem)
        this.notifyObservers();
    };
    CurveModel.prototype.setActiveControl = function () {
        // this.optimizationProblem = new  OptimizationProblemBSplineR1toR2(this._spline.clone(), this._spline.clone(), this.activeControl)
        // this.optimizer = new Optimizer(this.optimizationProblem)
        this.notifyObservers();
    };
    CurveModel.prototype.setControlPoints = function (controlPoints) {
        this.spline.controlPoints = controlPoints;
        //this.notifyObservers()
    };
    return CurveModel;
}(AbstractCurveModel_1.AbstractCurveModel));
exports.CurveModel = CurveModel;


/***/ }),

/***/ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts":
/*!*****************************************************************************!*\
  !*** ./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ComparatorOfSequencesOfDiffEvents = exports.TWO_INFLECTIONS_EVENTS_DISAPPEAR = exports.TWO_INFLECTIONS_EVENTS_APPEAR = exports.ONE_INFLECTION_DISAPPEAR_IN_EXTREME_INTERVAL = exports.ONE_INFLECTION_APPEAR_IN_EXTREME_INTERVAL = exports.TWO_CURVEXT_EVENTS_DISAPPEAR = exports.TWO_CURVEXT_EVENTS_APPEAR = exports.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL = exports.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL = exports.LAST_INDEX = exports.RETURN_ERROR_CODE = exports.CURVE_INTERVAL_SPAN = exports.LOWER_BOUND_CURVE_INTERVAL = exports.UPPER_BOUND_CURVE_INTERVAL = void 0;
var ModifiedDifferentialEvents_1 = __webpack_require__(/*! ./ModifiedDifferentialEvents */ "./src/sequenceOfDifferentialEvents/ModifiedDifferentialEvents.ts");
var NeighboringEvents_1 = __webpack_require__(/*! ./NeighboringEvents */ "./src/sequenceOfDifferentialEvents/NeighboringEvents.ts");
var LocalizerOfDifferentialEvents_1 = __webpack_require__(/*! ./LocalizerOfDifferentialEvents */ "./src/sequenceOfDifferentialEvents/LocalizerOfDifferentialEvents.ts");
var DifferentialEvent_1 = __webpack_require__(/*! ./DifferentialEvent */ "./src/sequenceOfDifferentialEvents/DifferentialEvent.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ExtremumLocationClassifiier_1 = __webpack_require__(/*! ../curveShapeSpaceAnalysis/ExtremumLocationClassifiier */ "./src/curveShapeSpaceAnalysis/ExtremumLocationClassifiier.ts");
exports.UPPER_BOUND_CURVE_INTERVAL = 1.0;
exports.LOWER_BOUND_CURVE_INTERVAL = 0.0;
exports.CURVE_INTERVAL_SPAN = exports.UPPER_BOUND_CURVE_INTERVAL - exports.LOWER_BOUND_CURVE_INTERVAL;
exports.RETURN_ERROR_CODE = -1;
exports.LAST_INDEX = -1;
exports.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL = 1;
exports.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL = -1;
exports.TWO_CURVEXT_EVENTS_APPEAR = 2;
exports.TWO_CURVEXT_EVENTS_DISAPPEAR = -2;
exports.ONE_INFLECTION_APPEAR_IN_EXTREME_INTERVAL = 1;
exports.ONE_INFLECTION_DISAPPEAR_IN_EXTREME_INTERVAL = -1;
exports.TWO_INFLECTIONS_EVENTS_APPEAR = 2;
exports.TWO_INFLECTIONS_EVENTS_DISAPPEAR = -2;
/**
 * Compare the sequences of differential events _sequenceDiffEvents1 and _sequenceDiffEvents2 to look for curvature extrema changes (appearing/disappearing)
 * when the number of inflections is identical in each sequence:
 * @returns : array of ModifiedCurvatureEvents where each interval is defined by two successive inflections.
 * This interval is characterized by the right inflection identified by its INDEX in the array of indices of inflections found in _sequenceDiffEvents1.
 * When event changes occur in the last interval of _sequenceDiffEvents1, i.e., after the last inflection of this sequence, the right bound of this interval
 * is set to: indicesInflection1.length (the number inflections + 1). This process is used to designate an interval, only, and is
 * not altering the content of the array of indices of inflections. In case a sequence has no inflection, i.e., this array has length zero,
 * though the interval is designated with zero.
 * It can  be an array of modifiedInflectionEvents where each interval is defined by the INDEX of a curvature
 * extremum in _sequenceDiffEvents1 (if two inflections appear or disappear, they are adjacent to a curvature extremum).
 * When event changes occur in the last interval of _sequenceDiffEvents1, i.e., after the last curvature extremum of this sequence, the right bound of this interval
 * is set to: _sequenceDiffEvents1.length (the number of events + 1). If the inflection change occurs in the first interval,
 * the index is set to 1.
 */
var ComparatorOfSequencesOfDiffEvents = /** @class */ (function () {
    function ComparatorOfSequencesOfDiffEvents(sequenceDiffEvents1, sequenceDiffEvents2) {
        this.modifiedCurvExEvents = [];
        this.modifiedInflectionEvents = [];
        this.neighboringEvents = [];
        this._sequenceDiffEvents1 = sequenceDiffEvents1;
        this._sequenceDiffEvents2 = sequenceDiffEvents2;
    }
    Object.defineProperty(ComparatorOfSequencesOfDiffEvents.prototype, "sequenceDiffEvents1", {
        get: function () {
            return this._sequenceDiffEvents1;
        },
        set: function (sequenceDiffEvents) {
            sequenceDiffEvents.checkSequenceConsistency();
            this._sequenceDiffEvents1 = sequenceDiffEvents;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ComparatorOfSequencesOfDiffEvents.prototype, "sequenceDiffEvents2", {
        get: function () {
            return this._sequenceDiffEvents2;
        },
        set: function (sequenceDiffEvents) {
            sequenceDiffEvents.checkSequenceConsistency();
            this._sequenceDiffEvents2 = sequenceDiffEvents;
        },
        enumerable: false,
        configurable: true
    });
    ComparatorOfSequencesOfDiffEvents.prototype.locateIntervalAndNumberOfCurvExEventChanges = function () {
        if (this._sequenceDiffEvents1.indicesOfInflections.length === this._sequenceDiffEvents2.indicesOfInflections.length) {
            var shift = 0;
            for (var j = 0; j < this._sequenceDiffEvents1.indicesOfInflections.length; j += 1) {
                var delta = this._sequenceDiffEvents1.indicesOfInflections[j] - this._sequenceDiffEvents2.indicesOfInflections[j];
                if (delta !== shift) {
                    var modEventInInterval = new ModifiedDifferentialEvents_1.ModifiedCurvatureEvents(j, (shift - delta));
                    this.modifiedCurvExEvents.push(modEventInInterval);
                    shift = shift + delta;
                }
            }
            if (this._sequenceDiffEvents1.indicesOfInflections.length > 0 && this.modifiedCurvExEvents.length === 0) {
                // There are inflections and no changes in the first indicesInflectionInit.length intervals -> changes take place in the last interval
                var modEventInInterval = new ModifiedDifferentialEvents_1.ModifiedCurvatureEvents(this._sequenceDiffEvents1.indicesOfInflections.length, (this._sequenceDiffEvents2.length() - this._sequenceDiffEvents1.length()));
                this.modifiedCurvExEvents.push(modEventInInterval);
            }
            if (this._sequenceDiffEvents1.indicesOfInflections.length === 0 &&
                this._sequenceDiffEvents1.length() !== this._sequenceDiffEvents2.length()) {
                // There is no inflexion in the sequence of events -> all events take place in the 'first' interval
                var modEventInInterval = new ModifiedDifferentialEvents_1.ModifiedCurvatureEvents(0, (this._sequenceDiffEvents2.length() - this._sequenceDiffEvents1.length()));
                this.modifiedCurvExEvents.push(modEventInInterval);
            }
        }
        else {
            var message = 'Nb of inflections differ. In seq1 = ' + this._sequenceDiffEvents1.indicesOfInflections.length + ' seq2 = ' + this._sequenceDiffEvents2.indicesOfInflections.length;
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "locateIntervalAndNumberOfCurvExEventChanges", message);
            warning.logMessageToConsole();
        }
        if (this._sequenceDiffEvents1.length() === this._sequenceDiffEvents2.length() && this._sequenceDiffEvents1.indicesOfInflections.length > 0) {
            this.checkConsistencySumModifiedEvents();
        }
        this.checkConsistencyModifiedEvents();
    };
    ComparatorOfSequencesOfDiffEvents.prototype.setModifedInflectionEventInExtremeInterval = function (sequenceDiffEvents, nbModifiedInflections) {
        var modificationOfInflectionEventExist = false;
        if (sequenceDiffEvents.eventAt(0).order === DifferentialEvent_1.ORDER_INFLECTION) {
            if (sequenceDiffEvents.length() === 1) {
                var modEventInInterval = new ModifiedDifferentialEvents_1.ModifiedInflectionEvents(0, nbModifiedInflections);
                this.modifiedInflectionEvents.push(modEventInInterval);
            }
            else if (sequenceDiffEvents.eventAt(1).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM) {
                var modEventInInterval = new ModifiedDifferentialEvents_1.ModifiedInflectionEvents(1, nbModifiedInflections);
                this.modifiedInflectionEvents.push(modEventInInterval);
            }
            modificationOfInflectionEventExist = true;
        }
        if (sequenceDiffEvents.length() > 1) {
            if (sequenceDiffEvents.eventAt(sequenceDiffEvents.length() - 1).order === DifferentialEvent_1.ORDER_INFLECTION
                && sequenceDiffEvents.eventAt(sequenceDiffEvents.length() - 2).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM) {
                var modEventInInterval = new ModifiedDifferentialEvents_1.ModifiedInflectionEvents(sequenceDiffEvents.length() - 2, nbModifiedInflections);
                this.modifiedInflectionEvents.push(modEventInInterval);
                modificationOfInflectionEventExist = true;
            }
        }
        if (!modificationOfInflectionEventExist) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "setModifedInflectionEventInExtremeInterval", "Inconsistent variation of sequences of differential events.");
            error.logMessageToConsole();
        }
    };
    ComparatorOfSequencesOfDiffEvents.prototype.areTwoInflectionsDisappearingAtCurveExtremities = function (sequenceDiffEvents1, sequenceDiffEvents2) {
        var twoInflectionsAtCurveExtremities = false;
        if (sequenceDiffEvents2.length() > 1) {
            if (sequenceDiffEvents1.eventAt(0).order === DifferentialEvent_1.ORDER_INFLECTION && sequenceDiffEvents2.eventAt(0).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM
                && sequenceDiffEvents1.eventAt(sequenceDiffEvents1.length() - 1).order === DifferentialEvent_1.ORDER_INFLECTION && sequenceDiffEvents2.eventAt(sequenceDiffEvents2.length() - 1).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM) {
                twoInflectionsAtCurveExtremities = true;
            }
        }
        return twoInflectionsAtCurveExtremities;
    };
    ComparatorOfSequencesOfDiffEvents.prototype.setModifedInflectionEventsAtCurveEx = function (sequenceDiffEvents1, sequenceDiffEvents2, nbModifiedInflections) {
        var generateModEvents = false;
        if (nbModifiedInflections === exports.TWO_INFLECTIONS_EVENTS_DISAPPEAR) {
            if (this.areTwoInflectionsDisappearingAtCurveExtremities(sequenceDiffEvents1, sequenceDiffEvents2)) {
                this.setModifedInflectionEventInExtremeInterval(sequenceDiffEvents1, exports.ONE_INFLECTION_DISAPPEAR_IN_EXTREME_INTERVAL);
                generateModEvents = true;
            }
        }
        else if (nbModifiedInflections === exports.TWO_INFLECTIONS_EVENTS_APPEAR) {
            if (this.areTwoInflectionsDisappearingAtCurveExtremities(sequenceDiffEvents2, sequenceDiffEvents1)) {
                this.setModifedInflectionEventInExtremeInterval(sequenceDiffEvents2, exports.ONE_INFLECTION_APPEAR_IN_EXTREME_INTERVAL);
                generateModEvents = true;
            }
        }
        return generateModEvents;
    };
    ComparatorOfSequencesOfDiffEvents.prototype.setModifedInflectionEventsAjacentToCurvEx = function (sequenceDiffEvents1, sequenceDiffEvents2, nbModifiedInflections) {
        if (this.setModifedInflectionEventsAtCurveEx(sequenceDiffEvents1, sequenceDiffEvents2, nbModifiedInflections)) {
            return;
        }
        var shift = 0;
        for (var j = 0; j < sequenceDiffEvents1.length(); j += 1) {
            if (sequenceDiffEvents1.eventAt(j).order !== sequenceDiffEvents2.eventAt(j + shift).order) {
                var modEventInInterval = void 0;
                if (nbModifiedInflections > 0) {
                    modEventInInterval = new ModifiedDifferentialEvents_1.ModifiedInflectionEvents(j, exports.TWO_INFLECTIONS_EVENTS_APPEAR);
                }
                else {
                    modEventInInterval = new ModifiedDifferentialEvents_1.ModifiedInflectionEvents(j, exports.TWO_INFLECTIONS_EVENTS_DISAPPEAR);
                }
                this.modifiedInflectionEvents.push(modEventInInterval);
                shift = shift + exports.TWO_INFLECTIONS_EVENTS_APPEAR;
            }
        }
    };
    ComparatorOfSequencesOfDiffEvents.prototype.locateIntervalAndNumberOfInflectionEventChanges = function () {
        var nbCurvExtrema1 = this._sequenceDiffEvents1.length() - this._sequenceDiffEvents1.indicesOfInflections.length;
        var nbCurvExtrema2 = this._sequenceDiffEvents2.length() - this._sequenceDiffEvents2.indicesOfInflections.length;
        if (nbCurvExtrema1 === nbCurvExtrema2) {
            var nbModifiedInflections = this._sequenceDiffEvents2.indicesOfInflections.length - this._sequenceDiffEvents1.indicesOfInflections.length;
            if (nbModifiedInflections === exports.ONE_INFLECTION_APPEAR_IN_EXTREME_INTERVAL) {
                this.setModifedInflectionEventInExtremeInterval(this._sequenceDiffEvents2, nbModifiedInflections);
            }
            else if (nbModifiedInflections === exports.ONE_INFLECTION_DISAPPEAR_IN_EXTREME_INTERVAL) {
                this.setModifedInflectionEventInExtremeInterval(this._sequenceDiffEvents1, nbModifiedInflections);
            }
            else if (nbModifiedInflections === exports.TWO_INFLECTIONS_EVENTS_APPEAR) {
                if (nbCurvExtrema1 > 0) {
                    this.setModifedInflectionEventsAjacentToCurvEx(this._sequenceDiffEvents1, this._sequenceDiffEvents2, nbModifiedInflections);
                }
                else {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "locateIntervalAndNumberOfInflectionEventChanges", "Inconsistent number of curvature extrema. There must be one, at least.");
                    error.logMessageToConsole();
                }
            }
            else if (nbModifiedInflections === exports.TWO_INFLECTIONS_EVENTS_DISAPPEAR) {
                if (nbCurvExtrema2 > 0) {
                    this.setModifedInflectionEventsAjacentToCurvEx(this._sequenceDiffEvents2, this._sequenceDiffEvents1, nbModifiedInflections);
                }
                else {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "locateIntervalAndNumberOfInflectionEventChanges", "Inconsistent number of curvature extrema. There must be one, at least.");
                    error.logMessageToConsole();
                }
            }
        }
    };
    ComparatorOfSequencesOfDiffEvents.prototype.locateNeiboringEventsUnderCurvExEventChanges = function () {
        var e_1, _a;
        if (this._sequenceDiffEvents1.indicesOfInflections.length === this._sequenceDiffEvents2.indicesOfInflections.length) {
            console.log("Seq Curv Ext zeros = " + this._sequenceDiffEvents2.nbCurvatureExtrema());
            try {
                for (var _b = __values(this.modifiedCurvExEvents), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var modifiedCurvExEvent = _c.value;
                    this._sequenceDiffEvents1.checkConsistencyIntervalBtwInflections(modifiedCurvExEvent);
                    if (modifiedCurvExEvent.nbEvents === exports.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL && this._sequenceDiffEvents1.indicesOfInflections.length === 0) {
                        var locatorCurvatureEvent = new LocalizerOfDifferentialEvents_1.LocalizerOfCurvatureExtremumAppearingInsideUniqueInterval(this._sequenceDiffEvents1, this._sequenceDiffEvents2);
                        var neighboringEvent = locatorCurvatureEvent.locateDifferentialEvents();
                        var updatedNeighboringEvent = this.combineLocationAndBehaviorForCurvExtrema(neighboringEvent, modifiedCurvExEvent.nbEvents);
                        this.neighboringEvents.push(updatedNeighboringEvent);
                    }
                    else if (modifiedCurvExEvent.nbEvents === exports.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL && this._sequenceDiffEvents2.indicesOfInflections.length === 0) {
                        var locatorCurvatureEvent = new LocalizerOfDifferentialEvents_1.LocalizerOfCurvatureExtremumDisappearingInsideUniqueInterval(this._sequenceDiffEvents1, this._sequenceDiffEvents2);
                        var neighboringEvent = locatorCurvatureEvent.locateDifferentialEvents();
                        var updatedNeighboringEvent = this.combineLocationAndBehaviorForCurvExtrema(neighboringEvent, modifiedCurvExEvent.nbEvents);
                        this.neighboringEvents.push(updatedNeighboringEvent);
                    }
                    else if (modifiedCurvExEvent.nbEvents === exports.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL && this._sequenceDiffEvents1.indicesOfInflections.length > 0) {
                        // Because there is only one event appearing and this event is of type curvature extremum, it can take place either in the first or in the last interval
                        var locatorCurvatureEvent = new LocalizerOfDifferentialEvents_1.LocalizerOfCurvatureExtremumAppearingInsideExtremeInterval(this._sequenceDiffEvents1, this._sequenceDiffEvents2, modifiedCurvExEvent.indexInflection);
                        var neighboringEvent = locatorCurvatureEvent.locateDifferentialEvents();
                        var updatedNeighboringEvent = this.combineLocationAndBehaviorForCurvExtrema(neighboringEvent, modifiedCurvExEvent.nbEvents);
                        this.neighboringEvents.push(updatedNeighboringEvent);
                    }
                    else if (modifiedCurvExEvent.nbEvents === exports.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL && this._sequenceDiffEvents2.indicesOfInflections.length > 0) {
                        // Because there is only one event appearing and this event is of type curvature extremum, it can take place either in the first or in the last interval
                        var locatorCurvatureEvent = new LocalizerOfDifferentialEvents_1.LocalizerOfCurvatureExtremumDisappearingInsideExtremeInterval(this._sequenceDiffEvents1, this._sequenceDiffEvents2, modifiedCurvExEvent.indexInflection);
                        var neighboringEvent = locatorCurvatureEvent.locateDifferentialEvents();
                        var updatedNeighboringEvent = this.combineLocationAndBehaviorForCurvExtrema(neighboringEvent, modifiedCurvExEvent.nbEvents);
                        this.neighboringEvents.push(updatedNeighboringEvent);
                    }
                    else if (modifiedCurvExEvent.nbEvents === exports.TWO_CURVEXT_EVENTS_APPEAR) {
                        var locatorCurvEventAppearing = new LocalizerOfDifferentialEvents_1.LocalizerOfCurvatureExtremaAppearing(this._sequenceDiffEvents1, this._sequenceDiffEvents2, modifiedCurvExEvent.indexInflection);
                        var neighboringEvent = locatorCurvEventAppearing.locateDifferentialEvents();
                        neighboringEvent.type = NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaAppear;
                        this.neighboringEvents.push(neighboringEvent);
                    }
                    else if (modifiedCurvExEvent.nbEvents === exports.TWO_CURVEXT_EVENTS_DISAPPEAR) {
                        var locatorCurvEventDisappearing = new LocalizerOfDifferentialEvents_1.LocalizerOfCurvatureExtremaDisappearing(this._sequenceDiffEvents1, this._sequenceDiffEvents2, modifiedCurvExEvent.indexInflection);
                        var neighboringEvent = locatorCurvEventDisappearing.locateDifferentialEvents();
                        neighboringEvent.type = NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaDisappear;
                        this.neighboringEvents.push(neighboringEvent);
                    }
                    else if (modifiedCurvExEvent.nbEvents !== 0) {
                        var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "locateNeiboringEventsUnderCurvExEventChanges", "Cannot process the curvature extremum event.");
                        error.logMessageToConsole();
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "locateNeiboringEventsUnderCurvExEventChanges", "No curvature extremum event processed because inflection events are modified too.");
            warning.logMessageToConsole();
        }
    };
    ComparatorOfSequencesOfDiffEvents.prototype.combineLocationAndBehaviorForCurvExtrema = function (neighboringEvent, eventBehavior) {
        var result = neighboringEvent;
        if (neighboringEvent.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundary && eventBehavior > 0) {
            result.type = NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryAppear;
        }
        else if (neighboringEvent.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundary && eventBehavior < 0) {
            result.type = NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryDisappear;
        }
        else if (neighboringEvent.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundary && eventBehavior > 0) {
            result.type = NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryAppear;
        }
        else if (neighboringEvent.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundary && eventBehavior < 0) {
            result.type = NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryDisappear;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "combineLocationAndBehaviorForCurvExtrema", "Inconsistent differential event type.");
            error.logMessageToConsole();
        }
        return result;
    };
    ComparatorOfSequencesOfDiffEvents.prototype.locateNeiboringEventsUnderInflectionEventChanges = function () {
        var e_2, _a;
        var nbEventsModified = this._sequenceDiffEvents1.length() - this._sequenceDiffEvents2.length();
        var nbInflectionsModified = this._sequenceDiffEvents1.indicesOfInflections.length - this._sequenceDiffEvents2.indicesOfInflections.length;
        if (nbEventsModified === nbInflectionsModified) {
            try {
                for (var _b = __values(this.modifiedInflectionEvents), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var modifiedInflectionEvent = _c.value;
                    if (modifiedInflectionEvent.nbEvents === exports.ONE_INFLECTION_APPEAR_IN_EXTREME_INTERVAL && this._sequenceDiffEvents1.indicesOfInflections.length > 0) {
                        var locatorInflectionEvent = new LocalizerOfDifferentialEvents_1.LocalizerOfInflectionAppearingInExtremeInterval(this._sequenceDiffEvents1, this._sequenceDiffEvents2);
                        var neighboringEvent = locatorInflectionEvent.locateDifferentialEvents();
                        var updatedNeighboringEvent = this.combineLocationAndBehaviorForInflections(neighboringEvent, modifiedInflectionEvent.nbEvents);
                        this.neighboringEvents.push(updatedNeighboringEvent);
                    }
                    else if (modifiedInflectionEvent.nbEvents === exports.ONE_INFLECTION_DISAPPEAR_IN_EXTREME_INTERVAL && this._sequenceDiffEvents2.indicesOfInflections.length > 0) {
                        var locatorInflectionEvent = new LocalizerOfDifferentialEvents_1.LocalizerOfInflectionDisappearingInExtremeInterval(this._sequenceDiffEvents1, this._sequenceDiffEvents2);
                        var neighboringEvent = locatorInflectionEvent.locateDifferentialEvents();
                        var updatedNeighboringEvent = this.combineLocationAndBehaviorForInflections(neighboringEvent, modifiedInflectionEvent.nbEvents);
                        this.neighboringEvents.push(updatedNeighboringEvent);
                    }
                    else if (modifiedInflectionEvent.nbEvents === exports.ONE_INFLECTION_APPEAR_IN_EXTREME_INTERVAL && this._sequenceDiffEvents1.indicesOfInflections.length === 0) {
                        var locatorInflectionEvent = new LocalizerOfDifferentialEvents_1.LocalizerOfInflectionAppearingInUniqueInterval(this._sequenceDiffEvents1, this._sequenceDiffEvents2);
                        var neighboringEvent = locatorInflectionEvent.locateDifferentialEvents();
                        var updatedNeighboringEvent = this.combineLocationAndBehaviorForInflections(neighboringEvent, modifiedInflectionEvent.nbEvents);
                        this.neighboringEvents.push(updatedNeighboringEvent);
                    }
                    else if (modifiedInflectionEvent.nbEvents === exports.ONE_INFLECTION_DISAPPEAR_IN_EXTREME_INTERVAL && this._sequenceDiffEvents2.indicesOfInflections.length === 0) {
                        var locatorInflectionEvent = new LocalizerOfDifferentialEvents_1.LocalizerOfInflectionDisappearingInUniqueInterval(this._sequenceDiffEvents1, this._sequenceDiffEvents2);
                        var neighboringEvent = locatorInflectionEvent.locateDifferentialEvents();
                        var updatedNeighboringEvent = this.combineLocationAndBehaviorForInflections(neighboringEvent, modifiedInflectionEvent.nbEvents);
                        this.neighboringEvents.push(updatedNeighboringEvent);
                    }
                    else if (modifiedInflectionEvent.nbEvents === exports.TWO_INFLECTIONS_EVENTS_APPEAR) {
                        var locatorInflectionEvent = new LocalizerOfDifferentialEvents_1.LocalizerOfInflectionsAppearingInAdjacentCurvatureExtremum(this._sequenceDiffEvents1, this._sequenceDiffEvents2);
                        var neighboringEvent = locatorInflectionEvent.locateDifferentialEvents();
                        neighboringEvent.type = NeighboringEvents_1.NeighboringEventsType.neighboringInflectionsCurvatureExtremumAppear;
                        this.neighboringEvents.push(neighboringEvent);
                    }
                    else if (modifiedInflectionEvent.nbEvents === exports.TWO_INFLECTIONS_EVENTS_DISAPPEAR) {
                        var locatorInflectionEvent = new LocalizerOfDifferentialEvents_1.LocalizerOfInflectionsDisappearingInAdjacentCurvatureExtremum(this._sequenceDiffEvents1, this._sequenceDiffEvents2);
                        var neighboringEvent = locatorInflectionEvent.locateDifferentialEvents();
                        neighboringEvent.type = NeighboringEvents_1.NeighboringEventsType.neighboringInflectionsCurvatureExtremumDisappear;
                        this.neighboringEvents.push(neighboringEvent);
                    }
                    else {
                        var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "locateNeiboringEventsUnderInflectionEventChanges", "Cannot process the inflection event.");
                        error.logMessageToConsole();
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        else {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "locateNeiboringEventsUnderInflectionEventChanges", "No inflection event processed because curvature extrema events are modified too.");
            warning.logMessageToConsole();
        }
    };
    ComparatorOfSequencesOfDiffEvents.prototype.combineLocationAndBehaviorForInflections = function (neighboringEvent, eventBehavior) {
        var result = neighboringEvent;
        if (neighboringEvent.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundary && eventBehavior > 0) {
            result.type = NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryAppear;
        }
        else if (neighboringEvent.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundary && eventBehavior < 0) {
            result.type = NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryDisappear;
        }
        else if (neighboringEvent.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundary && eventBehavior > 0) {
            result.type = NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryAppear;
        }
        else if (neighboringEvent.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundary && eventBehavior < 0) {
            result.type = NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryDisappear;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "combineLocationAndBehaviorForInflections", "Inconsistent differential event type.");
            error.logMessageToConsole();
        }
        return result;
    };
    ComparatorOfSequencesOfDiffEvents.prototype.assignNeighboringEventUnderCurvExAndInflectionSimultaneousChange = function (index) {
        if (index !== 0 && index !== exports.LAST_INDEX) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, 'assignNeighboringEventUnderCurvExAndInflectionSimultaneousChange', 'invalid index to process sequences of differential events.');
            error.logMessageToConsole();
            return;
        }
        var orderEventRemoved;
        var sequenceDiffEvents2Temp = this._sequenceDiffEvents2.clone();
        var neighboringEventsCurvExtDisappearing = new NeighboringEvents_1.NeighboringEvents();
        var neighboringEventsInflectionAppearing = new NeighboringEvents_1.NeighboringEvents();
        if (index === exports.LAST_INDEX) {
            orderEventRemoved = this._sequenceDiffEvents2.eventAt(this._sequenceDiffEvents2.length() - 1).order;
            this._sequenceDiffEvents2.removeAt(this._sequenceDiffEvents2.length() - 1);
        }
        else {
            orderEventRemoved = this._sequenceDiffEvents2.eventAt(index).order;
            this._sequenceDiffEvents2.removeAt(index);
        }
        if (orderEventRemoved === DifferentialEvent_1.ORDER_INFLECTION) {
            this.locateIntervalAndNumberOfCurvExEventChanges();
            this.locateNeiboringEventsUnderCurvExEventChanges();
        }
        else if (orderEventRemoved === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM) {
            this.locateIntervalAndNumberOfInflectionEventChanges();
            this.locateNeiboringEventsUnderInflectionEventChanges();
        }
        neighboringEventsCurvExtDisappearing = this.neighboringEvents[0];
        this.modifiedCurvExEvents = [];
        this.neighboringEvents = [];
        this._sequenceDiffEvents2 = sequenceDiffEvents2Temp.clone();
        var sequenceDiffEvents1Temp = this._sequenceDiffEvents1.clone();
        if (index === exports.LAST_INDEX) {
            orderEventRemoved = this._sequenceDiffEvents1.eventAt(this._sequenceDiffEvents1.length() - 1).order;
            this._sequenceDiffEvents1.removeAt(this._sequenceDiffEvents1.length() - 1);
        }
        else {
            orderEventRemoved = this._sequenceDiffEvents1.eventAt(index).order;
            this._sequenceDiffEvents1.removeAt(index);
        }
        if (orderEventRemoved === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM) {
            this.locateIntervalAndNumberOfInflectionEventChanges();
            this.locateNeiboringEventsUnderInflectionEventChanges();
        }
        else if (orderEventRemoved === DifferentialEvent_1.ORDER_INFLECTION) {
            this.locateIntervalAndNumberOfCurvExEventChanges();
            this.locateNeiboringEventsUnderCurvExEventChanges();
        }
        neighboringEventsInflectionAppearing = this.neighboringEvents[0];
        this._sequenceDiffEvents1 = sequenceDiffEvents1Temp.clone();
        this.modifiedInflectionEvents = [];
        this.neighboringEvents = [];
        if (orderEventRemoved === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM) {
            if (index === 0) {
                this.neighboringEvents.push(new NeighboringEvents_1.NeighboringEvents(NeighboringEvents_1.NeighboringEventsType.neighboringCurvExtremumLeftBoundaryDisappearInflectionAppear, 0));
            }
            else if (index === exports.LAST_INDEX) {
                this.neighboringEvents.push(new NeighboringEvents_1.NeighboringEvents(NeighboringEvents_1.NeighboringEventsType.neighboringCurvExtremumRightBoundaryDisappearInflectionAppear, 0));
            }
        }
        else {
            if (index === 0) {
                this.neighboringEvents.push(new NeighboringEvents_1.NeighboringEvents(NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryDisappearCurExtremumAppear, 0));
            }
            else if (index === exports.LAST_INDEX) {
                this.neighboringEvents.push(new NeighboringEvents_1.NeighboringEvents(NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryDisappearCurExtremumAppear, 0));
            }
        }
    };
    ComparatorOfSequencesOfDiffEvents.prototype.splitEventsInvolvingInflectionAndCurvatureExtremum = function () {
        var sequenceDiffEvents2Temp = this._sequenceDiffEvents2.clone();
        var neighboringEventsCurvExt = new NeighboringEvents_1.NeighboringEvents();
        var neighboringEventsInflection = new NeighboringEvents_1.NeighboringEvents();
        var eventRemoved = this._sequenceDiffEvents2.eventAt(this._sequenceDiffEvents2.length() - 1).order;
        if (eventRemoved === DifferentialEvent_1.ORDER_INFLECTION) {
            this._sequenceDiffEvents2.removeAt(this._sequenceDiffEvents2.length() - 1);
        }
        this.locateIntervalAndNumberOfCurvExEventChanges();
        this.locateNeiboringEventsUnderCurvExEventChanges();
        neighboringEventsCurvExt = this.neighboringEvents[0];
        this.modifiedCurvExEvents = [];
        this.neighboringEvents = [];
        this._sequenceDiffEvents2 = sequenceDiffEvents2Temp.clone();
        var curvExtEvent = this._sequenceDiffEvents1.eventAt(0);
        if (curvExtEvent.location < this._sequenceDiffEvents2.eventAt(0).location) {
            this._sequenceDiffEvents2.insertAt(curvExtEvent, 0);
        }
        else {
            var dummyLocation = this._sequenceDiffEvents2.eventAt(1).location;
            curvExtEvent.location = dummyLocation / 2.0;
            this._sequenceDiffEvents2.insertAt(curvExtEvent, 0);
        }
        this.locateIntervalAndNumberOfInflectionEventChanges();
        this.locateNeiboringEventsUnderInflectionEventChanges();
        neighboringEventsInflection = this.neighboringEvents[0];
        this._sequenceDiffEvents2 = sequenceDiffEvents2Temp.clone();
        this.modifiedCurvExEvents = [];
        this.neighboringEvents = [];
        this.neighboringEvents.push(new NeighboringEvents_1.NeighboringEvents(NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryDisappear, 0));
        this.neighboringEvents.push(new NeighboringEvents_1.NeighboringEvents(NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryAppear, 0));
    };
    ComparatorOfSequencesOfDiffEvents.prototype.locateNeighboringEventsUnderInflectionAndCurvatureExChanges = function () {
        var nbCurvExtrema1 = this._sequenceDiffEvents1.length() - this._sequenceDiffEvents1.indicesOfInflections.length;
        var nbCurvExtrema2 = this._sequenceDiffEvents2.length() - this._sequenceDiffEvents2.indicesOfInflections.length;
        var variationNbInflections = this._sequenceDiffEvents2.indicesOfInflections.length - this._sequenceDiffEvents1.indicesOfInflections.length;
        var variationNbCurvEx = nbCurvExtrema2 - nbCurvExtrema1;
        if ((variationNbInflections === 1 && variationNbCurvEx === -1) || (variationNbInflections === -1 && variationNbCurvEx === 1)) {
            // A curvature extremum is going out and an inflection is entering or the opposite
            if (variationNbInflections === 1 && variationNbCurvEx === -1) {
                if (this._sequenceDiffEvents1.eventAt(0).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM && this._sequenceDiffEvents2.eventAt(0).order === DifferentialEvent_1.ORDER_INFLECTION) {
                    this.assignNeighboringEventUnderCurvExAndInflectionSimultaneousChange(0);
                }
                else if (this._sequenceDiffEvents1.eventAt(this._sequenceDiffEvents1.length() - 1).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM
                    && this._sequenceDiffEvents2.eventAt(this._sequenceDiffEvents2.length() - 1).order === DifferentialEvent_1.ORDER_INFLECTION) {
                    this.assignNeighboringEventUnderCurvExAndInflectionSimultaneousChange(exports.LAST_INDEX);
                }
                else if (this._sequenceDiffEvents1.eventAt(0).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM && this._sequenceDiffEvents1.eventAt(this._sequenceDiffEvents1.length() - 1).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM
                    && this._sequenceDiffEvents2.eventAt(this._sequenceDiffEvents2.length() - 1).order === DifferentialEvent_1.ORDER_INFLECTION) {
                    this.splitEventsInvolvingInflectionAndCurvatureExtremum();
                }
                else if (this._sequenceDiffEvents1.eventAt(0).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM && this._sequenceDiffEvents1.eventAt(this._sequenceDiffEvents1.length() - 1).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM
                    && this._sequenceDiffEvents2.eventAt(0).order === DifferentialEvent_1.ORDER_INFLECTION) {
                }
                else {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "locateNeiboringEvents", "The event types at the curve extremity are inconsistent wrt a curvature extremum being replaced by an inflection.");
                    error.logMessageToConsole();
                }
            }
            else if (variationNbInflections === -1 && variationNbCurvEx === 1) {
                if (this._sequenceDiffEvents1.eventAt(0).order === DifferentialEvent_1.ORDER_INFLECTION && this._sequenceDiffEvents2.eventAt(0).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM) {
                    this.assignNeighboringEventUnderCurvExAndInflectionSimultaneousChange(0);
                }
                else if (this._sequenceDiffEvents1.eventAt(this._sequenceDiffEvents1.length() - 1).order === DifferentialEvent_1.ORDER_INFLECTION
                    && this._sequenceDiffEvents2.eventAt(this._sequenceDiffEvents2.length() - 1).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM) {
                    this.assignNeighboringEventUnderCurvExAndInflectionSimultaneousChange(exports.LAST_INDEX);
                }
                else if (this._sequenceDiffEvents1.eventAt(0).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM && this._sequenceDiffEvents1.eventAt(this._sequenceDiffEvents1.length() - 1).order === DifferentialEvent_1.ORDER_INFLECTION
                    && this._sequenceDiffEvents2.eventAt(this._sequenceDiffEvents2.length() - 1).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM) {
                }
                else if (this._sequenceDiffEvents1.eventAt(0).order === DifferentialEvent_1.ORDER_INFLECTION && this._sequenceDiffEvents1.eventAt(this._sequenceDiffEvents1.length() - 1).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM
                    && this._sequenceDiffEvents2.eventAt(0).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM) {
                }
                else {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "locateNeiboringEvents", "The event types at the curve extremity are inconsistent wrt an inflection being replaced by a curvature extremum     .");
                    error.logMessageToConsole();
                }
            }
        }
    };
    ComparatorOfSequencesOfDiffEvents.prototype.locateNeiboringEvents = function () {
        this.modifiedCurvExEvents = [];
        this.modifiedInflectionEvents = [];
        var nbCurvExtrema1 = this._sequenceDiffEvents1.length() - this._sequenceDiffEvents1.indicesOfInflections.length;
        var nbCurvExtrema2 = this._sequenceDiffEvents2.length() - this._sequenceDiffEvents2.indicesOfInflections.length;
        if (Math.abs(this._sequenceDiffEvents1.length() - this._sequenceDiffEvents2.length()) > 2) {
            this.neighboringEvents.push(new NeighboringEvents_1.NeighboringEvents(NeighboringEvents_1.NeighboringEventsType.moreThanOneEvent));
            return;
        }
        if (this._sequenceDiffEvents1.indicesOfInflections.length !== this._sequenceDiffEvents2.indicesOfInflections.length &&
            nbCurvExtrema1 !== nbCurvExtrema2) {
            // There are changes of inflections and curvature extremea simultaneously
            this.locateNeighboringEventsUnderInflectionAndCurvatureExChanges();
        }
        else if (!(this._sequenceDiffEvents1.length() === this._sequenceDiffEvents1.indicesOfInflections.length &&
            this._sequenceDiffEvents2.length() === this._sequenceDiffEvents2.indicesOfInflections.length)) {
            this.locateIntervalAndNumberOfCurvExEventChanges();
        }
        if (this.modifiedCurvExEvents.length === 0) {
            if (this._sequenceDiffEvents1.indicesOfInflections.length === this._sequenceDiffEvents2.indicesOfInflections.length) {
                // No change in curvature extrema has been identified as well as no change in inflections
                return;
                // no need to process an error to include the comparator into regular optimization configurations
                // const error = new ErrorLog(this.constructor.name, "locateNeiboringEvents", "Inconsistent analysis of lost events in the sequence of differential events.");
                // error.logMessageToConsole();
            }
            this.locateIntervalAndNumberOfInflectionEventChanges();
            this.locateNeiboringEventsUnderInflectionEventChanges();
        }
        else if (this._sequenceDiffEvents1.indicesOfInflections.length === this._sequenceDiffEvents2.indicesOfInflections.length) {
            this.locateNeiboringEventsUnderCurvExEventChanges();
        }
        else if (this.modifiedCurvExEvents.length === 0 && this.modifiedInflectionEvents.length === 0
            && this._sequenceDiffEvents1.length() === this._sequenceDiffEvents2.length()) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "locateNeiboringEvents", "Cannot process this configuration yet.");
            warning.logMessageToConsole();
        }
    };
    ComparatorOfSequencesOfDiffEvents.prototype.checkConsistencyModifiedEvents = function () {
        var _this = this;
        this.modifiedCurvExEvents.forEach(function (element) {
            if (element.indexInflection > 0 && element.indexInflection < _this._sequenceDiffEvents1.indicesOfInflections.length) {
                if (element.nbEvents % 2 !== 0) {
                    var message = "The number of differential events appaearing/disappearing in interval [" + _this._sequenceDiffEvents1.indicesOfInflections[element.indexInflection - 1]
                        + ", " + _this._sequenceDiffEvents1.indicesOfInflections[element.indexInflection] + "] must be even.";
                    var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "checkConsistencyModifiedEvents", message);
                    error.logMessageToConsole();
                }
            }
        });
    };
    ComparatorOfSequencesOfDiffEvents.prototype.checkConsistencySumModifiedEvents = function () {
        var sum = 0;
        this.modifiedCurvExEvents.forEach(function (element) {
            sum += element.nbEvents;
        });
        if (sum !== 0) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkConsistencySumModifiedEvents", "The sum of events appearing/disappearing must be null but is not: " + sum);
            error.logMessageToConsole();
        }
    };
    ComparatorOfSequencesOfDiffEvents.prototype.removeAllNeighboringEvents = function (listNeighboringEvents) {
        var e_3, _a;
        try {
            for (var listNeighboringEvents_1 = __values(listNeighboringEvents), listNeighboringEvents_1_1 = listNeighboringEvents_1.next(); !listNeighboringEvents_1_1.done; listNeighboringEvents_1_1 = listNeighboringEvents_1.next()) {
                var neighboringEvents = listNeighboringEvents_1_1.value;
                this.removeNeighboringEvents(neighboringEvents);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (listNeighboringEvents_1_1 && !listNeighboringEvents_1_1.done && (_a = listNeighboringEvents_1.return)) _a.call(listNeighboringEvents_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    ComparatorOfSequencesOfDiffEvents.prototype.removeNeighboringEvents = function (neighboringEvents) {
        var e_4, _a;
        var index = ExtremumLocationClassifiier_1.INITIAL_INDEX;
        var indexEvent = ExtremumLocationClassifiier_1.INITIAL_INDEX;
        try {
            for (var _b = __values(this.neighboringEvents), _c = _b.next(); !_c.done; _c = _b.next()) {
                var events = _c.value;
                index += 1;
                switch (events.type) {
                    case NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryAppear:
                        if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryAppear)
                            indexEvent = index;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryDisappear:
                        if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryDisappear)
                            indexEvent = index;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryAppear:
                        if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryAppear)
                            indexEvent = index;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryDisappear:
                        if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryDisappear)
                            indexEvent = index;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaAppear:
                        if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaAppear)
                            indexEvent = index;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaDisappear:
                        if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaDisappear)
                            indexEvent = index;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryAppear:
                        if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryAppear)
                            indexEvent = index;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryDisappear:
                        if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryDisappear)
                            indexEvent = index;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryAppear:
                        if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryAppear)
                            indexEvent = index;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryDisappear:
                        if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryDisappear)
                            indexEvent = index;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringInflectionsCurvatureExtremumAppear:
                        if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionsCurvatureExtremumAppear)
                            indexEvent = index;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringInflectionsCurvatureExtremumDisappear:
                        if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionsCurvatureExtremumDisappear)
                            indexEvent = index;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringCurvExtremumLeftBoundaryDisappearInflectionAppear:
                        if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvExtremumLeftBoundaryDisappearInflectionAppear)
                            indexEvent = index;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryDisappearCurExtremumAppear:
                        if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryDisappearCurExtremumAppear)
                            indexEvent = index;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringCurvExtremumRightBoundaryDisappearInflectionAppear:
                        if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvExtremumRightBoundaryDisappearInflectionAppear)
                            indexEvent = index;
                        break;
                    case NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryDisappearCurExtremumAppear:
                        if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryDisappearCurExtremumAppear)
                            indexEvent = index;
                        break;
                    default:
                        if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.none) {
                            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "removeNeighboringEvents", "The events to remove are of type 'none'. Inconsistent operation.");
                            warning.logMessageToConsole();
                        }
                        break;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        if (indexEvent === ExtremumLocationClassifiier_1.INITIAL_INDEX) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "removeNeighboringEvents", "Inconsistent index found when removing neighboring events from a comparator. Operation cannot be performed.");
            error.logMessageToConsole();
        }
        else {
            this.neighboringEvents.splice(indexEvent, 1);
        }
    };
    ComparatorOfSequencesOfDiffEvents.prototype.clone = function () {
        var comparator = new ComparatorOfSequencesOfDiffEvents(this._sequenceDiffEvents1, this._sequenceDiffEvents2);
        comparator.neighboringEvents = this.neighboringEvents.slice();
        comparator.modifiedCurvExEvents = this.modifiedCurvExEvents.slice();
        comparator.modifiedInflectionEvents = this.modifiedInflectionEvents.slice();
        return comparator;
    };
    ComparatorOfSequencesOfDiffEvents.prototype.filterOutneighboringEvents = function (curveShapeSpaceNavigator) {
        var e_5, _a;
        var navigationCurveModel = curveShapeSpaceNavigator.navigationCurveModel;
        var filteredSeqComparator = this.clone();
        try {
            for (var _b = __values(this.neighboringEvents), _c = _b.next(); !_c.done; _c = _b.next()) {
                var neighboringEvents = _c.value;
                if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryDisappear
                    || neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryAppear) {
                    if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryDisappear) {
                        console.log("Curvature extremum disappear on the left boundary.");
                    }
                    else {
                        console.log("Curvature extremum appear on the left boundary.");
                    }
                    if (!curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
                        filteredSeqComparator.removeNeighboringEvents(neighboringEvents);
                    }
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryDisappear
                    || neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryAppear) {
                    if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryDisappear) {
                        console.log("Curvature extremum disappear on the right boundary.");
                    }
                    else {
                        console.log("Curvature extremum appear on the right boundary.");
                    }
                    if (!curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
                        filteredSeqComparator.removeNeighboringEvents(neighboringEvents);
                    }
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaDisappear) {
                    console.log("Two Curvature extrema disappear between two inflections or an extreme interval or a unique interval.");
                    if (curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
                        var curvatureExt1 = filteredSeqComparator.sequenceDiffEvents1.eventAt(neighboringEvents.index);
                        navigationCurveModel.navigationState.transitionEvents.insertAt(curvatureExt1, 0);
                        var curvatureExt2 = filteredSeqComparator.sequenceDiffEvents1.eventAt(neighboringEvents.index + 1);
                        navigationCurveModel.navigationState.transitionEvents.insertAt(curvatureExt2, 1);
                    }
                    else {
                        filteredSeqComparator.removeNeighboringEvents(neighboringEvents);
                    }
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaAppear) {
                    console.log("Two Curvature extrema appear between two inflections or an extreme interval or a unique interval.");
                    if (curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema) {
                        var curvatureExt1 = filteredSeqComparator.sequenceDiffEvents2.eventAt(neighboringEvents.index);
                        navigationCurveModel.navigationState.transitionEvents.insertAt(curvatureExt1, 0);
                        var curvatureExt2 = filteredSeqComparator.sequenceDiffEvents2.eventAt(neighboringEvents.index + 1);
                        navigationCurveModel.navigationState.transitionEvents.insertAt(curvatureExt2, 1);
                    }
                    else {
                        filteredSeqComparator.removeNeighboringEvents(neighboringEvents);
                    }
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionsCurvatureExtremumDisappear
                    || neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionsCurvatureExtremumAppear) {
                    if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionsCurvatureExtremumDisappear) {
                        console.log("Two inflections disappear at a curvature extremum.");
                    }
                    else {
                        console.log("Two inflections appear at a curvature extremum.");
                    }
                    if (!curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure.activeControlInflections) {
                        filteredSeqComparator.removeNeighboringEvents(neighboringEvents);
                    }
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryDisappear
                    || neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryAppear) {
                    if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryDisappear) {
                        console.log("Inflection disappear on the left boundary.");
                    }
                    else {
                        console.log("Inflection appear on the left boundary.");
                    }
                    if (!curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure.activeControlInflections) {
                        filteredSeqComparator.removeNeighboringEvents(neighboringEvents);
                    }
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryDisappear
                    || neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryAppear) {
                    if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryDisappear) {
                        console.log("Inflection disappear on the right boundary.");
                    }
                    else {
                        console.log("Inflection appear on the right boundary.");
                    }
                    if (!curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure.activeControlInflections) {
                        filteredSeqComparator.removeNeighboringEvents(neighboringEvents);
                    }
                }
                else {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "filterOutneighboringEvents", "Incorrect transition of differential events.");
                    error.logMessageToConsole();
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return filteredSeqComparator;
    };
    ComparatorOfSequencesOfDiffEvents.prototype.filterOutneighboringEventsNestedShapeSpacesNavigation = function (curveShapeSpaceNavigator) {
        var e_6, _a;
        var filteredSeqComparator = this.clone();
        try {
            for (var _b = __values(this.neighboringEvents), _c = _b.next(); !_c.done; _c = _b.next()) {
                var neighboringEvents = _c.value;
                if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryDisappear
                    || neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryAppear) {
                    if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryDisappear) {
                        console.log("Curvature extremum disappear on the left boundary.");
                    }
                    else {
                        console.log("Curvature extremum appear on the left boundary.");
                    }
                    if (!curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema)
                        filteredSeqComparator.removeNeighboringEvents(neighboringEvents);
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryDisappear
                    || neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryAppear) {
                    if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryDisappear) {
                        console.log("Curvature extremum disappear on the right boundary.");
                    }
                    else {
                        console.log("Curvature extremum appear on the right boundary.");
                    }
                    if (!curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure.activeControlCurvatureExtrema)
                        filteredSeqComparator.removeNeighboringEvents(neighboringEvents);
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaDisappear) {
                    console.log("Two Curvature extrema disappear between two inflections or an extreme interval or a unique interval.");
                    filteredSeqComparator.removeNeighboringEvents(neighboringEvents);
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaAppear) {
                    console.log("Two Curvature extrema appear between two inflections or an extreme interval or a unique interval.");
                    filteredSeqComparator.removeNeighboringEvents(neighboringEvents);
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionsCurvatureExtremumDisappear) {
                    console.log("Two inflections disappear at a curvature extremum.");
                    filteredSeqComparator.removeNeighboringEvents(neighboringEvents);
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionsCurvatureExtremumAppear) {
                    console.log("Two inflections appear at a curvature extremum.");
                    filteredSeqComparator.removeNeighboringEvents(neighboringEvents);
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryDisappear
                    || neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryAppear) {
                    if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryDisappear) {
                        console.log("Inflection disappear on the left boundary.");
                    }
                    else {
                        console.log("Inflection appear on the left boundary.");
                    }
                    if (!curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure.activeControlInflections)
                        filteredSeqComparator.removeNeighboringEvents(neighboringEvents);
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryDisappear
                    || neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryAppear) {
                    if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryDisappear) {
                        console.log("Inflection disappear on the right boundary.");
                    }
                    else {
                        console.log("Inflection appear on the right boundary.");
                    }
                    if (!curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure.activeControlInflections)
                        filteredSeqComparator.removeNeighboringEvents(neighboringEvents);
                }
                else if (neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvExtremumLeftBoundaryDisappearInflectionAppear
                    || neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryDisappearCurExtremumAppear
                    || neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringCurvExtremumRightBoundaryDisappearInflectionAppear
                    || neighboringEvents.type === NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryDisappearCurExtremumAppear) {
                    console.log("curvature extremum and inflection moving. cannot be removed");
                }
                else {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "filterOutneighboringEvents", "Incorrect transition of differential events.");
                    error.logMessageToConsole();
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_6) throw e_6.error; }
        }
        return filteredSeqComparator;
    };
    return ComparatorOfSequencesOfDiffEvents;
}());
exports.ComparatorOfSequencesOfDiffEvents = ComparatorOfSequencesOfDiffEvents;


/***/ }),

/***/ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesOfIntervals.ts":
/*!******************************************************************************!*\
  !*** ./src/sequenceOfDifferentialEvents/ComparatorOfSequencesOfIntervals.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ComparatorOfSequencesOfIntervals = void 0;
var MaxIntervalVariation_1 = __webpack_require__(/*! ./MaxIntervalVariation */ "./src/sequenceOfDifferentialEvents/MaxIntervalVariation.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
/* named constants */
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ./ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var ComparatorOfSequencesDiffEvents_2 = __webpack_require__(/*! ./ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var ComparatorOfSequencesOfIntervals = /** @class */ (function () {
    function ComparatorOfSequencesOfIntervals(sequenceOfIntervals1, sequenceOfIntervals2) {
        this._sequenceOfIntervals1 = sequenceOfIntervals1;
        this._sequenceOfIntervals2 = sequenceOfIntervals2;
        this.maxVariationInSeq1 = new MaxIntervalVariation_1.MaxIntervalVariation();
    }
    Object.defineProperty(ComparatorOfSequencesOfIntervals.prototype, "sequenceOfIntervals1", {
        get: function () {
            return this._sequenceOfIntervals1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ComparatorOfSequencesOfIntervals.prototype, "sequenceOfIntervals2", {
        get: function () {
            return this._sequenceOfIntervals2;
        },
        enumerable: false,
        configurable: true
    });
    ComparatorOfSequencesOfIntervals.prototype.indexIntervalMaximalVariationUnderForwardScan = function (candidateEvent, nbEvents) {
        if (this.maxVariationInSeq1.index !== ComparatorOfSequencesDiffEvents_2.RETURN_ERROR_CODE) {
            this.maxVariationInSeq1 = new MaxIntervalVariation_1.MaxIntervalVariation();
        }
        this.checkCandidateIndexInReferenceSequence(candidateEvent, nbEvents);
        var upperBound = candidateEvent;
        var lowerBound = 0;
        /* JCL To process intervals that are uniquely bounded by events */
        if ((nbEvents === ComparatorOfSequencesDiffEvents_1.TWO_CURVEXT_EVENTS_APPEAR || nbEvents === ComparatorOfSequencesDiffEvents_1.TWO_CURVEXT_EVENTS_DISAPPEAR) && candidateEvent > 1) {
            lowerBound = 1;
        }
        // if(candidateEvent === 1) {
        //     if(this._sequenceOfIntervals1.sequence.length > this._sequenceOfIntervals2.sequence.length) {
        //         this.maxVariationInSeq1.value = 1.0/(this._sequenceOfIntervals1.sequence[0]/this._sequenceOfIntervals1.span);
        //     } else if(this._sequenceOfIntervals1.sequence.length < this._sequenceOfIntervals2.sequence.length) {
        //         this.maxVariationInSeq1.value = 1.0/(this._sequenceOfIntervals2.sequence[0]/this._sequenceOfIntervals1.span);
        //     }
        //     this.maxVariationInSeq1.index = 0;
        // }
        for (var k = lowerBound; k < upperBound; k += 1) {
            var currentRatio = 0.0;
            if (this._sequenceOfIntervals1.sequence.length > this._sequenceOfIntervals2.sequence.length) {
                currentRatio = (this._sequenceOfIntervals2.sequence[k] / this._sequenceOfIntervals2.span) / (this._sequenceOfIntervals1.sequence[k] / this._sequenceOfIntervals1.span);
            }
            else if (this._sequenceOfIntervals1.sequence.length < this._sequenceOfIntervals2.sequence.length) {
                currentRatio = (this._sequenceOfIntervals1.sequence[k] / this._sequenceOfIntervals1.span) / (this._sequenceOfIntervals2.sequence[k] / this._sequenceOfIntervals2.span);
            }
            if (k === 0 || currentRatio > this.maxVariationInSeq1.value) {
                this.maxVariationInSeq1.value = currentRatio;
                this.maxVariationInSeq1.index = k;
            }
        }
    };
    ComparatorOfSequencesOfIntervals.prototype.indexIntervalMaximalVariationUnderReverseScan = function (candidateEvent, nbEvents) {
        if (this.maxVariationInSeq1.index !== ComparatorOfSequencesDiffEvents_2.RETURN_ERROR_CODE) {
            this.maxVariationInSeq1 = new MaxIntervalVariation_1.MaxIntervalVariation();
        }
        this.checkCandidateIndexInReferenceSequence(candidateEvent, nbEvents);
        var upperBound = 0;
        var lowerBound = 0;
        if (this._sequenceOfIntervals1.sequence.length > this._sequenceOfIntervals2.sequence.length) {
            lowerBound = candidateEvent + nbEvents;
            upperBound = this._sequenceOfIntervals2.sequence.length - 1;
            if (nbEvents === ComparatorOfSequencesDiffEvents_1.TWO_CURVEXT_EVENTS_DISAPPEAR && candidateEvent < this._sequenceOfIntervals2.sequence.length - 1)
                upperBound -= 1;
        }
        else if (this._sequenceOfIntervals1.sequence.length < this._sequenceOfIntervals2.sequence.length) {
            lowerBound = candidateEvent - nbEvents;
            upperBound = this._sequenceOfIntervals1.sequence.length - 1;
            if (nbEvents === ComparatorOfSequencesDiffEvents_1.TWO_CURVEXT_EVENTS_APPEAR && candidateEvent < this._sequenceOfIntervals1.sequence.length - 1)
                upperBound -= 1;
        }
        // if(candidateEvent === 1) {
        //     if(this._sequenceOfIntervals1.sequence.length > this._sequenceOfIntervals2.sequence.length) {
        //         this.maxVariationInSeq1.value = 1.0/(this._sequenceOfIntervals1.sequence[this._sequenceOfIntervals1.sequence.length - 1]/this._sequenceOfIntervals1.span);
        //     } else if(this._sequenceOfIntervals1.sequence.length < this._sequenceOfIntervals2.sequence.length) {
        //         this.maxVariationInSeq1.value = 1.0/(this._sequenceOfIntervals2.sequence[this._sequenceOfIntervals2.sequence.length - 1]/this._sequenceOfIntervals2.span);
        //     }
        //     this.maxVariationInSeq1.index = upperBound;
        // }
        for (var k = upperBound; k > lowerBound; k -= 1) {
            var currentRatio = 0.0;
            if (this._sequenceOfIntervals1.sequence.length > this._sequenceOfIntervals2.sequence.length) {
                currentRatio = (this._sequenceOfIntervals2.sequence[k] / this._sequenceOfIntervals2.span) / (this._sequenceOfIntervals1.sequence[k - nbEvents] / this._sequenceOfIntervals1.span);
            }
            else if (this._sequenceOfIntervals1.sequence.length < this._sequenceOfIntervals2.sequence.length) {
                currentRatio = (this._sequenceOfIntervals1.sequence[k] / this._sequenceOfIntervals1.span) / (this._sequenceOfIntervals2.sequence[k + nbEvents] / this._sequenceOfIntervals2.span);
            }
            if (k === this._sequenceOfIntervals2.sequence.length - 1 || currentRatio > this.maxVariationInSeq1.value) {
                this.maxVariationInSeq1.value = currentRatio;
                this.maxVariationInSeq1.index = k;
            }
        }
    };
    ComparatorOfSequencesOfIntervals.prototype.checkCandidateIndexInReferenceSequence = function (CandidateEvent, nbEvents) {
        if (nbEvents === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL && CandidateEvent >= this._sequenceOfIntervals1.sequence.length) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkCandidateIndexInReferenceSequence", "Invalid index to scan sequence1 of intervals: out of bounds.");
            error.logMessageToConsole();
        }
        else if (nbEvents === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL && CandidateEvent >= this._sequenceOfIntervals2.sequence.length) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkCandidateIndexInReferenceSequence", "Invalid index to scan sequence2 of intervals: out of bounds.");
            error.logMessageToConsole();
        }
    };
    return ComparatorOfSequencesOfIntervals;
}());
exports.ComparatorOfSequencesOfIntervals = ComparatorOfSequencesOfIntervals;


/***/ }),

/***/ "./src/sequenceOfDifferentialEvents/DifferentialEvent.ts":
/*!***************************************************************!*\
  !*** ./src/sequenceOfDifferentialEvents/DifferentialEvent.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurvatureExtremumEvent = exports.InflectionEvent = exports.DifferentialEvent = exports.ORDER_CURVATURE_EXTREMUM = exports.ORDER_INFLECTION = void 0;
/*
* Characterization of differential events as key points of the curvature derivatives along a curve
*/
exports.ORDER_INFLECTION = 0;
exports.ORDER_CURVATURE_EXTREMUM = 1;
var DifferentialEvent = /** @class */ (function () {
    /**
     * instantiation of differential event given its type and location along a curve
     * @param order order of differential event that indicates
     * @param uAbscissa location of the differential event along the curve as defined with its parametric location
     */
    function DifferentialEvent(order, uAbscissa) {
        this._order = order;
        this._location = uAbscissa;
        this.checkOrder();
    }
    Object.defineProperty(DifferentialEvent.prototype, "location", {
        get: function () {
            return this._location;
        },
        set: function (uAbscissa) {
            this._location = uAbscissa;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DifferentialEvent.prototype, "order", {
        get: function () {
            return this._order;
        },
        set: function (order) {
            this._order = order;
        },
        enumerable: false,
        configurable: true
    });
    DifferentialEvent.prototype.clone = function () {
        var event = this._order;
        var location = this._location;
        return new DifferentialEvent(event, location);
    };
    DifferentialEvent.prototype.checkOrder = function () {
        if (this._order < exports.ORDER_INFLECTION) {
            throw new Error("Incorrect order of differential event " + this._order + ". Must be positive.");
        }
    };
    return DifferentialEvent;
}());
exports.DifferentialEvent = DifferentialEvent;
var InflectionEvent = /** @class */ (function (_super) {
    __extends(InflectionEvent, _super);
    function InflectionEvent(uAbscissa) {
        var _this = this;
        var order = exports.ORDER_INFLECTION;
        _this = _super.call(this, order, uAbscissa) || this;
        return _this;
    }
    return InflectionEvent;
}(DifferentialEvent));
exports.InflectionEvent = InflectionEvent;
var CurvatureExtremumEvent = /** @class */ (function (_super) {
    __extends(CurvatureExtremumEvent, _super);
    function CurvatureExtremumEvent(uAbscissa) {
        var _this = this;
        var order = exports.ORDER_CURVATURE_EXTREMUM;
        _this = _super.call(this, order, uAbscissa) || this;
        return _this;
    }
    return CurvatureExtremumEvent;
}(DifferentialEvent));
exports.CurvatureExtremumEvent = CurvatureExtremumEvent;


/***/ }),

/***/ "./src/sequenceOfDifferentialEvents/DifferentialEventVariation.ts":
/*!************************************************************************!*\
  !*** ./src/sequenceOfDifferentialEvents/DifferentialEventVariation.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deepCopyDifferentialEventVariation = exports.DiffrentialEventVariation = void 0;
var Vector2d_1 = __webpack_require__(/*! ../mathVector/Vector2d */ "./src/mathVector/Vector2d.ts");
var Piegl_Tiller_NURBS_Book_1 = __webpack_require__(/*! ../newBsplines/Piegl_Tiller_NURBS_Book */ "./src/newBsplines/Piegl_Tiller_NURBS_Book.ts");
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ./ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var DiffrentialEventVariation = /** @class */ (function () {
    function DiffrentialEventVariation(curveAnalyserCurrentCurve, curveAnalyserOptimizedCurve) {
        this._curveAnalyser1 = curveAnalyserCurrentCurve;
        this._curveAnalyser2 = curveAnalyserOptimizedCurve;
        this._sequenceDiffEvents1 = this._curveAnalyser1.sequenceOfDifferentialEvents;
        this._sequenceDiffEvents2 = this._curveAnalyser2.sequenceOfDifferentialEvents;
        this._extremumValue = 0.0;
        this._extremumValueOpt = 0.0;
        this._extremumLocation = -1.0;
        this._extremumLocationOpt = -1.0;
        this._span = -1;
        this._rangeOfInfluence = 0;
        this._CPvariations = [];
        var seqComparator = new ComparatorOfSequencesDiffEvents_1.ComparatorOfSequencesOfDiffEvents(this._sequenceDiffEvents1, this._sequenceDiffEvents2);
        seqComparator.locateNeiboringEvents();
        this._neighboringEvents = seqComparator.neighboringEvents;
    }
    Object.defineProperty(DiffrentialEventVariation.prototype, "neighboringEvents", {
        get: function () {
            return this._neighboringEvents.slice();
        },
        set: function (neighboringEvents) {
            this._neighboringEvents = neighboringEvents.slice();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiffrentialEventVariation.prototype, "curveAnalyser1", {
        get: function () {
            return this._curveAnalyser1;
        },
        set: function (curveAnalyser) {
            this._curveAnalyser1 = curveAnalyser;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiffrentialEventVariation.prototype, "curveAnalyser2", {
        get: function () {
            return this._curveAnalyser2;
        },
        set: function (curveAnalyser) {
            this._curveAnalyser2 = curveAnalyser;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiffrentialEventVariation.prototype, "extremumValue", {
        get: function () {
            return this._extremumValue;
        },
        set: function (extremumValue) {
            this._extremumValue = extremumValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiffrentialEventVariation.prototype, "extremumValueOpt", {
        get: function () {
            return this._extremumValueOpt;
        },
        set: function (extremumValueOpt) {
            this._extremumValueOpt = extremumValueOpt;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiffrentialEventVariation.prototype, "extremumLocation", {
        get: function () {
            return this._extremumLocation;
        },
        set: function (extremumLocation) {
            this._extremumLocation = extremumLocation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiffrentialEventVariation.prototype, "extremumLocationOpt", {
        get: function () {
            return this._extremumLocationOpt;
        },
        set: function (extremumLocationOpt) {
            this._extremumLocationOpt = extremumLocationOpt;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiffrentialEventVariation.prototype, "span", {
        get: function () {
            return this._span;
        },
        set: function (span) {
            this._span = span;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiffrentialEventVariation.prototype, "rangeOfInfluence", {
        get: function () {
            return this._rangeOfInfluence;
        },
        set: function (rangeOfInfluence) {
            this._rangeOfInfluence = rangeOfInfluence;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiffrentialEventVariation.prototype, "CPvariations", {
        get: function () {
            return this._CPvariations.slice();
        },
        set: function (CPvariations) {
            this._CPvariations = CPvariations.slice();
        },
        enumerable: false,
        configurable: true
    });
    DiffrentialEventVariation.prototype.neighboringEventsAt = function (index) {
        return this._neighboringEvents[index];
    };
    DiffrentialEventVariation.prototype.variationDifferentialEvents = function () {
        var curvatureDerivativeNumeratorOpt = this._curveAnalyser2.curvatureDerivativeNumerator;
        var curvatureDerivativeExtremaLocationsOpt = curvatureDerivativeNumeratorOpt.derivative().zeros();
        var curvatureDerivativeZerosLocationsOpt = curvatureDerivativeNumeratorOpt.zeros();
        var curvatureDerivativeNumerator = this._curveAnalyser1.curvatureDerivativeNumerator;
        var curvatureDerivativeExtremaLocations = curvatureDerivativeNumerator.derivative().zeros();
        var curvatureDerivativeZerosLocations = curvatureDerivativeNumerator.zeros();
        if ((curvatureDerivativeZerosLocationsOpt.length - curvatureDerivativeZerosLocations.length) % 2 === 0) {
            /* JCL 06/03/2021 Configuration where one or more couples of extrema appeared */
            var curvatureExtremumInterval = [];
            // let variationsOptim1_2: number[] = []
            for (var exLocOpt = 0; exLocOpt < curvatureDerivativeExtremaLocationsOpt.length; exLocOpt += 1) {
                var currentNbExtremumLocations = curvatureExtremumInterval.length;
                var curvatureDerivExtremumOpt = curvatureDerivativeNumeratorOpt.evaluate(curvatureDerivativeExtremaLocationsOpt[exLocOpt]);
                var extremumLocationFound = false;
                for (var zeroLoc = 0; zeroLoc < curvatureDerivativeZerosLocationsOpt.length - 1; zeroLoc += 1) {
                    if (curvatureDerivativeExtremaLocationsOpt[exLocOpt] > curvatureDerivativeZerosLocationsOpt[zeroLoc]
                        && curvatureDerivativeExtremaLocationsOpt[exLocOpt] < curvatureDerivativeZerosLocationsOpt[zeroLoc + 1]) {
                        curvatureExtremumInterval.push(zeroLoc);
                        extremumLocationFound = true;
                        if (curvatureDerivativeExtremaLocations.length === curvatureDerivativeExtremaLocationsOpt.length) {
                            this._extremumValue = curvatureDerivativeNumerator.evaluate(curvatureDerivativeExtremaLocations[exLocOpt]);
                            this._extremumLocation = curvatureDerivativeExtremaLocations[exLocOpt];
                        }
                        else {
                            var minDist = Math.abs(curvatureDerivativeExtremaLocations[0] - curvatureDerivativeExtremaLocationsOpt[exLocOpt]);
                            var indexMin = 0;
                            for (var exLoc = 1; exLoc < curvatureDerivativeExtremaLocations.length; exLoc += 1) {
                                if (Math.abs(curvatureDerivativeExtremaLocations[exLoc] - curvatureDerivativeExtremaLocationsOpt[exLocOpt]) < minDist) {
                                    minDist = Math.abs(curvatureDerivativeExtremaLocations[exLoc] - curvatureDerivativeExtremaLocationsOpt[exLocOpt]);
                                    indexMin = exLoc;
                                }
                            }
                            this._extremumValue = curvatureDerivativeNumerator.evaluate(curvatureDerivativeExtremaLocations[indexMin]);
                            this._extremumLocation = curvatureDerivativeExtremaLocations[indexMin];
                        }
                        var curvatureDerivExtremumOpt_1 = curvatureDerivativeNumeratorOpt.evaluate(curvatureDerivativeExtremaLocationsOpt[exLocOpt]);
                        this._extremumValueOpt = curvatureDerivExtremumOpt_1;
                        this._extremumLocationOpt = curvatureDerivativeExtremaLocationsOpt[exLocOpt];
                    }
                }
                if (extremumLocationFound) {
                    if (this._extremumValue * this._extremumValueOpt > 0) {
                        console.log("Inconsistency of function B(u) extrema values functionBExtremum: " + this._extremumValue + " functionBOptimExtremum" + this._extremumValueOpt);
                    }
                    if (currentNbExtremumLocations === curvatureExtremumInterval.length)
                        console.log("Problem to locate a curvature derivative extremum. ");
                    if (curvatureDerivExtremumOpt > 0.0) {
                        for (var j = 0; j < curvatureDerivativeNumeratorOpt.controlPoints.length; j += 1) {
                            // variationsOptim1_2.push(curvatureDerivativeNumeratorOpt.controlPoints[j] - functionBOptim.controlPoints[j])
                            // variations1.push(functionBOptim.controlPoints[j] - curvatureDerivativeNumerator.controlPoints[j])
                            this._CPvariations.push(curvatureDerivativeNumeratorOpt.controlPoints[j] - curvatureDerivativeNumerator.controlPoints[j]);
                        }
                        console.log("variations1_2: " + this._CPvariations);
                    }
                    var span = Piegl_Tiller_NURBS_Book_1.findSpan(this._extremumLocation, curvatureDerivativeNumerator.knots, curvatureDerivativeNumerator.degree);
                    var spanOptim = Piegl_Tiller_NURBS_Book_1.findSpan(this._extremumLocationOpt, curvatureDerivativeNumeratorOpt.knots, curvatureDerivativeNumeratorOpt.degree);
                    var curveDegree = curvatureDerivativeNumerator.degree;
                    if (span === spanOptim) {
                        this._span = span;
                        this._rangeOfInfluence = curveDegree;
                    }
                    else {
                        if (span < spanOptim) {
                            this._span = span;
                            this._rangeOfInfluence = curveDegree + spanOptim - span;
                        }
                        else {
                            this._span = spanOptim;
                            this._rangeOfInfluence = curveDegree + span - spanOptim;
                        }
                    }
                }
            }
        }
        else {
        }
    };
    DiffrentialEventVariation.prototype.updateCPDisplacement = function (currentCurve, selectedControlPoint, x, y) {
        var newDisplacement = new Vector2d_1.Vector2d();
        var controlPointsInit = currentCurve.controlPoints;
        var ratio = Math.abs(this._extremumValue / (this._extremumValueOpt - this._extremumValue));
        newDisplacement.x = controlPointsInit[selectedControlPoint].x + (x - controlPointsInit[selectedControlPoint].x) * ratio;
        newDisplacement.y = controlPointsInit[selectedControlPoint].y + (y - controlPointsInit[selectedControlPoint].y) * ratio;
        return newDisplacement;
    };
    DiffrentialEventVariation.prototype.updateExtremumValueOptimized = function (curvatureDerivativeNumeratorOptimized) {
        var e_1, _a;
        var curvatureDerivativeNumeratorOpt = curvatureDerivativeNumeratorOptimized;
        var curvatureDerivativeExtremaLocationsOpt = curvatureDerivativeNumeratorOpt.derivative().zeros();
        var curvatureDerivativeZerosLocationsOpt = curvatureDerivativeNumeratorOpt.zeros();
        var curvatureDerivativeNumerator = this._curveAnalyser1.curvatureDerivativeNumerator;
        var curvatureDerivativeZerosLocations = curvatureDerivativeNumerator.zeros();
        if ((curvatureDerivativeZerosLocationsOpt.length - curvatureDerivativeZerosLocations.length) % 2 === 0
            && curvatureDerivativeZerosLocationsOpt.length !== curvatureDerivativeZerosLocations.length) {
            /* JCL 06/03/2021 Configuration where one or more couples of extrema appeared */
            var updateExtremumValue = false;
            try {
                for (var curvatureDerivativeExtremaLocationsOpt_1 = __values(curvatureDerivativeExtremaLocationsOpt), curvatureDerivativeExtremaLocationsOpt_1_1 = curvatureDerivativeExtremaLocationsOpt_1.next(); !curvatureDerivativeExtremaLocationsOpt_1_1.done; curvatureDerivativeExtremaLocationsOpt_1_1 = curvatureDerivativeExtremaLocationsOpt_1.next()) {
                    var exLocOpt = curvatureDerivativeExtremaLocationsOpt_1_1.value;
                    var extremumLocationFound = false;
                    for (var zeroLoc = 0; zeroLoc < curvatureDerivativeZerosLocationsOpt.length - 1; zeroLoc += 1) {
                        if (exLocOpt > curvatureDerivativeZerosLocationsOpt[zeroLoc]
                            && exLocOpt < curvatureDerivativeZerosLocationsOpt[zeroLoc + 1]) {
                            extremumLocationFound = true;
                            var curvatureDerivExtremumOpt = curvatureDerivativeNumeratorOpt.evaluate(exLocOpt);
                            this._extremumValueOpt = curvatureDerivExtremumOpt;
                            updateExtremumValue = true;
                        }
                    }
                    if (extremumLocationFound && this._extremumValue * this._extremumValueOpt > 0) {
                        console.log("Inconsistency of function B(u) extrema values functionBExtremum: " + this._extremumValue + " functionBOptimExtremum" + this._extremumValueOpt);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (curvatureDerivativeExtremaLocationsOpt_1_1 && !curvatureDerivativeExtremaLocationsOpt_1_1.done && (_a = curvatureDerivativeExtremaLocationsOpt_1.return)) _a.call(curvatureDerivativeExtremaLocationsOpt_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (!updateExtremumValue) {
                console.log("Extremum has not been correctly located and not updated.");
            }
        }
        else {
            var closestExt = curvatureDerivativeNumerator.getExtremumClosestToZero();
            if (closestExt.location !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE) {
                this._extremumLocation = closestExt.location;
                this._extremumValue = closestExt.value;
            }
            var closestExtOpt = curvatureDerivativeNumeratorOpt.getExtremumClosestToZero();
            if (closestExtOpt.location !== ComparatorOfSequencesDiffEvents_1.RETURN_ERROR_CODE) {
                this._extremumLocationOpt = closestExtOpt.location;
                this._extremumValueOpt = closestExtOpt.value;
            }
        }
    };
    DiffrentialEventVariation.prototype.clearVariation = function () {
        this._extremumValue = 0.0;
        this._extremumValueOpt = 0.0;
        this._extremumLocation = -1.0;
        this._extremumLocationOpt = -1.0;
        this._span = -1;
        this._rangeOfInfluence = 0;
        this._CPvariations = [];
    };
    return DiffrentialEventVariation;
}());
exports.DiffrentialEventVariation = DiffrentialEventVariation;
function deepCopyDifferentialEventVariation(diffEventVariation) {
    var diffEvent = new DiffrentialEventVariation(diffEventVariation.curveAnalyser1, diffEventVariation.curveAnalyser2);
    diffEvent.extremumValue = diffEventVariation.extremumValue;
    diffEvent.extremumValueOpt = diffEventVariation.extremumValueOpt;
    diffEvent.extremumLocation = diffEventVariation.extremumLocation;
    diffEvent.extremumLocationOpt = diffEventVariation.extremumLocationOpt;
    diffEvent.neighboringEvents = diffEventVariation.neighboringEvents;
    diffEvent.span = diffEventVariation.span;
    diffEvent.rangeOfInfluence = diffEventVariation.rangeOfInfluence;
    diffEvent.CPvariations = diffEventVariation.CPvariations;
    return diffEvent;
}
exports.deepCopyDifferentialEventVariation = deepCopyDifferentialEventVariation;


/***/ }),

/***/ "./src/sequenceOfDifferentialEvents/LocalizerOfDifferentialEvents.ts":
/*!***************************************************************************!*\
  !*** ./src/sequenceOfDifferentialEvents/LocalizerOfDifferentialEvents.ts ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocalizerOfInflectionsAppearingInAdjacentCurvatureExtremum = exports.LocalizerOfInflectionsDisappearingInAdjacentCurvatureExtremum = exports.LocalizerOfInflectionsAdjacentCurvatureExtremum = exports.LocalizerOfInflectionDisappearingInExtremeInterval = exports.LocalizerOfInflectionAppearingInExtremeInterval = exports.LocalizerOfInflectionInExtremeInterval = exports.LocalizerOfInflectionAppearingInUniqueInterval = exports.LocalizerOfInflectionDisappearingInUniqueInterval = exports.LocalizerOfInflectionInUniqueInterval = exports.LocalizerOfCurvatureExtremaDisappearing = exports.LocalizerOfCurvatureExtremaAppearing = exports.LocalizerOfCurvatureExtrema = exports.LocalizerOfCurvatureExtremumDisappearingInsideUniqueInterval = exports.LocalizerOfCurvatureExtremumAppearingInsideUniqueInterval = exports.LocalizerOfCurvatureExtremumInsideUniqueInterval = exports.LocalizerOfCurvatureExtremumDisappearingInsideExtremeInterval = exports.LocalizerOfCurvatureExtremumAppearingInsideExtremeInterval = exports.LocalizerOfCurvatureExtremumInsideExtremeInterval = exports.LocalizerOfDifferentialEvents = exports.intervalLocation = void 0;
var ComparatorOfSequencesOfIntervals_1 = __webpack_require__(/*! ./ComparatorOfSequencesOfIntervals */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesOfIntervals.ts");
var NeighboringEvents_1 = __webpack_require__(/*! ./NeighboringEvents */ "./src/sequenceOfDifferentialEvents/NeighboringEvents.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
/* named constants */
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ./ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
var NeighboringEvents_2 = __webpack_require__(/*! ./NeighboringEvents */ "./src/sequenceOfDifferentialEvents/NeighboringEvents.ts");
var DifferentialEvent_1 = __webpack_require__(/*! ./DifferentialEvent */ "./src/sequenceOfDifferentialEvents/DifferentialEvent.ts");
var intervalLocation;
(function (intervalLocation) {
    intervalLocation[intervalLocation["first"] = 0] = "first";
    intervalLocation[intervalLocation["last"] = 1] = "last";
})(intervalLocation = exports.intervalLocation || (exports.intervalLocation = {}));
var LocalizerOfDifferentialEvents = /** @class */ (function () {
    /**
     * Localize the differential events modifications in the sequence sequenceDiffEvents1, i.e., before optimization
     * @param sequenceDiffEvents1 : diffrential event sequence before the optimization
     * @param sequenceDiffEvents2 : differential event sequence after the optimization
     * @param indexInflection : definition of the interval of sequenceDiffEvents1 where the events get modified.
     *      It is the right bound of the interval characterized by the inflection located there, if any. This
     *      inflection is defined by its INDEX in the sequence of inflections attached to the sequence of differential events.
     *      If the right bound is the right hand side of the interval, indexInflection contains the length of the
     *      inflection sequence
     */
    function LocalizerOfDifferentialEvents(sequenceDiffEvents1, sequenceDiffEvents2, indexInflection) {
        this._sequenceDiffEvents1 = sequenceDiffEvents1;
        this._sequenceDiffEvents2 = sequenceDiffEvents2;
        this.location = indexInflection;
    }
    Object.defineProperty(LocalizerOfDifferentialEvents.prototype, "sequenceDiffEvents1", {
        get: function () {
            return this._sequenceDiffEvents1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LocalizerOfDifferentialEvents.prototype, "sequenceDiffEvents2", {
        get: function () {
            return this._sequenceDiffEvents2;
        },
        enumerable: false,
        configurable: true
    });
    return LocalizerOfDifferentialEvents;
}());
exports.LocalizerOfDifferentialEvents = LocalizerOfDifferentialEvents;
var LocalizerOfCurvatureExtremumInsideExtremeInterval = /** @class */ (function (_super) {
    __extends(LocalizerOfCurvatureExtremumInsideExtremeInterval, _super);
    function LocalizerOfCurvatureExtremumInsideExtremeInterval(sequenceDiffEvents1, sequenceDiffEvents2, indexInflection) {
        var _this = _super.call(this, sequenceDiffEvents1, sequenceDiffEvents2, indexInflection) || this;
        if (_this.sequenceDiffEvents1.indicesOfInflections.length === 0) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "This class is inapropriate to handle the sequence 'sequence1' of differential events input.");
            error.logMessageToConsole();
        }
        else if (_this.sequenceDiffEvents2.indicesOfInflections.length === 0) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "This class is inapropriate to handle the sequence 'sequence2' of differential events input.");
            error.logMessageToConsole();
        }
        _this.intervalsBtwExtrema1 = _this.sequenceDiffEvents1.computeIntervalsBtwCurvatureExtrema(_this.location);
        _this.intervalsBtwExtrema2 = _this.sequenceDiffEvents2.computeIntervalsBtwCurvatureExtrema(_this.location);
        _this.comparatorSequenceOfIntervals = new ComparatorOfSequencesOfIntervals_1.ComparatorOfSequencesOfIntervals(_this.intervalsBtwExtrema1, _this.intervalsBtwExtrema2);
        return _this;
    }
    LocalizerOfCurvatureExtremumInsideExtremeInterval.prototype.assignNewEventInExtremeInterval = function (sequenceDiffEvents, candidateEventIndex, indexMaxInterVar, nbEventsModified) {
        var newEvent = new NeighboringEvents_1.NeighboringEvents();
        if (this.location === sequenceDiffEvents.indicesOfInflections.length && nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL) {
            if (candidateEventIndex !== NeighboringEvents_2.INITIAL_INTERV_INDEX && (candidateEventIndex !== this.intervalsBtwExtrema2.sequence.length - 1 || indexMaxInterVar !== this.intervalsBtwExtrema2.sequence.length - 1)) {
                /* Temporary statement. Should evolve to decide whether to process it as an error or not */
                // newEvent.type = NeighboringEventsType.none;
                console.log("A first evaluation of intervals between events shows that the event identified may be inconsistent.");
            }
            newEvent.type = NeighboringEvents_2.NeighboringEventsType.neighboringCurExtremumRightBoundary;
            newEvent.index = sequenceDiffEvents.sequence.length - 1;
        }
        else if (this.location === sequenceDiffEvents.indicesOfInflections.length && nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL) {
            if (candidateEventIndex !== NeighboringEvents_2.INITIAL_INTERV_INDEX && (candidateEventIndex !== this.intervalsBtwExtrema1.sequence.length - 1 || indexMaxInterVar !== this.intervalsBtwExtrema1.sequence.length - 1)) {
                /* Temporary statement. Should evolve to decide whether to process it as an error or not */
                // newEvent.type = NeighboringEventsType.none;
                console.log("A first evaluation of intervals between events shows that the event identified may be inconsistent.");
            }
            newEvent.type = NeighboringEvents_2.NeighboringEventsType.neighboringCurExtremumRightBoundary;
            newEvent.index = sequenceDiffEvents.sequence.length - 1;
        }
        else {
            if (candidateEventIndex !== NeighboringEvents_2.INITIAL_INTERV_INDEX && (candidateEventIndex !== 0 || indexMaxInterVar !== 0)) {
                /* Temporary statement. Should evolve to decide whether to process it as an error or not */
                // newEvent.type = NeighboringEventsType.none;
                console.log("A first evaluation of intervals between events shows that the event identified may be inconsistent.");
            }
            newEvent.type = NeighboringEvents_2.NeighboringEventsType.neighboringCurExtremumLeftBoundary;
            newEvent.index = 0;
        }
        return newEvent;
    };
    LocalizerOfCurvatureExtremumInsideExtremeInterval.prototype.analyzeExtremeIntervalVariations = function (nbEventsModified) {
        var modifiedEventIndex = NeighboringEvents_2.INITIAL_INTERV_INDEX;
        var ratio = 0.0;
        this.checkIndexConsistency(this.location);
        if (this.intervalsBtwExtrema2.sequence.length > 0 && nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL) {
            if (this.location === this.sequenceDiffEvents1.indicesOfInflections.length) {
                ratio = this.variationOfExtremeInterval(intervalLocation.last, ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL);
                modifiedEventIndex = this.intervalsBtwExtrema1.sequence.length - 1;
                this.comparatorSequenceOfIntervals.indexIntervalMaximalVariationUnderForwardScan(modifiedEventIndex - 1, ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL);
            }
            else if (this.location === 0) {
                ratio = this.variationOfExtremeInterval(intervalLocation.first, ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL);
                modifiedEventIndex = 0;
                this.comparatorSequenceOfIntervals.indexIntervalMaximalVariationUnderReverseScan(modifiedEventIndex, ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL);
            }
            if (this.comparatorSequenceOfIntervals.maxVariationInSeq1.value > ratio) {
                modifiedEventIndex = this.comparatorSequenceOfIntervals.maxVariationInSeq1.index;
            }
        }
        else if (nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL) {
            if (this.location === this.sequenceDiffEvents1.indicesOfInflections.length) {
                modifiedEventIndex = this.intervalsBtwExtrema1.sequence.length - 1;
            }
            else
                modifiedEventIndex = 0;
        }
        else if (this.intervalsBtwExtrema1.sequence.length > 0 && nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL) {
            if (this.location === this.sequenceDiffEvents1.indicesOfInflections.length) {
                ratio = this.variationOfExtremeInterval(intervalLocation.last, ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL);
                modifiedEventIndex = this.intervalsBtwExtrema2.sequence.length - 1; // a voir
                this.comparatorSequenceOfIntervals.indexIntervalMaximalVariationUnderForwardScan(modifiedEventIndex - 1, ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL);
            }
            else if (this.location === 0) {
                ratio = this.variationOfExtremeInterval(intervalLocation.first, ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL);
                modifiedEventIndex = 0;
                this.comparatorSequenceOfIntervals.indexIntervalMaximalVariationUnderReverseScan(modifiedEventIndex, ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL);
            }
            if (this.comparatorSequenceOfIntervals.maxVariationInSeq1.value > ratio) {
                modifiedEventIndex = this.comparatorSequenceOfIntervals.maxVariationInSeq1.index;
            }
        }
        else if (nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL) {
            if (this.location === this.sequenceDiffEvents1.indicesOfInflections.length) {
                modifiedEventIndex = this.intervalsBtwExtrema2.sequence.length - 1;
            }
            else
                modifiedEventIndex = 0;
        }
        return modifiedEventIndex;
    };
    LocalizerOfCurvatureExtremumInsideExtremeInterval.prototype.variationOfExtremeInterval = function (interval, nbEventsModified) {
        var ratio = 0.0;
        if (nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL) {
            if (interval === intervalLocation.last) {
                ratio = (this.intervalsBtwExtrema2.sequence[this.intervalsBtwExtrema2.sequence.length - 1] / this.intervalsBtwExtrema2.span) / (this.intervalsBtwExtrema1.sequence[this.intervalsBtwExtrema1.sequence.length - 1] / this.intervalsBtwExtrema1.span);
            }
            else if (interval === intervalLocation.first) {
                ratio = (this.intervalsBtwExtrema2.sequence[0] / this.intervalsBtwExtrema2.span) / (this.intervalsBtwExtrema1.sequence[0] / this.intervalsBtwExtrema1.span);
            }
        }
        else if (nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL) {
            if (interval === intervalLocation.last) {
                ratio = (this.intervalsBtwExtrema1.sequence[this.intervalsBtwExtrema1.sequence.length - 1] / this.intervalsBtwExtrema1.span) / (this.intervalsBtwExtrema2.sequence[this.intervalsBtwExtrema2.sequence.length - 1] / this.intervalsBtwExtrema2.span);
            }
            else if (interval === intervalLocation.first) {
                ratio = (this.intervalsBtwExtrema1.sequence[0] / this.intervalsBtwExtrema1.span) / (this.intervalsBtwExtrema2.sequence[0] / this.intervalsBtwExtrema2.span);
            }
        }
        return ratio;
    };
    LocalizerOfCurvatureExtremumInsideExtremeInterval.prototype.checkIndexConsistency = function (indexInflection) {
        if ((indexInflection !== this.sequenceDiffEvents1.indicesOfInflections.length && indexInflection !== 0 && this.sequenceDiffEvents1.indicesOfInflections.length > 0)
            || (indexInflection !== 0 && this.sequenceDiffEvents1.indicesOfInflections.length === 0)) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkIndexConsistency", "Index of inflection in the sequence of differerntial events is invalid.");
            error.logMessageToConsole();
        }
    };
    return LocalizerOfCurvatureExtremumInsideExtremeInterval;
}(LocalizerOfDifferentialEvents));
exports.LocalizerOfCurvatureExtremumInsideExtremeInterval = LocalizerOfCurvatureExtremumInsideExtremeInterval;
var LocalizerOfCurvatureExtremumAppearingInsideExtremeInterval = /** @class */ (function (_super) {
    __extends(LocalizerOfCurvatureExtremumAppearingInsideExtremeInterval, _super);
    function LocalizerOfCurvatureExtremumAppearingInsideExtremeInterval(sequenceDiffEvents1, sequenceDiffEvents2, indexInflection) {
        var _this = _super.call(this, sequenceDiffEvents1, sequenceDiffEvents2, indexInflection) || this;
        _this.ONE_EVENT_APPEAR = ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL;
        _this.candidateEventIndex = _this.intervalsBtwExtrema2.indexSmallestInterval(_this.ONE_EVENT_APPEAR);
        return _this;
    }
    LocalizerOfCurvatureExtremumAppearingInsideExtremeInterval.prototype.locateDifferentialEvents = function () {
        var indexMaxInterVar = this.analyzeExtremeIntervalVariations(this.ONE_EVENT_APPEAR);
        return this.assignNewEventInExtremeInterval(this.sequenceDiffEvents2, this.candidateEventIndex, indexMaxInterVar, this.ONE_EVENT_APPEAR);
    };
    return LocalizerOfCurvatureExtremumAppearingInsideExtremeInterval;
}(LocalizerOfCurvatureExtremumInsideExtremeInterval));
exports.LocalizerOfCurvatureExtremumAppearingInsideExtremeInterval = LocalizerOfCurvatureExtremumAppearingInsideExtremeInterval;
var LocalizerOfCurvatureExtremumDisappearingInsideExtremeInterval = /** @class */ (function (_super) {
    __extends(LocalizerOfCurvatureExtremumDisappearingInsideExtremeInterval, _super);
    function LocalizerOfCurvatureExtremumDisappearingInsideExtremeInterval(sequenceDiffEvents1, sequenceDiffEvents2, indexInflection) {
        var _this = _super.call(this, sequenceDiffEvents1, sequenceDiffEvents2, indexInflection) || this;
        _this.ONE_EVENT_DISAPPEAR = ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL;
        _this.candidateEventIndex = _this.intervalsBtwExtrema1.indexSmallestInterval(_this.ONE_EVENT_DISAPPEAR);
        return _this;
    }
    LocalizerOfCurvatureExtremumDisappearingInsideExtremeInterval.prototype.locateDifferentialEvents = function () {
        var indexMaxInterVar = this.analyzeExtremeIntervalVariations(this.ONE_EVENT_DISAPPEAR);
        return this.assignNewEventInExtremeInterval(this.sequenceDiffEvents1, this.candidateEventIndex, indexMaxInterVar, this.ONE_EVENT_DISAPPEAR);
    };
    return LocalizerOfCurvatureExtremumDisappearingInsideExtremeInterval;
}(LocalizerOfCurvatureExtremumInsideExtremeInterval));
exports.LocalizerOfCurvatureExtremumDisappearingInsideExtremeInterval = LocalizerOfCurvatureExtremumDisappearingInsideExtremeInterval;
var LocalizerOfCurvatureExtremumInsideUniqueInterval = /** @class */ (function (_super) {
    __extends(LocalizerOfCurvatureExtremumInsideUniqueInterval, _super);
    function LocalizerOfCurvatureExtremumInsideUniqueInterval(sequenceDiffEvents1, sequenceDiffEvents2) {
        var _this = this;
        var indexInflection = 0;
        _this = _super.call(this, sequenceDiffEvents1, sequenceDiffEvents2, indexInflection) || this;
        if (_this.sequenceDiffEvents1.indicesOfInflections.length !== 0) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "This class is inapropriate to handle the sequence 'sequence1' of differential events input.");
            error.logMessageToConsole();
        }
        else if (_this.sequenceDiffEvents2.indicesOfInflections.length !== 0) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "This class is inapropriate to handle the sequence 'sequence2' of differential events input.");
            error.logMessageToConsole();
        }
        _this.intervalsBtwExtrema1 = _this.sequenceDiffEvents1.computeIntervalsBtwCurvatureExtrema(_this.location);
        _this.intervalsBtwExtrema2 = _this.sequenceDiffEvents2.computeIntervalsBtwCurvatureExtrema(_this.location);
        _this.comparatorSequenceOfIntervals = new ComparatorOfSequencesOfIntervals_1.ComparatorOfSequencesOfIntervals(_this.intervalsBtwExtrema1, _this.intervalsBtwExtrema2);
        return _this;
    }
    LocalizerOfCurvatureExtremumInsideUniqueInterval.prototype.assignNewEventInUniqueInterval = function (sequenceDiffEvents, candidateEventIndex, nbEventsModified) {
        var newEvent = new NeighboringEvents_1.NeighboringEvents();
        newEvent.type = NeighboringEvents_2.NeighboringEventsType.none;
        if (candidateEventIndex === 0) {
            newEvent.type = NeighboringEvents_2.NeighboringEventsType.neighboringCurExtremumLeftBoundary;
            newEvent.index = 0;
        }
        else if ((candidateEventIndex === this.intervalsBtwExtrema2.sequence.length - 1 && nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL) ||
            (candidateEventIndex === this.intervalsBtwExtrema1.sequence.length - 1 && nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL)) {
            newEvent.type = NeighboringEvents_2.NeighboringEventsType.neighboringCurExtremumRightBoundary;
            newEvent.index = sequenceDiffEvents.sequence.length - 1;
        }
        else {
            newEvent.type = NeighboringEvents_2.NeighboringEventsType.none;
            newEvent.index = candidateEventIndex;
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "assignNewEventInUniqueInterval", "Inconsistent identification of curvature extremum. Possibly extremum at a knot.");
            warning.logMessageToConsole();
        }
        return newEvent;
    };
    LocalizerOfCurvatureExtremumInsideUniqueInterval.prototype.analyzeUniqueIntervalVariations = function (candidateEventIndex, nbEventsModified) {
        var modifiedEventIndex = NeighboringEvents_2.INITIAL_INTERV_INDEX;
        var ratioLeft = 0.0, ratioRight = 0.0;
        if ((nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL && this.intervalsBtwExtrema1.sequence.length > 0) ||
            (nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL && this.intervalsBtwExtrema2.sequence.length > 0)) {
            ratioLeft = this.variationOfExtremeInterval(intervalLocation.first, nbEventsModified);
            ratioRight = this.variationOfExtremeInterval(intervalLocation.last, nbEventsModified);
            if (ratioLeft > ratioRight) {
                modifiedEventIndex = 0;
                this.comparatorSequenceOfIntervals.indexIntervalMaximalVariationUnderReverseScan(modifiedEventIndex, ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL);
                if (this.comparatorSequenceOfIntervals.maxVariationInSeq1.value > ratioLeft) {
                    modifiedEventIndex = this.comparatorSequenceOfIntervals.maxVariationInSeq1.index;
                }
            }
            else {
                if (nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL) {
                    modifiedEventIndex = this.intervalsBtwExtrema2.sequence.length - 1;
                }
                else if (nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL) {
                    modifiedEventIndex = this.intervalsBtwExtrema1.sequence.length - 1;
                }
                this.comparatorSequenceOfIntervals.indexIntervalMaximalVariationUnderForwardScan(modifiedEventIndex - 1, ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL);
                if (this.comparatorSequenceOfIntervals.maxVariationInSeq1.value > ratioRight) {
                    modifiedEventIndex = this.comparatorSequenceOfIntervals.maxVariationInSeq1.index;
                }
            }
        }
        else if (nbEventsModified !== ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL && nbEventsModified !== ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "analyzeUniqueIntervalVariations", "Incorrect number of modified differential events.");
            error.logMessageToConsole();
        }
        else {
            if (nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL) {
                modifiedEventIndex = candidateEventIndex;
            }
            else if (nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL) {
                modifiedEventIndex = 0;
            }
        }
        if (candidateEventIndex !== NeighboringEvents_2.INITIAL_INTERV_INDEX) {
            if (this.sequenceDiffEvents1.indicesOfInflections.length === 0) {
                if (modifiedEventIndex === candidateEventIndex) {
                    var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "analyzeUniqueIntervalVariations", "Events are stable as well as the candidate event.");
                    warning.logMessageToConsole();
                }
                else {
                    var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "analyzeUniqueIntervalVariations", "Other events variations may influence the decision about the candidate event.");
                    warning.logMessageToConsole();
                    if (!(ratioLeft > ratioRight && candidateEventIndex === 0)) {
                        modifiedEventIndex = 0;
                    }
                    else if (!(ratioLeft < ratioRight && candidateEventIndex === this.intervalsBtwExtrema1.sequence.length - 1) && nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL) {
                        modifiedEventIndex = this.intervalsBtwExtrema1.sequence.length - 1;
                    }
                    else if (!(ratioLeft < ratioRight && candidateEventIndex === this.intervalsBtwExtrema2.sequence.length - 1) && nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL) {
                        modifiedEventIndex = this.intervalsBtwExtrema2.sequence.length - 1;
                    }
                }
            }
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "analyzeUniqueIntervalVariations", "Unable to generate the smallest interval of differential events for this curve.");
            error.logMessageToConsole();
        }
        return modifiedEventIndex;
    };
    LocalizerOfCurvatureExtremumInsideUniqueInterval.prototype.variationOfExtremeInterval = function (interval, nbEventsModified) {
        var ratio = 0.0;
        if (nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL) {
            if (interval === intervalLocation.last) {
                ratio = (this.intervalsBtwExtrema2.sequence[this.intervalsBtwExtrema2.sequence.length - 1] / this.intervalsBtwExtrema2.span) / (this.intervalsBtwExtrema1.sequence[this.intervalsBtwExtrema1.sequence.length - 1] / this.intervalsBtwExtrema1.span);
            }
            else if (interval === intervalLocation.first) {
                ratio = (this.intervalsBtwExtrema2.sequence[0] / this.intervalsBtwExtrema2.span) / (this.intervalsBtwExtrema1.sequence[0] / this.intervalsBtwExtrema1.span);
            }
        }
        else if (nbEventsModified === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL) {
            if (interval === intervalLocation.last) {
                ratio = (this.intervalsBtwExtrema1.sequence[this.intervalsBtwExtrema1.sequence.length - 1] / this.intervalsBtwExtrema1.span) / (this.intervalsBtwExtrema2.sequence[this.intervalsBtwExtrema2.sequence.length - 1] / this.intervalsBtwExtrema2.span);
            }
            else if (interval === intervalLocation.first) {
                ratio = (this.intervalsBtwExtrema1.sequence[0] / this.intervalsBtwExtrema1.span) / (this.intervalsBtwExtrema2.sequence[0] / this.intervalsBtwExtrema2.span);
            }
        }
        return ratio;
    };
    return LocalizerOfCurvatureExtremumInsideUniqueInterval;
}(LocalizerOfDifferentialEvents));
exports.LocalizerOfCurvatureExtremumInsideUniqueInterval = LocalizerOfCurvatureExtremumInsideUniqueInterval;
var LocalizerOfCurvatureExtremumAppearingInsideUniqueInterval = /** @class */ (function (_super) {
    __extends(LocalizerOfCurvatureExtremumAppearingInsideUniqueInterval, _super);
    function LocalizerOfCurvatureExtremumAppearingInsideUniqueInterval(sequenceDiffEvents1, sequenceDiffEvents2) {
        var _this = _super.call(this, sequenceDiffEvents1, sequenceDiffEvents2) || this;
        _this.ONE_EVENT_APPEAR = ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL;
        _this.candidateEventIndex = _this.intervalsBtwExtrema2.indexSmallestInterval(_this.ONE_EVENT_APPEAR);
        return _this;
    }
    LocalizerOfCurvatureExtremumAppearingInsideUniqueInterval.prototype.locateDifferentialEvents = function () {
        this.candidateEventIndex = this.analyzeUniqueIntervalVariations(this.candidateEventIndex, this.ONE_EVENT_APPEAR);
        return this.assignNewEventInUniqueInterval(this.sequenceDiffEvents2, this.candidateEventIndex, this.ONE_EVENT_APPEAR);
    };
    return LocalizerOfCurvatureExtremumAppearingInsideUniqueInterval;
}(LocalizerOfCurvatureExtremumInsideUniqueInterval));
exports.LocalizerOfCurvatureExtremumAppearingInsideUniqueInterval = LocalizerOfCurvatureExtremumAppearingInsideUniqueInterval;
var LocalizerOfCurvatureExtremumDisappearingInsideUniqueInterval = /** @class */ (function (_super) {
    __extends(LocalizerOfCurvatureExtremumDisappearingInsideUniqueInterval, _super);
    function LocalizerOfCurvatureExtremumDisappearingInsideUniqueInterval(sequenceDiffEvents1, sequenceDiffEvents2) {
        var _this = _super.call(this, sequenceDiffEvents1, sequenceDiffEvents2) || this;
        _this.ONE_EVENT_DISAPPEAR = ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL;
        _this.candidateEventIndex = _this.intervalsBtwExtrema1.indexSmallestInterval(_this.ONE_EVENT_DISAPPEAR);
        return _this;
    }
    LocalizerOfCurvatureExtremumDisappearingInsideUniqueInterval.prototype.locateDifferentialEvents = function () {
        this.candidateEventIndex = this.analyzeUniqueIntervalVariations(this.candidateEventIndex, this.ONE_EVENT_DISAPPEAR);
        return this.assignNewEventInUniqueInterval(this.sequenceDiffEvents1, this.candidateEventIndex, this.ONE_EVENT_DISAPPEAR);
    };
    return LocalizerOfCurvatureExtremumDisappearingInsideUniqueInterval;
}(LocalizerOfCurvatureExtremumInsideUniqueInterval));
exports.LocalizerOfCurvatureExtremumDisappearingInsideUniqueInterval = LocalizerOfCurvatureExtremumDisappearingInsideUniqueInterval;
var LocalizerOfCurvatureExtrema = /** @class */ (function (_super) {
    __extends(LocalizerOfCurvatureExtrema, _super);
    function LocalizerOfCurvatureExtrema(sequenceDiffEvents1, sequenceDiffEvents2, indexInflection) {
        var _this = _super.call(this, sequenceDiffEvents1, sequenceDiffEvents2, indexInflection) || this;
        _this.intervalsBtwExtrema1 = _this.sequenceDiffEvents1.computeIntervalsBtwCurvatureExtrema(_this.location);
        _this.intervalsBtwExtrema2 = _this.sequenceDiffEvents2.computeIntervalsBtwCurvatureExtrema(_this.location);
        _this.comparatorSequenceOfIntervals = new ComparatorOfSequencesOfIntervals_1.ComparatorOfSequencesOfIntervals(_this.intervalsBtwExtrema1, _this.intervalsBtwExtrema2);
        return _this;
    }
    LocalizerOfCurvatureExtrema.prototype.assignNewEvent = function (sequenceDiffEvents, candidateEventIndex) {
        var newEvent = new NeighboringEvents_1.NeighboringEvents();
        newEvent.type = NeighboringEvents_2.NeighboringEventsType.neighboringCurvatureExtrema;
        if (sequenceDiffEvents.indicesOfInflections.length === 0 || this.location === 0) {
            /* JCL To avoid use of incorrect indices */
            if (candidateEventIndex === sequenceDiffEvents.length()) {
                newEvent.index = candidateEventIndex - 2;
                console.log("Probably incorrect identification of events indices close to curve extremity.");
            }
            else if (candidateEventIndex === NeighboringEvents_2.INITIAL_INTERV_INDEX) {
                newEvent.index = 0;
                console.log("Probably incorrect identification of events indices close to curve origin.");
            }
            else {
                /* JCL Set the effectively computed event index*/
                newEvent.index = candidateEventIndex - 1;
            }
        }
        else if (this.location === sequenceDiffEvents.indicesOfInflections.length) {
            /* JCL To avoid use of incorrect indices */
            if (sequenceDiffEvents.indicesOfInflections[sequenceDiffEvents.indicesOfInflections.length - 1] + candidateEventIndex === sequenceDiffEvents.length() - 1) {
                newEvent.index = sequenceDiffEvents.indicesOfInflections[sequenceDiffEvents.indicesOfInflections.length - 1] + candidateEventIndex - 1;
                console.log("Probably incorrect identification of events indices.");
            }
            else {
                /* JCL Set the effectively computed event index*/
                newEvent.index = sequenceDiffEvents.indicesOfInflections[sequenceDiffEvents.indicesOfInflections.length - 1] + candidateEventIndex;
            }
        }
        else {
            newEvent.index = sequenceDiffEvents.indicesOfInflections[this.location - 1] + candidateEventIndex;
        }
        return newEvent;
    };
    LocalizerOfCurvatureExtrema.prototype.analyzeIntervalVariations = function (candidateEventIndex, nbEventsModified) {
        var modifiedEventIndex = candidateEventIndex;
        this.comparatorSequenceOfIntervals.indexIntervalMaximalVariationUnderForwardScan(candidateEventIndex, nbEventsModified);
        var maxRatioF = this.comparatorSequenceOfIntervals.maxVariationInSeq1;
        this.comparatorSequenceOfIntervals.indexIntervalMaximalVariationUnderReverseScan(candidateEventIndex, nbEventsModified);
        var maxRatioR = this.comparatorSequenceOfIntervals.maxVariationInSeq1;
        if (candidateEventIndex !== NeighboringEvents_2.INITIAL_INTERV_INDEX) {
            if (this.intervalsBtwExtrema1.sequence.length > 0) {
                if (maxRatioF.index === maxRatioR.index && maxRatioF.index === (candidateEventIndex - 1)) {
                    var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "analyzeIntervalVariations", "Events are stable as well as the candidate events.");
                    warning.logMessageToConsole();
                }
                else if (maxRatioF.index !== (candidateEventIndex - 1) || maxRatioR.index !== (candidateEventIndex - 1)) {
                    var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "analyzeIntervalVariations", "The candidate events are not the ones added.");
                    warning.logMessageToConsole();
                    /* Current assumption consists in considering an adjacent interval as candidate */
                    if (maxRatioF.value > maxRatioR.value) {
                        modifiedEventIndex = maxRatioF.index - 1;
                    }
                    else
                        modifiedEventIndex = maxRatioF.index + 1;
                }
                else {
                    var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "analyzeIntervalVariations", "Events are not stable enough.");
                    warning.logMessageToConsole();
                }
            }
            else {
                /* JCL this.sequenceDiffEvents2 contains two events only that may appear/disappear */
                modifiedEventIndex = 1;
            }
            // This initial code is not adequate for an arbitrary interval between inflection -> should be adapted if the code is needed
            // } else if(nbEventsModified === TWO_CURVEXT_EVENTS_APPEAR) {
            //     console.log("Error when computing smallest interval. Assign arbitrarily interval to 0.");
            //     if(this.sequenceDiffEvents1.indicesOfInflections.length === 0) {
            //         modifiedEventIndex = 1;
            //     } else if(this.location === this.sequenceDiffEvents2.indicesOfInflections.length) {
            //         modifiedEventIndex = this.sequenceDiffEvents2.length() - this.sequenceDiffEvents2.indicesOfInflections[this.sequenceDiffEvents2.indicesOfInflections.length - 1] - 2;
            //     } else modifiedEventIndex = 0;
            // } else if(nbEventsModified === TWO_CURVEXT_EVENTS_DISAPPEAR) {
            //     console.log("Error when computing smallest interval. Assign arbitrarily interval to 0.");
            //     if(this.sequenceDiffEvents1.indicesOfInflections.length === 0 || this.location === 0) {
            //         modifiedEventIndex = 1;
            //     } else if(this.location === this.sequenceDiffEvents1.indicesOfInflections.length) {
            //         modifiedEventIndex = this.sequenceDiffEvents1.length() - this.sequenceDiffEvents1.indicesOfInflections[this.sequenceDiffEvents1.indicesOfInflections.length - 1] - 2;
            //     } else modifiedEventIndex = 0;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "analyzeIntervalVariations", "Incorrect number of modified differential events.");
            error.logMessageToConsole();
        }
        return modifiedEventIndex;
    };
    return LocalizerOfCurvatureExtrema;
}(LocalizerOfDifferentialEvents));
exports.LocalizerOfCurvatureExtrema = LocalizerOfCurvatureExtrema;
var LocalizerOfCurvatureExtremaAppearing = /** @class */ (function (_super) {
    __extends(LocalizerOfCurvatureExtremaAppearing, _super);
    function LocalizerOfCurvatureExtremaAppearing(sequenceDiffEvents1, sequenceDiffEvents2, indexInflection) {
        var _this = _super.call(this, sequenceDiffEvents1, sequenceDiffEvents2, indexInflection) || this;
        _this.candidateEventIndex = _this.intervalsBtwExtrema2.indexSmallestInterval(ComparatorOfSequencesDiffEvents_1.TWO_CURVEXT_EVENTS_APPEAR);
        return _this;
    }
    LocalizerOfCurvatureExtremaAppearing.prototype.locateDifferentialEvents = function () {
        this.candidateEventIndex = this.analyzeIntervalVariations(this.candidateEventIndex, ComparatorOfSequencesDiffEvents_1.TWO_CURVEXT_EVENTS_APPEAR);
        return this.assignNewEvent(this.sequenceDiffEvents2, this.candidateEventIndex);
    };
    return LocalizerOfCurvatureExtremaAppearing;
}(LocalizerOfCurvatureExtrema));
exports.LocalizerOfCurvatureExtremaAppearing = LocalizerOfCurvatureExtremaAppearing;
var LocalizerOfCurvatureExtremaDisappearing = /** @class */ (function (_super) {
    __extends(LocalizerOfCurvatureExtremaDisappearing, _super);
    function LocalizerOfCurvatureExtremaDisappearing(sequenceDiffEvents1, sequenceDiffEvents2, indexInflection) {
        var _this = _super.call(this, sequenceDiffEvents1, sequenceDiffEvents2, indexInflection) || this;
        _this.candidateEventIndex = _this.intervalsBtwExtrema1.indexSmallestInterval(ComparatorOfSequencesDiffEvents_1.TWO_CURVEXT_EVENTS_DISAPPEAR);
        return _this;
    }
    LocalizerOfCurvatureExtremaDisappearing.prototype.locateDifferentialEvents = function () {
        this.candidateEventIndex = this.analyzeIntervalVariations(this.candidateEventIndex, ComparatorOfSequencesDiffEvents_1.TWO_CURVEXT_EVENTS_DISAPPEAR);
        return this.assignNewEvent(this.sequenceDiffEvents1, this.candidateEventIndex);
    };
    return LocalizerOfCurvatureExtremaDisappearing;
}(LocalizerOfCurvatureExtrema));
exports.LocalizerOfCurvatureExtremaDisappearing = LocalizerOfCurvatureExtremaDisappearing;
var LocalizerOfInflectionInUniqueInterval = /** @class */ (function (_super) {
    __extends(LocalizerOfInflectionInUniqueInterval, _super);
    function LocalizerOfInflectionInUniqueInterval(sequenceDiffEvents1, sequenceDiffEvents2) {
        var _this = this;
        var index = NeighboringEvents_2.INITIAL_INTERV_INDEX;
        _this = _super.call(this, sequenceDiffEvents1, sequenceDiffEvents2, index) || this;
        _this.inflectionVariation = _this.sequenceDiffEvents1.indicesOfInflections.length - _this.sequenceDiffEvents2.indicesOfInflections.length;
        return _this;
    }
    LocalizerOfInflectionInUniqueInterval.prototype.analyzeIntervalVariations = function (sequenceDiffEvents) {
        var index;
        var intervalExtrema = [];
        if (sequenceDiffEvents.indicesOfInflections.length === 1) {
            if (sequenceDiffEvents.eventAt(0).order === DifferentialEvent_1.ORDER_INFLECTION) {
                intervalExtrema.push(sequenceDiffEvents.eventAt(0).location);
            }
            else if (sequenceDiffEvents.eventAt(sequenceDiffEvents.length() - 1).order === DifferentialEvent_1.ORDER_INFLECTION) {
                intervalExtrema.push(sequenceDiffEvents.eventAt(sequenceDiffEvents.length() - 1).location);
            }
            intervalExtrema.push(ComparatorOfSequencesDiffEvents_1.UPPER_BOUND_CURVE_INTERVAL - sequenceDiffEvents.eventAt(sequenceDiffEvents.indicesOfInflections[sequenceDiffEvents.indicesOfInflections.length - 1]).location);
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "analyzeIntervalVariations", "Inconsistent content of the sequence of events to identify the curve extremity where the inflection is lost.");
            error.logMessageToConsole();
        }
        if (intervalExtrema[0] > intervalExtrema[intervalExtrema.length - 1]) {
            index = sequenceDiffEvents.indicesOfInflections[sequenceDiffEvents.indicesOfInflections.length - 1];
            if (sequenceDiffEvents.length() === 1) {
                index = 1;
            }
        }
        else {
            index = 0;
        }
        return index;
    };
    return LocalizerOfInflectionInUniqueInterval;
}(LocalizerOfDifferentialEvents));
exports.LocalizerOfInflectionInUniqueInterval = LocalizerOfInflectionInUniqueInterval;
var LocalizerOfInflectionDisappearingInUniqueInterval = /** @class */ (function (_super) {
    __extends(LocalizerOfInflectionDisappearingInUniqueInterval, _super);
    function LocalizerOfInflectionDisappearingInUniqueInterval(sequenceDiffEvents1, sequenceDiffEvents2) {
        return _super.call(this, sequenceDiffEvents1, sequenceDiffEvents2) || this;
    }
    LocalizerOfInflectionDisappearingInUniqueInterval.prototype.locateDifferentialEvents = function () {
        var newEvent = new NeighboringEvents_1.NeighboringEvents();
        if (this.analyzeIntervalVariations(this.sequenceDiffEvents1) === 0 && this.inflectionVariation === 1) {
            newEvent.index = 0;
            newEvent.type = NeighboringEvents_2.NeighboringEventsType.neighboringInflectionLeftBoundary;
        }
        else if (this.analyzeIntervalVariations(this.sequenceDiffEvents1) === this.sequenceDiffEvents1.indicesOfInflections[this.sequenceDiffEvents1.indicesOfInflections.length - 1]) {
            newEvent.index = this.sequenceDiffEvents1.indicesOfInflections[this.sequenceDiffEvents1.indicesOfInflections.length - 1];
            newEvent.type = NeighboringEvents_2.NeighboringEventsType.neighboringInflectionRightBoundary;
        }
        else if (this.analyzeIntervalVariations(this.sequenceDiffEvents1) === 1 && this.sequenceDiffEvents1.length() === 1) {
            newEvent.index = 0;
            newEvent.type = NeighboringEvents_2.NeighboringEventsType.neighboringInflectionRightBoundary;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "locateDifferentialEvents", "Inconsistent index to locate an inflection into the unique interval.");
            error.logMessageToConsole();
        }
        return newEvent;
    };
    return LocalizerOfInflectionDisappearingInUniqueInterval;
}(LocalizerOfInflectionInUniqueInterval));
exports.LocalizerOfInflectionDisappearingInUniqueInterval = LocalizerOfInflectionDisappearingInUniqueInterval;
var LocalizerOfInflectionAppearingInUniqueInterval = /** @class */ (function (_super) {
    __extends(LocalizerOfInflectionAppearingInUniqueInterval, _super);
    function LocalizerOfInflectionAppearingInUniqueInterval(sequenceDiffEvents1, sequenceDiffEvents2) {
        return _super.call(this, sequenceDiffEvents1, sequenceDiffEvents2) || this;
    }
    LocalizerOfInflectionAppearingInUniqueInterval.prototype.locateDifferentialEvents = function () {
        var newEvent = new NeighboringEvents_1.NeighboringEvents();
        if (this.analyzeIntervalVariations(this.sequenceDiffEvents2) === 0 && this.inflectionVariation === -1) {
            newEvent.index = 0;
            newEvent.type = NeighboringEvents_2.NeighboringEventsType.neighboringInflectionLeftBoundary;
        }
        else if (this.analyzeIntervalVariations(this.sequenceDiffEvents2) === this.sequenceDiffEvents2.indicesOfInflections[this.sequenceDiffEvents2.indicesOfInflections.length - 1]) {
            newEvent.index = this.sequenceDiffEvents2.indicesOfInflections[this.sequenceDiffEvents2.indicesOfInflections.length - 1];
            newEvent.type = NeighboringEvents_2.NeighboringEventsType.neighboringInflectionRightBoundary;
        }
        else if (this.analyzeIntervalVariations(this.sequenceDiffEvents2) === 1 && this.sequenceDiffEvents2.length() === 1) {
            newEvent.index = 0;
            newEvent.type = NeighboringEvents_2.NeighboringEventsType.neighboringInflectionRightBoundary;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "locateDifferentialEvents", "Inconsistent index to locate an inflection into the unique interval.");
            error.logMessageToConsole();
        }
        return newEvent;
    };
    return LocalizerOfInflectionAppearingInUniqueInterval;
}(LocalizerOfInflectionInUniqueInterval));
exports.LocalizerOfInflectionAppearingInUniqueInterval = LocalizerOfInflectionAppearingInUniqueInterval;
var LocalizerOfInflectionInExtremeInterval = /** @class */ (function (_super) {
    __extends(LocalizerOfInflectionInExtremeInterval, _super);
    function LocalizerOfInflectionInExtremeInterval(sequenceDiffEvents1, sequenceDiffEvents2) {
        var _this = this;
        var index = NeighboringEvents_2.INITIAL_INTERV_INDEX;
        _this = _super.call(this, sequenceDiffEvents1, sequenceDiffEvents2, index) || this;
        _this.inflectionVariation = _this.sequenceDiffEvents1.indicesOfInflections.length - _this.sequenceDiffEvents2.indicesOfInflections.length;
        if (_this.inflectionVariation === 1 && _this.sequenceDiffEvents1.indicesOfInflections.length === 1 ||
            _this.inflectionVariation === -1 && _this.sequenceDiffEvents1.indicesOfInflections.length === 0) {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Differential event sequence inadequate for this configuration.");
            error.logMessageToConsole();
        }
        return _this;
    }
    LocalizerOfInflectionInExtremeInterval.prototype.analyzeIntervalVariations = function () {
        var index = NeighboringEvents_2.INITIAL_INTERV_INDEX;
        if (this.sequenceDiffEvents1.eventAt(0).order === DifferentialEvent_1.ORDER_INFLECTION && this.sequenceDiffEvents2.eventAt(0).order !== DifferentialEvent_1.ORDER_INFLECTION ||
            this.sequenceDiffEvents2.eventAt(0).order === DifferentialEvent_1.ORDER_INFLECTION && this.sequenceDiffEvents1.eventAt(0).order !== DifferentialEvent_1.ORDER_INFLECTION) {
            index = 0;
        }
        else if (this.sequenceDiffEvents1.eventAt(this.sequenceDiffEvents1.length() - 1).order === DifferentialEvent_1.ORDER_INFLECTION && this.sequenceDiffEvents2.eventAt(this.sequenceDiffEvents2.length() - 1).order !== DifferentialEvent_1.ORDER_INFLECTION) {
            index = this.sequenceDiffEvents1.indicesOfInflections[this.sequenceDiffEvents1.indicesOfInflections.length - 1];
        }
        else if (this.sequenceDiffEvents2.eventAt(this.sequenceDiffEvents2.length() - 1).order === DifferentialEvent_1.ORDER_INFLECTION && this.sequenceDiffEvents1.eventAt(this.sequenceDiffEvents1.length() - 1).order !== DifferentialEvent_1.ORDER_INFLECTION) {
            index = this.sequenceDiffEvents2.indicesOfInflections[this.sequenceDiffEvents2.indicesOfInflections.length - 1];
        }
        return index;
    };
    return LocalizerOfInflectionInExtremeInterval;
}(LocalizerOfDifferentialEvents));
exports.LocalizerOfInflectionInExtremeInterval = LocalizerOfInflectionInExtremeInterval;
var LocalizerOfInflectionAppearingInExtremeInterval = /** @class */ (function (_super) {
    __extends(LocalizerOfInflectionAppearingInExtremeInterval, _super);
    function LocalizerOfInflectionAppearingInExtremeInterval(sequenceDiffEvents1, sequenceDiffEvents2) {
        return _super.call(this, sequenceDiffEvents1, sequenceDiffEvents2) || this;
    }
    LocalizerOfInflectionAppearingInExtremeInterval.prototype.locateDifferentialEvents = function () {
        var newEvent = new NeighboringEvents_1.NeighboringEvents();
        if (this.analyzeIntervalVariations() === 0 && this.inflectionVariation === -1) {
            newEvent.index = 0;
            newEvent.type = NeighboringEvents_2.NeighboringEventsType.neighboringInflectionLeftBoundary;
        }
        else if (this.analyzeIntervalVariations() === this.sequenceDiffEvents2.indicesOfInflections[this.sequenceDiffEvents2.indicesOfInflections.length - 1]) {
            newEvent.index = this.sequenceDiffEvents2.indicesOfInflections[this.sequenceDiffEvents2.indicesOfInflections.length - 1];
            newEvent.type = NeighboringEvents_2.NeighboringEventsType.neighboringInflectionRightBoundary;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "locateDifferentialEvents", "Inconsistent index to locate an inflection into an extreme interval.");
            error.logMessageToConsole();
        }
        return newEvent;
    };
    return LocalizerOfInflectionAppearingInExtremeInterval;
}(LocalizerOfInflectionInExtremeInterval));
exports.LocalizerOfInflectionAppearingInExtremeInterval = LocalizerOfInflectionAppearingInExtremeInterval;
var LocalizerOfInflectionDisappearingInExtremeInterval = /** @class */ (function (_super) {
    __extends(LocalizerOfInflectionDisappearingInExtremeInterval, _super);
    function LocalizerOfInflectionDisappearingInExtremeInterval(sequenceDiffEvents1, sequenceDiffEvents2) {
        return _super.call(this, sequenceDiffEvents1, sequenceDiffEvents2) || this;
    }
    LocalizerOfInflectionDisappearingInExtremeInterval.prototype.locateDifferentialEvents = function () {
        var newEvent = new NeighboringEvents_1.NeighboringEvents();
        if (this.analyzeIntervalVariations() === 0 && this.inflectionVariation === 1) {
            newEvent.index = 0;
            newEvent.type = NeighboringEvents_2.NeighboringEventsType.neighboringInflectionLeftBoundary;
        }
        else if (this.analyzeIntervalVariations() === this.sequenceDiffEvents1.indicesOfInflections[this.sequenceDiffEvents1.indicesOfInflections.length - 1]) {
            newEvent.index = this.sequenceDiffEvents1.indicesOfInflections[this.sequenceDiffEvents1.indicesOfInflections.length - 1];
            newEvent.type = NeighboringEvents_2.NeighboringEventsType.neighboringInflectionRightBoundary;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "locateDifferentialEvents", " Inconsistent index to locate an inflection into an extreme interval.");
            error.logMessageToConsole();
        }
        return newEvent;
    };
    return LocalizerOfInflectionDisappearingInExtremeInterval;
}(LocalizerOfInflectionInExtremeInterval));
exports.LocalizerOfInflectionDisappearingInExtremeInterval = LocalizerOfInflectionDisappearingInExtremeInterval;
var LocalizerOfInflectionsAdjacentCurvatureExtremum = /** @class */ (function (_super) {
    __extends(LocalizerOfInflectionsAdjacentCurvatureExtremum, _super);
    function LocalizerOfInflectionsAdjacentCurvatureExtremum(sequenceDiffEvents1, sequenceDiffEvents2) {
        var _this = this;
        var index = NeighboringEvents_2.INITIAL_INTERV_INDEX;
        _this = _super.call(this, sequenceDiffEvents1, sequenceDiffEvents2, index) || this;
        _this.indicesOscillations1 = _this.sequenceDiffEvents1.generateIndicesOscillations();
        _this.indicesOscillations2 = _this.sequenceDiffEvents2.generateIndicesOscillations();
        _this.inflectionVariation = _this.sequenceDiffEvents1.indicesOfInflections.length - _this.sequenceDiffEvents2.indicesOfInflections.length;
        return _this;
    }
    LocalizerOfInflectionsAdjacentCurvatureExtremum.prototype.analyzeIntervalVariations = function (indicesOscillations) {
        var intervalEvent = [];
        if (indicesOscillations.length > 0) {
            if (indicesOscillations[0] !== 0)
                intervalEvent.push(indicesOscillations[0]);
            for (var j = 0; j < indicesOscillations.length - 1; j += 1) {
                intervalEvent.push(indicesOscillations[j + 1] - indicesOscillations[j]);
            }
        }
        this.checkIndexLocation();
        return intervalEvent;
    };
    LocalizerOfInflectionsAdjacentCurvatureExtremum.prototype.checkIndexLocation = function () {
        var nbModifedEvents = this.sequenceDiffEvents2.indicesOfInflections.length - this.sequenceDiffEvents1.indicesOfInflections.length;
        if (nbModifedEvents === ComparatorOfSequencesDiffEvents_1.TWO_INFLECTIONS_EVENTS_APPEAR) {
            if ((this.indicesOscillations2.length - this.indicesOscillations1.length === 1 && this.indicesOscillations1.length !== 0) ||
                (this.indicesOscillations2.length - this.indicesOscillations1.length === 2 && this.sequenceDiffEvents2.length() - this.sequenceDiffEvents1.length() !== 2) ||
                (this.indicesOscillations2.length - this.indicesOscillations1.length === 3 && this.indicesOscillations1.length > 0)) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkIndexLocation", "Inconsistency of reference type event that does not coincide with oscillation removal.");
                error.logMessageToConsole();
            }
        }
        else if (nbModifedEvents === ComparatorOfSequencesDiffEvents_1.TWO_INFLECTIONS_EVENTS_DISAPPEAR) {
            if ((this.indicesOscillations2.length - this.indicesOscillations1.length === -1 && this.indicesOscillations2.length !== 0) ||
                (this.indicesOscillations2.length - this.indicesOscillations1.length === -2 && this.sequenceDiffEvents2.length() - this.sequenceDiffEvents1.length() !== -2) ||
                (this.indicesOscillations2.length - this.indicesOscillations1.length === -3 && this.indicesOscillations2.length > 0)) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkIndexLocation", "Inconsistency of reference type event that does not coincide with oscillation removal.");
                error.logMessageToConsole();
            }
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkIndexLocation", "Inconsistent variation of number of differential events.");
            error.logMessageToConsole();
        }
    };
    LocalizerOfInflectionsAdjacentCurvatureExtremum.prototype.assignNewEvent = function (sequenceDiffEvents, nbModifedEvents) {
        var newEvent = new NeighboringEvents_1.NeighboringEvents();
        var intervalEvent1 = [];
        var intervalEvent2 = [];
        var indicesOscillations1 = [];
        var indicesOscillations2 = [];
        if (nbModifedEvents === ComparatorOfSequencesDiffEvents_1.TWO_INFLECTIONS_EVENTS_DISAPPEAR) {
            intervalEvent1 = this.analyzeIntervalVariations(this.indicesOscillations1);
            intervalEvent2 = this.analyzeIntervalVariations(this.indicesOscillations2);
            indicesOscillations1 = this.indicesOscillations1;
            indicesOscillations2 = this.indicesOscillations2;
        }
        else if (nbModifedEvents === ComparatorOfSequencesDiffEvents_1.TWO_INFLECTIONS_EVENTS_APPEAR) {
            intervalEvent1 = this.analyzeIntervalVariations(this.indicesOscillations2);
            intervalEvent2 = this.analyzeIntervalVariations(this.indicesOscillations1);
            indicesOscillations1 = this.indicesOscillations2;
            indicesOscillations2 = this.indicesOscillations1;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "assignNewEvent", "Incorrect number of modified differential events.");
            error.logMessageToConsole();
        }
        if (indicesOscillations1.length > 0) {
            newEvent.type = NeighboringEvents_2.NeighboringEventsType.neighboringInflectionsCurvatureExtremum;
            if (indicesOscillations2.length === 0) {
                if (indicesOscillations1.length === 1) {
                    newEvent.index = indicesOscillations1[0];
                }
                else if (indicesOscillations1.length === 2) {
                    if (sequenceDiffEvents.eventAt(0).order === DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM) {
                        newEvent.index = indicesOscillations1[1];
                    }
                    else {
                        newEvent.index = indicesOscillations1[0];
                    }
                }
                else if (indicesOscillations1.length === 3) {
                    newEvent.index = indicesOscillations1[1];
                }
            }
            else {
                newEvent.index = NeighboringEvents_2.INITIAL_INTERV_INDEX;
                for (var k = 0; k < intervalEvent2.length; k += 1) {
                    if (intervalEvent1[k] !== intervalEvent2[k]) {
                        newEvent.index = indicesOscillations1[k];
                    }
                }
                if (indicesOscillations1.length - indicesOscillations2.length === 2 && newEvent.index === NeighboringEvents_2.INITIAL_INTERV_INDEX) {
                    newEvent.index = indicesOscillations1[indicesOscillations1.length - 1];
                }
            }
        }
        return newEvent;
    };
    return LocalizerOfInflectionsAdjacentCurvatureExtremum;
}(LocalizerOfDifferentialEvents));
exports.LocalizerOfInflectionsAdjacentCurvatureExtremum = LocalizerOfInflectionsAdjacentCurvatureExtremum;
var LocalizerOfInflectionsDisappearingInAdjacentCurvatureExtremum = /** @class */ (function (_super) {
    __extends(LocalizerOfInflectionsDisappearingInAdjacentCurvatureExtremum, _super);
    function LocalizerOfInflectionsDisappearingInAdjacentCurvatureExtremum(sequenceDiffEvents1, sequenceDiffEvents2) {
        return _super.call(this, sequenceDiffEvents1, sequenceDiffEvents2) || this;
    }
    LocalizerOfInflectionsDisappearingInAdjacentCurvatureExtremum.prototype.locateDifferentialEvents = function () {
        return this.assignNewEvent(this.sequenceDiffEvents2, ComparatorOfSequencesDiffEvents_1.TWO_INFLECTIONS_EVENTS_DISAPPEAR);
    };
    return LocalizerOfInflectionsDisappearingInAdjacentCurvatureExtremum;
}(LocalizerOfInflectionsAdjacentCurvatureExtremum));
exports.LocalizerOfInflectionsDisappearingInAdjacentCurvatureExtremum = LocalizerOfInflectionsDisappearingInAdjacentCurvatureExtremum;
var LocalizerOfInflectionsAppearingInAdjacentCurvatureExtremum = /** @class */ (function (_super) {
    __extends(LocalizerOfInflectionsAppearingInAdjacentCurvatureExtremum, _super);
    function LocalizerOfInflectionsAppearingInAdjacentCurvatureExtremum(sequenceDiffEvents1, sequenceDiffEvents2) {
        return _super.call(this, sequenceDiffEvents1, sequenceDiffEvents2) || this;
    }
    LocalizerOfInflectionsAppearingInAdjacentCurvatureExtremum.prototype.locateDifferentialEvents = function () {
        return this.assignNewEvent(this.sequenceDiffEvents1, ComparatorOfSequencesDiffEvents_1.TWO_INFLECTIONS_EVENTS_APPEAR);
    };
    return LocalizerOfInflectionsAppearingInAdjacentCurvatureExtremum;
}(LocalizerOfInflectionsAdjacentCurvatureExtremum));
exports.LocalizerOfInflectionsAppearingInAdjacentCurvatureExtremum = LocalizerOfInflectionsAppearingInAdjacentCurvatureExtremum;


/***/ }),

/***/ "./src/sequenceOfDifferentialEvents/MaxIntervalVariation.ts":
/*!******************************************************************!*\
  !*** ./src/sequenceOfDifferentialEvents/MaxIntervalVariation.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MaxIntervalVariation = void 0;
/* named constants */
var NeighboringEvents_1 = __webpack_require__(/*! ./NeighboringEvents */ "./src/sequenceOfDifferentialEvents/NeighboringEvents.ts");
var MaxIntervalVariation = /** @class */ (function () {
    function MaxIntervalVariation(intervalIndex, value) {
        if (intervalIndex !== undefined) {
            this._index = intervalIndex;
        }
        else {
            this._index = NeighboringEvents_1.INITIAL_INTERV_INDEX;
        }
        if (value !== undefined) {
            this._value = value;
        }
        else {
            this._value = 0.0;
        }
    }
    Object.defineProperty(MaxIntervalVariation.prototype, "index", {
        get: function () {
            return this._index;
        },
        set: function (intervalIndex) {
            this._index = intervalIndex;
            return;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MaxIntervalVariation.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
            return;
        },
        enumerable: false,
        configurable: true
    });
    return MaxIntervalVariation;
}());
exports.MaxIntervalVariation = MaxIntervalVariation;


/***/ }),

/***/ "./src/sequenceOfDifferentialEvents/ModifiedDifferentialEvents.ts":
/*!************************************************************************!*\
  !*** ./src/sequenceOfDifferentialEvents/ModifiedDifferentialEvents.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ModifiedInflectionEvents = exports.ModifiedCurvatureEvents = exports.ModifiedDifferentialEvents = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var DifferentialEvent_1 = __webpack_require__(/*! ./DifferentialEvent */ "./src/sequenceOfDifferentialEvents/DifferentialEvent.ts");
var ModifiedDifferentialEvents = /** @class */ (function () {
    function ModifiedDifferentialEvents(order) {
        this.order = order;
        this.checkOrder();
    }
    ModifiedDifferentialEvents.prototype.checkOrder = function () {
        if (this.order !== DifferentialEvent_1.ORDER_INFLECTION && this.order !== DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkOrder", "Inconsistent value of differential event order.");
            error.logMessageToConsole();
        }
    };
    return ModifiedDifferentialEvents;
}());
exports.ModifiedDifferentialEvents = ModifiedDifferentialEvents;
/**
* Characterization of modified differential events of type curvature extrema within a sequence of differential events.
* It applies to configurations where inflections are invariant (constant number) when a curve gets modified.
* The events are located within a sequence of differential events using the index of an inflection to identify the interval between two successive inflections
*/
var ModifiedCurvatureEvents = /** @class */ (function (_super) {
    __extends(ModifiedCurvatureEvents, _super);
    /**
     * instantiates a ModifiedCurvatureEvents that is located within a sequence of differential events
    * @param indexInflection index of the inflection defining the interval between inflection where the number of curvature extrema is modified
    * @param nbEventsModified number of curvature extrema appearing (nbEventsModified > 0) or disappearing (nbEventsModified < 0) between
    * two successive inflections defined by indexInflection.
    * @throws errors if the number of modified event is null
    */
    function ModifiedCurvatureEvents(indexInflection, nbEventsModified) {
        var _this = _super.call(this, DifferentialEvent_1.ORDER_CURVATURE_EXTREMUM) || this;
        _this._indexInflection = indexInflection;
        _this._nbEvents = nbEventsModified;
        if (_this._nbEvents === 0) {
            var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, "constructor", "The number of modified differential events is set to 0, which is incorrect.");
            warning.logMessageToConsole();
        }
        return _this;
    }
    Object.defineProperty(ModifiedCurvatureEvents.prototype, "indexInflection", {
        get: function () {
            return this._indexInflection;
        },
        set: function (indexInflection) {
            this._indexInflection = indexInflection;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ModifiedCurvatureEvents.prototype, "nbEvents", {
        get: function () {
            return this._nbEvents;
        },
        set: function (nbEventsModified) {
            this._nbEvents = nbEventsModified;
        },
        enumerable: false,
        configurable: true
    });
    return ModifiedCurvatureEvents;
}(ModifiedDifferentialEvents));
exports.ModifiedCurvatureEvents = ModifiedCurvatureEvents;
/**
* Characterization of modified differential events of type inflections within a sequence of differential events.
* It applies to configurations where curvature extrema are invariant (constant number) when a curve gets modified.
* The events are located within a sequence of differential events using the index of a curvature extremum to identify
* either the interval between two successive inflections or an extreme interval (in case of open curves)
*/
var ModifiedInflectionEvents = /** @class */ (function (_super) {
    __extends(ModifiedInflectionEvents, _super);
    /**
     * instantiates a ModifiedInflectionEvents that is located within a sequence of differential events
    * @param indexCurvatureEx index of the curvature ext defining the intervals where the number of inflections is modified
    * @param nbEventsModified number of inflections appearing (nbEventsModified > 0) or disappearing (nbEventsModified < 0) that
    * are adjacent to the event defined by indexCurvatureEx.
    * @throws errors if the number of modified event is null
    */
    function ModifiedInflectionEvents(indexCurvatureEx, nbEventsModified) {
        var _this = _super.call(this, DifferentialEvent_1.ORDER_INFLECTION) || this;
        _this._indexCurvatureEx = indexCurvatureEx;
        _this._nbEvents = nbEventsModified;
        if (_this._nbEvents === 0) {
            var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, "constructor", "The number of modified differential events is set to 0, which is incorrect.");
            warning.logMessageToConsole();
        }
        return _this;
    }
    Object.defineProperty(ModifiedInflectionEvents.prototype, "indexCurvatureEx", {
        get: function () {
            return this._indexCurvatureEx;
        },
        set: function (indexCurvatureEx) {
            this._indexCurvatureEx = indexCurvatureEx;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ModifiedInflectionEvents.prototype, "nbEvents", {
        get: function () {
            return this._nbEvents;
        },
        set: function (nbEventsModified) {
            this._nbEvents = nbEventsModified;
        },
        enumerable: false,
        configurable: true
    });
    return ModifiedInflectionEvents;
}(ModifiedDifferentialEvents));
exports.ModifiedInflectionEvents = ModifiedInflectionEvents;


/***/ }),

/***/ "./src/sequenceOfDifferentialEvents/NeighboringEvents.ts":
/*!***************************************************************!*\
  !*** ./src/sequenceOfDifferentialEvents/NeighboringEvents.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NeighboringEvents = exports.INITIAL_INTERV_INDEX = exports.NeighboringEventsType = void 0;
var NeighboringEventsType;
(function (NeighboringEventsType) {
    NeighboringEventsType[NeighboringEventsType["neighboringCurExtremumLeftBoundary"] = 0] = "neighboringCurExtremumLeftBoundary";
    NeighboringEventsType[NeighboringEventsType["neighboringInflectionLeftBoundary"] = 1] = "neighboringInflectionLeftBoundary";
    NeighboringEventsType[NeighboringEventsType["neighboringCurExtremumRightBoundary"] = 2] = "neighboringCurExtremumRightBoundary";
    NeighboringEventsType[NeighboringEventsType["neighboringInflectionRightBoundary"] = 3] = "neighboringInflectionRightBoundary";
    NeighboringEventsType[NeighboringEventsType["neighboringCurvatureExtrema"] = 4] = "neighboringCurvatureExtrema";
    NeighboringEventsType[NeighboringEventsType["neighboringInflectionsCurvatureExtremum"] = 5] = "neighboringInflectionsCurvatureExtremum";
    NeighboringEventsType[NeighboringEventsType["none"] = 6] = "none";
    NeighboringEventsType[NeighboringEventsType["neighboringCurvatureExtremaAppear"] = 7] = "neighboringCurvatureExtremaAppear";
    NeighboringEventsType[NeighboringEventsType["neighboringCurvatureExtremaDisappear"] = 8] = "neighboringCurvatureExtremaDisappear";
    NeighboringEventsType[NeighboringEventsType["neighboringInflectionsCurvatureExtremumAppear"] = 9] = "neighboringInflectionsCurvatureExtremumAppear";
    NeighboringEventsType[NeighboringEventsType["neighboringInflectionsCurvatureExtremumDisappear"] = 10] = "neighboringInflectionsCurvatureExtremumDisappear";
    NeighboringEventsType[NeighboringEventsType["neighboringCurExtremumLeftBoundaryAppear"] = 11] = "neighboringCurExtremumLeftBoundaryAppear";
    NeighboringEventsType[NeighboringEventsType["neighboringCurExtremumLeftBoundaryDisappear"] = 12] = "neighboringCurExtremumLeftBoundaryDisappear";
    NeighboringEventsType[NeighboringEventsType["neighboringCurExtremumRightBoundaryAppear"] = 13] = "neighboringCurExtremumRightBoundaryAppear";
    NeighboringEventsType[NeighboringEventsType["neighboringCurExtremumRightBoundaryDisappear"] = 14] = "neighboringCurExtremumRightBoundaryDisappear";
    NeighboringEventsType[NeighboringEventsType["neighboringInflectionLeftBoundaryAppear"] = 15] = "neighboringInflectionLeftBoundaryAppear";
    NeighboringEventsType[NeighboringEventsType["neighboringInflectionLeftBoundaryDisappear"] = 16] = "neighboringInflectionLeftBoundaryDisappear";
    NeighboringEventsType[NeighboringEventsType["neighboringInflectionRightBoundaryAppear"] = 17] = "neighboringInflectionRightBoundaryAppear";
    NeighboringEventsType[NeighboringEventsType["neighboringInflectionRightBoundaryDisappear"] = 18] = "neighboringInflectionRightBoundaryDisappear";
    NeighboringEventsType[NeighboringEventsType["neighboringCurvExtremumLeftBoundaryDisappearInflectionAppear"] = 19] = "neighboringCurvExtremumLeftBoundaryDisappearInflectionAppear";
    NeighboringEventsType[NeighboringEventsType["neighboringInflectionLeftBoundaryDisappearCurExtremumAppear"] = 20] = "neighboringInflectionLeftBoundaryDisappearCurExtremumAppear";
    NeighboringEventsType[NeighboringEventsType["neighboringCurvExtremumRightBoundaryDisappearInflectionAppear"] = 21] = "neighboringCurvExtremumRightBoundaryDisappearInflectionAppear";
    NeighboringEventsType[NeighboringEventsType["neighboringInflectionRightBoundaryDisappearCurExtremumAppear"] = 22] = "neighboringInflectionRightBoundaryDisappearCurExtremumAppear";
    NeighboringEventsType[NeighboringEventsType["moreThanOneEvent"] = 23] = "moreThanOneEvent";
})(NeighboringEventsType = exports.NeighboringEventsType || (exports.NeighboringEventsType = {}));
exports.INITIAL_INTERV_INDEX = -1;
var NeighboringEvents = /** @class */ (function () {
    /**
     * All configurations of events that can appear or disappear when comparing two consecutive sequences of differential events.
     * The configurations are elementary ones enumerated in NeighboringEventsType.
     * @param eventType Type of differential events enumerated in NeighboringEventsType
     * @param indexInSequence Location of interval where the events appear in the sequence of differential events.
     * It is defined by the index of the index of an inflection as right bound of the interval betwwen [0,sequence.length] and initialized
     * to INITIAL_INTERV_INDEX, i.e., -1, if not explicitly defined.
     */
    function NeighboringEvents(eventType, indexInSequence) {
        if (eventType !== undefined) {
            this._type = eventType;
        }
        else {
            this._type = NeighboringEventsType.none;
        }
        if (indexInSequence !== undefined) {
            this._index = indexInSequence;
        }
        else {
            this._index = exports.INITIAL_INTERV_INDEX;
        }
    }
    Object.defineProperty(NeighboringEvents.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (eventType) {
            this._type = eventType;
            return;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NeighboringEvents.prototype, "index", {
        get: function () {
            return this._index;
        },
        set: function (indexInSequence) {
            this._index = indexInSequence;
            return;
        },
        enumerable: false,
        configurable: true
    });
    NeighboringEvents.prototype.clear = function () {
        this._index = exports.INITIAL_INTERV_INDEX;
        this._type = NeighboringEventsType.none;
    };
    return NeighboringEvents;
}());
exports.NeighboringEvents = NeighboringEvents;


/***/ }),

/***/ "./src/sequenceOfDifferentialEvents/SequenceOfDifferentialEvents.ts":
/*!**************************************************************************!*\
  !*** ./src/sequenceOfDifferentialEvents/SequenceOfDifferentialEvents.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deepCopySequenceOfDifferentialEvents = exports.SequenceOfDifferentialEvents = exports.MIN_NB_INTERVALS_BEFORE_AFTER_INFL_2CEXT_REMOVED = exports.MIN_NB_INTERVALS_BTW_INFL_2CEXT_ADDED = exports.MIN_NB_INTERVALS_BTW_INFL_2CEXT_REMOVED = void 0;
var DifferentialEvent_1 = __webpack_require__(/*! ./DifferentialEvent */ "./src/sequenceOfDifferentialEvents/DifferentialEvent.ts");
var SequenceOfIntervals_1 = __webpack_require__(/*! ./SequenceOfIntervals */ "./src/sequenceOfDifferentialEvents/SequenceOfIntervals.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
/* named constants */
var DifferentialEvent_2 = __webpack_require__(/*! ./DifferentialEvent */ "./src/sequenceOfDifferentialEvents/DifferentialEvent.ts");
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ./ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
/*
* Set up a sequence of differential events as part of the characterization of a curve shape space
*/
exports.MIN_NB_INTERVALS_BTW_INFL_2CEXT_REMOVED = 4;
exports.MIN_NB_INTERVALS_BTW_INFL_2CEXT_ADDED = 2;
exports.MIN_NB_INTERVALS_BEFORE_AFTER_INFL_2CEXT_REMOVED = 3;
var SequenceOfDifferentialEvents = /** @class */ (function () {
    /**
     * Instantiates a sequence of differential events using optionally:
     * @param curvatureExtrema  a strictly increasing sequence of locations of curvature extrema along a curve
     * @param inflections a strictly increasing sequence of locations of inflections along a curve
     * @throws Errors if:
     *          a sequence of inflections is provided only and contains more than one inflection (a sequence cannot contain two or more consecutive inflections)
     *          the sequence of curvature extrema supplied is not strictly increasing
     *          the sequence terminates with more two or more successive inflections
     *          the sequence instantiated has a length that is not equal to the sum of the lengthes of curvatureExtrema.length + inflections.length
     *          type or location inconsistecies are detected in the sequence instantiated or modified
     */
    function SequenceOfDifferentialEvents(curvatureExtrema, inflections) {
        var e_1, _a;
        this._sequence = [];
        if (curvatureExtrema !== undefined && inflections === undefined) {
            try {
                for (var curvatureExtrema_1 = __values(curvatureExtrema), curvatureExtrema_1_1 = curvatureExtrema_1.next(); !curvatureExtrema_1_1.done; curvatureExtrema_1_1 = curvatureExtrema_1.next()) {
                    var curvatExtremum = curvatureExtrema_1_1.value;
                    var event_1 = new DifferentialEvent_1.CurvatureExtremumEvent(curvatExtremum);
                    this._sequence.push(event_1);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (curvatureExtrema_1_1 && !curvatureExtrema_1_1.done && (_a = curvatureExtrema_1.return)) _a.call(curvatureExtrema_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else if (curvatureExtrema === undefined && inflections !== undefined) {
            if (inflections.length > 1) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "constructor", "Unable to generate a sequence of differential events: too many consecutive inflections.");
                error.logMessageToConsole();
            }
            else {
                var event_2 = new DifferentialEvent_1.InflectionEvent(inflections[0]);
                this._sequence.push(event_2);
            }
        }
        else if (curvatureExtrema !== undefined && inflections !== undefined) {
            this.insertEvents(curvatureExtrema, inflections);
        }
        this._indicesOfInflections = this.generateIndicesInflection();
    }
    Object.defineProperty(SequenceOfDifferentialEvents.prototype, "event", {
        set: function (event) {
            this._sequence.push(event);
            this.checkSequenceConsistency();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SequenceOfDifferentialEvents.prototype, "sequence", {
        get: function () {
            return this._sequence;
        },
        set: function (sequence) {
            this._sequence = sequence.slice();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SequenceOfDifferentialEvents.prototype, "indicesOfInflections", {
        get: function () {
            return this._indicesOfInflections;
        },
        set: function (indicesOfInflections) {
            this._indicesOfInflections = indicesOfInflections.slice();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SequenceOfDifferentialEvents.prototype, "lastEvent", {
        get: function () {
            var event;
            if (this._sequence[this._sequence.length - 1] !== undefined) {
                event = this._sequence[this._sequence.length - 1];
                this._sequence.pop();
                return event;
            }
            else {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "lastEvent", "Cannot get event because the sequence is empty.");
                error.logMessageToConsole();
            }
        },
        enumerable: false,
        configurable: true
    });
    SequenceOfDifferentialEvents.prototype.length = function () {
        return this._sequence.length;
    };
    SequenceOfDifferentialEvents.prototype.eventAt = function (i) {
        if (i >= 0 && i < this._sequence.length) {
            return this._sequence[i].clone();
        }
        else {
            return undefined;
        }
    };
    SequenceOfDifferentialEvents.prototype.insertAt = function (event, index) {
        this._sequence.splice(index, 0, event);
        this._indicesOfInflections = this.generateIndicesInflection();
        this.checkSequenceConsistency();
    };
    SequenceOfDifferentialEvents.prototype.removeAt = function (index) {
        this._sequence.splice(index, 1);
        this._indicesOfInflections = this.generateIndicesInflection();
        this.checkSequenceConsistency();
    };
    SequenceOfDifferentialEvents.prototype.nbInflections = function () {
        var nbInflections = 0;
        this._sequence.forEach(function (element) {
            if (element.order === DifferentialEvent_2.ORDER_INFLECTION) {
                nbInflections += 1;
            }
        });
        return nbInflections;
    };
    SequenceOfDifferentialEvents.prototype.nbCurvatureExtrema = function () {
        var nbCurvatureExtrema = 0;
        this._sequence.forEach(function (element) {
            if (element.order === DifferentialEvent_2.ORDER_CURVATURE_EXTREMUM) {
                nbCurvatureExtrema += 1;
            }
        });
        return nbCurvatureExtrema;
    };
    SequenceOfDifferentialEvents.prototype.generateIndicesInflection = function () {
        var inflectionIndices = [];
        this._sequence.forEach(function (element, index) {
            if (element.order === DifferentialEvent_2.ORDER_INFLECTION) {
                inflectionIndices.push(index);
            }
        });
        return inflectionIndices;
    };
    SequenceOfDifferentialEvents.prototype.generateIndicesOscillations = function () {
        var e_2, _a;
        var oscillationIndices = [];
        try {
            for (var _b = __values(this._indicesOfInflections), _c = _b.next(); !_c.done; _c = _b.next()) {
                var index = _c.value;
                if (this._sequence.length > index + 2 &&
                    this._sequence[index + 1].order === DifferentialEvent_2.ORDER_CURVATURE_EXTREMUM && this._sequence[index + 2].order === DifferentialEvent_2.ORDER_INFLECTION) {
                    oscillationIndices.push(index + 1);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return oscillationIndices;
    };
    SequenceOfDifferentialEvents.prototype.insertEvents = function (curvatureExtrema, inflections) {
        this._sequence = [];
        var j = 0;
        var currentLocExtrema = 0.0;
        var indexExtrema = 0;
        for (var i = 0; i < curvatureExtrema.length; i += 1) {
            if (i === 0) {
                currentLocExtrema = curvatureExtrema[i];
            }
            else if (i > 0 && curvatureExtrema[i] > currentLocExtrema) {
                currentLocExtrema = curvatureExtrema[i - 1];
            }
            else {
                indexExtrema = i;
            }
            if (curvatureExtrema[i] > inflections[j]) {
                while (curvatureExtrema[i] > inflections[j]) {
                    var inflectionEvent = new DifferentialEvent_1.InflectionEvent(inflections[j]);
                    this._sequence.push(inflectionEvent);
                    j += 1;
                }
            }
            var curvatureEvent = new DifferentialEvent_1.CurvatureExtremumEvent(curvatureExtrema[i]);
            this._sequence.push(curvatureEvent);
        }
        if (j < inflections.length) {
            var inflectionEvent = new DifferentialEvent_1.InflectionEvent(inflections[j]);
            this._sequence.push(inflectionEvent);
            j += 1;
        }
        if (indexExtrema > 0) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "insertEvents", "Inconsistent sequence of differential events because the location of curvature extrema is not stricly increasing at index."
                + indexExtrema);
            error.logMessageToConsole();
        }
        if (j < inflections.length) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "insertEvents", "Inconsistent sequence of differential events that terminates with multiple inflections.");
            error.logMessageToConsole();
        }
        else if (this._sequence.length !== curvatureExtrema.length + inflections.length) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "insertEvents", "Inconsistent length of sequence of differential events.");
            error.logMessageToConsole();
        }
        this.checkSequenceConsistency();
        this._indicesOfInflections = this.generateIndicesInflection();
    };
    SequenceOfDifferentialEvents.prototype.computeIntervalsBtwCurvatureExtrema = function (indexInflection) {
        var intervalExtrema = new SequenceOfIntervals_1.SequenceOfIntervals();
        if (this._indicesOfInflections.length === 0 && this._sequence.length === 0) {
            intervalExtrema.span = ComparatorOfSequencesDiffEvents_1.CURVE_INTERVAL_SPAN;
            intervalExtrema.sequence.push(intervalExtrema.span);
        }
        else if (this._indicesOfInflections.length === 0 && this._sequence.length > 0) {
            intervalExtrema.span = ComparatorOfSequencesDiffEvents_1.CURVE_INTERVAL_SPAN;
            intervalExtrema.sequence.push(this._sequence[0].location - ComparatorOfSequencesDiffEvents_1.LOWER_BOUND_CURVE_INTERVAL);
            for (var k = 0; k < this._sequence.length - 1; k += 1) {
                intervalExtrema.sequence.push(this._sequence[k + 1].location - this._sequence[k].location);
            }
            intervalExtrema.sequence.push(ComparatorOfSequencesDiffEvents_1.UPPER_BOUND_CURVE_INTERVAL - this._sequence[this._sequence.length - 1].location);
        }
        else if (indexInflection === this._indicesOfInflections.length) {
            intervalExtrema.span = ComparatorOfSequencesDiffEvents_1.UPPER_BOUND_CURVE_INTERVAL - this._sequence[this._indicesOfInflections[indexInflection - 1]].location;
            for (var k = this._indicesOfInflections[this._indicesOfInflections.length - 1]; k < this._sequence.length - 1; k += 1) {
                intervalExtrema.sequence.push(this._sequence[k + 1].location - this._sequence[k].location);
            }
            intervalExtrema.sequence.push(ComparatorOfSequencesDiffEvents_1.UPPER_BOUND_CURVE_INTERVAL - this._sequence[this._sequence.length - 1].location);
        }
        else if (indexInflection === 0 && this._indicesOfInflections[0] > 0) {
            intervalExtrema.span = this._sequence[this._indicesOfInflections[indexInflection]].location - ComparatorOfSequencesDiffEvents_1.LOWER_BOUND_CURVE_INTERVAL;
            intervalExtrema.sequence.push(this._sequence[0].location - ComparatorOfSequencesDiffEvents_1.LOWER_BOUND_CURVE_INTERVAL);
            for (var k = 1; k < this._indicesOfInflections[indexInflection]; k += 1) {
                intervalExtrema.sequence.push(this._sequence[k].location - this._sequence[k - 1].location);
            }
            intervalExtrema.sequence.push(intervalExtrema.span - this._sequence[this._indicesOfInflections[indexInflection] - 1].location);
        }
        else if (indexInflection === 0 && this._indicesOfInflections[0] === 0) {
            intervalExtrema.span = this._sequence[this._indicesOfInflections[indexInflection]].location - ComparatorOfSequencesDiffEvents_1.LOWER_BOUND_CURVE_INTERVAL;
            intervalExtrema.sequence.push(intervalExtrema.span);
        }
        else if (this._indicesOfInflections.length > 1 && indexInflection < this._indicesOfInflections.length) {
            intervalExtrema.span = this._sequence[this._indicesOfInflections[indexInflection]].location - this._sequence[this._indicesOfInflections[indexInflection - 1]].location;
            for (var k = this._indicesOfInflections[indexInflection - 1] + 1; k < this._indicesOfInflections[indexInflection]; k += 1) {
                intervalExtrema.sequence.push(this._sequence[k].location - this._sequence[k - 1].location);
            }
            intervalExtrema.sequence.push(this._sequence[this._indicesOfInflections[indexInflection]].location - this._sequence[this._indicesOfInflections[indexInflection] - 1].location);
        }
        return intervalExtrema;
    };
    SequenceOfDifferentialEvents.prototype.checkTypeConsistency = function () {
        if (this._sequence.length === 0)
            return;
        var currentOrder = this._sequence[0].order;
        var index = 0;
        // Look for type consistency. If two successive differential events are inflections, the sequence is incorrect
        // All other configurations are valid
        for (var i = 1; i < this._sequence.length; i += 1) {
            if (currentOrder === DifferentialEvent_2.ORDER_INFLECTION && this._sequence[i].order === DifferentialEvent_2.ORDER_INFLECTION) {
                index = i;
                break;
            }
            else {
                currentOrder = this._sequence[i].order;
            }
        }
        if (index > 0) {
            var message = "Inconsistent sequence of differential events: two successive inflections at indices " + (index - 1) + " and " + index;
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkTypeConsistency", message);
            error.logMessageToConsole();
        }
    };
    SequenceOfDifferentialEvents.prototype.checkLocationConsistency = function () {
        if (this._sequence.length === 0)
            return;
        var index = 0;
        // Look for location consistency. The sequence of abscissae must be strictly increasing
        for (var i = 1; i < this._sequence.length; i += 1) {
            if (this._sequence[i].location > this._sequence[i - 1].location) {
                continue;
            }
            else {
                index = i;
                break;
            }
        }
        if (index > 0) {
            var message = "Inconsistent sequence of differential events: two successive events have non strictly increasing abscissa at indices " +
                (index - 1) + " and " + index + " with values " + this._sequence[index - 1].location + " and " + this._sequence[index].location;
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkLocationConsistency", message);
            error.logMessageToConsole();
        }
    };
    SequenceOfDifferentialEvents.prototype.checkSequenceConsistency = function () {
        this.checkTypeConsistency();
        this.checkLocationConsistency();
    };
    SequenceOfDifferentialEvents.prototype.checkConsistencyIntervalBtwInflections = function (modifiedEvent) {
        var inflectionIndex = modifiedEvent.indexInflection;
        var nbModifiedEvents = modifiedEvent.nbEvents;
        if (this._indicesOfInflections.length > 2) {
            if (inflectionIndex > 0) {
                if (nbModifiedEvents === ComparatorOfSequencesDiffEvents_1.TWO_CURVEXT_EVENTS_APPEAR && this._indicesOfInflections[inflectionIndex] - this._indicesOfInflections[inflectionIndex - 1] < exports.MIN_NB_INTERVALS_BTW_INFL_2CEXT_REMOVED) {
                    /* JCL A minimum of four intervals is required to obtain a meaningful loss of curvature extrema */
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkConsistencyIntervalBtwInflections", "Inconsistent number of curvature extrema in the current interval of inflections. Number too small for curvature extrema removal.");
                    error.logMessageToConsole();
                }
                else if (nbModifiedEvents === ComparatorOfSequencesDiffEvents_1.TWO_CURVEXT_EVENTS_DISAPPEAR && this._indicesOfInflections[inflectionIndex] - this._indicesOfInflections[inflectionIndex - 1] < exports.MIN_NB_INTERVALS_BTW_INFL_2CEXT_ADDED) {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkConsistencyIntervalBtwInflections", "Inconsistent number of curvature extrema in the current interval of inflections. Number too small for curvature extrema insertion.");
                    error.logMessageToConsole();
                }
            }
        }
        else if ((inflectionIndex === 0 || inflectionIndex === this._indicesOfInflections.length) && this._indicesOfInflections.length > 0) {
            if (nbModifiedEvents === ComparatorOfSequencesDiffEvents_1.TWO_CURVEXT_EVENTS_APPEAR && inflectionIndex === 0 && this._indicesOfInflections[inflectionIndex] < exports.MIN_NB_INTERVALS_BEFORE_AFTER_INFL_2CEXT_REMOVED) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkConsistencyIntervalBtwInflections", "Inconsistent number of curvature extrema in the first interval of inflections. Number too small.");
                error.logMessageToConsole();
            }
            else if (nbModifiedEvents === ComparatorOfSequencesDiffEvents_1.TWO_CURVEXT_EVENTS_APPEAR && inflectionIndex === this._indicesOfInflections.length && this._indicesOfInflections.length - this._indicesOfInflections[inflectionIndex - 1] < exports.MIN_NB_INTERVALS_BEFORE_AFTER_INFL_2CEXT_REMOVED) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkConsistencyIntervalBtwInflections", "Inconsistent number of curvature extrema in the last interval of inflections. Number too small.");
                error.logMessageToConsole();
            }
        }
    };
    SequenceOfDifferentialEvents.prototype.clone = function () {
        var sequence = new SequenceOfDifferentialEvents();
        for (var event_3 = 0; event_3 < this._sequence.length; event_3++) {
            sequence.insertAt(this.eventAt(event_3), event_3);
        }
        sequence._indicesOfInflections = sequence.generateIndicesInflection();
        return sequence;
    };
    SequenceOfDifferentialEvents.prototype.clear = function () {
        this._sequence = [];
        this._indicesOfInflections = this.generateIndicesInflection();
    };
    return SequenceOfDifferentialEvents;
}());
exports.SequenceOfDifferentialEvents = SequenceOfDifferentialEvents;
function deepCopySequenceOfDifferentialEvents(sequenceDifEvents) {
    var sequence = new SequenceOfDifferentialEvents();
    sequence.sequence = sequenceDifEvents.sequence;
    sequence.indicesOfInflections = sequenceDifEvents.indicesOfInflections;
    return sequence;
}
exports.deepCopySequenceOfDifferentialEvents = deepCopySequenceOfDifferentialEvents;


/***/ }),

/***/ "./src/sequenceOfDifferentialEvents/SequenceOfIntervals.ts":
/*!*****************************************************************!*\
  !*** ./src/sequenceOfDifferentialEvents/SequenceOfIntervals.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SequenceOfIntervals = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
/* named constants */
var ComparatorOfSequencesDiffEvents_1 = __webpack_require__(/*! ./ComparatorOfSequencesDiffEvents */ "./src/sequenceOfDifferentialEvents/ComparatorOfSequencesDiffEvents.ts");
/* named constants */
var NeighboringEvents_1 = __webpack_require__(/*! ./NeighboringEvents */ "./src/sequenceOfDifferentialEvents/NeighboringEvents.ts");
var SequenceOfIntervals = /** @class */ (function () {
    /**
     * Instantiates a sequence of adjacents intervals whose width is defined by span.
     * @param span the width of the interval sequence
     * @param sequence the sequence of interval width whose sum equals span
     */
    function SequenceOfIntervals(span, sequence) {
        if (span !== undefined) {
            this._span = span;
        }
        else {
            this._span = 0.0;
        }
        if (sequence !== undefined) {
            this._sequence = sequence;
        }
        else {
            this._sequence = [];
        }
    }
    Object.defineProperty(SequenceOfIntervals.prototype, "span", {
        get: function () {
            return this._span;
        },
        set: function (span) {
            this._span = span;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SequenceOfIntervals.prototype, "nbEvents", {
        set: function (sequence) {
            this._sequence = sequence;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SequenceOfIntervals.prototype, "sequence", {
        get: function () {
            return this._sequence;
        },
        enumerable: false,
        configurable: true
    });
    SequenceOfIntervals.prototype.indexSmallestInterval = function (nbEvents) {
        var e_1, _a;
        var candidateEventIndex = NeighboringEvents_1.INITIAL_INTERV_INDEX;
        var ratio = [];
        if ((nbEvents === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_APPEAR_IN_EXTREME_INTERVAL || nbEvents === ComparatorOfSequencesDiffEvents_1.ONE_CURVEXT_EVENT_DISAPPEAR_IN_EXTREME_INTERVAL) && this._sequence.length > 1) {
            /* JCL Look at first and last intervals only. Other intervals add noise to get a consistent candidate interval */
            ratio.push(this._sequence[0] / this._span);
            ratio.push(this._sequence[this._sequence.length - 1] / this._span);
            if (ratio[0] < ratio[1])
                candidateEventIndex = 0;
            else
                candidateEventIndex = this._sequence.length - 1;
        }
        else if ((nbEvents === ComparatorOfSequencesDiffEvents_1.TWO_CURVEXT_EVENTS_APPEAR || nbEvents === ComparatorOfSequencesDiffEvents_1.TWO_CURVEXT_EVENTS_DISAPPEAR) && this._sequence.length > 2) {
            try {
                for (var _b = __values(this._sequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var interval = _c.value;
                    ratio.push(interval / this._span);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            var mappedRatio = ratio.map(function (location, i) {
                return { index: i, value: location };
            });
            mappedRatio.sort(function (a, b) {
                if (a.value > b.value) {
                    return 1;
                }
                if (a.value < b.value) {
                    return -1;
                }
                return 0;
            });
            candidateEventIndex = mappedRatio[0].index;
            /* JCL Take into account the optional number of events  */
            /* if the number of events removed equals 2 smallest intervals at both extremities can be removed because */
            /* they are of different types of there no event if it is a free extremity of the curve */
            if (mappedRatio[0].index === 0 || mappedRatio[0].index === this._sequence.length - 1) {
                candidateEventIndex = mappedRatio[1].index;
                if (mappedRatio[1].index === 0 || mappedRatio[1].index === this._sequence.length - 1) {
                    candidateEventIndex = mappedRatio[2].index;
                }
            }
        }
        else {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "indexSmallestInterval", "Inconsistent number of events (Must be a positive number not larger than two) or inconsistent number of intervals between curvature extrema.");
            warning.logMessageToConsole();
        }
        return candidateEventIndex;
    };
    return SequenceOfIntervals;
}());
exports.SequenceOfIntervals = SequenceOfIntervals;


/***/ }),

/***/ "./src/shapeNavigableCurve/CurveCategory.ts":
/*!**************************************************!*\
  !*** ./src/shapeNavigableCurve/CurveCategory.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClosedPlanarCurve = exports.OpenPlanarCurve = exports.CurveCategory = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var CurveModel_1 = __webpack_require__(/*! ../newModels/CurveModel */ "./src/newModels/CurveModel.ts");
var ClosedCurveModel_1 = __webpack_require__(/*! ../newModels/ClosedCurveModel */ "./src/newModels/ClosedCurveModel.ts");
var OpenCurveDifferentialEventsExtractorWithoutSequence_1 = __webpack_require__(/*! ../curveShapeSpaceAnalysis/OpenCurveDifferentialEventsExtractorWithoutSequence */ "./src/curveShapeSpaceAnalysis/OpenCurveDifferentialEventsExtractorWithoutSequence.ts");
var ClosedCurveDifferentialEventsExtractorWithoutSequence_1 = __webpack_require__(/*! ../curveShapeSpaceAnalysis/ClosedCurveDifferentialEventsExtractorWithoutSequence */ "./src/curveShapeSpaceAnalysis/ClosedCurveDifferentialEventsExtractorWithoutSequence.ts");
var CurveCategory = /** @class */ (function () {
    function CurveCategory(shapeNavigableCurve) {
        this._shapeNavigableCurve = shapeNavigableCurve;
        this._degreeChange = false;
        this._curveModelChange = true;
    }
    CurveCategory.prototype.setNavigableCurve = function (shapeNavigableCurve) {
        this._shapeNavigableCurve = shapeNavigableCurve;
    };
    Object.defineProperty(CurveCategory.prototype, "shapeNavigableCurve", {
        get: function () {
            return this._shapeNavigableCurve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveCategory.prototype, "curveModel", {
        get: function () {
            return this._curveModel;
        },
        set: function (curveModel) {
            this._curveModel = curveModel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveCategory.prototype, "degreeChange", {
        get: function () {
            return this._degreeChange;
        },
        set: function (degreeChange) {
            this._degreeChange = degreeChange;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveCategory.prototype, "curveModelChange", {
        get: function () {
            return this._curveModelChange;
        },
        set: function (curveModelChange) {
            this._curveModelChange = curveModelChange;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveCategory.prototype, "curveModelDifferentialEventsLocations", {
        get: function () {
            return this._curveModelDifferentialEventsLocations;
        },
        set: function (curveModelDifferentialEventsLocations) {
            this._curveModelDifferentialEventsLocations = curveModelDifferentialEventsLocations;
        },
        enumerable: false,
        configurable: true
    });
    return CurveCategory;
}());
exports.CurveCategory = CurveCategory;
var OpenPlanarCurve = /** @class */ (function (_super) {
    __extends(OpenPlanarCurve, _super);
    function OpenPlanarCurve(shapeNavigableCurve) {
        var _this = _super.call(this, shapeNavigableCurve) || this;
        _this._curveModel = new CurveModel_1.CurveModel();
        _this._curveModelDifferentialEvents = new OpenCurveDifferentialEventsExtractorWithoutSequence_1.OpenCurveDifferentialEventsExtractorWithoutSequence(_this._curveModel.spline);
        _this._curveModel.registerObserver(_this._curveModelDifferentialEvents, "control points");
        _this._curveModelDifferentialEventsLocations = _this._curveModelDifferentialEvents.crvDiffEventsLocations;
        _this._shapeNavigableCurve.changeCurveCategory(_this);
        _this._shapeNavigableCurve.notifyObservers();
        return _this;
    }
    Object.defineProperty(OpenPlanarCurve.prototype, "curveModelDifferentialEvents", {
        get: function () {
            return this._curveModelDifferentialEvents;
        },
        set: function (curveModelDifferentialEvents) {
            this._curveModelDifferentialEvents = curveModelDifferentialEvents;
        },
        enumerable: false,
        configurable: true
    });
    OpenPlanarCurve.prototype.setCurveCategory = function () {
        this._shapeNavigableCurve.changeCurveCategory(new ClosedPlanarCurve(this._shapeNavigableCurve));
    };
    OpenPlanarCurve.prototype.setNavigableCurveWithOpenPlanarCurve = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'setModelerWithOpenPlanarCurve', 'no curve model to change there.');
        warning.logMessageToConsole();
    };
    OpenPlanarCurve.prototype.setNavigableCurveWithClosedPlanarCurve = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'setModelerWithClosedPlanarCurve', 'change to closed planar curves.');
        warning.logMessageToConsole();
        this._shapeNavigableCurve.changeCurveCategory(new ClosedPlanarCurve(this._shapeNavigableCurve));
    };
    /* JCL 2020/10/07 Add the curve degree elevation process */
    OpenPlanarCurve.prototype.inputSelectDegree = function (curveDegree) {
        if (this.curveModel !== undefined) {
            if (curveDegree > this.curveModel.spline.degree) {
                this._degreeChange = true;
                var spline = this.curveModel.spline;
                while (spline.degree !== curveDegree) {
                    var tempSpline = spline.degreeIncrement();
                    spline = tempSpline.clone();
                }
                this.curveModel.setSpline(spline);
            }
            this.curveModel.notifyObservers();
            this._shapeNavigableCurve.notifyObservers();
            this._degreeChange = false;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "inputSelectDegree", "Unable to assign a new degree to the curve. Undefined curve model.");
            error.logMessageToConsole();
        }
    };
    return OpenPlanarCurve;
}(CurveCategory));
exports.OpenPlanarCurve = OpenPlanarCurve;
var ClosedPlanarCurve = /** @class */ (function (_super) {
    __extends(ClosedPlanarCurve, _super);
    function ClosedPlanarCurve(shapeNavigableCurve) {
        var _this = _super.call(this, shapeNavigableCurve) || this;
        _this._curveModel = new ClosedCurveModel_1.ClosedCurveModel();
        _this._curveModelDifferentialEvents = new ClosedCurveDifferentialEventsExtractorWithoutSequence_1.ClosedCurveDifferentialEventsExtractorWithoutSequence(_this._curveModel.spline);
        _this._curveModel.registerObserver(_this._curveModelDifferentialEvents, "control points");
        _this._curveModelDifferentialEventsLocations = _this._curveModelDifferentialEvents.crvDiffEventsLocations;
        _this._shapeNavigableCurve.changeCurveCategory(_this);
        _this._shapeNavigableCurve.notifyObservers();
        return _this;
    }
    Object.defineProperty(ClosedPlanarCurve.prototype, "curveModelDifferentialEvents", {
        get: function () {
            return this._curveModelDifferentialEvents;
        },
        set: function (curveModelDifferentialEvents) {
            this._curveModelDifferentialEvents = curveModelDifferentialEvents;
        },
        enumerable: false,
        configurable: true
    });
    ClosedPlanarCurve.prototype.setCurveCategory = function () {
        this._shapeNavigableCurve.changeCurveCategory(new OpenPlanarCurve(this._shapeNavigableCurve));
    };
    ClosedPlanarCurve.prototype.setNavigableCurveWithOpenPlanarCurve = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'setModelerWithOpenPlanarCurve', 'change to open planar curves.');
        warning.logMessageToConsole();
        this._shapeNavigableCurve.changeCurveCategory(new OpenPlanarCurve(this._shapeNavigableCurve));
    };
    ClosedPlanarCurve.prototype.setNavigableCurveWithClosedPlanarCurve = function () {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'setModelerWithClosedPlanarCurve', 'no curve model to change there.');
        warning.logMessageToConsole();
    };
    ClosedPlanarCurve.prototype.inputSelectDegree = function (curveDegree) {
        if (this.curveModel !== undefined) {
            if (curveDegree > this.curveModel.spline.degree) {
                this._degreeChange = true;
                var spline = this.curveModel.spline;
                // this.curveModel.spline.elevateDegree(curveDegree - this.curveModel.spline.degree);
                while (spline.degree !== curveDegree) {
                    var tempSpline = spline.degreeIncrement();
                    spline = tempSpline.clone();
                }
                this.curveModel.setSpline(spline);
            }
            this.curveModel.notifyObservers();
            this._shapeNavigableCurve.notifyObservers();
            this._degreeChange = false;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "inputSelectDegree", "Unable to assign a new degree to the curve. Undefined curve model.");
            error.logMessageToConsole();
        }
    };
    return ClosedPlanarCurve;
}(CurveCategory));
exports.ClosedPlanarCurve = ClosedPlanarCurve;


/***/ }),

/***/ "./src/shapeNavigableCurve/EventMgmtAtCurveExtremities.ts":
/*!****************************************************************!*\
  !*** ./src/shapeNavigableCurve/EventMgmtAtCurveExtremities.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EventMgmtAtCurveExtremities = void 0;
var ShapeSpaceDiffEventsStructure_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/ShapeSpaceDiffEventsStructure */ "./src/curveShapeSpaceNavigation/ShapeSpaceDiffEventsStructure.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ClosedCurveModel_1 = __webpack_require__(/*! ../newModels/ClosedCurveModel */ "./src/newModels/ClosedCurveModel.ts");
var EventStateAtCurveExtremity_1 = __webpack_require__(/*! ./EventStateAtCurveExtremity */ "./src/shapeNavigableCurve/EventStateAtCurveExtremity.ts");
var EventMgmtAtCurveExtremities = /** @class */ (function () {
    function EventMgmtAtCurveExtremities(curveShapeSpaceNavigator) {
        this._curveShapeSpaceNavigator = curveShapeSpaceNavigator;
        this._shapeSpaceDiffEventsStructure = this._curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure;
        this._shapeNavigableCurve = this._curveShapeSpaceNavigator.shapeNavigableCurve;
        this._eventStateAtCrvExtremities = new EventStateAtCurveExtremity_1.NoEventToManageForCurve(this);
        this._previousManagementOfEventsAtExtremities = ShapeSpaceDiffEventsStructure_1.EventMgmtState.NotApplicable;
        this._shapeSpaceDiffEventsStructure.managementOfEventsAtExtremities = ShapeSpaceDiffEventsStructure_1.EventMgmtState.NotApplicable;
        if (this._shapeNavigableCurve.curveCategory.curveModel instanceof ClosedCurveModel_1.ClosedCurveModel) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "constructor", "Inconsistent curve type. Should be an open curve.");
            error.logMessageToConsole();
        }
        this._eventOutOfInterval = false;
        this._locationsCurvExtrema = [];
        this._locationsInflections = [];
    }
    Object.defineProperty(EventMgmtAtCurveExtremities.prototype, "shapeNavigableCurve", {
        get: function () {
            return this._shapeNavigableCurve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventMgmtAtCurveExtremities.prototype, "eventStateAtCrvExtremities", {
        get: function () {
            return this._eventStateAtCrvExtremities;
        },
        set: function (eventState) {
            this._eventStateAtCrvExtremities = eventState;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventMgmtAtCurveExtremities.prototype, "curveShapeSpaceNavigator", {
        get: function () {
            return this._curveShapeSpaceNavigator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventMgmtAtCurveExtremities.prototype, "shapeSpaceDiffEventsStructure", {
        get: function () {
            return this._shapeSpaceDiffEventsStructure;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventMgmtAtCurveExtremities.prototype, "previousManagementOfEventsAtExtremities", {
        get: function () {
            return this._previousManagementOfEventsAtExtremities;
        },
        set: function (state) {
            this._previousManagementOfEventsAtExtremities = state;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventMgmtAtCurveExtremities.prototype, "eventOutOfInterval", {
        get: function () {
            return this._eventOutOfInterval;
        },
        set: function (eventOutOfInterval) {
            this._eventOutOfInterval = eventOutOfInterval;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventMgmtAtCurveExtremities.prototype, "locationsCurvExtrema", {
        get: function () {
            return this._locationsCurvExtrema;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventMgmtAtCurveExtremities.prototype, "locationsInflections", {
        get: function () {
            return this._locationsInflections;
        },
        enumerable: false,
        configurable: true
    });
    EventMgmtAtCurveExtremities.prototype.changeMngmtOfEventAtExtremity = function (eventState) {
        this._eventStateAtCrvExtremities = eventState;
        this._curveShapeSpaceNavigator.eventStateAtCrvExtremities = eventState;
    };
    EventMgmtAtCurveExtremities.prototype.processEventAtCurveExtremity = function () {
        this._eventStateAtCrvExtremities.handleEventAtCurveExtremity();
    };
    EventMgmtAtCurveExtremities.prototype.clearEvents = function () {
        this._eventOutOfInterval = false;
        this._locationsCurvExtrema = [];
        this._locationsInflections = [];
    };
    return EventMgmtAtCurveExtremities;
}());
exports.EventMgmtAtCurveExtremities = EventMgmtAtCurveExtremities;


/***/ }),

/***/ "./src/shapeNavigableCurve/EventStateAtCurveExtremity.ts":
/*!***************************************************************!*\
  !*** ./src/shapeNavigableCurve/EventStateAtCurveExtremity.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NoEventToManageForCurve = exports.EventSlideOutsideCurve = exports.EventStayInsideCurve = exports.EventStateAtCurveExtremity = void 0;
var CurveShapeMonitoringStrategy_1 = __webpack_require__(/*! ../controllers/CurveShapeMonitoringStrategy */ "./src/controllers/CurveShapeMonitoringStrategy.ts");
var CurveShapeSpaceNavigator_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/CurveShapeSpaceNavigator */ "./src/curveShapeSpaceNavigation/CurveShapeSpaceNavigator.ts");
var NavigationState_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/NavigationState */ "./src/curveShapeSpaceNavigation/NavigationState.ts");
var ShapeSpaceDiffEventsStructure_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/ShapeSpaceDiffEventsStructure */ "./src/curveShapeSpaceNavigation/ShapeSpaceDiffEventsStructure.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var ClosedCurveModel_1 = __webpack_require__(/*! ../newModels/ClosedCurveModel */ "./src/newModels/ClosedCurveModel.ts");
var NeighboringEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/NeighboringEvents */ "./src/sequenceOfDifferentialEvents/NeighboringEvents.ts");
var SequenceOfDifferentialEvents_1 = __webpack_require__(/*! ../sequenceOfDifferentialEvents/SequenceOfDifferentialEvents */ "./src/sequenceOfDifferentialEvents/SequenceOfDifferentialEvents.ts");
var EventStateAtCurveExtremity = /** @class */ (function () {
    function EventStateAtCurveExtremity(eventMgmtAtCurveExtremities) {
        this.eventMgmtAtCurveExtremities = eventMgmtAtCurveExtremities;
        this.shapeNavigableCurve = eventMgmtAtCurveExtremities.shapeNavigableCurve;
        this.curveShapeSpaceNavigator = eventMgmtAtCurveExtremities.curveShapeSpaceNavigator;
        this.shapeSpaceDiffEventStructure = this.curveShapeSpaceNavigator.shapeSpaceDiffEventsStructure;
    }
    return EventStateAtCurveExtremity;
}());
exports.EventStateAtCurveExtremity = EventStateAtCurveExtremity;
var EventStayInsideCurve = /** @class */ (function (_super) {
    __extends(EventStayInsideCurve, _super);
    function EventStayInsideCurve(eventMgmtAtCurveExtremities) {
        var _this = _super.call(this, eventMgmtAtCurveExtremities) || this;
        _this.eventMgmtAtCurveExtremities.eventStateAtCrvExtremities = _this;
        _this.shapeSpaceDiffEventStructure.managementOfEventsAtExtremities = ShapeSpaceDiffEventsStructure_1.EventMgmtState.Active;
        if (_this.curveShapeSpaceNavigator.navigationCurveModel.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategy) {
            _this.curveShapeMonitoringStrategy = _this.curveShapeSpaceNavigator.navigationCurveModel.curveShapeMonitoringStrategy;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(_this.constructor.name, "constructor", "Inconsistent curveShapeMonitoringStrategy class");
            error.logMessageToConsole();
            _this.curveShapeMonitoringStrategy = _this.curveShapeSpaceNavigator.navigationCurveModel.curveShapeMonitoringStrategy;
        }
        _this.curveShapeMonitoringStrategy.resetCurve(_this.shapeNavigableCurve.curveCategory.curveModel.spline);
        _this.sequenceCurvExtOutside = new SequenceOfDifferentialEvents_1.SequenceOfDifferentialEvents();
        _this.sequenceInflectionOutside = new SequenceOfDifferentialEvents_1.SequenceOfDifferentialEvents();
        return _this;
    }
    EventStayInsideCurve.prototype.handleEventAtCurveExtremity = function () {
        if (this.shapeSpaceDiffEventStructure.slidingDifferentialEvents &&
            (this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationThroughSimplerShapeSpaces
                || this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationStrictlyInsideShapeSpace)) {
            this.eventMgmtAtCurveExtremities.previousManagementOfEventsAtExtremities = this.shapeSpaceDiffEventStructure.managementOfEventsAtExtremities;
            this.eventMgmtAtCurveExtremities.changeMngmtOfEventAtExtremity(new EventSlideOutsideCurve(this.eventMgmtAtCurveExtremities));
            var message = new ErrorLoging_1.WarningLog(this.constructor.name, " handleEventAtCurveExtremity ", this.eventMgmtAtCurveExtremities.eventStateAtCrvExtremities.constructor.name);
            message.logMessageToConsole();
        }
        else if (this.shapeSpaceDiffEventStructure.slidingDifferentialEvents && this.shapeNavigableCurve.curveCategory.curveModel instanceof ClosedCurveModel_1.ClosedCurveModel) {
            this.eventMgmtAtCurveExtremities.previousManagementOfEventsAtExtremities = this.shapeSpaceDiffEventStructure.managementOfEventsAtExtremities;
            this.eventMgmtAtCurveExtremities.changeMngmtOfEventAtExtremity(new NoEventToManageForCurve(this.eventMgmtAtCurveExtremities));
            var message = new ErrorLoging_1.WarningLog(this.constructor.name, " handleEventAtCurveExtremity ", this.eventMgmtAtCurveExtremities.eventStateAtCrvExtremities.constructor.name);
            message.logMessageToConsole();
        }
        else if (!this.shapeSpaceDiffEventStructure.slidingDifferentialEvents) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "handleEventAtCurveExtremity", "Cannot appply state change of event management at curve extremities: sliding status is inconsistent.");
            error.logMessageToConsole();
        }
    };
    EventStayInsideCurve.prototype.monitorEventInsideCurve = function (seqComparator) {
        if (seqComparator.neighboringEvents.length > 0) {
            if (seqComparator.neighboringEvents.length === 1) {
                var processEvent = false;
                var curvExtLocation = [];
                var inflectionLocation = [];
                switch (seqComparator.neighboringEvents[0].type) {
                    case NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumLeftBoundaryDisappear: {
                        console.log("Curvature extremum disappear on the left boundary.");
                        curvExtLocation.push(seqComparator.sequenceDiffEvents1.eventAt(0).location);
                        this.sequenceCurvExtOutside.insertEvents(curvExtLocation, inflectionLocation);
                        processEvent = true;
                        break;
                    }
                    case NeighboringEvents_1.NeighboringEventsType.neighboringCurExtremumRightBoundaryDisappear: {
                        console.log("Curvature extremum disappear on the right boundary.");
                        curvExtLocation.push(seqComparator.sequenceDiffEvents1.eventAt(seqComparator.sequenceDiffEvents1.length() - 1).location);
                        this.sequenceCurvExtOutside.insertEvents(curvExtLocation, inflectionLocation);
                        processEvent = true;
                        break;
                    }
                    case NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtrema: {
                        console.log("Two Curvature extrema disappear between two inflections or an extreme interval or a unique interval.");
                        break;
                    }
                    case NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaAppear: {
                        console.log("Two Curvature extrema appear between two inflections or an extreme interval or a unique interval.");
                        break;
                    }
                    case NeighboringEvents_1.NeighboringEventsType.neighboringCurvatureExtremaDisappear: {
                        console.log("Two Curvature extrema disappear between two inflections or an extreme interval or a unique interval.");
                        break;
                    }
                    case NeighboringEvents_1.NeighboringEventsType.neighboringInflectionLeftBoundaryDisappear: {
                        console.log("Inflection disappear on the left boundary.");
                        inflectionLocation.push(seqComparator.sequenceDiffEvents1.eventAt(0).location);
                        this.sequenceInflectionOutside.insertEvents(curvExtLocation, inflectionLocation);
                        processEvent = true;
                        break;
                    }
                    case NeighboringEvents_1.NeighboringEventsType.neighboringInflectionRightBoundaryDisappear: {
                        console.log("Inflection disappear on the right boundary.");
                        inflectionLocation.push(seqComparator.sequenceDiffEvents1.eventAt(seqComparator.sequenceDiffEvents1.length() - 1).location);
                        this.sequenceInflectionOutside.insertEvents(curvExtLocation, inflectionLocation);
                        processEvent = true;
                        break;
                    }
                    default:
                        {
                            console.log("Cannot process this configuration with current navigation state.");
                        }
                        this.checkConsistencySequencesDiffEvents();
                }
                if (processEvent) {
                    if (this.curveShapeMonitoringStrategy instanceof CurveShapeMonitoringStrategy_1.OCurveShapeMonitoringStrategy) {
                        this.curveShapeMonitoringStrategy.optimizer.optimize_using_trust_region(CurveShapeSpaceNavigator_1.CONVERGENCE_THRESHOLD, CurveShapeSpaceNavigator_1.MAX_TRUST_REGION_RADIUS, CurveShapeSpaceNavigator_1.MAX_NB_STEPS_TRUST_REGION_OPTIMIZER);
                    }
                    this.eventMgmtAtCurveExtremities.eventOutOfInterval = true;
                    if (this.eventMgmtAtCurveExtremities.locationsCurvExtrema.length > 0)
                        this.eventMgmtAtCurveExtremities.locationsCurvExtrema.splice(0, this.eventMgmtAtCurveExtremities.locationsCurvExtrema.length - 1);
                    if (this.eventMgmtAtCurveExtremities.locationsInflections.length > 0)
                        this.eventMgmtAtCurveExtremities.locationsInflections.splice(0, this.eventMgmtAtCurveExtremities.locationsInflections.length - 1);
                    for (var i = 0; i < this.sequenceCurvExtOutside.length(); i++) {
                        this.eventMgmtAtCurveExtremities.locationsCurvExtrema.push(this.sequenceCurvExtOutside.eventAt(i).location);
                    }
                    for (var i = 0; i < this.sequenceInflectionOutside.length(); i++) {
                        this.eventMgmtAtCurveExtremities.locationsInflections.push(this.sequenceInflectionOutside.eventAt(i).location);
                    }
                }
            }
            else {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "navigate", "Several events appear/disappear simultaneously. Configuration not processed yet");
                error.logMessageToConsole();
            }
        }
    };
    EventStayInsideCurve.prototype.checkConsistencySequencesDiffEvents = function () {
        if (this.sequenceCurvExtOutside.length() > 2) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkConsistencySequencesDiffEvents", "Number of curvature extrema moving outside is inconsistent.");
            error.logMessageToConsole();
        }
        else if (this.sequenceInflectionOutside.length() > 2) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "checkConsistencySequencesDiffEvents", "Number of inflections moving outside is inconsistent.");
            error.logMessageToConsole();
        }
    };
    return EventStayInsideCurve;
}(EventStateAtCurveExtremity));
exports.EventStayInsideCurve = EventStayInsideCurve;
var EventSlideOutsideCurve = /** @class */ (function (_super) {
    __extends(EventSlideOutsideCurve, _super);
    function EventSlideOutsideCurve(eventMgmtAtCurveExtremities) {
        var _this = _super.call(this, eventMgmtAtCurveExtremities) || this;
        _this.eventMgmtAtCurveExtremities.eventStateAtCrvExtremities = _this;
        _this.shapeSpaceDiffEventStructure.managementOfEventsAtExtremities = ShapeSpaceDiffEventsStructure_1.EventMgmtState.Inactive;
        return _this;
    }
    EventSlideOutsideCurve.prototype.handleEventAtCurveExtremity = function () {
        if ((this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationThroughSimplerShapeSpaces
            || this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationStrictlyInsideShapeSpace)
            && this.shapeSpaceDiffEventStructure.slidingDifferentialEvents) {
            this.eventMgmtAtCurveExtremities.previousManagementOfEventsAtExtremities = this.shapeSpaceDiffEventStructure.managementOfEventsAtExtremities;
            this.eventMgmtAtCurveExtremities.changeMngmtOfEventAtExtremity(new EventStayInsideCurve(this.eventMgmtAtCurveExtremities));
            var message = new ErrorLoging_1.WarningLog(this.constructor.name, " handleEventAtCurveExtremity ", this.eventMgmtAtCurveExtremities.eventStateAtCrvExtremities.constructor.name);
            message.logMessageToConsole();
        }
        else if (this.shapeSpaceDiffEventStructure.slidingDifferentialEvents && this.shapeNavigableCurve.curveCategory.curveModel instanceof ClosedCurveModel_1.ClosedCurveModel) {
            this.eventMgmtAtCurveExtremities.previousManagementOfEventsAtExtremities = this.shapeSpaceDiffEventStructure.managementOfEventsAtExtremities;
            this.eventMgmtAtCurveExtremities.changeMngmtOfEventAtExtremity(new NoEventToManageForCurve(this.eventMgmtAtCurveExtremities));
            var message = new ErrorLoging_1.WarningLog(this.constructor.name, " handleEventAtCurveExtremity ", this.eventMgmtAtCurveExtremities.eventStateAtCrvExtremities.constructor.name);
            message.logMessageToConsole();
        }
        else if (!this.shapeSpaceDiffEventStructure.slidingDifferentialEvents) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "handleEventAtCurveExtremity", "Cannot appply state change of event management at curve extremities: sliding status is inconsistent.");
            error.logMessageToConsole();
        }
    };
    EventSlideOutsideCurve.prototype.monitorEventInsideCurve = function (seqComparator) {
    };
    return EventSlideOutsideCurve;
}(EventStateAtCurveExtremity));
exports.EventSlideOutsideCurve = EventSlideOutsideCurve;
var NoEventToManageForCurve = /** @class */ (function (_super) {
    __extends(NoEventToManageForCurve, _super);
    function NoEventToManageForCurve(eventMgmtAtCurveExtremities) {
        var _this = _super.call(this, eventMgmtAtCurveExtremities) || this;
        _this.eventMgmtAtCurveExtremities.eventStateAtCrvExtremities = _this;
        _this.shapeSpaceDiffEventStructure.managementOfEventsAtExtremities = ShapeSpaceDiffEventsStructure_1.EventMgmtState.NotApplicable;
        return _this;
    }
    NoEventToManageForCurve.prototype.handleEventAtCurveExtremity = function () {
        if (this.shapeSpaceDiffEventStructure.slidingDifferentialEvents && (this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationThroughSimplerShapeSpaces
            || this.curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationStrictlyInsideShapeSpace)) {
            this.eventMgmtAtCurveExtremities.previousManagementOfEventsAtExtremities = this.shapeSpaceDiffEventStructure.managementOfEventsAtExtremities;
            if (this.eventMgmtAtCurveExtremities.previousManagementOfEventsAtExtremities === ShapeSpaceDiffEventsStructure_1.EventMgmtState.Active) {
                this.eventMgmtAtCurveExtremities.changeMngmtOfEventAtExtremity(new EventStayInsideCurve(this.eventMgmtAtCurveExtremities));
            }
            else if (this.eventMgmtAtCurveExtremities.previousManagementOfEventsAtExtremities === ShapeSpaceDiffEventsStructure_1.EventMgmtState.Inactive) {
                this.eventMgmtAtCurveExtremities.changeMngmtOfEventAtExtremity(new EventSlideOutsideCurve(this.eventMgmtAtCurveExtremities));
            }
            var message = new ErrorLoging_1.WarningLog(this.constructor.name, " handleEventAtCurveExtremity ", this.eventMgmtAtCurveExtremities.eventStateAtCrvExtremities.constructor.name);
            message.logMessageToConsole();
        }
        else if (!this.shapeSpaceDiffEventStructure.slidingDifferentialEvents) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "handleEventAtCurveExtremity", "Cannot appply state change of event management at curve extremities: sliding status is inconsistent.");
            error.logMessageToConsole();
        }
    };
    NoEventToManageForCurve.prototype.monitorEventInsideCurve = function (seqComparator) {
    };
    return NoEventToManageForCurve;
}(EventStateAtCurveExtremity));
exports.NoEventToManageForCurve = NoEventToManageForCurve;


/***/ }),

/***/ "./src/shapeNavigableCurve/ShapeNavigableCurve.ts":
/*!********************************************************!*\
  !*** ./src/shapeNavigableCurve/ShapeNavigableCurve.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShapeNavigableCurve = exports.MAX_CLAMPED_POINTS = exports.NO_CONSTRAINT = void 0;
var CurveCategory_1 = __webpack_require__(/*! ./CurveCategory */ "./src/shapeNavigableCurve/CurveCategory.ts");
var CurveConstraints_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/CurveConstraints */ "./src/curveShapeSpaceNavigation/CurveConstraints.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var NavigationState_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/NavigationState */ "./src/curveShapeSpaceNavigation/NavigationState.ts");
exports.NO_CONSTRAINT = -1;
exports.MAX_CLAMPED_POINTS = 2;
var ShapeNavigableCurve = /** @class */ (function () {
    function ShapeNavigableCurve() {
        this._clampedPoints = [];
        this._clampedPointsPreviousState = [];
        this.observers = [];
        this._curveShapeSpaceNavigator = undefined;
        // Initializes controlOfCurveClamping in accordance with the navigation mode:
        //      mode 0: controlOfCurveClamping =  false,
        //      mode 1, mode 2: controlOfCurveClamping = true
        this._controlOfCurveClamping = false;
        this._curveCategory = new CurveCategory_1.OpenPlanarCurve(this);
        this._curveCategory.curveModelChange = false;
        this._curveConstraints = new CurveConstraints_1.CurveConstraints(this);
        this._crvConstraintAtExtremitiesStgy = this._curveConstraints.curveConstraintStrategy;
        // No clamped point set to be consistent with the navigation mode at initialization
        this._clampedPoints.push(exports.NO_CONSTRAINT);
        this._clampedPoints.push(exports.NO_CONSTRAINT);
        this._clampedPointsPreviousState = this._clampedPoints;
    }
    ShapeNavigableCurve.prototype.changeCurveCategory = function (category) {
        this._curveCategory = category;
    };
    ShapeNavigableCurve.prototype.changeCurveConstraintStrategy = function (state) {
        this._crvConstraintAtExtremitiesStgy = state;
    };
    Object.defineProperty(ShapeNavigableCurve.prototype, "curveShapeSpaceNavigator", {
        get: function () {
            return this._curveShapeSpaceNavigator;
        },
        set: function (curveShapeSpaceNavigator) {
            this._curveShapeSpaceNavigator = curveShapeSpaceNavigator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeNavigableCurve.prototype, "curveCategory", {
        get: function () {
            return this._curveCategory;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeNavigableCurve.prototype, "crvConstraintAtExtremitiesStgy", {
        get: function () {
            return this._crvConstraintAtExtremitiesStgy;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeNavigableCurve.prototype, "controlOfCurveClamping", {
        get: function () {
            return this._controlOfCurveClamping;
        },
        set: function (controlOfCurveClamping) {
            this._controlOfCurveClamping = controlOfCurveClamping;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeNavigableCurve.prototype, "clampedPoints", {
        get: function () {
            return this._clampedPoints;
        },
        set: function (clampedPoints) {
            this._clampedPoints = clampedPoints;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeNavigableCurve.prototype, "clampedPointsPreviousState", {
        get: function () {
            return this._clampedPointsPreviousState;
        },
        set: function (clampedPointsPreviousState) {
            this._clampedPointsPreviousState = clampedPointsPreviousState;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeNavigableCurve.prototype, "curveConstraints", {
        get: function () {
            return this._curveConstraints;
        },
        enumerable: false,
        configurable: true
    });
    ShapeNavigableCurve.prototype.inputSelectCurveCategory = function (crvCategoryID) {
        var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "inputSelectCurveCategoryProcess", crvCategoryID.toString());
        warning.logMessageToConsole();
        switch (crvCategoryID) {
            case 0: {
                this._curveCategory.setNavigableCurveWithOpenPlanarCurve();
                break;
            }
            case 1: {
                this._curveCategory.setNavigableCurveWithClosedPlanarCurve();
                break;
            }
            default: {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "inputSelectCurveCategoryProcess", "no available curve category.");
                error.logMessageToConsole();
                break;
            }
        }
        this._curveCategory.curveModelChange = false;
    };
    /* JCL 2020/09/24 Monitor rigid body movements of the curve in accordance with the button status */
    ShapeNavigableCurve.prototype.toggleCurveClamping = function () {
        if (this._curveShapeSpaceNavigator == undefined
            || this._curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.OCurveNavigationWithoutShapeSpaceMonitoring
            || this._curveShapeSpaceNavigator.navigationState instanceof NavigationState_1.CCurveNavigationWithoutShapeSpaceMonitoring) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "toggleCurveClamping", "Cannot handle clamping because no curve shape space navigator is available or no shape constraint is active.");
            error.logMessageToConsole();
        }
        else {
            this._controlOfCurveClamping = !this._controlOfCurveClamping;
            console.log("control of curve clamping: " + this._controlOfCurveClamping);
            if (this._controlOfCurveClamping) {
                this._clampedPoints = this._clampedPointsPreviousState;
            }
            else {
                // Store the previous constraint state for restoration. Other actions take place when updating objects through observers
                this._clampedPointsPreviousState = this._clampedPoints;
            }
            this.notifyObservers();
        }
    };
    ShapeNavigableCurve.prototype.registerObserver = function (observer) {
        this.observers.push(observer);
        console.log("ShapeNavigableCurve: registerObs: " + observer.constructor.name);
    };
    ShapeNavigableCurve.prototype.removeObserver = function (observer) {
        this.observers.splice(this.observers.indexOf(observer), 1);
    };
    ShapeNavigableCurve.prototype.notifyObservers = function () {
        var e_1, _a;
        try {
            for (var _b = __values(this.observers), _c = _b.next(); !_c.done; _c = _b.next()) {
                var observer = _c.value;
                console.log("ShapeNavigableCurve: update: " + observer.constructor.name);
                observer.update(this._curveCategory.curveModel);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    ShapeNavigableCurve.prototype.updateClampedPointsAfterKnotInsertion = function (knotParametricLocation) {
        var knots = this._curveCategory.curveModel.spline.getDistinctKnots();
        var i = 0;
        while (i < knots.length && knots[i] < knotParametricLocation) {
            i++;
        }
        var knotIndex = i;
        if (this._clampedPoints[0] === exports.NO_CONSTRAINT && this._clampedPoints[1] === exports.NO_CONSTRAINT) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "updateClampedPointsAfterKnotInsertion", "No need to update clamped point indices.");
            warning.logMessageToConsole();
        }
        else if ((this._clampedPoints[0] === exports.NO_CONSTRAINT && this._clampedPoints[1] !== exports.NO_CONSTRAINT)
            || (this._clampedPoints[0] !== exports.NO_CONSTRAINT && this._clampedPoints[1] === exports.NO_CONSTRAINT)) {
            if (this._clampedPoints[0] === exports.NO_CONSTRAINT && this._clampedPoints[1] >= knotIndex)
                this._clampedPoints[1] += 1;
            if (this._clampedPoints[1] === exports.NO_CONSTRAINT && this._clampedPoints[0] >= knotIndex)
                this._clampedPoints[0] += 1;
        }
        else {
            if (this._clampedPoints[0] >= knotIndex)
                this._clampedPoints[0] += 1;
            if (this._clampedPoints[1] >= knotIndex)
                this._clampedPoints[1] += 1;
        }
    };
    return ShapeNavigableCurve;
}());
exports.ShapeNavigableCurve = ShapeNavigableCurve;


/***/ }),

/***/ "./src/userInterfaceController/UserInterfaceEventListener.ts":
/*!*******************************************************************!*\
  !*** ./src/userInterfaceController/UserInterfaceEventListener.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurveSceneEventListener = exports.ShapeSpaceNavigationEventListener = exports.CurveModelDefinitionEventListener = exports.FileEventListener = exports.ChartEventListener = exports.UserInterfaceEventListener = void 0;
var ChartSceneController_1 = __webpack_require__(/*! ../chartcontrollers/ChartSceneController */ "./src/chartcontrollers/ChartSceneController.ts");
var CurveSceneController_1 = __webpack_require__(/*! ../controllers/CurveSceneController */ "./src/controllers/CurveSceneController.ts");
var ShapeNavigableCurve_1 = __webpack_require__(/*! ../shapeNavigableCurve/ShapeNavigableCurve */ "./src/shapeNavigableCurve/ShapeNavigableCurve.ts");
var CurveShapeSpaceNavigator_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/CurveShapeSpaceNavigator */ "./src/curveShapeSpaceNavigation/CurveShapeSpaceNavigator.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var FileController_1 = __webpack_require__(/*! ../filecontrollers/FileController */ "./src/filecontrollers/FileController.ts");
var AbstractCurveModel_1 = __webpack_require__(/*! ../newModels/AbstractCurveModel */ "./src/newModels/AbstractCurveModel.ts");
var CurveModelObserver_1 = __webpack_require__(/*! ../models/CurveModelObserver */ "./src/models/CurveModelObserver.ts");
var webgl_utils_1 = __webpack_require__(/*! ../webgl/webgl-utils */ "./src/webgl/webgl-utils.ts");
var cuon_utils_1 = __webpack_require__(/*! ../webgl/cuon-utils */ "./src/webgl/cuon-utils.ts");
var CurveConstraintStrategy_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/CurveConstraintStrategy */ "./src/curveShapeSpaceNavigation/CurveConstraintStrategy.ts");
var NavigationState_1 = __webpack_require__(/*! ../curveShapeSpaceNavigation/NavigationState */ "./src/curveShapeSpaceNavigation/NavigationState.ts");
var UserInterfaceEventListener = /** @class */ (function () {
    function UserInterfaceEventListener() {
    }
    return UserInterfaceEventListener;
}());
exports.UserInterfaceEventListener = UserInterfaceEventListener;
var ChartEventListener = /** @class */ (function (_super) {
    __extends(ChartEventListener, _super);
    // private  static a: ChartEventListener
    function ChartEventListener(shapeNavigableCurve) {
        var _this = _super.call(this) || this;
        _this.chartRenderingContext = [];
        // ChartEventListener.a = this
        _this._curveModel = shapeNavigableCurve.curveCategory.curveModel;
        _this._shapeNavigableCurve = shapeNavigableCurve;
        _this.canvasChart1 = document.getElementById('chart1');
        _this.canvasChart2 = document.getElementById('chart2');
        _this.canvasChart3 = document.getElementById('chart3');
        _this.checkBoxFunctionA = document.getElementById("chkBoxFunctionA");
        _this.checkBoxFunctionB = document.getElementById("chkBoxFunctionB");
        _this.checkBoxFunctionBsqrtScaled = document.getElementById("chkBoxSqrtFunctionB");
        _this.checkBoxCurvature = document.getElementById("chkBoxCurvature");
        _this.checkBoxAbsCurvature = document.getElementById("chkBoxAbsCurvature");
        _this.chartFunctionA = false;
        _this.chartFunctionB = false;
        _this.chartCurvatureCrv = false;
        _this.chartAbsCurvatureCurv = false;
        _this.chartFunctionBsqrtScaled = false;
        _this.noAddChart = false;
        _this.ctxChart1 = _this.canvasChart1.getContext('2d');
        _this.ctxChart2 = _this.canvasChart2.getContext('2d');
        _this.ctxChart3 = _this.canvasChart3.getContext('2d');
        _this.setupChartRenderingContexts();
        _this._chartSceneController = new ChartSceneController_1.ChartSceneController(_this.chartRenderingContext, _this._shapeNavigableCurve);
        _this._shapeNavigableCurve.registerObserver(new CurveModelObserver_1.CurveModelObserverInChartEventListener(_this));
        /* Add event handlers for checkbox processing */
        _this.checkBoxFunctionA.addEventListener('click', _this.chkboxFunctionA.bind(_this));
        _this.checkBoxFunctionB.addEventListener('click', _this.chkboxFunctionB.bind(_this));
        _this.checkBoxFunctionBsqrtScaled.addEventListener('click', _this.chkboxFunctionBsqrtScaled.bind(_this));
        _this.checkBoxCurvature.addEventListener('click', _this.chkboxCurvature.bind(_this));
        _this.checkBoxAbsCurvature.addEventListener('click', _this.chkboxAbsCurvature.bind(_this));
        return _this;
    }
    Object.defineProperty(ChartEventListener.prototype, "chartSceneController", {
        get: function () {
            return this._chartSceneController;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChartEventListener.prototype, "curveModel", {
        get: function () {
            return this._curveModel;
        },
        set: function (curveModel) {
            this._curveModel = curveModel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChartEventListener.prototype, "shapeNavigableCurve", {
        get: function () {
            return this._shapeNavigableCurve;
        },
        enumerable: false,
        configurable: true
    });
    ChartEventListener.prototype.setupChartRenderingContexts = function () {
        if (this.ctxChart1 !== null)
            this.chartRenderingContext.push(this.ctxChart1);
        if (this.ctxChart2 !== null)
            this.chartRenderingContext.push(this.ctxChart2);
        if (this.ctxChart3 !== null)
            this.chartRenderingContext.push(this.ctxChart3);
        if (this.ctxChart1 === null || this.ctxChart2 === null || this.ctxChart3 === null) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "setupChartRenderingContexts", "Unable to get one or more CanvasRenderingContext2D required to process charts.");
            error.logMessageToConsole();
        }
    };
    ChartEventListener.prototype.uncheckCkbox = function () {
        console.log("uncheckChart " + this._chartSceneController.uncheckedChart);
        if (ChartSceneController_1.CHART_TITLES.indexOf(this._chartSceneController.uncheckedChart) !== -1) {
            this.noAddChart = true;
            switch (this._chartSceneController.uncheckedChart) {
                case ChartSceneController_1.CHART_TITLES[0]:
                    console.log("uncheck " + ChartSceneController_1.CHART_TITLES[0]);
                    this.checkBoxFunctionA.click();
                    break;
                case ChartSceneController_1.CHART_TITLES[1]:
                    console.log("uncheck " + ChartSceneController_1.CHART_TITLES[1]);
                    this.checkBoxFunctionB.click();
                    break;
                case ChartSceneController_1.CHART_TITLES[2]:
                    console.log("uncheck " + ChartSceneController_1.CHART_TITLES[2]);
                    this.checkBoxCurvature.click();
                    break;
                case ChartSceneController_1.CHART_TITLES[3]:
                    console.log("uncheck " + ChartSceneController_1.CHART_TITLES[3]);
                    this.checkBoxAbsCurvature.click();
                    break;
                case ChartSceneController_1.CHART_TITLES[4]:
                    console.log("uncheck " + ChartSceneController_1.CHART_TITLES[4]);
                    this.checkBoxFunctionBsqrtScaled.click();
                    break;
            }
        }
        this._chartSceneController.resetUncheckedChart();
        this.noAddChart = false;
    };
    ChartEventListener.prototype.chkboxFunctionA = function () {
        // if(ChartEventListener.a.chartFunctionA) {
        if (this.chartFunctionA) {
            this.chartFunctionA = false;
            if (!this.noAddChart)
                this._chartSceneController.addChart(ChartSceneController_1.CHART_TITLES[0]);
        }
        else {
            this.chartFunctionA = true;
            this._chartSceneController.addChart(ChartSceneController_1.CHART_TITLES[0]);
            this.uncheckCkbox();
        }
    };
    ChartEventListener.prototype.chkboxFunctionB = function () {
        if (this.chartFunctionB) {
            this.chartFunctionB = false;
            if (!this.noAddChart)
                this._chartSceneController.addChart(ChartSceneController_1.CHART_TITLES[1]);
        }
        else {
            this.chartFunctionB = true;
            this._chartSceneController.addChart(ChartSceneController_1.CHART_TITLES[1]);
            this.uncheckCkbox();
        }
    };
    ChartEventListener.prototype.chkboxFunctionBsqrtScaled = function () {
        if (this.chartFunctionBsqrtScaled) {
            this.chartFunctionBsqrtScaled = false;
            if (!this.noAddChart)
                this._chartSceneController.addChart(ChartSceneController_1.CHART_TITLES[4]);
        }
        else {
            this.chartFunctionBsqrtScaled = true;
            this._chartSceneController.addChart(ChartSceneController_1.CHART_TITLES[4]);
            this.uncheckCkbox();
        }
    };
    ChartEventListener.prototype.chkboxCurvature = function () {
        if (this.chartCurvatureCrv) {
            this.chartCurvatureCrv = false;
            if (!this.noAddChart)
                this._chartSceneController.addChart(ChartSceneController_1.CHART_TITLES[2]);
        }
        else {
            this.chartCurvatureCrv = true;
            this._chartSceneController.addChart(ChartSceneController_1.CHART_TITLES[2]);
            this.uncheckCkbox();
        }
    };
    ChartEventListener.prototype.chkboxAbsCurvature = function () {
        if (this.chartAbsCurvatureCurv) {
            this.chartAbsCurvatureCurv = false;
            if (!this.noAddChart)
                this._chartSceneController.addChart(ChartSceneController_1.CHART_TITLES[3]);
        }
        else {
            this.chartAbsCurvatureCurv = true;
            this._chartSceneController.addChart(ChartSceneController_1.CHART_TITLES[3]);
            this.uncheckCkbox();
        }
    };
    ChartEventListener.prototype.resetChartContext = function () {
        this._chartSceneController.restart(this._curveModel);
        this.noAddChart = true;
        if (this.chartFunctionA)
            this.checkBoxFunctionA.click();
        if (this.chartFunctionB)
            this.checkBoxFunctionB.click();
        if (this.chartCurvatureCrv)
            this.checkBoxCurvature.click();
        if (this.chartAbsCurvatureCurv)
            this.checkBoxAbsCurvature.click();
        if (this.chartFunctionBsqrtScaled)
            this.checkBoxFunctionBsqrtScaled.click();
        this.noAddChart = false;
    };
    return ChartEventListener;
}(UserInterfaceEventListener));
exports.ChartEventListener = ChartEventListener;
var FileEventListener = /** @class */ (function (_super) {
    __extends(FileEventListener, _super);
    function FileEventListener(curveModelEventListener, curveSceneController) {
        var _this = _super.call(this) || this;
        _this._shapeNavigableCurve = curveModelEventListener.shapeNavigableCurve;
        _this._curveModel = curveModelEventListener.curveModel;
        _this.curveSceneController = curveSceneController;
        /* JCL 2020/10/13 Get input IDs for file management purposes */
        _this.buttonFileLoad = document.getElementById("buttonFileLoad");
        _this.buttonFileSave = document.getElementById("buttonFileSave");
        _this.inputFileLoad = document.getElementById("inputFileLoad");
        _this.inputFileSave = document.getElementById("inputFileSave");
        _this.inputFileName = document.getElementById("inputFileName");
        _this.validateInput = document.getElementById("validateInput");
        _this.labelFileExtension = document.getElementById("labelFileExtension");
        _this.fileR = new FileReader();
        _this._fileController = new FileController_1.FileController(_this.shapeNavigableCurve, _this.curveSceneController);
        _this.currentFileName = "";
        _this.shapeNavigableCurve.registerObserver(new CurveModelObserver_1.CurveModelObserverInFileEventListener(_this));
        /* JCL 2020/10/13 Add event handlers for file processing */
        _this.buttonFileLoad.addEventListener('click', _this.buttonFileLoadCurve.bind(_this));
        _this.buttonFileSave.addEventListener('click', _this.buttonFileSaveCurve.bind(_this));
        _this.inputFileLoad.addEventListener('input', _this.inputLoadFileCurve.bind(_this));
        _this.inputFileSave.addEventListener('input', _this.inputSaveFileCurve.bind(_this));
        _this.inputFileName.addEventListener('input', _this.inputCurveFileName.bind(_this));
        _this.validateInput.addEventListener('click', _this.inputButtonValidate.bind(_this));
        _this.fileR.addEventListener('load', _this.processInputFile.bind(_this));
        return _this;
    }
    Object.defineProperty(FileEventListener.prototype, "fileController", {
        get: function () {
            return this._fileController;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FileEventListener.prototype, "curveModel", {
        get: function () {
            return this._curveModel;
        },
        set: function (curveModel) {
            this._curveModel = curveModel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FileEventListener.prototype, "shapeNavigableCurve", {
        get: function () {
            return this._shapeNavigableCurve;
        },
        enumerable: false,
        configurable: true
    });
    FileEventListener.prototype.buttonFileLoadCurve = function (ev) {
        if (this.inputFileLoad !== null)
            this.inputFileLoad.click();
    };
    FileEventListener.prototype.buttonFileSaveCurve = function (ev) {
        if (this.currentFileName === "") {
            this.inputFileName.style.display = "inline";
            this.labelFileExtension.style.display = "inline";
            this.validateInput.style.display = "inline";
        }
        else {
            this._fileController.saveCurveToFile(this.currentFileName);
        }
        ev.preventDefault();
    };
    FileEventListener.prototype.inputLoadFileCurve = function () {
        var _a;
        if (this.inputFileLoad !== null) {
            var aFileList = this.inputFileLoad.files;
            if (aFileList !== null && aFileList.length > 0) {
                if (((_a = aFileList.item(0)) === null || _a === void 0 ? void 0 : _a.name) !== undefined) {
                    var curveFile = aFileList.item(0);
                    if (curveFile !== null) {
                        this.inputFileLoad.value = "";
                        this.currentFileName = curveFile.name;
                        if (this.currentFileName.indexOf(".json") !== -1) {
                            this.fileR.readAsText(curveFile);
                        }
                        else if (this.currentFileName.indexOf(".png") !== -1) {
                            console.log("read an image");
                            this.fileR.readAsArrayBuffer(curveFile);
                            /* for test purposes to load an image
                            // iconKnotInsertion.src = currentFileName
                            //imageFile = curveFile*/
                        }
                    }
                }
            }
        }
    };
    FileEventListener.prototype.inputSaveFileCurve = function () {
    };
    FileEventListener.prototype.inputCurveFileName = function () {
    };
    FileEventListener.prototype.inputButtonValidate = function () {
        this.currentFileName = this.inputFileName.value;
        console.log("inputButtonValidate:" + this.inputFileName.value);
        this.inputFileName.style.display = "none";
        this.labelFileExtension.style.display = "none";
        this.validateInput.style.display = "none";
        this._fileController.saveCurveToFile(this.currentFileName);
    };
    FileEventListener.prototype.getFileContent = function (ev) {
        if (ev.target !== null)
            console.log("Reading the file: " + this.currentFileName);
        if (this.fileR.readyState === this.fileR.DONE) {
            if (this.fileR.result !== null) {
                this.currentFileName = "";
                if (typeof this.fileR.result === "string") {
                    this.currentFileName = this.fileR.result.toString();
                    return;
                }
                else {
                    /* JCL 2020/10/16 fileR.result is of type ArrayBuffer */
                    if (this.currentFileName.indexOf(".png") !== -1) {
                        console.log("Input file is an image. No need to reinitialize curve controls.");
                        return;
                    }
                }
            }
            else {
                var error = new ErrorLoging_1.ErrorLog("FileEventListener", "processInputFile", "Error when reading the input file. Incorrect text format.");
                error.logMessageToConsole();
            }
        }
    };
    FileEventListener.prototype.processInputFile = function (ev) {
        this.getFileContent(ev);
        var aSpline = this._fileController.loadCurveFromFile(this.currentFileName);
        if (typeof (aSpline) !== "undefined") {
            this._fileController.resetCurveContext(aSpline.knots, aSpline.controlPoints);
            this.curveModel = this._fileController.curveModel;
            if (this.curveModel === undefined) {
                var error = new ErrorLoging_1.ErrorLog("FileEventListener", "processInputFile", "Unable to get a curveModel to restart the chartSceneController.");
                error.logMessageToConsole();
                return;
            }
        }
        else {
            var error = new ErrorLoging_1.ErrorLog("FileEventListener", "processInputFile", "Unable to reset the curve context. Undefined curve model.");
            error.logMessageToConsole();
        }
    };
    return FileEventListener;
}(UserInterfaceEventListener));
exports.FileEventListener = FileEventListener;
var CurveModelDefinitionEventListener = /** @class */ (function (_super) {
    __extends(CurveModelDefinitionEventListener, _super);
    function CurveModelDefinitionEventListener() {
        var _this = _super.call(this) || this;
        /* Get selector ID for curve category and degree*/
        _this._currentCurveDegree = "3";
        _this._currentCurveCategory = "0";
        _this._inputCurveCategory = document.getElementById("curveCategory");
        _this._inputDegree = document.getElementById("curveDegree");
        _this._toggleButtonCurveClamping = document.getElementById("toggleButtonCurveClamping");
        _this._curveShapeSpaceNavigator = undefined;
        _this._shapeNavigableCurve = new ShapeNavigableCurve_1.ShapeNavigableCurve();
        _this._curveModel = _this._shapeNavigableCurve.curveCategory.curveModel;
        // this._curveModel.registerObserver(this, "curve");
        // Initizalizes clamped points monitoring in accordance with navigation modes:
        //      mode 0: controlOfCurveClamping = false,
        //      mode 1, mode 2: controlOfCurveClamping =  true
        _this.controlOfCurveClamping = false;
        _this.previousControlOfCurveClamping = false;
        _this._shapeNavigableCurve.registerObserver(new CurveModelObserver_1.CurveModelObserverInCurveModelEventListener(_this));
        /* JCL  Add event handlers for curve degree and curve category selection processing */
        _this._inputDegree.addEventListener('input', _this.inputSelectDegree.bind(_this));
        _this._inputDegree.addEventListener('click', _this.clickSelectDegree.bind(_this));
        _this._inputCurveCategory.addEventListener('input', _this.inputSelectCurveCategory.bind(_this));
        _this._inputCurveCategory.addEventListener('click', _this.clickCurveCategory.bind(_this));
        _this._toggleButtonCurveClamping.addEventListener('click', _this.toggleCurveClamping.bind(_this));
        return _this;
    }
    Object.defineProperty(CurveModelDefinitionEventListener.prototype, "currentCurveDegree", {
        get: function () {
            return this._currentCurveDegree;
        },
        set: function (curveDegree) {
            this._currentCurveDegree = curveDegree;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveModelDefinitionEventListener.prototype, "inputDegree", {
        get: function () {
            return this._inputDegree;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveModelDefinitionEventListener.prototype, "curveModel", {
        get: function () {
            return this._curveModel;
        },
        set: function (curveModel) {
            this._curveModel = curveModel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveModelDefinitionEventListener.prototype, "shapeNavigableCurve", {
        get: function () {
            return this._shapeNavigableCurve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveModelDefinitionEventListener.prototype, "curveShapeSpaceNavigator", {
        get: function () {
            if (this._curveShapeSpaceNavigator !== undefined) {
                return this._curveShapeSpaceNavigator;
            }
            else {
                return undefined;
            }
        },
        set: function (curveShapeSpaceNavigator) {
            this._curveShapeSpaceNavigator = curveShapeSpaceNavigator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurveModelDefinitionEventListener.prototype, "toggleButtonCurveClamping", {
        get: function () {
            return this._toggleButtonCurveClamping;
        },
        enumerable: false,
        configurable: true
    });
    CurveModelDefinitionEventListener.prototype.toggleCurveClamping = function () {
        var _a;
        this.controlOfCurveClamping = !this.controlOfCurveClamping;
        if ((!this._shapeNavigableCurve.curveCategory.curveModelChange)
            && (!((_a = this._curveShapeSpaceNavigator) === null || _a === void 0 ? void 0 : _a.navigationState.navigationStateChange)))
            this._shapeNavigableCurve.toggleCurveClamping();
    };
    CurveModelDefinitionEventListener.prototype.disableCurveClamping = function () {
        this._toggleButtonCurveClamping.disabled = true;
    };
    CurveModelDefinitionEventListener.prototype.enableCurveClamping = function () {
        this._toggleButtonCurveClamping.disabled = false;
    };
    CurveModelDefinitionEventListener.prototype.clickSelectDegree = function () {
        console.log("select Degree click");
        this._inputDegree.value = this._currentCurveDegree;
    };
    CurveModelDefinitionEventListener.prototype.clickCurveCategory = function () {
        console.log("select Curve type click");
        this._inputCurveCategory.value = this._currentCurveCategory;
    };
    CurveModelDefinitionEventListener.prototype.inputSelectCurveCategory = function () {
        var curveCategory = Number(this._inputCurveCategory.value);
        this._currentCurveCategory = this._inputCurveCategory.value;
        this._shapeNavigableCurve.inputSelectCurveCategory(curveCategory);
    };
    CurveModelDefinitionEventListener.prototype.inputSelectDegree = function () {
        console.log("select:  " + this._inputDegree.value);
        var optionName = "option";
        if (!isNaN(Number(this._inputDegree.value))) {
            var curveDegree = Number(this._inputDegree.value);
            this._currentCurveDegree = this._inputDegree.value;
            this._shapeNavigableCurve.curveCategory.inputSelectDegree(curveDegree);
            if (curveDegree > AbstractCurveModel_1.DEFAULT_CURVE_DEGREE) {
                for (var i = 1; i < (curveDegree - AbstractCurveModel_1.DEFAULT_CURVE_DEGREE + 1); i += 1) {
                    console.log("select" + optionName + i.toString());
                    var option = document.getElementById(optionName + i.toString());
                    if (option !== null)
                        option.setAttribute("disabled", "");
                    else {
                        var error = new ErrorLoging_1.ErrorLog("curveModelEventListener", "inputSelectDegree", "No ID found to identify an Option in the Selector.");
                        error.logMessageToConsole();
                    }
                }
            }
        }
        else {
            var error = new ErrorLoging_1.ErrorLog("curveModelEventListener", "inputSelectDegree", "The selected option cannot be converted into a Number");
            error.logMessageToConsole();
        }
    };
    CurveModelDefinitionEventListener.prototype.updateCurveConstraintControlButton = function () {
        if (this.controlOfCurveClamping) {
            this._toggleButtonCurveClamping.click();
        }
    };
    CurveModelDefinitionEventListener.prototype.restorePreviousConstraintControl = function () {
        var _a, _b;
        if (!this._shapeNavigableCurve.curveCategory.curveModelChange) {
            this._shapeNavigableCurve.clampedPoints = [];
            if (this._shapeNavigableCurve.clampedPointsPreviousState[0] === ShapeNavigableCurve_1.NO_CONSTRAINT
                && this._shapeNavigableCurve.clampedPointsPreviousState[1] === ShapeNavigableCurve_1.NO_CONSTRAINT) {
                if (!this.controlOfCurveClamping)
                    this._toggleButtonCurveClamping.click();
                this._shapeNavigableCurve.controlOfCurveClamping = true;
                this.controlOfCurveClamping = true;
                this._shapeNavigableCurve.clampedPoints.push(0);
                this._shapeNavigableCurve.clampedPoints.push(ShapeNavigableCurve_1.NO_CONSTRAINT);
            }
            else {
                this._shapeNavigableCurve.clampedPoints = this._shapeNavigableCurve.clampedPointsPreviousState;
                if (!(this.controlOfCurveClamping && this.previousControlOfCurveClamping))
                    this._toggleButtonCurveClamping.click();
            }
            if (this._shapeNavigableCurve.clampedPoints[0] === ShapeNavigableCurve_1.NO_CONSTRAINT) {
                if (this._shapeNavigableCurve.clampedPoints[1] === ShapeNavigableCurve_1.NO_CONSTRAINT) {
                    this._shapeNavigableCurve.changeCurveConstraintStrategy(new CurveConstraintStrategy_1.CurveConstraintNoConstraint(this._shapeNavigableCurve.curveConstraints));
                }
                else {
                    this._shapeNavigableCurve.changeCurveConstraintStrategy(new CurveConstraintStrategy_1.CurveConstraintClampedLastControlPoint(this._shapeNavigableCurve.curveConstraints));
                }
            }
            else {
                if (this._shapeNavigableCurve.clampedPoints[1] === ShapeNavigableCurve_1.NO_CONSTRAINT) {
                    this._shapeNavigableCurve.changeCurveConstraintStrategy(new CurveConstraintStrategy_1.CurveConstraintClampedFirstControlPoint(this._shapeNavigableCurve.curveConstraints));
                }
                else {
                    this._shapeNavigableCurve.changeCurveConstraintStrategy(new CurveConstraintStrategy_1.CurveConstraintClampedFirstAndLastControlPoint(this._shapeNavigableCurve.curveConstraints));
                }
            }
            this._shapeNavigableCurve.curveConstraints.curveConstraintStrategy = this._shapeNavigableCurve.crvConstraintAtExtremitiesStgy;
            this._shapeNavigableCurve.controlOfCurveClamping = this.controlOfCurveClamping;
        }
        else {
            this._shapeNavigableCurve.clampedPoints = [];
            if (((_a = this._curveShapeSpaceNavigator) === null || _a === void 0 ? void 0 : _a.navigationState) instanceof NavigationState_1.OCurveNavigationWithoutShapeSpaceMonitoring
                || ((_b = this._curveShapeSpaceNavigator) === null || _b === void 0 ? void 0 : _b.navigationState) instanceof NavigationState_1.CCurveNavigationWithoutShapeSpaceMonitoring) {
                this._shapeNavigableCurve.clampedPointsPreviousState = [];
                this._shapeNavigableCurve.clampedPointsPreviousState.push(ShapeNavigableCurve_1.NO_CONSTRAINT);
                this._shapeNavigableCurve.clampedPointsPreviousState.push(ShapeNavigableCurve_1.NO_CONSTRAINT);
                this._shapeNavigableCurve.clampedPoints = this._shapeNavigableCurve.clampedPointsPreviousState;
            }
            else {
                this._shapeNavigableCurve.controlOfCurveClamping = true;
                this.controlOfCurveClamping = true;
                this._shapeNavigableCurve.clampedPoints.push(0);
                this._shapeNavigableCurve.clampedPoints.push(ShapeNavigableCurve_1.NO_CONSTRAINT);
                this._shapeNavigableCurve.clampedPointsPreviousState = this._shapeNavigableCurve.clampedPoints;
                this._shapeNavigableCurve.changeCurveConstraintStrategy(new CurveConstraintStrategy_1.CurveConstraintClampedFirstControlPoint(this._shapeNavigableCurve.curveConstraints));
                this._shapeNavigableCurve.curveConstraints.curveConstraintStrategy = this._shapeNavigableCurve.crvConstraintAtExtremitiesStgy;
                this._shapeNavigableCurve.controlOfCurveClamping = this.controlOfCurveClamping;
            }
        }
    };
    CurveModelDefinitionEventListener.prototype.storeCurrentConstraintControl = function () {
        this.previousControlOfCurveClamping = this.controlOfCurveClamping;
        this.shapeNavigableCurve.clampedPointsPreviousState = this.shapeNavigableCurve.clampedPoints;
    };
    CurveModelDefinitionEventListener.prototype.resetConstraintControl = function () {
        if (this.controlOfCurveClamping) {
            this.storeCurrentConstraintControl();
            this._toggleButtonCurveClamping.click();
            this._shapeNavigableCurve.controlOfCurveClamping = false;
            this._shapeNavigableCurve.clampedPoints = [];
            this._shapeNavigableCurve.clampedPoints.push(ShapeNavigableCurve_1.NO_CONSTRAINT);
            this._shapeNavigableCurve.clampedPoints.push(ShapeNavigableCurve_1.NO_CONSTRAINT);
            this.shapeNavigableCurve.changeCurveConstraintStrategy(new CurveConstraintStrategy_1.CurveConstraintNoConstraint(this.shapeNavigableCurve.curveConstraints));
        }
        else {
            this.storeCurrentConstraintControl();
        }
        this._shapeNavigableCurve.curveConstraints.curveConstraintStrategy = this._shapeNavigableCurve.crvConstraintAtExtremitiesStgy;
    };
    CurveModelDefinitionEventListener.prototype.reinitializeConstraintControl = function () {
        if (this.controlOfCurveClamping) {
            this._toggleButtonCurveClamping.click();
            this._shapeNavigableCurve.controlOfCurveClamping = false;
            this._shapeNavigableCurve.clampedPoints = [];
            this._shapeNavigableCurve.clampedPoints.push(ShapeNavigableCurve_1.NO_CONSTRAINT);
            this._shapeNavigableCurve.clampedPoints.push(ShapeNavigableCurve_1.NO_CONSTRAINT);
            this.shapeNavigableCurve.changeCurveConstraintStrategy(new CurveConstraintStrategy_1.CurveConstraintNoConstraint(this.shapeNavigableCurve.curveConstraints));
            this.storeCurrentConstraintControl();
        }
        else {
            this.storeCurrentConstraintControl();
        }
    };
    CurveModelDefinitionEventListener.prototype.updateCurveDegreeSelector = function (newCurveDegree) {
        if (newCurveDegree >= AbstractCurveModel_1.DEFAULT_CURVE_DEGREE) {
            var optionNumber = Number(this.currentCurveDegree) - AbstractCurveModel_1.DEFAULT_CURVE_DEGREE + 1;
            var optionName = "option";
            var option = void 0;
            for (var i = 1; i < (newCurveDegree - AbstractCurveModel_1.DEFAULT_CURVE_DEGREE + 1); i += 1) {
                option = document.getElementById(optionName + i.toString());
                if (option !== null)
                    option.setAttribute("disabled", "");
                else {
                    var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "updateCurveDegreeSelector", "No id found to identify an Option in the Selector.");
                    error.logMessageToConsole();
                }
            }
            option = document.getElementById(optionName + optionNumber);
            option.removeAttribute("selected");
            option = document.getElementById(optionName + (newCurveDegree - 2).toString());
            option.setAttribute("selected", "selected");
            this.currentCurveDegree = newCurveDegree.toString();
            this.inputDegree.click();
        }
        else {
            var error = new ErrorLoging_1.ErrorLog("FileEventListener", "processInputFile", "Unable to assign a consistent curve degree when loading a curve. Curve degree must be greater or equal to 3.");
            error.logMessageToConsole();
        }
    };
    CurveModelDefinitionEventListener.prototype.update = function (message) {
    };
    return CurveModelDefinitionEventListener;
}(UserInterfaceEventListener));
exports.CurveModelDefinitionEventListener = CurveModelDefinitionEventListener;
// export class ShapeSpaceNavigationEventListener extends UserInterfaceEventListener {
var ShapeSpaceNavigationEventListener = /** @class */ (function () {
    // private sceneController: CurveSceneController;
    function ShapeSpaceNavigationEventListener(curveModelDefinitionEventListener) {
        // super();
        this.shapeNavigableCurve = curveModelDefinitionEventListener.shapeNavigableCurve;
        this._curveShapeSpaceNavigator = new CurveShapeSpaceNavigator_1.CurveShapeSpaceNavigator(this.shapeNavigableCurve);
        curveModelDefinitionEventListener.curveShapeSpaceNavigator = this._curveShapeSpaceNavigator;
        this.shapeNavigableCurve.curveShapeSpaceNavigator = this._curveShapeSpaceNavigator;
        this.shapeNavigableCurve.curveConstraints.curveConstraintStrategy.curveShapeSpaceNavigator = this._curveShapeSpaceNavigator;
        // this.shapeNavigableCurve.curveCategory.curveShapeSpaceNavigator = this._curveShapeSpaceNavigator;
        /* Get control button IDs for curve shape control*/
        this._toggleButtonCurvatureExtrema = document.getElementById("toggleButtonCurvatureExtrema");
        this._toggleButtonInflection = document.getElementById("toggleButtonInflections");
        this._toggleButtonSliding = document.getElementById("toggleButtonSliding");
        this._toggleButtonEventsStayInside = document.getElementById("toggleButtonEventsStayInside");
        /* Get control button IDs for curve shape control*/
        // Initializes the navigation mode to: 
        //      Without shape space constraints = 0
        //      Nested simpler shape spaces = 1
        //      Strictly in shape space = 2
        this._currentNavigationMode = "0";
        this._inputNavigationMode = document.getElementById("navigationMode");
        // Initializes the navigation parameters in accordance with navigation modes above:
        //      mode 0: controlOfCurvatureExtrema = false, controlOfInflection = false, sliding = false,
        //      mode 1: controlOfCurvatureExtrema =  true, controlOfInflection = true, sliding = true,
        //      mode 2: controlOfCurvatureExtrema =  true, controlOfInflection = true, sliding = true
        this.controlOfCurvatureExtrema = false;
        this.controlOfInflection = false;
        this._sliding = false;
        this.controlOfEventAtExtremity = false;
        this._previousControlOfCurvatureExtrema = false;
        this._previousControlOfInflection = false;
        this._previousSliding = false;
        this.previousControlOfEventAtExtremity = false;
        this.previousCtrlOfEventAtExtrmtyWrtSliding = false;
        this.resetButtons = false;
        this.resetControlOfEventAtExtremity = false;
        this.shapeNavigableCurve.registerObserver(new CurveModelObserver_1.CurveModelObserverInShapeSpaceNavigationEventListener(this));
        this._inputNavigationMode.addEventListener('input', this.inputSelectNavigationMode.bind(this));
        this._inputNavigationMode.addEventListener('click', this.clickNavigationMode.bind(this));
        this._toggleButtonCurvatureExtrema.addEventListener('click', this.toggleControlOfCurvatureExtrema.bind(this));
        this._toggleButtonInflection.addEventListener('click', this.toggleControlOfInflections.bind(this));
        this._toggleButtonSliding.addEventListener('click', this.toggleSliding.bind(this));
        this._toggleButtonEventsStayInside.addEventListener('click', this.toggleEventMgmtAtCurveExt.bind(this));
    }
    Object.defineProperty(ShapeSpaceNavigationEventListener.prototype, "curveShapeSpaceNavigator", {
        get: function () {
            return this._curveShapeSpaceNavigator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeSpaceNavigationEventListener.prototype, "toggleButtonCurvatureExtrema", {
        get: function () {
            return this._toggleButtonCurvatureExtrema;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeSpaceNavigationEventListener.prototype, "toggleButtonInflection", {
        get: function () {
            return this._toggleButtonInflection;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeSpaceNavigationEventListener.prototype, "toggleButtonSliding", {
        get: function () {
            return this._toggleButtonSliding;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeSpaceNavigationEventListener.prototype, "toggleButtonEventsStayInside", {
        get: function () {
            return this._toggleButtonEventsStayInside;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeSpaceNavigationEventListener.prototype, "sliding", {
        get: function () {
            return this._sliding;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeSpaceNavigationEventListener.prototype, "previousControlOfCurvatureExtrema", {
        get: function () {
            return this._previousControlOfCurvatureExtrema;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeSpaceNavigationEventListener.prototype, "previousControlOfInflection", {
        get: function () {
            return this._previousControlOfInflection;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShapeSpaceNavigationEventListener.prototype, "previousSliding", {
        get: function () {
            return this._previousSliding;
        },
        enumerable: false,
        configurable: true
    });
    ShapeSpaceNavigationEventListener.prototype.toggleControlOfCurvatureExtrema = function () {
        this.controlOfCurvatureExtrema = !this.controlOfCurvatureExtrema;
        if ((!this.controlOfCurvatureExtrema) && (!this.controlOfInflection) && this._sliding) {
            this.toggleButtonSliding.click();
            this.disableControlOfSliding();
        }
        else {
            this.enableControlOfSliding();
        }
        if (!this.resetButtons) {
            this._curveShapeSpaceNavigator.toggleControlOfCurvatureExtrema();
        }
    };
    ShapeSpaceNavigationEventListener.prototype.disableControlOfCurvatureExtrema = function () {
        this._toggleButtonCurvatureExtrema.disabled = true;
    };
    ShapeSpaceNavigationEventListener.prototype.enableControlOfCurvatureExtrema = function () {
        this._toggleButtonCurvatureExtrema.disabled = false;
    };
    ShapeSpaceNavigationEventListener.prototype.toggleControlOfInflections = function () {
        this.controlOfInflection = !this.controlOfInflection;
        if ((!this.controlOfCurvatureExtrema) && (!this.controlOfInflection) && this._sliding) {
            this.toggleButtonSliding.click();
            this.disableControlOfSliding();
        }
        else {
            this.enableControlOfSliding();
        }
        if (!this.resetButtons) {
            this._curveShapeSpaceNavigator.toggleControlOfInflections();
        }
    };
    ShapeSpaceNavigationEventListener.prototype.disableControlOfInflections = function () {
        this._toggleButtonInflection.disabled = true;
    };
    ShapeSpaceNavigationEventListener.prototype.enableControlOfInflections = function () {
        this._toggleButtonInflection.disabled = false;
    };
    ShapeSpaceNavigationEventListener.prototype.toggleSliding = function () {
        this._sliding = !this._sliding;
        if (!this.resetButtons) {
            this._curveShapeSpaceNavigator.toggleSliding();
            if (!this._sliding) {
                this.resetControlOfEventAtExtremity = true;
                this.previousCtrlOfEventAtExtrmtyWrtSliding = this.controlOfEventAtExtremity;
                if (this.controlOfEventAtExtremity) {
                    this._toggleButtonEventsStayInside.click();
                }
                this.disableEventMgmtAtCurveExt();
            }
            else {
                this.enableEventMgmtAtCurveExt();
                this.controlOfEventAtExtremity = this.previousCtrlOfEventAtExtrmtyWrtSliding;
                if (this.controlOfEventAtExtremity) {
                    this._toggleButtonEventsStayInside.click();
                }
                this.resetControlOfEventAtExtremity = false;
            }
        }
    };
    ShapeSpaceNavigationEventListener.prototype.disableControlOfSliding = function () {
        this._toggleButtonSliding.disabled = true;
    };
    ShapeSpaceNavigationEventListener.prototype.enableControlOfSliding = function () {
        this._toggleButtonSliding.disabled = false;
    };
    ShapeSpaceNavigationEventListener.prototype.toggleEventMgmtAtCurveExt = function () {
        if (!this.resetControlOfEventAtExtremity) {
            this.controlOfEventAtExtremity = !this.controlOfEventAtExtremity;
            if (!this.resetButtons) {
                this._curveShapeSpaceNavigator.toggleEventMgmtAtCurveExt();
            }
        }
    };
    ShapeSpaceNavigationEventListener.prototype.disableEventMgmtAtCurveExt = function () {
        this._toggleButtonEventsStayInside.disabled = true;
    };
    ShapeSpaceNavigationEventListener.prototype.enableEventMgmtAtCurveExt = function () {
        this._toggleButtonEventsStayInside.disabled = false;
    };
    ShapeSpaceNavigationEventListener.prototype.clickNavigationMode = function () {
        console.log("select Navigation click");
        this._inputNavigationMode.value = this._currentNavigationMode;
    };
    ShapeSpaceNavigationEventListener.prototype.inputSelectNavigationMode = function () {
        console.log("select" + this._inputNavigationMode.value);
        var navigationMode = Number(this._inputNavigationMode.value);
        this._currentNavigationMode = this._inputNavigationMode.value;
        this._curveShapeSpaceNavigator.inputSelectNavigationProcess(navigationMode);
    };
    ShapeSpaceNavigationEventListener.prototype.reinitializeNavigationMode = function () {
        this._currentNavigationMode = "0";
        this.clickNavigationMode();
    };
    ShapeSpaceNavigationEventListener.prototype.updateCurveShapeControlButtons = function () {
        if (this._previousSliding) {
            this._toggleButtonSliding.click();
            this.enableEventMgmtAtCurveExt();
        }
        if (this._previousControlOfCurvatureExtrema) {
            this._toggleButtonCurvatureExtrema.click();
        }
        if (this._previousControlOfInflection) {
            this._toggleButtonInflection.click();
        }
        if (this.previousControlOfEventAtExtremity) {
            this._toggleButtonEventsStayInside.click();
        }
    };
    ShapeSpaceNavigationEventListener.prototype.resetCurveShapeControlButtons = function () {
        this.resetButtons = true;
        if (this.controlOfEventAtExtremity) {
            this._toggleButtonEventsStayInside.click();
            this._curveShapeSpaceNavigator.controlOfEventsAtExtremity = false;
        }
        if (this._sliding) {
            this._toggleButtonSliding.click();
            this._curveShapeSpaceNavigator.setSlidingDifferentialEvents(false);
        }
        if (this.controlOfCurvatureExtrema) {
            this._toggleButtonCurvatureExtrema.click();
            this._curveShapeSpaceNavigator.setActiveControlCurvatureExtrema(false);
        }
        if (this.controlOfInflection) {
            this._toggleButtonInflection.click();
            this._curveShapeSpaceNavigator.setActiveControlInflections(false);
        }
        this.resetButtons = false;
    };
    ShapeSpaceNavigationEventListener.prototype.restorePreviousCurveShapeControlButtons = function () {
        this.controlOfCurvatureExtrema = this._previousControlOfCurvatureExtrema;
        this.controlOfInflection = this._previousControlOfInflection;
        this._sliding = this._previousSliding;
        this.controlOfEventAtExtremity = this.previousControlOfEventAtExtremity;
        this._curveShapeSpaceNavigator.restoreCurveControlState(this);
    };
    ShapeSpaceNavigationEventListener.prototype.storeCurrentCurveShapeControlButtons = function () {
        this._previousControlOfCurvatureExtrema = this.controlOfCurvatureExtrema;
        this._previousControlOfInflection = this.controlOfInflection;
        this._previousSliding = this._sliding;
        this.previousControlOfEventAtExtremity = this.controlOfEventAtExtremity;
    };
    ShapeSpaceNavigationEventListener.prototype.reinitializePreviousShapeControlButtons = function () {
        this._previousControlOfCurvatureExtrema = false;
        this._previousControlOfInflection = false;
        this._previousSliding = false;
        this.previousControlOfEventAtExtremity = false;
    };
    ShapeSpaceNavigationEventListener.prototype.updateEventMgmtAtCurveExtControlButton = function () {
        if (this.controlOfEventAtExtremity) {
            this._toggleButtonEventsStayInside.click();
        }
    };
    return ShapeSpaceNavigationEventListener;
}());
exports.ShapeSpaceNavigationEventListener = ShapeSpaceNavigationEventListener;
var CurveSceneEventListener = /** @class */ (function () {
    // private readonly iconKnotInsertion: HTMLImageElement;
    // private readonly textureInfo: {width: number, height: number, texture: WebGLTexture|null};
    function CurveSceneEventListener(curveModelDefinitionEventListener, shapeSpaceNavigationEventListener) {
        var _this = this;
        this.canvas = document.getElementById("webgl");
        this.gl = webgl_utils_1.WebGLUtils().setupWebGL(this.canvas);
        this.shapeSpaceNavigationEventListener = shapeSpaceNavigationEventListener;
        this.curveModelDefinitionEventListener = curveModelDefinitionEventListener;
        this._curveSceneController = new CurveSceneController_1.CurveSceneController(this.canvas, this.gl, this.curveModelDefinitionEventListener, this.shapeSpaceNavigationEventListener);
        this.stuffThatCouldBeUsedToLoadAnImageAndProcessTextures();
        this.canvas.addEventListener('mousedown', this.mouse_click.bind(this), false);
        this.canvas.addEventListener('dblclick', this.mouse_double_click.bind(this), false);
        this.canvas.addEventListener('mousemove', this.mouse_drag.bind(this), false);
        this.canvas.addEventListener('mouseup', this.mouse_stop_drag.bind(this), false);
        this.canvas.addEventListener('touchstart', this.touch_click.bind(this), false);
        this.canvas.addEventListener('touchmove', this.touch_drag.bind(this), false);
        this.canvas.addEventListener('touchmove', this.touch_stop_drag.bind(this), false);
        document.body.addEventListener('keydown', this.keyDown.bind(this));
        document.body.addEventListener('keyup', this.keyUp.bind(this));
        // Prevent scrolling when touching the canvas with a tablet device
        document.body.addEventListener("touchstart", function (e) {
            if (e.target === _this.canvas) {
                e.preventDefault();
            }
        }, false);
        document.body.addEventListener("touchend", function (e) {
            if (e.target === _this.canvas) {
                e.preventDefault();
            }
        }, false);
        document.body.addEventListener("touchmove", function (e) {
            if (e.target === _this.canvas) {
                e.preventDefault();
            }
        }, false);
        if (!this.gl) {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "CurveSceneEventListener", "Failed to get the rendering context for WebGL. Stop program.");
            error.logMessageToConsole();
            return;
        }
    }
    Object.defineProperty(CurveSceneEventListener.prototype, "curveSceneController", {
        get: function () {
            return this._curveSceneController;
        },
        enumerable: false,
        configurable: true
    });
    CurveSceneEventListener.prototype.mouse_get_NormalizedDeviceCoordinates = function (event) {
        var rect = this.canvas.getBoundingClientRect();
        var x, y;
        x = ((event.clientX - rect.left) - this.canvas.width / 2) / (this.canvas.width / 2);
        y = (this.canvas.height / 2 - (event.clientY - rect.top)) / (this.canvas.height / 2);
        return [x, y];
    };
    CurveSceneEventListener.prototype.touch_get_NormalizedDeviceCoordinates = function (event) {
        var rect = this.canvas.getBoundingClientRect();
        var x, y;
        var ev = event.touches[0];
        x = ((ev.clientX - rect.left) - this.canvas.width / 2) / (this.canvas.width / 2);
        y = (this.canvas.height / 2 - (ev.clientY - rect.top)) / (this.canvas.height / 2);
        return [x, y];
    };
    CurveSceneEventListener.prototype.mouse_click = function (ev) {
        var c = this.mouse_get_NormalizedDeviceCoordinates(ev);
        this._curveSceneController.leftMouseDown_event(c[0], c[1]);
        this._curveSceneController.renderFrame();
        ev.preventDefault();
    };
    CurveSceneEventListener.prototype.mouse_double_click = function (ev) {
        var c = this.mouse_get_NormalizedDeviceCoordinates(ev);
        var active_clamping = this._curveSceneController.dbleClick_event(c[0], c[1]);
        this._curveSceneController.renderFrame();
        console.log("mouse_double_click: " + active_clamping);
        if (!active_clamping)
            this.curveModelDefinitionEventListener.toggleButtonCurveClamping.click();
        ev.preventDefault();
    };
    CurveSceneEventListener.prototype.mouse_drag = function (ev) {
        var c = this.mouse_get_NormalizedDeviceCoordinates(ev);
        this._curveSceneController.leftMouseDragged_event(c[0], c[1]);
        this._curveSceneController.renderFrame();
        ev.preventDefault();
    };
    CurveSceneEventListener.prototype.mouse_stop_drag = function (ev) {
        this._curveSceneController.leftMouseUp_event();
        ev.preventDefault();
    };
    CurveSceneEventListener.prototype.touch_click = function (ev) {
        var c = this.touch_get_NormalizedDeviceCoordinates(ev);
        this._curveSceneController.leftMouseDown_event(c[0], c[1]);
        this._curveSceneController.renderFrame();
        ev.preventDefault();
    };
    CurveSceneEventListener.prototype.touch_drag = function (ev) {
        var c = this.touch_get_NormalizedDeviceCoordinates(ev);
        this._curveSceneController.leftMouseDragged_event(c[0], c[1]);
        this._curveSceneController.renderFrame();
        ev.preventDefault();
    };
    CurveSceneEventListener.prototype.touch_stop_drag = function (ev) {
        this._curveSceneController.leftMouseUp_event();
        ev.preventDefault();
    };
    CurveSceneEventListener.prototype.keyDown = function (ev) {
        var keyName = ev.key;
        if (keyName === "Shift")
            this._curveSceneController.shiftKeyDown();
    };
    CurveSceneEventListener.prototype.keyUp = function (ev) {
        var keyName = ev.key;
        if (keyName === "Shift")
            this._curveSceneController.shiftKeyUp();
    };
    // All methods hereunder are a basis for tests to be able to load texture from a file and use it as background of the canvas
    CurveSceneEventListener.prototype.processInputTexture = function () {
        // this.textureInfo.width = this.iconKnotInsertion.width;
        // this.textureInfo.height = this.iconKnotInsertion.height;
        // this.gl.bindTexture(this.gl.TEXTURE_2D, this.textureInfo.texture);
        // this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this.iconKnotInsertion);
    };
    CurveSceneEventListener.prototype.stuffThatCouldBeUsedToLoadAnImageAndProcessTextures = function () {
        var VSHADER_SOURCE = 'attribute vec4 a_position;\n' +
            'attribute vec2 a_texcoord;\n' +
            'uniform mat4 u_matrix;\n' +
            'varying vec2 v_texcoord;\n' +
            'void main() {\n' +
            '   gl_Position = u_matrix * a_position;\n' +
            '   v_texcoord = a_texcoord;\n' +
            '}\n';
        var FSHADER_SOURCE = 'precision mediump float;\n' +
            'varying vec2 v_texcoord;\n' +
            'uniform sampler2D u_texture;\n' +
            'void main() {\n' +
            '   gl_FragColor = texture2D(u_texture, v_texcoord);\n' +
            '}\n';
        var program = cuon_utils_1.createProgram(this.gl, VSHADER_SOURCE, FSHADER_SOURCE);
        if (!program) {
            console.log('Failed to create program');
        }
        else {
            //gl.useProgram(program);
            var positionLocation = this.gl.getAttribLocation(program, "a_position");
            var texcoordLocation = this.gl.getAttribLocation(program, "a_texcoord");
            // lookup uniforms
            var matrixLocation = this.gl.getUniformLocation(program, "u_matrix");
            var textureLocation = this.gl.getUniformLocation(program, "u_texture");
        }
        // Create a buffer.
        var positionBuffer = this.gl.createBuffer();
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, positionBuffer);
        // Put a unit quad in the buffer
        var positions = [
            0, 0,
            0, 1,
            1, 0,
            1, 0,
            0, 1,
            1, 1,
        ];
        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(positions), this.gl.STATIC_DRAW);
        // Create a buffer for texture coords
        var texcoordBuffer = this.gl.createBuffer();
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, texcoordBuffer);
        // Put texcoords in the buffer
        var texcoords = [
            0, 0,
            0, 1,
            1, 0,
            1, 0,
            0, 1,
            1, 1,
        ];
        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(texcoords), this.gl.STATIC_DRAW);
        var tex = this.gl.createTexture();
        this.gl.bindTexture(this.gl.TEXTURE_2D, tex);
        // Fill the texture with a 1x1 blue pixel.
        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));
        // let's assume all images are not a power of 2
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);
        // this.textureInfo = {
        //     width: 1,   // we don't know the size until it loads
        //     height: 1,
        //     texture: tex,
        // };
        // this.iconKnotInsertion = new Image();
        // this.iconKnotInsertion.addEventListener('load', this.processInputTexture.bind(this));
    };
    CurveSceneEventListener.prototype.loadImageAndCreateTextureInfo = function (url) {
        var _this = this;
        var tex = this.gl.createTexture();
        this.gl.bindTexture(this.gl.TEXTURE_2D, tex);
        // Fill the texture with a 1x1 blue pixel.
        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));
        // let's assume all images are not a power of 2
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);
        var textureInfo = {
            width: 1,
            height: 1,
            texture: tex,
        };
        var img = new Image();
        img.addEventListener('load', function () {
            textureInfo.width = img.width;
            textureInfo.height = img.height;
            _this.gl.bindTexture(_this.gl.TEXTURE_2D, textureInfo.texture);
            _this.gl.texImage2D(_this.gl.TEXTURE_2D, 0, _this.gl.RGBA, _this.gl.RGBA, _this.gl.UNSIGNED_BYTE, img);
        });
        img.src = url;
        return textureInfo;
    };
    CurveSceneEventListener.prototype.drawImage = function (tex, texWidth, texHeight, dstX, dstY) {
        this.gl.bindTexture(this.gl.TEXTURE_2D, tex);
        // // Tell WebGL to use our shader program pair
        // this.gl.useProgram(program);
        // // Setup the attributes to pull data from our buffers
        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, positionBuffer);
        // this.gl.enableVertexAttribArray(positionLocation);
        // this.gl.vertexAttribPointer(positionLocation, 2, this.gl.FLOAT, false, 0, 0);
        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, texcoordBuffer);
        // this.gl.enableVertexAttribArray(texcoordLocation);
        // this.gl.vertexAttribPointer(texcoordLocation, 2, this.gl.FLOAT, false, 0, 0);
        // // this matrix will convert from pixels to clip space
        // /*var matrix = m4.orthographic(0, gl.canvas.width, gl.canvas.height, 0, -1, 1);
        // // this matrix will translate our quad to dstX, dstY
        // matrix = m4.translate(matrix, dstX, dstY, 0);
        // // this matrix will scale our 1 unit quad
        // // from 1 unit to texWidth, texHeight units
        // matrix = m4.scale(matrix, texWidth, texHeight, 1);
        // // Set the matrix.
        // gl.uniformMatrix4fv(matrixLocation, false, matrix);*/
        // // Tell the shader to get the texture from texture unit 0
        // this.gl.uniform1i(textureLocation, 0);
        // draw the quad (2 triangles, 6 vertices)
        this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);
    };
    return CurveSceneEventListener;
}());
exports.CurveSceneEventListener = CurveSceneEventListener;


/***/ }),

/***/ "./src/views/AbstractGraphicalEntityView.ts":
/*!**************************************************!*\
  !*** ./src/views/AbstractGraphicalEntityView.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractGraphicalEntityView = void 0;
var AbstractGraphicalEntityView = /** @class */ (function () {
    function AbstractGraphicalEntityView(gl) {
        this.gl = gl;
    }
    return AbstractGraphicalEntityView;
}());
exports.AbstractGraphicalEntityView = AbstractGraphicalEntityView;


/***/ }),

/***/ "./src/views/AbstractMouseSelectableButtonView.ts":
/*!********************************************************!*\
  !*** ./src/views/AbstractMouseSelectableButtonView.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractMouseSelectableButtonView = void 0;
var AbstractMouseSelectableGraphicEntityView_1 = __webpack_require__(/*! ./AbstractMouseSelectableGraphicEntityView */ "./src/views/AbstractMouseSelectableGraphicEntityView.ts");
var AbstractMouseSelectableButtonView = /** @class */ (function (_super) {
    __extends(AbstractMouseSelectableButtonView, _super);
    function AbstractMouseSelectableButtonView(gl) {
        var _this = _super.call(this, gl) || this;
        _this.HEIGHT_SIZE = 0.0;
        _this.RATIO_WIDTH_HEIGHT = 0.0;
        _this.X_LOCATION = 0.0;
        _this.Y_LOCATION = 0.0;
        _this.Z = 0;
        _this.RED_COLOR = 0.0;
        _this.GREEN_COLOR = 0.0;
        _this.BLUE_COLOR = 0.0;
        _this.indices = new Uint8Array([]);
        _this.vertexBuffer = null;
        _this.indexBuffer = null;
        _this.vertices = new Float32Array([]);
        _this.indices = new Uint8Array([]);
        return _this;
    }
    AbstractMouseSelectableButtonView.prototype.buttonSelection = function (x, y) {
        var result = false;
        if (Math.pow(x - this.X_LOCATION, 2) + Math.pow(y - this.Y_LOCATION, 2) < this.BTN_SLCTN_ACCURACY_Squared) {
            result = true;
        }
        return result;
    };
    AbstractMouseSelectableButtonView.prototype.updateVerticesAndIndices = function () {
        this.vertices = new Float32Array(4 * 8);
        this.indices = new Uint8Array(2 * 3);
        this.vertices[0] = this.X_LOCATION - this.HEIGHT_SIZE * this.RATIO_WIDTH_HEIGHT;
        this.vertices[1] = this.Y_LOCATION - this.HEIGHT_SIZE;
        this.vertices[2] = this.Z;
        this.vertices[3] = -this.RATIO_WIDTH_HEIGHT;
        this.vertices[4] = -1;
        this.vertices[5] = this.RED_COLOR;
        this.vertices[6] = this.GREEN_COLOR;
        this.vertices[7] = this.BLUE_COLOR;
        this.vertices[8] = this.X_LOCATION + this.HEIGHT_SIZE * this.RATIO_WIDTH_HEIGHT;
        this.vertices[9] = this.Y_LOCATION - this.HEIGHT_SIZE;
        this.vertices[10] = this.Z;
        this.vertices[11] = this.RATIO_WIDTH_HEIGHT;
        this.vertices[12] = -1;
        this.vertices[13] = this.RED_COLOR;
        this.vertices[14] = this.GREEN_COLOR;
        this.vertices[15] = this.BLUE_COLOR;
        this.vertices[16] = this.X_LOCATION + this.HEIGHT_SIZE * this.RATIO_WIDTH_HEIGHT;
        this.vertices[17] = this.Y_LOCATION + this.HEIGHT_SIZE;
        this.vertices[18] = this.Z;
        this.vertices[19] = this.RATIO_WIDTH_HEIGHT;
        this.vertices[20] = 1;
        this.vertices[21] = this.RED_COLOR;
        this.vertices[22] = this.GREEN_COLOR;
        this.vertices[23] = this.BLUE_COLOR;
        this.vertices[24] = this.X_LOCATION - this.HEIGHT_SIZE * this.RATIO_WIDTH_HEIGHT;
        this.vertices[25] = this.Y_LOCATION + this.HEIGHT_SIZE;
        this.vertices[26] = this.Z;
        this.vertices[27] = -this.RATIO_WIDTH_HEIGHT;
        this.vertices[28] = 1;
        this.vertices[29] = this.RED_COLOR;
        this.vertices[30] = this.GREEN_COLOR;
        this.vertices[31] = this.BLUE_COLOR;
        this.indices[0] = 0;
        this.indices[1] = 1;
        this.indices[2] = 2;
        this.indices[3] = 0;
        this.indices[4] = 2;
        this.indices[5] = 3;
    };
    AbstractMouseSelectableButtonView.prototype.updateBuffers = function () {
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
    };
    return AbstractMouseSelectableButtonView;
}(AbstractMouseSelectableGraphicEntityView_1.AbstractMouseSelectableGraphicEntityView));
exports.AbstractMouseSelectableButtonView = AbstractMouseSelectableButtonView;


/***/ }),

/***/ "./src/views/AbstractMouseSelectableGraphicEntityView.ts":
/*!***************************************************************!*\
  !*** ./src/views/AbstractMouseSelectableGraphicEntityView.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractMouseSelectableGraphicEntityView = exports.BTN_SLCTN_ACCURACY_Squared = exports.SLCTN_ACCURACY_Squared = void 0;
var AbstractGraphicalEntityView_1 = __webpack_require__(/*! ./AbstractGraphicalEntityView */ "./src/views/AbstractGraphicalEntityView.ts");
exports.SLCTN_ACCURACY_Squared = 0.005;
exports.BTN_SLCTN_ACCURACY_Squared = 0.01;
var AbstractMouseSelectableGraphicEntityView = /** @class */ (function (_super) {
    __extends(AbstractMouseSelectableGraphicEntityView, _super);
    function AbstractMouseSelectableGraphicEntityView(gl) {
        var _this = _super.call(this, gl) || this;
        _this.SLCTN_ACCURACY_Squared = exports.SLCTN_ACCURACY_Squared;
        _this.BTN_SLCTN_ACCURACY_Squared = exports.BTN_SLCTN_ACCURACY_Squared;
        _this.selectedPoints = [];
        return _this;
    }
    return AbstractMouseSelectableGraphicEntityView;
}(AbstractGraphicalEntityView_1.AbstractGraphicalEntityView));
exports.AbstractMouseSelectableGraphicEntityView = AbstractMouseSelectableGraphicEntityView;


/***/ }),

/***/ "./src/views/AbstractMouseSelectablePointView.ts":
/*!*******************************************************!*\
  !*** ./src/views/AbstractMouseSelectablePointView.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractMouseSelectablePointView = void 0;
var PeriodicBSplineR1toR2withOpenKnotSequence_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence */ "./src/newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence.ts");
var AbstractMouseSelectableGraphicEntityView_1 = __webpack_require__(/*! ./AbstractMouseSelectableGraphicEntityView */ "./src/views/AbstractMouseSelectableGraphicEntityView.ts");
var AbstractMouseSelectablePointView = /** @class */ (function (_super) {
    __extends(AbstractMouseSelectablePointView, _super);
    function AbstractMouseSelectablePointView(gl, spline) {
        var _this = _super.call(this, gl) || this;
        _this.Z = 0;
        _this.DOT_SIZE = 0;
        _this.RED_COLOR = 0;
        _this.GREEN_COLOR = 0;
        _this.BLUE_COLOR = 0;
        _this.ALPHA = 1;
        _this.vertexBuffer = null;
        _this.indexBuffer = null;
        _this.vertices = new Float32Array([]);
        _this.indices = new Uint8Array([]);
        _this.pointSequenceToDisplay = [];
        _this.selectedPointIndex = null;
        _this.selectedKnotIndex = null;
        _this.spline = spline;
        _this.controlPoints = spline.controlPoints;
        if (spline instanceof PeriodicBSplineR1toR2withOpenKnotSequence_1.PeriodicBSplineR1toR2withOpenKnotSequence) {
            _this.controlPoints = spline.freeControlPoints;
        }
        _this.knots = spline.getDistinctKnots();
        return _this;
    }
    AbstractMouseSelectablePointView.prototype.pointSelection = function (x, y, deltaSquared) {
        if (deltaSquared === void 0) { deltaSquared = this.SLCTN_ACCURACY_Squared; }
        this.selectedPointIndex = null;
        for (var i = 0; i < this.controlPoints.length; i += 1) {
            if (Math.pow(x - this.controlPoints[i].x, 2) + Math.pow(y - this.controlPoints[i].y, 2) < deltaSquared) {
                return this.selectedPointIndex = i;
            }
        }
        return this.selectedPointIndex;
    };
    AbstractMouseSelectablePointView.prototype.knotSelection = function (x, y, deltaSquared) {
        if (deltaSquared === void 0) { deltaSquared = this.SLCTN_ACCURACY_Squared; }
        this.selectedKnotIndex = null;
        for (var i = 0; i < this.knots.length; i += 1) {
            var curvePnt = this.spline.evaluate(this.knots[i]);
            if (Math.pow(x - curvePnt.x, 2) + Math.pow(y - curvePnt.y, 2) < deltaSquared) {
                return this.selectedKnotIndex = i;
            }
        }
        return this.selectedKnotIndex;
    };
    AbstractMouseSelectablePointView.prototype.getSelectedPoint = function () {
        return this.selectedPointIndex;
    };
    AbstractMouseSelectablePointView.prototype.updateVerticesAndIndices = function () {
        this.vertices = new Float32Array(this.pointSequenceToDisplay.length * 32);
        this.indices = new Uint8Array(this.pointSequenceToDisplay.length * 6);
        for (var i = 0; i < this.pointSequenceToDisplay.length; i += 1) {
            var x = this.pointSequenceToDisplay[i].x;
            var y = this.pointSequenceToDisplay[i].y;
            this.vertices[32 * i] = x - this.DOT_SIZE;
            this.vertices[32 * i + 1] = y - this.DOT_SIZE;
            this.vertices[32 * i + 2] = this.Z;
            this.vertices[32 * i + 3] = -1;
            this.vertices[32 * i + 4] = -1;
            this.vertices[32 * i + 5] = this.RED_COLOR;
            this.vertices[32 * i + 6] = this.GREEN_COLOR;
            this.vertices[32 * i + 7] = this.BLUE_COLOR;
            this.vertices[32 * i + 8] = x + this.DOT_SIZE;
            this.vertices[32 * i + 9] = y - this.DOT_SIZE;
            this.vertices[32 * i + 10] = this.Z;
            this.vertices[32 * i + 11] = 1;
            this.vertices[32 * i + 12] = -1;
            this.vertices[32 * i + 13] = this.RED_COLOR;
            this.vertices[32 * i + 14] = this.GREEN_COLOR;
            this.vertices[32 * i + 15] = this.BLUE_COLOR;
            this.vertices[32 * i + 16] = x + this.DOT_SIZE;
            this.vertices[32 * i + 17] = y + this.DOT_SIZE;
            this.vertices[32 * i + 18] = this.Z;
            this.vertices[32 * i + 19] = 1;
            this.vertices[32 * i + 20] = 1;
            this.vertices[32 * i + 21] = this.RED_COLOR;
            this.vertices[32 * i + 22] = this.GREEN_COLOR;
            this.vertices[32 * i + 23] = this.BLUE_COLOR;
            this.vertices[32 * i + 24] = x - this.DOT_SIZE;
            this.vertices[32 * i + 25] = y + this.DOT_SIZE;
            this.vertices[32 * i + 26] = this.Z;
            this.vertices[32 * i + 27] = -1;
            this.vertices[32 * i + 28] = 1;
            this.vertices[32 * i + 29] = this.RED_COLOR;
            this.vertices[32 * i + 30] = this.GREEN_COLOR;
            this.vertices[32 * i + 31] = this.BLUE_COLOR;
            this.indices[6 * i] = 4 * i;
            this.indices[6 * i + 1] = 4 * i + 1;
            this.indices[6 * i + 2] = 4 * i + 2;
            this.indices[6 * i + 3] = 4 * i;
            this.indices[6 * i + 4] = 4 * i + 2;
            this.indices[6 * i + 5] = 4 * i + 3;
        }
    };
    AbstractMouseSelectablePointView.prototype.updateBuffers = function () {
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
    };
    return AbstractMouseSelectablePointView;
}(AbstractMouseSelectableGraphicEntityView_1.AbstractMouseSelectableGraphicEntityView));
exports.AbstractMouseSelectablePointView = AbstractMouseSelectablePointView;


/***/ }),

/***/ "./src/views/AbstractPointView.ts":
/*!****************************************!*\
  !*** ./src/views/AbstractPointView.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractPointView = void 0;
var AbstractGraphicalEntityView_1 = __webpack_require__(/*! ./AbstractGraphicalEntityView */ "./src/views/AbstractGraphicalEntityView.ts");
var AbstractPointView = /** @class */ (function (_super) {
    __extends(AbstractPointView, _super);
    function AbstractPointView(gl) {
        var _this = _super.call(this, gl) || this;
        _this.Z = 0;
        _this.DOT_SIZE = 0;
        _this.RED_COLOR = 0;
        _this.GREEN_COLOR = 0;
        _this.BLUE_COLOR = 0;
        _this.ALPHA = 1;
        _this.vertexBuffer = null;
        _this.indexBuffer = null;
        _this.vertices = new Float32Array([]);
        _this.indices = new Uint8Array([]);
        _this.pointSequenceToDisplay = [];
        return _this;
    }
    AbstractPointView.prototype.updateVerticesAndIndices = function () {
        this.vertices = new Float32Array(this.pointSequenceToDisplay.length * 32);
        this.indices = new Uint8Array(this.pointSequenceToDisplay.length * 6);
        for (var i = 0; i < this.pointSequenceToDisplay.length; i += 1) {
            var x = this.pointSequenceToDisplay[i].x;
            var y = this.pointSequenceToDisplay[i].y;
            this.vertices[32 * i] = x - this.DOT_SIZE;
            this.vertices[32 * i + 1] = y - this.DOT_SIZE;
            this.vertices[32 * i + 2] = this.Z;
            this.vertices[32 * i + 3] = -1;
            this.vertices[32 * i + 4] = -1;
            this.vertices[32 * i + 5] = this.RED_COLOR;
            this.vertices[32 * i + 6] = this.GREEN_COLOR;
            this.vertices[32 * i + 7] = this.BLUE_COLOR;
            this.vertices[32 * i + 8] = x + this.DOT_SIZE;
            this.vertices[32 * i + 9] = y - this.DOT_SIZE;
            this.vertices[32 * i + 10] = this.Z;
            this.vertices[32 * i + 11] = 1;
            this.vertices[32 * i + 12] = -1;
            this.vertices[32 * i + 13] = this.RED_COLOR;
            this.vertices[32 * i + 14] = this.GREEN_COLOR;
            this.vertices[32 * i + 15] = this.BLUE_COLOR;
            this.vertices[32 * i + 16] = x + this.DOT_SIZE;
            this.vertices[32 * i + 17] = y + this.DOT_SIZE;
            this.vertices[32 * i + 18] = this.Z;
            this.vertices[32 * i + 19] = 1;
            this.vertices[32 * i + 20] = 1;
            this.vertices[32 * i + 21] = this.RED_COLOR;
            this.vertices[32 * i + 22] = this.GREEN_COLOR;
            this.vertices[32 * i + 23] = this.BLUE_COLOR;
            this.vertices[32 * i + 24] = x - this.DOT_SIZE;
            this.vertices[32 * i + 25] = y + this.DOT_SIZE;
            this.vertices[32 * i + 26] = this.Z;
            this.vertices[32 * i + 27] = -1;
            this.vertices[32 * i + 28] = 1;
            this.vertices[32 * i + 29] = this.RED_COLOR;
            this.vertices[32 * i + 30] = this.GREEN_COLOR;
            this.vertices[32 * i + 31] = this.BLUE_COLOR;
            this.indices[6 * i] = 4 * i;
            this.indices[6 * i + 1] = 4 * i + 1;
            this.indices[6 * i + 2] = 4 * i + 2;
            this.indices[6 * i + 3] = 4 * i;
            this.indices[6 * i + 4] = 4 * i + 2;
            this.indices[6 * i + 5] = 4 * i + 3;
        }
    };
    AbstractPointView.prototype.updateBuffers = function () {
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
    };
    return AbstractPointView;
}(AbstractGraphicalEntityView_1.AbstractGraphicalEntityView));
exports.AbstractPointView = AbstractPointView;


/***/ }),

/***/ "./src/views/ClampedControlPointView.ts":
/*!**********************************************!*\
  !*** ./src/views/ClampedControlPointView.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClampedControlPointView = void 0;
var RoundDotTwoLevelsTransparencyShader_1 = __webpack_require__(/*! ../2DgraphicsItems/RoundDotTwoLevelsTransparencyShader */ "./src/2DgraphicsItems/RoundDotTwoLevelsTransparencyShader.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var AbstractMouseSelectablePointView_1 = __webpack_require__(/*! ./AbstractMouseSelectablePointView */ "./src/views/AbstractMouseSelectablePointView.ts");
var ShapeNavigableCurve_1 = __webpack_require__(/*! ../shapeNavigableCurve/ShapeNavigableCurve */ "./src/shapeNavigableCurve/ShapeNavigableCurve.ts");
var ClampedControlPointView = /** @class */ (function (_super) {
    __extends(ClampedControlPointView, _super);
    function ClampedControlPointView(gl, spline, clampedCPindices) {
        var e_1, _a;
        var _this = _super.call(this, gl, spline) || this;
        _this.Z = 0;
        _this.DOT_SIZE = 0.03;
        _this.RED_COLOR = 0.0;
        _this.GREEN_COLOR = 0.0;
        _this.BLUE_COLOR = 1.0;
        _this.roundDotTwoLevelsTransparencyShader = new RoundDotTwoLevelsTransparencyShader_1.RoundDotTwoLevelsTransparencyShader(_this.gl);
        _this.selectedPoints = [];
        for (var i = 0; i < clampedCPindices.length; i++) {
            if (clampedCPindices[i] !== ShapeNavigableCurve_1.NO_CONSTRAINT)
                _this.selectedPoints.push(clampedCPindices[i]);
        }
        _this.knots = spline.getDistinctKnots();
        try {
            for (var _b = __values(_this.selectedPoints), _c = _b.next(); !_c.done; _c = _b.next()) {
                var index = _c.value;
                _this.pointSequenceToDisplay.push(spline.evaluate(_this.knots[index]));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        _this.a_Position = -1;
        _this.a_Texture = -1;
        _this.a_Color = -1;
        _this.FSIZE = 0;
        // Write the positions of vertices to a vertex shader
        var check = _this.initVertexBuffers();
        if (check < 0) {
            var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, "constructor", 'Failed to set the positions of the vertices.');
            warning.logMessageToConsole();
        }
        return _this;
    }
    ClampedControlPointView.prototype.initAttribLocation = function () {
        this.a_Position = this.gl.getAttribLocation(this.roundDotTwoLevelsTransparencyShader.program, 'a_Position');
        this.a_Texture = this.gl.getAttribLocation(this.roundDotTwoLevelsTransparencyShader.program, 'a_Texture');
        this.a_Color = this.gl.getAttribLocation(this.roundDotTwoLevelsTransparencyShader.program, 'a_Color');
        this.FSIZE = this.vertices.BYTES_PER_ELEMENT;
        if (this.a_Position < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Position.');
            warning.logMessageToConsole();
        }
        if (this.a_Texture < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Texture.');
            warning.logMessageToConsole();
        }
        if (this.a_Color < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Color');
            warning.logMessageToConsole();
        }
    };
    ClampedControlPointView.prototype.assignVertexAttrib = function () {
        // Assign the buffer object to a_Position variable
        this.gl.vertexAttribPointer(this.a_Position, 3, this.gl.FLOAT, false, this.FSIZE * 8, 0);
        this.gl.vertexAttribPointer(this.a_Texture, 2, this.gl.FLOAT, false, this.FSIZE * 8, this.FSIZE * 3);
        this.gl.vertexAttribPointer(this.a_Color, 3, this.gl.FLOAT, false, this.FSIZE * 8, this.FSIZE * 5);
        // Enable the assignment to a_Position variable
        this.gl.enableVertexAttribArray(this.a_Position);
        this.gl.enableVertexAttribArray(this.a_Texture);
        this.gl.enableVertexAttribArray(this.a_Color);
    };
    ClampedControlPointView.prototype.initVertexBuffers = function () {
        this.updateVerticesAndIndices();
        // Create a buffer object
        this.vertexBuffer = this.gl.createBuffer();
        if (!this.vertexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the vertex buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        // Bind the buffer objects to targets
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        // Write date into the buffer object
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.initAttribLocation();
        this.assignVertexAttrib();
        // Unbind the buffer object
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.indexBuffer = this.gl.createBuffer();
        if (!this.indexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the index buffer object');
            warning.logMessageToConsole();
            return -1;
        }
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        return this.indices.length;
    };
    ClampedControlPointView.prototype.renderFrame = function () {
        this.initAttribLocation();
        this.gl.useProgram(this.roundDotTwoLevelsTransparencyShader.program);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.assignVertexAttrib();
        this.roundDotTwoLevelsTransparencyShader.renderFrame(this.indices.length, this.selectedKnotIndex);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.useProgram(null);
    };
    ClampedControlPointView.prototype.update = function (spline) {
        var e_2, _a;
        this.pointSequenceToDisplay = [];
        this.spline = spline;
        this.controlPoints = spline.controlPoints;
        this.knots = spline.getDistinctKnots();
        try {
            for (var _b = __values(this.selectedPoints), _c = _b.next(); !_c.done; _c = _b.next()) {
                var index = _c.value;
                this.pointSequenceToDisplay.push(spline.evaluate(this.knots[index]));
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this.updateVerticesAndIndices();
        this.updateBuffers();
    };
    ClampedControlPointView.prototype.reset = function (spline) {
    };
    ClampedControlPointView.prototype.updateSelectedPoints = function (knotIndex) {
        var index = this.selectedPoints.findIndex(function (element) { return element == knotIndex; });
        if (index !== -1) {
            this.selectedPoints.splice(index, 1);
        }
        else if (this.selectedPoints.length < 2) {
            this.selectedPoints.push(knotIndex);
        }
        else {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, 'updateSelectedPoints', ' inconsistent number of clamped points !');
            warning.logMessageToConsole();
        }
    };
    ClampedControlPointView.prototype.clearSelectedPoints = function () {
        this.selectedPoints = [];
        this.pointSequenceToDisplay = [];
    };
    ClampedControlPointView.prototype.setSelected = function (pointIndex) {
        // this.selectedKnotIndex = knotIndex;
        this.selectedPointIndex = pointIndex;
    };
    ClampedControlPointView.prototype.setSelectedKnot = function (knotIndex) {
        if (this.selectedPoints.length < ShapeNavigableCurve_1.MAX_CLAMPED_POINTS) {
            this.selectedPoints.push(knotIndex);
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, 'setSelectedKnot', 'Try to insert a clamped point but maximum number of clamped points exceeded.');
            error.logMessageToConsole();
        }
    };
    return ClampedControlPointView;
}(AbstractMouseSelectablePointView_1.AbstractMouseSelectablePointView));
exports.ClampedControlPointView = ClampedControlPointView;


/***/ }),

/***/ "./src/views/ClickButtonView.ts":
/*!**************************************!*\
  !*** ./src/views/ClickButtonView.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClickButtonView = void 0;
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var InsertKnotButtonDialogShader_1 = __webpack_require__(/*! ../2DgraphicsItems/InsertKnotButtonDialogShader */ "./src/2DgraphicsItems/InsertKnotButtonDialogShader.ts");
var AbstractMouseSelectableButtonView_1 = __webpack_require__(/*! ./AbstractMouseSelectableButtonView */ "./src/views/AbstractMouseSelectableButtonView.ts");
var ClickButtonView = /** @class */ (function (_super) {
    __extends(ClickButtonView, _super);
    function ClickButtonView(gl) {
        var _this = _super.call(this, gl) || this;
        _this.HEIGHT_SIZE = 0.05;
        _this.RATIO_WIDTH_HEIGHT = 1.5;
        _this.RED_COLOR = 0.5;
        _this.GREEN_COLOR = 0.5;
        _this.BLUE_COLOR = 0.5;
        _this.X_LOCATION = -0.8;
        _this.Y_LOCATION = 0.8;
        _this.Z = 0;
        _this.insertKnotButtonDialogShader = new InsertKnotButtonDialogShader_1.InsertKnotButtonDialogShader(_this.gl);
        _this.a_Position = -1;
        _this.a_Texture = -1;
        _this.a_Color = -1;
        _this.FSIZE = 0;
        var check = _this.initVertexBuffers();
        if (check < 0) {
            var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, "constructor", 'Failed to set the positions of the vertices.');
            warning.logMessageToConsole();
        }
        return _this;
    }
    ClickButtonView.prototype.initAttribLocation = function () {
        this.a_Position = this.gl.getAttribLocation(this.insertKnotButtonDialogShader.program, 'a_Position');
        this.a_Texture = this.gl.getAttribLocation(this.insertKnotButtonDialogShader.program, 'a_Texture'),
            this.a_Color = this.gl.getAttribLocation(this.insertKnotButtonDialogShader.program, 'a_Color'),
            this.FSIZE = this.vertices.BYTES_PER_ELEMENT;
        if (this.a_Position < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Position.');
            warning.logMessageToConsole();
        }
        if (this.a_Texture < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Texture.');
            warning.logMessageToConsole();
        }
        if (this.a_Color < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Color');
            warning.logMessageToConsole();
        }
    };
    ClickButtonView.prototype.assignVertexAttrib = function () {
        // Assign the buffer object to a_Position variable
        this.gl.vertexAttribPointer(this.a_Position, 3, this.gl.FLOAT, false, this.FSIZE * 8, 0);
        this.gl.vertexAttribPointer(this.a_Texture, 2, this.gl.FLOAT, false, this.FSIZE * 8, this.FSIZE * 3);
        this.gl.vertexAttribPointer(this.a_Color, 3, this.gl.FLOAT, false, this.FSIZE * 8, this.FSIZE * 5);
        // Enable the assignment to a_Position variable
        this.gl.enableVertexAttribArray(this.a_Position);
        this.gl.enableVertexAttribArray(this.a_Texture);
        this.gl.enableVertexAttribArray(this.a_Color);
    };
    ClickButtonView.prototype.initVertexBuffers = function () {
        this.updateVerticesAndIndices();
        // Create a buffer object
        this.vertexBuffer = this.gl.createBuffer();
        if (!this.vertexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the vertex buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        // Bind the buffer objects to targets
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        // Write date into the buffer object
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.initAttribLocation();
        this.assignVertexAttrib();
        // Unbind the buffer object
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.indexBuffer = this.gl.createBuffer();
        if (!this.indexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the index buffer object');
            warning.logMessageToConsole();
            return -1;
        }
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        return this.indices.length;
    };
    ClickButtonView.prototype.renderFrame = function () {
        this.initAttribLocation();
        this.gl.useProgram(this.insertKnotButtonDialogShader.program);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.assignVertexAttrib();
        this.insertKnotButtonDialogShader.renderFrame(this.indices.length);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.useProgram(null);
    };
    return ClickButtonView;
}(AbstractMouseSelectableButtonView_1.AbstractMouseSelectableButtonView));
exports.ClickButtonView = ClickButtonView;


/***/ }),

/***/ "./src/views/ControlPointsView.ts":
/*!****************************************!*\
  !*** ./src/views/ControlPointsView.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ControlPointsView = void 0;
var RoundDotTwoLevelsTransparencyShader_1 = __webpack_require__(/*! ../2DgraphicsItems/RoundDotTwoLevelsTransparencyShader */ "./src/2DgraphicsItems/RoundDotTwoLevelsTransparencyShader.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var AbstractMouseSelectablePointView_1 = __webpack_require__(/*! ./AbstractMouseSelectablePointView */ "./src/views/AbstractMouseSelectablePointView.ts");
var PeriodicBSplineR1toR2withOpenKnotSequence_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence */ "./src/newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence.ts");
var BSplineR1toR2_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2 */ "./src/newBsplines/BSplineR1toR2.ts");
var ControlPointsView = /** @class */ (function (_super) {
    __extends(ControlPointsView, _super);
    function ControlPointsView(gl, spline) {
        var _this = _super.call(this, gl, spline) || this;
        _this.Z = 0;
        _this.DOT_SIZE = 0.03;
        _this.RED_COLOR = 1.0;
        _this.GREEN_COLOR = 1.0;
        _this.BLUE_COLOR = 1.0;
        _this.roundDotTwoLevelsTransparencyShader = new RoundDotTwoLevelsTransparencyShader_1.RoundDotTwoLevelsTransparencyShader(_this.gl);
        _this.pointSequenceToDisplay = spline.controlPoints;
        if (spline instanceof PeriodicBSplineR1toR2withOpenKnotSequence_1.PeriodicBSplineR1toR2withOpenKnotSequence) {
            _this.pointSequenceToDisplay = spline.freeControlPoints;
        }
        _this.a_Position = -1;
        _this.a_Texture = -1;
        _this.a_Color = -1;
        _this.FSIZE = 0;
        // Write the positions of vertices to a vertex shader
        var check = _this.initVertexBuffers();
        if (check < 0) {
            var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, "constructor", 'Failed to set the positions of the vertices');
            warning.logMessageToConsole();
        }
        _this.updateVerticesAndIndices();
        _this.updateBuffers();
        return _this;
    }
    ControlPointsView.prototype.initAttribLocation = function () {
        this.a_Position = this.gl.getAttribLocation(this.roundDotTwoLevelsTransparencyShader.program, 'a_Position');
        this.a_Texture = this.gl.getAttribLocation(this.roundDotTwoLevelsTransparencyShader.program, 'a_Texture');
        this.a_Color = this.gl.getAttribLocation(this.roundDotTwoLevelsTransparencyShader.program, 'a_Color');
        this.FSIZE = this.vertices.BYTES_PER_ELEMENT;
        if (this.a_Position < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Position.');
            warning.logMessageToConsole();
        }
        if (this.a_Texture < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Texture');
            warning.logMessageToConsole();
        }
        if (this.a_Color < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Color');
            warning.logMessageToConsole();
        }
    };
    ControlPointsView.prototype.assignVertexAttrib = function () {
        // Assign the buffer object to a_Position variable
        this.gl.vertexAttribPointer(this.a_Position, 3, this.gl.FLOAT, false, this.FSIZE * 8, 0);
        this.gl.vertexAttribPointer(this.a_Texture, 2, this.gl.FLOAT, false, this.FSIZE * 8, this.FSIZE * 3);
        this.gl.vertexAttribPointer(this.a_Color, 3, this.gl.FLOAT, false, this.FSIZE * 8, this.FSIZE * 5);
        // Enable the assignment to a_Position variable
        this.gl.enableVertexAttribArray(this.a_Position);
        this.gl.enableVertexAttribArray(this.a_Texture);
        this.gl.enableVertexAttribArray(this.a_Color);
    };
    ControlPointsView.prototype.initVertexBuffers = function () {
        this.updateVerticesAndIndices();
        // Create a buffer object
        this.vertexBuffer = this.gl.createBuffer();
        if (!this.vertexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the vertex buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        // Bind the buffer objects to targets
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        // Write date into the buffer object
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.initAttribLocation();
        this.assignVertexAttrib();
        // Unbind the buffer object
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.indexBuffer = this.gl.createBuffer();
        if (!this.indexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the index buffer object');
            warning.logMessageToConsole();
            return -1;
        }
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        return this.indices.length;
    };
    ControlPointsView.prototype.renderFrame = function () {
        this.initAttribLocation();
        this.gl.useProgram(this.roundDotTwoLevelsTransparencyShader.program);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.assignVertexAttrib();
        this.roundDotTwoLevelsTransparencyShader.renderFrame(this.indices.length, this.selectedPointIndex);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.useProgram(null);
    };
    ControlPointsView.prototype.reset = function (spline) {
    };
    ControlPointsView.prototype.update = function (spline) {
        this.spline = spline;
        if (spline instanceof BSplineR1toR2_1.BSplineR1toR2) {
            this.pointSequenceToDisplay = spline.controlPoints;
            this.controlPoints = spline.controlPoints;
        }
        else if (spline instanceof PeriodicBSplineR1toR2withOpenKnotSequence_1.PeriodicBSplineR1toR2withOpenKnotSequence) {
            this.pointSequenceToDisplay = spline.freeControlPoints;
            this.controlPoints = spline.freeControlPoints;
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "update", "unknown type of curve. Unable to assign the pointSequenceToDisplay.");
            error.logMessageToConsole();
        }
        this.updateVerticesAndIndices();
        this.updateBuffers();
    };
    ControlPointsView.prototype.setSelected = function (controlPointIndex) {
        this.selectedPointIndex = controlPointIndex;
    };
    return ControlPointsView;
}(AbstractMouseSelectablePointView_1.AbstractMouseSelectablePointView));
exports.ControlPointsView = ControlPointsView;


/***/ }),

/***/ "./src/views/ControlPolygonView.ts":
/*!*****************************************!*\
  !*** ./src/views/ControlPolygonView.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ControlPolygonView = void 0;
var LineSegmentShader_1 = __webpack_require__(/*! ../2DgraphicsItems/LineSegmentShader */ "./src/2DgraphicsItems/LineSegmentShader.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var BSplineR1toR2_1 = __webpack_require__(/*! ../newBsplines/BSplineR1toR2 */ "./src/newBsplines/BSplineR1toR2.ts");
var PeriodicBSplineR1toR2withOpenKnotSequence_1 = __webpack_require__(/*! ../newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence */ "./src/newBsplines/PeriodicBSplineR1toR2withOpenKnotSequence.ts");
var ControlPolygonView = /** @class */ (function () {
    function ControlPolygonView(gl, spline) {
        this.Z = 0;
        this.THICKNESS = 0.003;
        this.RED_COLOR = 216 / 255;
        this.GREEN_COLOR = 216 / 255;
        this.BLUE_COLOR = 216 / 255;
        this.ALPHA = 0.05;
        this.vertexBuffer = null;
        this.indexBuffer = null;
        this.vertices = new Float32Array([]);
        this.indices = new Uint8Array([]);
        this.gl = gl;
        this.lineSegmentShader = new LineSegmentShader_1.LineSegmentShader(this.gl);
        // this.controlPoints = spline.visibleControlPoints()
        this.controlPoints = spline.controlPoints;
        if (spline instanceof PeriodicBSplineR1toR2withOpenKnotSequence_1.PeriodicBSplineR1toR2withOpenKnotSequence) {
            this.controlPoints = spline.freeControlPoints;
            this.controlPoints.push(this.controlPoints[0]);
        }
        this.a_Position = -1;
        this.fColorLocation = -1;
        // Write the positions of vertices to a vertex shader
        var check = this.initVertexBuffers();
        if (check < 0) {
            console.log('Failed to set the positions of the vertices');
        }
    }
    ControlPolygonView.prototype.updateVerticesAndIndices = function () {
        this.vertices = new Float32Array(this.controlPoints.length * 12);
        this.indices = new Uint8Array(this.controlPoints.length * 6);
        for (var i = 0; i < this.controlPoints.length - 1; i += 1) {
            var normal = this.controlPoints[i + 1].substract(this.controlPoints[i]).normalize().rotate90degrees();
            this.vertices[12 * i] = this.controlPoints[i].x - this.THICKNESS * normal.x;
            this.vertices[12 * i + 1] = this.controlPoints[i].y - this.THICKNESS * normal.y;
            this.vertices[12 * i + 2] = this.Z;
            this.vertices[12 * i + 3] = this.controlPoints[i + 1].x - this.THICKNESS * normal.x;
            this.vertices[12 * i + 4] = this.controlPoints[i + 1].y - this.THICKNESS * normal.y;
            this.vertices[12 * i + 5] = this.Z;
            this.vertices[12 * i + 6] = this.controlPoints[i + 1].x + this.THICKNESS * normal.x;
            this.vertices[12 * i + 7] = this.controlPoints[i + 1].y + this.THICKNESS * normal.y;
            this.vertices[12 * i + 8] = this.Z;
            this.vertices[12 * i + 9] = this.controlPoints[i].x + this.THICKNESS * normal.x;
            this.vertices[12 * i + 10] = this.controlPoints[i].y + this.THICKNESS * normal.y;
            this.vertices[12 * i + 11] = this.Z;
            this.indices[6 * i] = 4 * i;
            this.indices[6 * i + 1] = 4 * i + 1;
            this.indices[6 * i + 2] = 4 * i + 2;
            this.indices[6 * i + 3] = 4 * i;
            this.indices[6 * i + 4] = 4 * i + 2;
            this.indices[6 * i + 5] = 4 * i + 3;
        }
    };
    ControlPolygonView.prototype.initAttribLocation = function () {
        this.a_Position = this.gl.getAttribLocation(this.lineSegmentShader.program, 'a_Position');
        this.fColorLocation = this.gl.getUniformLocation(this.lineSegmentShader.program, "fColor");
        if (this.a_Position < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Position.');
            warning.logMessageToConsole();
        }
    };
    ControlPolygonView.prototype.assignVertexAttrib = function () {
        // Assign the buffer object to a_Position variable
        this.gl.vertexAttribPointer(this.a_Position, 3, this.gl.FLOAT, false, 0, 0);
        // Enable the assignment to a_Position variable
        this.gl.enableVertexAttribArray(this.a_Position);
    };
    ControlPolygonView.prototype.initVertexBuffers = function () {
        this.updateVerticesAndIndices();
        // Create a buffer object
        this.vertexBuffer = this.gl.createBuffer();
        if (!this.vertexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the vertex buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        // Bind the buffer objects to targets
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        // Write date into the buffer object
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.initAttribLocation();
        this.assignVertexAttrib();
        // Unbind the buffer object
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.indexBuffer = this.gl.createBuffer();
        if (!this.indexBuffer) {
            console.log('Failed to create the index buffer object');
            return -1;
        }
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        return this.indices.length;
    };
    ControlPolygonView.prototype.renderFrame = function () {
        this.initAttribLocation();
        this.gl.useProgram(this.lineSegmentShader.program);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.assignVertexAttrib();
        this.gl.uniform4f(this.fColorLocation, this.RED_COLOR, this.GREEN_COLOR, this.BLUE_COLOR, this.ALPHA);
        this.lineSegmentShader.renderFrame(this.indices.length);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.useProgram(null);
    };
    ControlPolygonView.prototype.update = function (spline) {
        if (spline instanceof BSplineR1toR2_1.BSplineR1toR2) {
            this.controlPoints = spline.controlPoints;
        }
        else if (spline instanceof PeriodicBSplineR1toR2withOpenKnotSequence_1.PeriodicBSplineR1toR2withOpenKnotSequence) {
            this.controlPoints = spline.freeControlPoints;
            this.controlPoints.push(this.controlPoints[0]);
        }
        else {
            var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "update", "unknown type of curve. Unable to assign the controlPoints.");
            error.logMessageToConsole();
        }
        this.updateVerticesAndIndices();
        this.updateBuffers();
    };
    ControlPolygonView.prototype.reset = function (spline) {
    };
    ControlPolygonView.prototype.updateBuffers = function () {
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
    };
    return ControlPolygonView;
}());
exports.ControlPolygonView = ControlPolygonView;


/***/ }),

/***/ "./src/views/CurvatureExtremaView.ts":
/*!*******************************************!*\
  !*** ./src/views/CurvatureExtremaView.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurvatureExtremaView = void 0;
var RoundDotSolidShader_1 = __webpack_require__(/*! ../2DgraphicsItems/RoundDotSolidShader */ "./src/2DgraphicsItems/RoundDotSolidShader.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var AbstractPointView_1 = __webpack_require__(/*! ./AbstractPointView */ "./src/views/AbstractPointView.ts");
var CurvatureExtremaView = /** @class */ (function (_super) {
    __extends(CurvatureExtremaView, _super);
    function CurvatureExtremaView(gl, curveModelDifferentialEvents) {
        var _this = _super.call(this, gl) || this;
        _this.Z = 0;
        _this.DOT_SIZE = 0.03;
        _this.RED_COLOR = 216 / 255;
        _this.GREEN_COLOR = 91 / 255;
        _this.BLUE_COLOR = 95 / 255;
        _this.ALPHA = 1;
        _this.roundDotSolidShader = new RoundDotSolidShader_1.RoundDotSolidShader(_this.gl);
        _this.curveModelDifferentialEvents = curveModelDifferentialEvents;
        _this.pointSequenceToDisplay = _this.curveModelDifferentialEvents.curvatureExtremaLocationsEuclideanSpace;
        _this.a_Position = -1;
        _this.a_Texture = -1;
        _this.a_ColorLocation = -1;
        _this.FSIZE = 0;
        // Write the positions of vertices to a vertex shader
        var check = _this.initVertexBuffers();
        if (check < 0) {
            var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, "constructor", "Failed to set the positions of the vertices.");
            warning.logMessageToConsole();
        }
        _this.updateVerticesAndIndices();
        _this.updateBuffers();
        return _this;
    }
    CurvatureExtremaView.prototype.initAttribLocation = function () {
        this.a_Position = this.gl.getAttribLocation(this.roundDotSolidShader.program, 'a_Position');
        this.a_Texture = this.gl.getAttribLocation(this.roundDotSolidShader.program, 'a_Texture');
        this.FSIZE = this.vertices.BYTES_PER_ELEMENT;
        this.a_ColorLocation = this.gl.getUniformLocation(this.roundDotSolidShader.program, "a_Color");
        if (this.a_Position < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Position.');
            warning.logMessageToConsole();
        }
        if (this.a_Texture < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Texture.');
            warning.logMessageToConsole();
        }
    };
    CurvatureExtremaView.prototype.assignVertexAttrib = function () {
        // Assign the buffer object to a_Position variable
        this.gl.vertexAttribPointer(this.a_Position, 3, this.gl.FLOAT, false, this.FSIZE * 8, 0);
        this.gl.vertexAttribPointer(this.a_Texture, 2, this.gl.FLOAT, false, this.FSIZE * 8, this.FSIZE * 3);
        // Enable the assignment to a_Position variable
        this.gl.enableVertexAttribArray(this.a_Position);
        this.gl.enableVertexAttribArray(this.a_Texture);
    };
    CurvatureExtremaView.prototype.initVertexBuffers = function () {
        this.updateVerticesAndIndices();
        // Create a buffer object
        this.vertexBuffer = this.gl.createBuffer();
        if (!this.vertexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the vertex buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        // Bind the buffer objects to targets
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        // Write data into the buffer object
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.initAttribLocation();
        this.assignVertexAttrib();
        // Unbind the buffer object
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.indexBuffer = this.gl.createBuffer();
        if (!this.indexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the index buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        return this.indices.length;
    };
    CurvatureExtremaView.prototype.renderFrame = function () {
        this.initAttribLocation();
        this.gl.useProgram(this.roundDotSolidShader.program);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.assignVertexAttrib();
        this.gl.uniform4f(this.a_ColorLocation, this.RED_COLOR, this.GREEN_COLOR, this.BLUE_COLOR, this.ALPHA);
        this.roundDotSolidShader.renderFrame(this.indices.length);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.useProgram(null);
    };
    CurvatureExtremaView.prototype.reset = function (diffEventsLocations) {
    };
    CurvatureExtremaView.prototype.update = function (diffEventsLocations) {
        this.pointSequenceToDisplay = diffEventsLocations.curvatureExtremaLocationsEuclideanSpace;
        this.updateVerticesAndIndices();
        this.updateBuffers();
    };
    return CurvatureExtremaView;
}(AbstractPointView_1.AbstractPointView));
exports.CurvatureExtremaView = CurvatureExtremaView;


/***/ }),

/***/ "./src/views/CurveKnotsView.ts":
/*!*************************************!*\
  !*** ./src/views/CurveKnotsView.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurveKnotsView = void 0;
var SquareDotSolidShader_1 = __webpack_require__(/*! ../2DgraphicsItems/SquareDotSolidShader */ "./src/2DgraphicsItems/SquareDotSolidShader.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var AbstractPointView_1 = __webpack_require__(/*! ./AbstractPointView */ "./src/views/AbstractPointView.ts");
var CurveKnotsView = /** @class */ (function (_super) {
    __extends(CurveKnotsView, _super);
    function CurveKnotsView(gl, spline) {
        var _this = _super.call(this, gl) || this;
        _this.Z = 0;
        _this.DOT_SIZE = 0.01;
        _this.RED_COLOR = 1.0;
        _this.GREEN_COLOR = 0.0;
        _this.BLUE_COLOR = 0.0;
        _this.ALPHA = 1;
        _this.knotAbscissae = [];
        _this.spline = spline;
        _this.squareDotSolidShader = new SquareDotSolidShader_1.SquareDotSolidShader(_this.gl);
        _this.pointSequenceToDisplay = [];
        _this.updatePointAtKnotOnSpline();
        _this.a_Position = -1;
        _this.fColor = -1;
        _this.FSIZE = 0;
        // Write the positions of vertices to a vertex shader
        var check = _this.initVertexBuffers();
        if (check < 0) {
            var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, "constructor", "Failed to set the positions of the vertices.");
            warning.logMessageToConsole();
        }
        _this.updateVerticesAndIndices();
        _this.updateBuffers();
        return _this;
    }
    CurveKnotsView.prototype.updatePointAtKnotOnSpline = function () {
        var e_1, _a;
        var splineTemp = this.spline.clone();
        this.knotAbscissae = splineTemp.getDistinctKnots();
        this.pointSequenceToDisplay = [];
        try {
            for (var _b = __values(this.knotAbscissae), _c = _b.next(); !_c.done; _c = _b.next()) {
                var kAbsc = _c.value;
                var point = this.spline.evaluate(kAbsc);
                this.pointSequenceToDisplay.push(point);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    CurveKnotsView.prototype.initAttribLocation = function () {
        this.a_Position = this.gl.getAttribLocation(this.squareDotSolidShader.program, 'a_Position');
        this.fColor = this.gl.getUniformLocation(this.squareDotSolidShader.program, 'fColor');
        this.FSIZE = this.vertices.BYTES_PER_ELEMENT;
        if (this.a_Position < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Position.');
            warning.logMessageToConsole();
        }
    };
    CurveKnotsView.prototype.assignVertexAttrib = function () {
        // Assign the buffer object to a_Position variable
        this.gl.vertexAttribPointer(this.a_Position, 3, this.gl.FLOAT, false, this.FSIZE * 8, 0);
        // Enable the assignment to a_Position variable
        this.gl.enableVertexAttribArray(this.a_Position);
    };
    CurveKnotsView.prototype.initVertexBuffers = function () {
        this.updatePointAtKnotOnSpline();
        this.updateVerticesAndIndices();
        // Create a buffer object
        this.vertexBuffer = this.gl.createBuffer();
        if (!this.vertexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the vertex buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        // Bind the buffer objects to targets
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        // Write date into the buffer object
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.initAttribLocation();
        this.assignVertexAttrib();
        // Unbind the buffer object
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.indexBuffer = this.gl.createBuffer();
        if (!this.indexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the index buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        return this.indices.length;
    };
    CurveKnotsView.prototype.renderFrame = function () {
        this.initAttribLocation();
        this.gl.useProgram(this.squareDotSolidShader.program);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.assignVertexAttrib();
        this.gl.uniform4f(this.fColor, this.RED_COLOR, this.GREEN_COLOR, this.BLUE_COLOR, this.ALPHA);
        this.squareDotSolidShader.renderFrame(this.indices.length);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.useProgram(null);
    };
    CurveKnotsView.prototype.update = function (spline) {
        this.spline = spline;
        this.updatePointAtKnotOnSpline();
        this.updateVerticesAndIndices();
        this.updateBuffers();
    };
    CurveKnotsView.prototype.reset = function (spline) {
    };
    return CurveKnotsView;
}(AbstractPointView_1.AbstractPointView));
exports.CurveKnotsView = CurveKnotsView;


/***/ }),

/***/ "./src/views/CurveView.ts":
/*!********************************!*\
  !*** ./src/views/CurveView.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurveView = void 0;
var PolylineShader_1 = __webpack_require__(/*! ../2DgraphicsItems/PolylineShader */ "./src/2DgraphicsItems/PolylineShader.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var CurveView = /** @class */ (function () {
    function CurveView(gl, spline) {
        this.POINT_SEQUENCE_SIZE = 1000;
        this.THICKNESS = 0.005;
        this.RED_COLOR = 216 / 255;
        this.GREEN_COLOR = 91 / 255;
        this.BLUE_COLOR = 95 / 255;
        this.ALPHA = 1;
        this.Z = 0;
        this.pointSequenceOnSpline = [];
        this.vertexBuffer = null;
        this.vertices = new Float32Array(this.POINT_SEQUENCE_SIZE * 6);
        this.gl = gl;
        this.polylineShader = new PolylineShader_1.PolylineShader(this.gl);
        this.spline = spline;
        this.a_Position = -1;
        this.fColorLocation = -1;
        // Write the positions of vertices to a vertex shader
        var check = this.initVertexBuffers();
        if (check < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "constructor", 'Failed to set the positions of the vertices.');
            warning.logMessageToConsole();
        }
    }
    CurveView.prototype.updatePointSequenceOnSpline = function () {
        var start = this.spline.knots[this.spline.degree];
        var end = this.spline.knots[this.spline.knots.length - this.spline.degree - 1];
        this.pointSequenceOnSpline = [];
        for (var i = 0; i < this.POINT_SEQUENCE_SIZE; i += 1) {
            var point = this.spline.evaluate(i / (this.POINT_SEQUENCE_SIZE - 1) * (end - start) + start);
            this.pointSequenceOnSpline.push(point);
        }
    };
    CurveView.prototype.updateVertices = function () {
        var maxLength = this.THICKNESS * 3;
        var tangent = ((this.pointSequenceOnSpline[1]).substract(this.pointSequenceOnSpline[0])).normalize();
        var normal = tangent.rotate90degrees();
        var miter, length;
        var triangleStripVertices = [];
        triangleStripVertices.push(this.pointSequenceOnSpline[0].add(normal.multiply(this.THICKNESS)));
        triangleStripVertices.push(this.pointSequenceOnSpline[0].substract(normal.multiply(this.THICKNESS)));
        for (var i = 1; i < this.pointSequenceOnSpline.length - 1; i += 1) {
            normal = (this.pointSequenceOnSpline[i].substract(this.pointSequenceOnSpline[i - 1])).normalize().rotate90degrees();
            tangent = (this.pointSequenceOnSpline[i + 1].substract(this.pointSequenceOnSpline[i - 1])).normalize();
            miter = tangent.rotate90degrees();
            length = this.THICKNESS / (miter.dot(normal));
            if (length > maxLength) {
                length = maxLength;
            }
            triangleStripVertices.push(this.pointSequenceOnSpline[i].add(miter.multiply(length)));
            triangleStripVertices.push(this.pointSequenceOnSpline[i].substract(miter.multiply(length)));
        }
        tangent = this.pointSequenceOnSpline[this.pointSequenceOnSpline.length - 1].substract(this.pointSequenceOnSpline[this.pointSequenceOnSpline.length - 2]).normalize();
        normal = tangent.rotate90degrees();
        triangleStripVertices.push(this.pointSequenceOnSpline[this.pointSequenceOnSpline.length - 1].add(normal.multiply(this.THICKNESS)));
        triangleStripVertices.push(this.pointSequenceOnSpline[this.pointSequenceOnSpline.length - 1].substract(normal.multiply(this.THICKNESS)));
        for (var i = 0; i < triangleStripVertices.length; i += 1) {
            this.vertices[3 * i] = triangleStripVertices[i].x;
            this.vertices[3 * i + 1] = triangleStripVertices[i].y;
            this.vertices[3 * i + 2] = this.Z;
        }
    };
    CurveView.prototype.update = function (spline) {
        for (var i = 0; i < spline.controlPoints.length; i++) {
            if (isNaN(spline.controlPoints[i].x) || isNaN(spline.controlPoints[i].y)) {
                var error = new ErrorLoging_1.ErrorLog(this.constructor.name, "update", "NaN");
                console.log("i = ", i);
                error.logMessageToConsole();
            }
        }
        this.spline = spline;
        this.updatePointSequenceOnSpline();
        this.updateVertices();
        this.updateBuffers();
    };
    CurveView.prototype.initAttribLocation = function () {
        this.a_Position = this.gl.getAttribLocation(this.polylineShader.program, 'a_Position');
        this.fColorLocation = this.gl.getUniformLocation(this.polylineShader.program, "fColor");
        if (this.a_Position < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Position.');
            warning.logMessageToConsole();
        }
    };
    CurveView.prototype.assignVertexAttrib = function () {
        // Assign the buffer object to a_Position variable
        this.gl.vertexAttribPointer(this.a_Position, 3, this.gl.FLOAT, false, 0, 0);
        // Enable the assignment to a_Position variable
        this.gl.enableVertexAttribArray(this.a_Position);
    };
    CurveView.prototype.reset = function (spline) {
    };
    CurveView.prototype.updateBuffers = function () {
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
    };
    CurveView.prototype.renderFrame = function () {
        this.initAttribLocation();
        this.gl.useProgram(this.polylineShader.program);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.assignVertexAttrib();
        this.gl.uniform4f(this.fColorLocation, this.RED_COLOR, this.GREEN_COLOR, this.BLUE_COLOR, this.ALPHA);
        this.polylineShader.renderFrame(this.vertices.length / 3);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.useProgram(null);
    };
    CurveView.prototype.initVertexBuffers = function () {
        // Create a buffer object
        this.vertexBuffer = this.gl.createBuffer();
        if (!this.vertexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the vertex buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        this.updatePointSequenceOnSpline();
        this.updateVertices();
        // Bind the buffer objects to targets
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        // Write date into the buffer object
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.initAttribLocation();
        this.assignVertexAttrib();
        // Unbind the buffer object
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        return 1;
    };
    return CurveView;
}());
exports.CurveView = CurveView;


/***/ }),

/***/ "./src/views/HighlightedControlPolygonView.ts":
/*!****************************************************!*\
  !*** ./src/views/HighlightedControlPolygonView.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HighlightedControlPolygonView = void 0;
var LineSegmentShader_1 = __webpack_require__(/*! ../2DgraphicsItems/LineSegmentShader */ "./src/2DgraphicsItems/LineSegmentShader.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var HighlightedControlPolygonView = /** @class */ (function () {
    function HighlightedControlPolygonView(spline, gl, closed) {
        if (closed === void 0) { closed = false; }
        this.closed = closed;
        this.Z = 0;
        this.THICKNESS = 0.003;
        this.RED_COLOR = 0;
        this.GREEN_COLOR = 0.6;
        this.BLUE_COLOR = 0;
        this.ALPHA = 1;
        this.vertexBuffer = null;
        this.indexBuffer = null;
        this.vertices = new Float32Array([]);
        this.indices = new Uint8Array([]);
        this.gl = gl;
        this.lineSegmentShader = new LineSegmentShader_1.LineSegmentShader(this.gl);
        // this.controlPoints = spline.visibleControlPoints()
        this.controlPoints = spline.controlPoints;
        if (this.closed) {
            this.controlPoints.push(this.controlPoints[0]);
        }
        this.a_Position = -1;
        this.fColorLocation = -1;
        // Write the positions of vertices to a vertex shader
        var check = this.initVertexBuffers();
        if (check < 0) {
            console.log('Failed to set the positions of the vertices');
        }
    }
    HighlightedControlPolygonView.prototype.updateVerticesAndIndices = function () {
        this.vertices = new Float32Array(this.controlPoints.length * 12);
        this.indices = new Uint8Array(this.controlPoints.length * 6);
        for (var i = 0; i < this.controlPoints.length - 1; i += 1) {
            var normal = this.controlPoints[i + 1].substract(this.controlPoints[i]).normalize().rotate90degrees();
            this.vertices[12 * i] = this.controlPoints[i].x - this.THICKNESS * normal.x;
            this.vertices[12 * i + 1] = this.controlPoints[i].y - this.THICKNESS * normal.y;
            this.vertices[12 * i + 2] = this.Z;
            this.vertices[12 * i + 3] = this.controlPoints[i + 1].x - this.THICKNESS * normal.x;
            this.vertices[12 * i + 4] = this.controlPoints[i + 1].y - this.THICKNESS * normal.y;
            this.vertices[12 * i + 5] = this.Z;
            this.vertices[12 * i + 6] = this.controlPoints[i + 1].x + this.THICKNESS * normal.x;
            this.vertices[12 * i + 7] = this.controlPoints[i + 1].y + this.THICKNESS * normal.y;
            this.vertices[12 * i + 8] = this.Z;
            this.vertices[12 * i + 9] = this.controlPoints[i].x + this.THICKNESS * normal.x;
            this.vertices[12 * i + 10] = this.controlPoints[i].y + this.THICKNESS * normal.y;
            this.vertices[12 * i + 11] = this.Z;
            this.indices[6 * i] = 4 * i;
            this.indices[6 * i + 1] = 4 * i + 1;
            this.indices[6 * i + 2] = 4 * i + 2;
            this.indices[6 * i + 3] = 4 * i;
            this.indices[6 * i + 4] = 4 * i + 2;
            this.indices[6 * i + 5] = 4 * i + 3;
        }
    };
    HighlightedControlPolygonView.prototype.initAttribLocation = function () {
        this.a_Position = this.gl.getAttribLocation(this.lineSegmentShader.program, 'a_Position');
        this.fColorLocation = this.gl.getUniformLocation(this.lineSegmentShader.program, "fColor");
        if (this.a_Position < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Position.');
            warning.logMessageToConsole();
        }
    };
    HighlightedControlPolygonView.prototype.assignVertexAttrib = function () {
        // Assign the buffer object to a_Position variable
        this.gl.vertexAttribPointer(this.a_Position, 3, this.gl.FLOAT, false, 0, 0);
        // Enable the assignment to a_Position variable
        this.gl.enableVertexAttribArray(this.a_Position);
    };
    HighlightedControlPolygonView.prototype.initVertexBuffers = function () {
        this.updateVerticesAndIndices();
        // Create a buffer object
        this.vertexBuffer = this.gl.createBuffer();
        if (!this.vertexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the vertex buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        // Bind the buffer objects to targets
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        // Write date into the buffer object
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.initAttribLocation();
        this.assignVertexAttrib();
        // Unbind the buffer object
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.indexBuffer = this.gl.createBuffer();
        if (!this.indexBuffer) {
            console.log('Failed to create the index buffer object');
            return -1;
        }
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        return this.indices.length;
    };
    HighlightedControlPolygonView.prototype.renderFrame = function () {
        this.initAttribLocation();
        this.gl.useProgram(this.lineSegmentShader.program);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.assignVertexAttrib();
        this.gl.uniform4f(this.fColorLocation, this.RED_COLOR, this.GREEN_COLOR, this.BLUE_COLOR, this.ALPHA);
        this.lineSegmentShader.renderFrame(this.indices.length);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.useProgram(null);
    };
    HighlightedControlPolygonView.prototype.update = function (message) {
        this.controlPoints = message.controlPoints;
        // this.controlPoints = message.visibleControlPoints();
        if (this.closed) {
            this.controlPoints.push(this.controlPoints[0]);
        }
        this.updateVerticesAndIndices();
        this.updateBuffers();
    };
    HighlightedControlPolygonView.prototype.reset = function (message) {
    };
    HighlightedControlPolygonView.prototype.updateBuffers = function () {
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
    };
    return HighlightedControlPolygonView;
}());
exports.HighlightedControlPolygonView = HighlightedControlPolygonView;


/***/ }),

/***/ "./src/views/InflectionsView.ts":
/*!**************************************!*\
  !*** ./src/views/InflectionsView.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InflectionsView = void 0;
var RoundDotSolidShader_1 = __webpack_require__(/*! ../2DgraphicsItems/RoundDotSolidShader */ "./src/2DgraphicsItems/RoundDotSolidShader.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var AbstractPointView_1 = __webpack_require__(/*! ./AbstractPointView */ "./src/views/AbstractPointView.ts");
var InflectionsView = /** @class */ (function (_super) {
    __extends(InflectionsView, _super);
    function InflectionsView(gl, curveModelDifferentialEvents) {
        var _this = _super.call(this, gl) || this;
        _this.Z = 0;
        _this.DOT_SIZE = 0.025;
        _this.RED_COLOR = 216 / 255;
        _this.GREEN_COLOR = 120 / 255;
        _this.BLUE_COLOR = 120 / 255;
        _this.ALPHA = 1;
        _this.roundDotSolidShader = new RoundDotSolidShader_1.RoundDotSolidShader(_this.gl);
        _this.curveModelDifferentialEvents = curveModelDifferentialEvents;
        _this.pointSequenceToDisplay = _this.curveModelDifferentialEvents.inflectionLocationsEuclideanSpace;
        _this.a_Position = -1;
        _this.a_Texture = -1;
        _this.a_ColorLocation = -1;
        _this.FSIZE = 0;
        // Write the positions of vertices to a vertex shader
        var check = _this.initVertexBuffers();
        if (check < 0) {
            var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, "constructor", "Failed to set the positions of the vertices.");
            warning.logMessageToConsole();
        }
        _this.updateVerticesAndIndices();
        _this.updateBuffers();
        return _this;
    }
    InflectionsView.prototype.initAttribLocation = function () {
        this.a_Position = this.gl.getAttribLocation(this.roundDotSolidShader.program, 'a_Position');
        this.a_Texture = this.gl.getAttribLocation(this.roundDotSolidShader.program, 'a_Texture'),
            this.FSIZE = this.vertices.BYTES_PER_ELEMENT,
            this.a_ColorLocation = this.gl.getUniformLocation(this.roundDotSolidShader.program, "a_Color");
        if (this.a_Position < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Position.');
            warning.logMessageToConsole();
        }
        if (this.a_Texture < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Texture.');
            warning.logMessageToConsole();
        }
    };
    InflectionsView.prototype.assignVertexAttrib = function () {
        // Assign the buffer object to a_Position variable
        this.gl.vertexAttribPointer(this.a_Position, 3, this.gl.FLOAT, false, this.FSIZE * 8, 0);
        this.gl.vertexAttribPointer(this.a_Texture, 2, this.gl.FLOAT, false, this.FSIZE * 8, this.FSIZE * 3);
        // Enable the assignment to a_Position variable
        this.gl.enableVertexAttribArray(this.a_Position);
        this.gl.enableVertexAttribArray(this.a_Texture);
    };
    InflectionsView.prototype.initVertexBuffers = function () {
        this.updateVerticesAndIndices();
        // Create a buffer object
        this.vertexBuffer = this.gl.createBuffer();
        if (!this.vertexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the vertex buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        // Bind the buffer objects to targets
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        // Write date into the buffer object
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.initAttribLocation();
        this.assignVertexAttrib();
        // Unbind the buffer object
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.indexBuffer = this.gl.createBuffer();
        if (!this.indexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the index buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        return this.indices.length;
    };
    InflectionsView.prototype.renderFrame = function () {
        this.initAttribLocation();
        this.gl.useProgram(this.roundDotSolidShader.program);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.assignVertexAttrib();
        this.gl.uniform4f(this.a_ColorLocation, this.RED_COLOR, this.GREEN_COLOR, this.BLUE_COLOR, this.ALPHA);
        this.roundDotSolidShader.renderFrame(this.indices.length);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.useProgram(null);
    };
    InflectionsView.prototype.reset = function (diffEventsLocations) {
    };
    InflectionsView.prototype.update = function (diffEventsLocations) {
        this.pointSequenceToDisplay = diffEventsLocations.inflectionLocationsEuclideanSpace;
        this.updateVerticesAndIndices();
        this.updateBuffers();
    };
    return InflectionsView;
}(AbstractPointView_1.AbstractPointView));
exports.InflectionsView = InflectionsView;


/***/ }),

/***/ "./src/views/PhantomCurveView.ts":
/*!***************************************!*\
  !*** ./src/views/PhantomCurveView.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PhantomCurveView = void 0;
var PolylineShader_1 = __webpack_require__(/*! ../2DgraphicsItems/PolylineShader */ "./src/2DgraphicsItems/PolylineShader.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var PhantomCurveView = /** @class */ (function () {
    function PhantomCurveView(gl, spline) {
        this.POINT_SEQUENCE_SIZE = 1000;
        this.THICKNESS = 0.002;
        this.RED_COLOR = 10 / 255;
        this.GREEN_COLOR = 150 / 255;
        this.BLUE_COLOR = 10 / 255;
        this.ALPHA = 1;
        this.Z = 0;
        this.pointSequenceOnSpline = [];
        this.vertexBuffer = null;
        this.vertices = new Float32Array(this.POINT_SEQUENCE_SIZE * 6);
        this.gl = gl;
        this.polylineShader = new PolylineShader_1.PolylineShader(this.gl);
        this.spline = spline;
        this.a_Position = -1;
        this.fColorLocation = -1;
        // Write the positions of vertices to a vertex shader
        var check = this.initVertexBuffers();
        if (check < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "constructor", 'Failed to set the positions of the vertices.');
            warning.logMessageToConsole();
        }
    }
    PhantomCurveView.prototype.updatePointSequenceOnSpline = function () {
        var start = this.spline.knots[this.spline.degree];
        var end = this.spline.knots[this.spline.knots.length - this.spline.degree - 1];
        this.pointSequenceOnSpline = [];
        for (var i = 0; i < this.POINT_SEQUENCE_SIZE; i += 1) {
            var point = this.spline.evaluate(i / (this.POINT_SEQUENCE_SIZE - 1) * (end - start) + start);
            this.pointSequenceOnSpline.push(point);
        }
    };
    PhantomCurveView.prototype.updateVertices = function () {
        var maxLength = this.THICKNESS * 3;
        var tangent = ((this.pointSequenceOnSpline[1]).substract(this.pointSequenceOnSpline[0])).normalize();
        var normal = tangent.rotate90degrees();
        var miter, length;
        var triangleStripVertices = [];
        triangleStripVertices.push(this.pointSequenceOnSpline[0].add(normal.multiply(this.THICKNESS)));
        triangleStripVertices.push(this.pointSequenceOnSpline[0].substract(normal.multiply(this.THICKNESS)));
        for (var i = 1; i < this.pointSequenceOnSpline.length - 1; i += 1) {
            normal = (this.pointSequenceOnSpline[i].substract(this.pointSequenceOnSpline[i - 1])).normalize().rotate90degrees();
            tangent = (this.pointSequenceOnSpline[i + 1].substract(this.pointSequenceOnSpline[i - 1])).normalize();
            miter = tangent.rotate90degrees();
            length = this.THICKNESS / (miter.dot(normal));
            if (length > maxLength) {
                length = maxLength;
            }
            triangleStripVertices.push(this.pointSequenceOnSpline[i].add(miter.multiply(length)));
            triangleStripVertices.push(this.pointSequenceOnSpline[i].substract(miter.multiply(length)));
        }
        tangent = this.pointSequenceOnSpline[this.pointSequenceOnSpline.length - 1].substract(this.pointSequenceOnSpline[this.pointSequenceOnSpline.length - 2]).normalize();
        normal = tangent.rotate90degrees();
        triangleStripVertices.push(this.pointSequenceOnSpline[this.pointSequenceOnSpline.length - 1].add(normal.multiply(this.THICKNESS)));
        triangleStripVertices.push(this.pointSequenceOnSpline[this.pointSequenceOnSpline.length - 1].substract(normal.multiply(this.THICKNESS)));
        for (var i = 0; i < triangleStripVertices.length; i += 1) {
            this.vertices[3 * i] = triangleStripVertices[i].x;
            this.vertices[3 * i + 1] = triangleStripVertices[i].y;
            this.vertices[3 * i + 2] = this.Z;
        }
    };
    PhantomCurveView.prototype.update = function (spline) {
        this.spline = spline;
        this.updatePointSequenceOnSpline();
        this.updateVertices();
        this.updateBuffers();
    };
    PhantomCurveView.prototype.initAttribLocation = function () {
        this.a_Position = this.gl.getAttribLocation(this.polylineShader.program, 'a_Position');
        this.fColorLocation = this.gl.getUniformLocation(this.polylineShader.program, "fColor");
        if (this.a_Position < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Position.');
            warning.logMessageToConsole();
        }
    };
    PhantomCurveView.prototype.assignVertexAttrib = function () {
        // Assign the buffer object to a_Position variable
        this.gl.vertexAttribPointer(this.a_Position, 3, this.gl.FLOAT, false, 0, 0);
        // Enable the assignment to a_Position variable
        this.gl.enableVertexAttribArray(this.a_Position);
    };
    PhantomCurveView.prototype.reset = function (spline) {
    };
    PhantomCurveView.prototype.updateBuffers = function () {
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
    };
    PhantomCurveView.prototype.renderFrame = function () {
        this.initAttribLocation();
        this.gl.useProgram(this.polylineShader.program);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.assignVertexAttrib();
        this.gl.uniform4f(this.fColorLocation, this.RED_COLOR, this.GREEN_COLOR, this.BLUE_COLOR, this.ALPHA);
        this.polylineShader.renderFrame(this.vertices.length / 3);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.useProgram(null);
    };
    PhantomCurveView.prototype.initVertexBuffers = function () {
        // Create a buffer object
        this.vertexBuffer = this.gl.createBuffer();
        if (!this.vertexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the vertex buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        this.updatePointSequenceOnSpline();
        this.updateVertices();
        // Bind the buffer objects to targets
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        // Write date into the buffer object
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.initAttribLocation();
        this.assignVertexAttrib();
        // Unbind the buffer object
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        return 1;
    };
    return PhantomCurveView;
}());
exports.PhantomCurveView = PhantomCurveView;


/***/ }),

/***/ "./src/views/SelectedDifferentialEventsView.ts":
/*!*****************************************************!*\
  !*** ./src/views/SelectedDifferentialEventsView.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectedDifferentialEventsView = void 0;
var RoundDotSolidShader_1 = __webpack_require__(/*! ../2DgraphicsItems/RoundDotSolidShader */ "./src/2DgraphicsItems/RoundDotSolidShader.ts");
var AbstractPointView_1 = __webpack_require__(/*! ./AbstractPointView */ "./src/views/AbstractPointView.ts");
var SelectedDifferentialEventsView = /** @class */ (function (_super) {
    __extends(SelectedDifferentialEventsView, _super);
    function SelectedDifferentialEventsView(gl) {
        var _this = _super.call(this, gl) || this;
        _this.Z = 0;
        _this.DOT_SIZE = 0;
        _this.RED_COLOR = 0;
        _this.GREEN_COLOR = 0;
        _this.BLUE_COLOR = 0;
        _this.ALPHA = 1;
        _this.indexBuffer = null;
        _this.vertices = new Float32Array([]);
        _this.indices = new Uint8Array([]);
        _this.pointLoc = [];
        _this.roundDotSolidShader = new RoundDotSolidShader_1.RoundDotSolidShader(_this.gl);
        return _this;
    }
    SelectedDifferentialEventsView.prototype.updateVerticesAndIndices = function () {
        this.vertices = new Float32Array(this.pointSequenceToDisplay.length * 32);
        this.indices = new Uint8Array(this.pointSequenceToDisplay.length * 6);
        for (var i = 0; i < this.pointSequenceToDisplay.length; i += 1) {
            var x = this.pointSequenceToDisplay[i].x;
            var y = this.pointSequenceToDisplay[i].y;
            this.vertices[32 * i] = x - this.DOT_SIZE;
            this.vertices[32 * i + 1] = y - this.DOT_SIZE;
            this.vertices[32 * i + 2] = this.Z;
            this.vertices[32 * i + 3] = -1;
            this.vertices[32 * i + 4] = -1;
            this.vertices[32 * i + 5] = this.RED_COLOR;
            this.vertices[32 * i + 6] = this.GREEN_COLOR;
            this.vertices[32 * i + 7] = this.BLUE_COLOR;
            this.vertices[32 * i + 8] = x + this.DOT_SIZE;
            this.vertices[32 * i + 9] = y - this.DOT_SIZE;
            this.vertices[32 * i + 10] = this.Z;
            this.vertices[32 * i + 11] = 1;
            this.vertices[32 * i + 12] = -1;
            this.vertices[32 * i + 13] = this.RED_COLOR;
            this.vertices[32 * i + 14] = this.GREEN_COLOR;
            this.vertices[32 * i + 15] = this.BLUE_COLOR;
            this.vertices[32 * i + 16] = x + this.DOT_SIZE;
            this.vertices[32 * i + 17] = y + this.DOT_SIZE;
            this.vertices[32 * i + 18] = this.Z;
            this.vertices[32 * i + 19] = 1;
            this.vertices[32 * i + 20] = 1;
            this.vertices[32 * i + 21] = this.RED_COLOR;
            this.vertices[32 * i + 22] = this.GREEN_COLOR;
            this.vertices[32 * i + 23] = this.BLUE_COLOR;
            this.vertices[32 * i + 24] = x - this.DOT_SIZE;
            this.vertices[32 * i + 25] = y + this.DOT_SIZE;
            this.vertices[32 * i + 26] = this.Z;
            this.vertices[32 * i + 27] = -1;
            this.vertices[32 * i + 28] = 1;
            this.vertices[32 * i + 29] = this.RED_COLOR;
            this.vertices[32 * i + 30] = this.GREEN_COLOR;
            this.vertices[32 * i + 31] = this.BLUE_COLOR;
            this.indices[6 * i] = 4 * i;
            this.indices[6 * i + 1] = 4 * i + 1;
            this.indices[6 * i + 2] = 4 * i + 2;
            this.indices[6 * i + 3] = 4 * i;
            this.indices[6 * i + 4] = 4 * i + 2;
            this.indices[6 * i + 5] = 4 * i + 3;
        }
    };
    SelectedDifferentialEventsView.prototype.updateBuffers = function () {
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
    };
    SelectedDifferentialEventsView.prototype.updatePoints = function (pointLoc) {
        var e_1, _a;
        this.pointLoc = [];
        try {
            for (var pointLoc_1 = __values(pointLoc), pointLoc_1_1 = pointLoc_1.next(); !pointLoc_1_1.done; pointLoc_1_1 = pointLoc_1.next()) {
                var point = pointLoc_1_1.value;
                this.pointLoc.push(point);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (pointLoc_1_1 && !pointLoc_1_1.done && (_a = pointLoc_1.return)) _a.call(pointLoc_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    SelectedDifferentialEventsView.prototype.clearPoints = function () {
        this.pointLoc = [];
        this.pointSequenceToDisplay = [];
    };
    return SelectedDifferentialEventsView;
}(AbstractPointView_1.AbstractPointView));
exports.SelectedDifferentialEventsView = SelectedDifferentialEventsView;


/***/ }),

/***/ "./src/views/SelectedEnteringShapeSpaceCurvExtremView.ts":
/*!***************************************************************!*\
  !*** ./src/views/SelectedEnteringShapeSpaceCurvExtremView.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectedEnteringShapeSpaceCurvExtremaView = void 0;
var SelectedDifferentialEventsView_1 = __webpack_require__(/*! ./SelectedDifferentialEventsView */ "./src/views/SelectedDifferentialEventsView.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var SelectedEnteringShapeSpaceCurvExtremaView = /** @class */ (function (_super) {
    __extends(SelectedEnteringShapeSpaceCurvExtremaView, _super);
    function SelectedEnteringShapeSpaceCurvExtremaView(gl, spline, pointLoc) {
        var e_1, _a;
        var _this = _super.call(this, gl) || this;
        _this.DOT_SIZE = 0.025;
        _this.RED_COLOR = 0 / 255;
        _this.GREEN_COLOR = 0 / 255;
        _this.BLUE_COLOR = 200 / 255;
        _this.vertexBuffer = null;
        _this.indexBuffer = null;
        _this.vertices = new Float32Array([]);
        _this.indices = new Uint8Array([]);
        var points = [];
        try {
            for (var pointLoc_1 = __values(pointLoc), pointLoc_1_1 = pointLoc_1.next(); !pointLoc_1_1.done; pointLoc_1_1 = pointLoc_1.next()) {
                var pt = pointLoc_1_1.value;
                _this.pointLoc.push(pt);
                points.push(spline.evaluate(pt));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (pointLoc_1_1 && !pointLoc_1_1.done && (_a = pointLoc_1.return)) _a.call(pointLoc_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        _this.pointSequenceToDisplay = points.slice();
        _this.a_Position = -1;
        _this.a_Texture = -1;
        _this.a_ColorLocation = -1;
        _this.FSIZE = 0;
        // Write the positions of vertices to a vertex shader
        var check = _this.initVertexBuffers();
        if (check < 0) {
            var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, "constructor", "Failed to set the positions of the vertices.");
            warning.logMessageToConsole();
        }
        _this.update(spline);
        return _this;
    }
    SelectedEnteringShapeSpaceCurvExtremaView.prototype.initAttribLocation = function () {
        this.a_Position = this.gl.getAttribLocation(this.roundDotSolidShader.program, 'a_Position');
        this.a_Texture = this.gl.getAttribLocation(this.roundDotSolidShader.program, 'a_Texture');
        //a_Color = gl.getAttribLocation(<CurvatureExtremaShaders>this.curvatureExtremaShaders.program, 'a_Color'),
        this.FSIZE = this.vertices.BYTES_PER_ELEMENT;
        this.a_ColorLocation = this.gl.getUniformLocation(this.roundDotSolidShader.program, "a_Color");
        if (this.a_Position < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Position.');
            warning.logMessageToConsole();
        }
        if (this.a_Texture < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Texture.');
            warning.logMessageToConsole();
        }
    };
    SelectedEnteringShapeSpaceCurvExtremaView.prototype.assignVertexAttrib = function () {
        // Assign the buffer object to a_Position variable
        this.gl.vertexAttribPointer(this.a_Position, 3, this.gl.FLOAT, false, this.FSIZE * 8, 0);
        this.gl.vertexAttribPointer(this.a_Texture, 2, this.gl.FLOAT, false, this.FSIZE * 8, this.FSIZE * 3);
        // Enable the assignment to a_Position variable
        this.gl.enableVertexAttribArray(this.a_Position);
        this.gl.enableVertexAttribArray(this.a_Texture);
    };
    SelectedEnteringShapeSpaceCurvExtremaView.prototype.initVertexBuffers = function () {
        this.updateVerticesAndIndices();
        // Create a buffer object
        this.vertexBuffer = this.gl.createBuffer();
        if (!this.vertexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the vertex buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        // Bind the buffer objects to targets
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        // Write date into the buffer object
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.initAttribLocation();
        this.assignVertexAttrib();
        // Unbind the buffer object
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.indexBuffer = this.gl.createBuffer();
        if (!this.indexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the index buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        return this.indices.length;
    };
    SelectedEnteringShapeSpaceCurvExtremaView.prototype.renderFrame = function () {
        this.initAttribLocation();
        this.gl.useProgram(this.roundDotSolidShader.program);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.assignVertexAttrib();
        this.gl.uniform4f(this.a_ColorLocation, this.RED_COLOR, this.GREEN_COLOR, this.BLUE_COLOR, this.ALPHA);
        this.roundDotSolidShader.renderFrame(this.indices.length);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.useProgram(null);
    };
    SelectedEnteringShapeSpaceCurvExtremaView.prototype.update = function (spline) {
        var points = [];
        for (var i = 0; i < this.pointLoc.length; i += 1) {
            points.push(spline.evaluate(this.pointLoc[i]));
        }
        this.pointSequenceToDisplay = points.slice();
        this.updateVerticesAndIndices();
        this.updateBuffers();
    };
    return SelectedEnteringShapeSpaceCurvExtremaView;
}(SelectedDifferentialEventsView_1.SelectedDifferentialEventsView));
exports.SelectedEnteringShapeSpaceCurvExtremaView = SelectedEnteringShapeSpaceCurvExtremaView;


/***/ }),

/***/ "./src/views/SelectedEnteringShapeSpaceInflectionView.ts":
/*!***************************************************************!*\
  !*** ./src/views/SelectedEnteringShapeSpaceInflectionView.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectedEnteringShapeSpaceInflectionView = void 0;
var SelectedDifferentialEventsView_1 = __webpack_require__(/*! ./SelectedDifferentialEventsView */ "./src/views/SelectedDifferentialEventsView.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var SelectedEnteringShapeSpaceInflectionView = /** @class */ (function (_super) {
    __extends(SelectedEnteringShapeSpaceInflectionView, _super);
    function SelectedEnteringShapeSpaceInflectionView(gl, spline, pointLoc) {
        var e_1, _a;
        var _this = _super.call(this, gl) || this;
        _this.DOT_SIZE = 0.02;
        _this.RED_COLOR = 0 / 255;
        _this.GREEN_COLOR = 0 / 255;
        _this.BLUE_COLOR = 120 / 255;
        _this.vertexBuffer = null;
        _this.indexBuffer = null;
        _this.vertices = new Float32Array([]);
        _this.indices = new Uint8Array([]);
        var points = [];
        try {
            for (var pointLoc_1 = __values(pointLoc), pointLoc_1_1 = pointLoc_1.next(); !pointLoc_1_1.done; pointLoc_1_1 = pointLoc_1.next()) {
                var pt = pointLoc_1_1.value;
                _this.pointLoc.push(pt);
                points.push(spline.evaluate(pt));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (pointLoc_1_1 && !pointLoc_1_1.done && (_a = pointLoc_1.return)) _a.call(pointLoc_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        _this.pointSequenceToDisplay = points.slice();
        _this.a_Position = -1;
        _this.a_Texture = -1;
        _this.a_ColorLocation = -1;
        _this.FSIZE = 0;
        // Write the positions of vertices to a vertex shader
        var check = _this.initVertexBuffers();
        if (check < 0) {
            var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, "constructor", "Failed to set the positions of the vertices.");
            warning.logMessageToConsole();
        }
        _this.update(spline);
        return _this;
    }
    SelectedEnteringShapeSpaceInflectionView.prototype.initAttribLocation = function () {
        this.a_Position = this.gl.getAttribLocation(this.roundDotSolidShader.program, 'a_Position');
        this.a_Texture = this.gl.getAttribLocation(this.roundDotSolidShader.program, 'a_Texture');
        //a_Color = gl.getAttribLocation(<CurvatureExtremaShaders>this.curvatureExtremaShaders.program, 'a_Color'),
        this.FSIZE = this.vertices.BYTES_PER_ELEMENT;
        this.a_ColorLocation = this.gl.getUniformLocation(this.roundDotSolidShader.program, "a_Color");
        if (this.a_Position < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Position.');
            warning.logMessageToConsole();
        }
        if (this.a_Texture < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Texture.');
            warning.logMessageToConsole();
        }
    };
    SelectedEnteringShapeSpaceInflectionView.prototype.assignVertexAttrib = function () {
        // Assign the buffer object to a_Position variable
        this.gl.vertexAttribPointer(this.a_Position, 3, this.gl.FLOAT, false, this.FSIZE * 8, 0);
        this.gl.vertexAttribPointer(this.a_Texture, 2, this.gl.FLOAT, false, this.FSIZE * 8, this.FSIZE * 3);
        // Enable the assignment to a_Position variable
        this.gl.enableVertexAttribArray(this.a_Position);
        this.gl.enableVertexAttribArray(this.a_Texture);
    };
    SelectedEnteringShapeSpaceInflectionView.prototype.initVertexBuffers = function () {
        this.updateVerticesAndIndices();
        // Create a buffer object
        this.vertexBuffer = this.gl.createBuffer();
        if (!this.vertexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the vertex buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        // Bind the buffer objects to targets
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        // Write date into the buffer object
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.initAttribLocation();
        this.assignVertexAttrib();
        // Unbind the buffer object
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.indexBuffer = this.gl.createBuffer();
        if (!this.indexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the index buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        return this.indices.length;
    };
    SelectedEnteringShapeSpaceInflectionView.prototype.renderFrame = function () {
        this.initAttribLocation();
        this.gl.useProgram(this.roundDotSolidShader.program);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.assignVertexAttrib();
        this.gl.uniform4f(this.a_ColorLocation, this.RED_COLOR, this.GREEN_COLOR, this.BLUE_COLOR, this.ALPHA);
        this.roundDotSolidShader.renderFrame(this.indices.length);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.useProgram(null);
    };
    SelectedEnteringShapeSpaceInflectionView.prototype.update = function (spline) {
        var points = [];
        for (var i = 0; i < this.pointLoc.length; i += 1) {
            points.push(spline.evaluate(this.pointLoc[i]));
        }
        this.pointSequenceToDisplay = points.slice();
        this.updateVerticesAndIndices();
        this.updateBuffers();
    };
    return SelectedEnteringShapeSpaceInflectionView;
}(SelectedDifferentialEventsView_1.SelectedDifferentialEventsView));
exports.SelectedEnteringShapeSpaceInflectionView = SelectedEnteringShapeSpaceInflectionView;


/***/ }),

/***/ "./src/views/SelectedSlipOutOfShapeSpaceCurvExtremView.ts":
/*!****************************************************************!*\
  !*** ./src/views/SelectedSlipOutOfShapeSpaceCurvExtremView.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectedSlipOutOfShapeSpaceCurvExtremaView = void 0;
var SelectedDifferentialEventsView_1 = __webpack_require__(/*! ./SelectedDifferentialEventsView */ "./src/views/SelectedDifferentialEventsView.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var SelectedSlipOutOfShapeSpaceCurvExtremaView = /** @class */ (function (_super) {
    __extends(SelectedSlipOutOfShapeSpaceCurvExtremaView, _super);
    function SelectedSlipOutOfShapeSpaceCurvExtremaView(gl, spline, pointLoc) {
        var e_1, _a;
        var _this = _super.call(this, gl) || this;
        _this.DOT_SIZE = 0.025;
        _this.RED_COLOR = 0 / 255;
        _this.GREEN_COLOR = 200 / 255;
        _this.BLUE_COLOR = 0 / 255;
        _this.vertexBuffer = null;
        _this.indexBuffer = null;
        _this.vertices = new Float32Array([]);
        _this.indices = new Uint8Array([]);
        var points = [];
        try {
            for (var pointLoc_1 = __values(pointLoc), pointLoc_1_1 = pointLoc_1.next(); !pointLoc_1_1.done; pointLoc_1_1 = pointLoc_1.next()) {
                var pt = pointLoc_1_1.value;
                _this.pointLoc.push(pt);
                points.push(spline.evaluate(pt));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (pointLoc_1_1 && !pointLoc_1_1.done && (_a = pointLoc_1.return)) _a.call(pointLoc_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        _this.pointSequenceToDisplay = points.slice();
        _this.a_Position = -1;
        _this.a_Texture = -1;
        _this.a_ColorLocation = -1;
        _this.FSIZE = 0;
        // Write the positions of vertices to a vertex shader
        var check = _this.initVertexBuffers();
        if (check < 0) {
            var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, "constructor", "Failed to set the positions of the vertices.");
            warning.logMessageToConsole();
        }
        _this.update(spline);
        return _this;
    }
    SelectedSlipOutOfShapeSpaceCurvExtremaView.prototype.initAttribLocation = function () {
        this.a_Position = this.gl.getAttribLocation(this.roundDotSolidShader.program, 'a_Position');
        this.a_Texture = this.gl.getAttribLocation(this.roundDotSolidShader.program, 'a_Texture');
        //a_Color = gl.getAttribLocation(<CurvatureExtremaShaders>this.curvatureExtremaShaders.program, 'a_Color'),
        this.FSIZE = this.vertices.BYTES_PER_ELEMENT;
        this.a_ColorLocation = this.gl.getUniformLocation(this.roundDotSolidShader.program, "a_Color");
        if (this.a_Position < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Position.');
            warning.logMessageToConsole();
        }
        if (this.a_Texture < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Texture.');
            warning.logMessageToConsole();
        }
    };
    SelectedSlipOutOfShapeSpaceCurvExtremaView.prototype.assignVertexAttrib = function () {
        // Assign the buffer object to a_Position variable
        this.gl.vertexAttribPointer(this.a_Position, 3, this.gl.FLOAT, false, this.FSIZE * 8, 0);
        this.gl.vertexAttribPointer(this.a_Texture, 2, this.gl.FLOAT, false, this.FSIZE * 8, this.FSIZE * 3);
        // Enable the assignment to a_Position variable
        this.gl.enableVertexAttribArray(this.a_Position);
        this.gl.enableVertexAttribArray(this.a_Texture);
    };
    SelectedSlipOutOfShapeSpaceCurvExtremaView.prototype.initVertexBuffers = function () {
        this.updateVerticesAndIndices();
        // Create a buffer object
        this.vertexBuffer = this.gl.createBuffer();
        if (!this.vertexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the vertex buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        // Bind the buffer objects to targets
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        // Write date into the buffer object
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.initAttribLocation();
        this.assignVertexAttrib();
        // Unbind the buffer object
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.indexBuffer = this.gl.createBuffer();
        if (!this.indexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the index buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        return this.indices.length;
    };
    SelectedSlipOutOfShapeSpaceCurvExtremaView.prototype.renderFrame = function () {
        this.initAttribLocation();
        this.gl.useProgram(this.roundDotSolidShader.program);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.assignVertexAttrib();
        this.gl.uniform4f(this.a_ColorLocation, this.RED_COLOR, this.GREEN_COLOR, this.BLUE_COLOR, this.ALPHA);
        this.roundDotSolidShader.renderFrame(this.indices.length);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.useProgram(null);
    };
    SelectedSlipOutOfShapeSpaceCurvExtremaView.prototype.update = function (spline) {
        var points = [];
        for (var i = 0; i < this.pointLoc.length; i += 1) {
            points.push(spline.evaluate(this.pointLoc[i]));
        }
        this.pointSequenceToDisplay = points.slice();
        this.updateVerticesAndIndices();
        this.updateBuffers();
    };
    return SelectedSlipOutOfShapeSpaceCurvExtremaView;
}(SelectedDifferentialEventsView_1.SelectedDifferentialEventsView));
exports.SelectedSlipOutOfShapeSpaceCurvExtremaView = SelectedSlipOutOfShapeSpaceCurvExtremaView;


/***/ }),

/***/ "./src/views/SelectedSlipOutOfShapeSpaceInflectionView.ts":
/*!****************************************************************!*\
  !*** ./src/views/SelectedSlipOutOfShapeSpaceInflectionView.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectedSlipOutOfShapeSpaceInflectionView = void 0;
var SelectedDifferentialEventsView_1 = __webpack_require__(/*! ./SelectedDifferentialEventsView */ "./src/views/SelectedDifferentialEventsView.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var SelectedSlipOutOfShapeSpaceInflectionView = /** @class */ (function (_super) {
    __extends(SelectedSlipOutOfShapeSpaceInflectionView, _super);
    function SelectedSlipOutOfShapeSpaceInflectionView(gl, spline, pointLoc) {
        var e_1, _a;
        var _this = _super.call(this, gl) || this;
        _this.DOT_SIZE = 0.02;
        _this.RED_COLOR = 0 / 255;
        _this.GREEN_COLOR = 120 / 255;
        _this.BLUE_COLOR = 0 / 255;
        _this.vertexBuffer = null;
        _this.indexBuffer = null;
        _this.vertices = new Float32Array([]);
        _this.indices = new Uint8Array([]);
        var points = [];
        try {
            for (var pointLoc_1 = __values(pointLoc), pointLoc_1_1 = pointLoc_1.next(); !pointLoc_1_1.done; pointLoc_1_1 = pointLoc_1.next()) {
                var pt = pointLoc_1_1.value;
                _this.pointLoc.push(pt);
                points.push(spline.evaluate(pt));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (pointLoc_1_1 && !pointLoc_1_1.done && (_a = pointLoc_1.return)) _a.call(pointLoc_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        _this.pointSequenceToDisplay = points.slice();
        _this.a_Position = -1;
        _this.a_Texture = -1;
        _this.a_ColorLocation = -1;
        _this.FSIZE = 0;
        // Write the positions of vertices to a vertex shader
        var check = _this.initVertexBuffers();
        if (check < 0) {
            var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, "constructor", "Failed to set the positions of the vertices.");
            warning.logMessageToConsole();
        }
        _this.update(spline);
        return _this;
    }
    SelectedSlipOutOfShapeSpaceInflectionView.prototype.initAttribLocation = function () {
        this.a_Position = this.gl.getAttribLocation(this.roundDotSolidShader.program, 'a_Position');
        this.a_Texture = this.gl.getAttribLocation(this.roundDotSolidShader.program, 'a_Texture');
        //a_Color = gl.getAttribLocation(<CurvatureExtremaShaders>this.curvatureExtremaShaders.program, 'a_Color'),
        this.FSIZE = this.vertices.BYTES_PER_ELEMENT;
        this.a_ColorLocation = this.gl.getUniformLocation(this.roundDotSolidShader.program, "a_Color");
        if (this.a_Position < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Position.');
            warning.logMessageToConsole();
        }
        if (this.a_Texture < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Texture.');
            warning.logMessageToConsole();
        }
    };
    SelectedSlipOutOfShapeSpaceInflectionView.prototype.assignVertexAttrib = function () {
        // Assign the buffer object to a_Position variable
        this.gl.vertexAttribPointer(this.a_Position, 3, this.gl.FLOAT, false, this.FSIZE * 8, 0);
        this.gl.vertexAttribPointer(this.a_Texture, 2, this.gl.FLOAT, false, this.FSIZE * 8, this.FSIZE * 3);
        // Enable the assignment to a_Position variable
        this.gl.enableVertexAttribArray(this.a_Position);
        this.gl.enableVertexAttribArray(this.a_Texture);
    };
    SelectedSlipOutOfShapeSpaceInflectionView.prototype.initVertexBuffers = function () {
        this.updateVerticesAndIndices();
        // Create a buffer object
        this.vertexBuffer = this.gl.createBuffer();
        if (!this.vertexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the vertex buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        // Bind the buffer objects to targets
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        // Write date into the buffer object
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.initAttribLocation();
        this.assignVertexAttrib();
        // Unbind the buffer object
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.indexBuffer = this.gl.createBuffer();
        if (!this.indexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the index buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        return this.indices.length;
    };
    SelectedSlipOutOfShapeSpaceInflectionView.prototype.renderFrame = function () {
        this.initAttribLocation();
        this.gl.useProgram(this.roundDotSolidShader.program);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.assignVertexAttrib();
        this.gl.uniform4f(this.a_ColorLocation, this.RED_COLOR, this.GREEN_COLOR, this.BLUE_COLOR, this.ALPHA);
        this.roundDotSolidShader.renderFrame(this.indices.length);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.useProgram(null);
    };
    SelectedSlipOutOfShapeSpaceInflectionView.prototype.update = function (spline) {
        var points = [];
        for (var i = 0; i < this.pointLoc.length; i += 1) {
            points.push(spline.evaluate(this.pointLoc[i]));
        }
        this.pointSequenceToDisplay = points.slice();
        this.updateVerticesAndIndices();
        this.updateBuffers();
    };
    return SelectedSlipOutOfShapeSpaceInflectionView;
}(SelectedDifferentialEventsView_1.SelectedDifferentialEventsView));
exports.SelectedSlipOutOfShapeSpaceInflectionView = SelectedSlipOutOfShapeSpaceInflectionView;


/***/ }),

/***/ "./src/views/TransitionCurvatureExtremaView.ts":
/*!*****************************************************!*\
  !*** ./src/views/TransitionCurvatureExtremaView.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TransitionCurvatureExtremaView = void 0;
var DoubleRoundDotSolidShader_1 = __webpack_require__(/*! ../2DgraphicsItems/DoubleRoundDotSolidShader */ "./src/2DgraphicsItems/DoubleRoundDotSolidShader.ts");
var ErrorLoging_1 = __webpack_require__(/*! ../errorProcessing/ErrorLoging */ "./src/errorProcessing/ErrorLoging.ts");
var AbstractPointView_1 = __webpack_require__(/*! ./AbstractPointView */ "./src/views/AbstractPointView.ts");
var TransitionCurvatureExtremaView = /** @class */ (function (_super) {
    __extends(TransitionCurvatureExtremaView, _super);
    function TransitionCurvatureExtremaView(gl, curveModelDifferentialEvents) {
        var _this = _super.call(this, gl) || this;
        _this.Z = 0;
        _this.DOT_SIZE = 0.03;
        _this.RED_COLOR = 216 / 255;
        _this.GREEN_COLOR = 91 / 255;
        _this.BLUE_COLOR = 95 / 255;
        _this.ALPHA = 1;
        _this.doubleRoundDotSolidShader = new DoubleRoundDotSolidShader_1.DoubleRoundDotSolidShader(_this.gl);
        _this.curveModelDifferentialEvents = curveModelDifferentialEvents;
        _this.pointSequenceToDisplay = _this.curveModelDifferentialEvents.transientCurvatureExtremaLocationsEuclideanSpace;
        _this.a_Position = -1;
        _this.a_Texture = -1;
        _this.a_ColorLocation = -1;
        _this.FSIZE = 0;
        // Write the positions of vertices to a vertex shader
        var check = _this.initVertexBuffers();
        if (check < 0) {
            var warning = new ErrorLoging_1.WarningLog(_this.constructor.name, "constructor", "Failed to set the positions of the vertices.");
            warning.logMessageToConsole();
        }
        _this.updateVerticesAndIndices();
        _this.updateBuffers();
        return _this;
    }
    TransitionCurvatureExtremaView.prototype.initAttribLocation = function () {
        this.a_Position = this.gl.getAttribLocation(this.doubleRoundDotSolidShader.program, 'a_Position');
        this.a_Texture = this.gl.getAttribLocation(this.doubleRoundDotSolidShader.program, 'a_Texture');
        this.FSIZE = this.vertices.BYTES_PER_ELEMENT;
        this.a_ColorLocation = this.gl.getUniformLocation(this.doubleRoundDotSolidShader.program, "a_Color");
        if (this.a_Position < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Position.');
            warning.logMessageToConsole();
        }
        if (this.a_Texture < 0) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initAttribLocation", 'Failed to get the storage location of a_Texture.');
            warning.logMessageToConsole();
        }
    };
    TransitionCurvatureExtremaView.prototype.assignVertexAttrib = function () {
        // Assign the buffer object to a_Position variable
        this.gl.vertexAttribPointer(this.a_Position, 3, this.gl.FLOAT, false, this.FSIZE * 8, 0);
        this.gl.vertexAttribPointer(this.a_Texture, 2, this.gl.FLOAT, false, this.FSIZE * 8, this.FSIZE * 3);
        // Enable the assignment to a_Position variable
        this.gl.enableVertexAttribArray(this.a_Position);
        this.gl.enableVertexAttribArray(this.a_Texture);
    };
    TransitionCurvatureExtremaView.prototype.initVertexBuffers = function () {
        this.updateVerticesAndIndices();
        // Create a buffer object
        this.vertexBuffer = this.gl.createBuffer();
        if (!this.vertexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the vertex buffer object.');
            warning.logMessageToConsole();
            return -1;
        }
        // Bind the buffer objects to targets
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        // Write date into the buffer object
        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);
        this.initAttribLocation();
        this.assignVertexAttrib();
        // Unbind the buffer object
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.indexBuffer = this.gl.createBuffer();
        if (!this.indexBuffer) {
            var warning = new ErrorLoging_1.WarningLog(this.constructor.name, "initVertexBuffers", 'Failed to create the index buffer object');
            warning.logMessageToConsole();
            return -1;
        }
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.DYNAMIC_DRAW);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        return this.indices.length;
    };
    TransitionCurvatureExtremaView.prototype.renderFrame = function () {
        this.initAttribLocation();
        this.gl.useProgram(this.doubleRoundDotSolidShader.program);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.assignVertexAttrib();
        this.gl.uniform4f(this.a_ColorLocation, this.RED_COLOR, this.GREEN_COLOR, this.BLUE_COLOR, this.ALPHA);
        this.doubleRoundDotSolidShader.renderFrame(this.indices.length);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.useProgram(null);
    };
    TransitionCurvatureExtremaView.prototype.update = function (diffEventsLocations) {
        this.pointSequenceToDisplay = diffEventsLocations.transientCurvatureExtremaLocationsEuclideanSpace;
        this.updateVerticesAndIndices();
        this.updateBuffers();
    };
    TransitionCurvatureExtremaView.prototype.reset = function (diffEventsLocations) {
    };
    return TransitionCurvatureExtremaView;
}(AbstractPointView_1.AbstractPointView));
exports.TransitionCurvatureExtremaView = TransitionCurvatureExtremaView;


/***/ }),

/***/ "./src/webgl/cuon-utils.ts":
/*!*********************************!*\
  !*** ./src/webgl/cuon-utils.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Reference: cuon-utils.js
// cuon-utils.js (c) 2012 kanda and matsuda
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createProgram = void 0;
/**
 * Create the linked program object
 * @param gl GL context
 * @param vshader a vertex shader program (string)
 * @param fshader a fragment shader program (string)
 * @return created program object, or null if the creation has failed
 */
function createProgram(gl, vshader, fshader) {
    // Create shader object
    var vertexShader = loadShader(gl, gl.VERTEX_SHADER, vshader);
    var fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fshader);
    if (!vertexShader || !fragmentShader) {
        console.log("createProgram was unable to produce a vertex or fragment shader");
        return null;
    }
    // Create a program object
    var program = gl.createProgram();
    if (!program) {
        console.log("createProgram was unable to produce a program");
        return null;
    }
    // Attach the shader objects
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    // Link the program object
    gl.linkProgram(program);
    // Check the result of linking
    var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
    if (!linked) {
        var error = gl.getProgramInfoLog(program);
        console.log('Failed to link program: ' + error);
        gl.deleteProgram(program);
        gl.deleteShader(fragmentShader);
        gl.deleteShader(vertexShader);
        return null;
    }
    return program;
}
exports.createProgram = createProgram;
/**
 * Create a shader object
 * @param gl GL context
 * @param type the type of the shader object to be created
 * @param source shader program (string)
 * @return created shader object, or null if the creation has failed.
 */
function loadShader(gl, type, source) {
    var shader = gl.createShader(type);
    if (shader == null) {
        console.log('unable to create shader');
        return null;
    }
    // Set the shader program
    gl.shaderSource(shader, source);
    // Compile the shader
    gl.compileShader(shader);
    // Check the result of compilation
    var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
    if (!compiled) {
        var error = gl.getShaderInfoLog(shader);
        console.log('Failed to compile shader: ' + error);
        gl.deleteShader(shader);
        return null;
    }
    return shader;
}


/***/ }),

/***/ "./src/webgl/webgl-utils.ts":
/*!**********************************!*\
  !*** ./src/webgl/webgl-utils.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
 * Copyright 2010, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebGLUtils = void 0;
/**
 * @fileoverview This file contains functions every webgl program will need
 * a version of one way or another.
 *
 * Instead of setting up a context manually it is recommended to
 * use. This will check for success or failure. On failure it
 * will attempt to present an approriate message to the user.
 *
 *       gl = WebGLUtils.setupWebGL(canvas);
 *
 * For animated WebGL apps use of setTimeout or setInterval are
 * discouraged. It is recommended you structure your rendering
 * loop like this.
 *
 *       function render() {
 *         window.requestAnimationFrame(render, canvas);
 *
 *         // do rendering
 *         ...
 *       }
 *       render();
 *
 * This will call your rendering function up to the refresh rate
 * of your display but will stop rendering if your app is not
 * visible.
 */
function WebGLUtils() {
    /**
     * Creates the HTLM for a failure message
     * @param {string} canvasContainerId id of container of th
     *        canvas.
     * @return {string} The html.
     */
    var makeFailHTML = function (msg) {
        return '' +
            '<div style="margin: auto; width:500px;z-index:10000;margin-top:20em;text-align:center;">' + msg + '</div>';
        return '' +
            '<table style="background-color: #8CE; width: 100%; height: 100%;"><tr>' +
            '<td align="center">' +
            '<div style="display: table-cell; vertical-align: middle;">' +
            '<div style="">' + msg + '</div>' +
            '</div>' +
            '</td></tr></table>';
    };
    /**
     * Mesasge for getting a webgl browser
     * @type {string}
     */
    var GET_A_WEBGL_BROWSER = '' +
        'This page requires a browser that supports WebGL.<br/>' +
        '<a href="http://get.webgl.org">Click here to upgrade your browser.</a>';
    /**
     * Mesasge for need better hardware
     * @type {string}
     */
    var OTHER_PROBLEM = '' +
        "It doesn't appear your computer can support WebGL.<br/>" +
        '<a href="http://get.webgl.org">Click here for more information.</a>';
    /**
     * Creates a webgl context. If creation fails it will
     * change the contents of the container of the <canvas>
     * tag to an error message with the correct links for WebGL.
     * @param {Element} canvas. The canvas element to create a
     *     context from.
     * @param {WebGLContextCreationAttirbutes} opt_attribs Any
     *     creation attributes you want to pass in.
     * @param {function:(msg)} opt_onError An function to call
     *     if there is an error during creation.
     * @return {WebGLRenderingContext} The created context.
     */
    var setupWebGL = function (canvas, opt_attribs, opt_onError) {
        function handleCreationError(msg) {
            var container = document.getElementsByTagName("body")[0];
            //var container = canvas.parentNode;
            if (container) {
                var str = window.WebGLRenderingContext ?
                    OTHER_PROBLEM :
                    GET_A_WEBGL_BROWSER;
                if (msg) {
                    str += "<br/><br/>Status: " + msg;
                }
                container.innerHTML = makeFailHTML(str);
            }
        }
        ;
        opt_onError = opt_onError || handleCreationError;
        if (canvas.addEventListener) {
            canvas.addEventListener("webglcontextcreationerror", function (event) {
                opt_onError(event.statusMessage);
            }, false);
        }
        var context = create3DContext(canvas, opt_attribs);
        if (!context) {
            if (!window.WebGLRenderingContext) {
                opt_onError("");
            }
            else {
                opt_onError("");
            }
        }
        return context;
    };
    /**
     * Creates a webgl context.
     * @param {!Canvas} canvas The canvas tag to get context
     *     from. If one is not passed in one will be created.
     * @return {!WebGLContext} The created context.
     */
    var create3DContext = function (canvas, opt_attribs) {
        var names = ["webgl", "experimental-webgl", "webkit-3d", "moz-webgl"];
        var context = null;
        for (var ii = 0; ii < names.length; ++ii) {
            try {
                context = canvas.getContext(names[ii], opt_attribs);
            }
            catch (e) { }
            if (context) {
                break;
            }
        }
        return context;
    };
    return {
        create3DContext: create3DContext,
        setupWebGL: setupWebGL
    };
}
exports.WebGLUtils = WebGLUtils;
/**
 * Provides requestAnimationFrame in a cross browser
 * way.
 */
if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = (function () {
        return window.requestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.oRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            function (/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {
                window.setTimeout(callback, 1000 / 60);
            };
    })();
}
/** * ERRATA: 'cancelRequestAnimationFrame' renamed to 'cancelAnimationFrame' to reflect an update to the W3C Animation-Timing Spec.
 *
 * Cancels an animation frame request.
 * Checks for cross-browser support, falls back to clearTimeout.
 * @param {number}  Animation frame request. */
if (!window.cancelAnimationFrame) {
    window.cancelAnimationFrame = (window.cancelRequestAnimationFrame ||
        window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame ||
        window.mozCancelAnimationFrame || window.mozCancelRequestAnimationFrame ||
        window.msCancelAnimationFrame || window.msCancelRequestAnimationFrame ||
        window.oCancelAnimationFrame || window.oCancelRequestAnimationFrame ||
        window.clearTimeout);
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __webpack_exports__;
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.main = void 0;
var UserInterfaceEventListener_1 = __webpack_require__(/*! ./userInterfaceController/UserInterfaceEventListener */ "./src/userInterfaceController/UserInterfaceEventListener.ts");
function main() {
    var curveModelDefinitionEventListener = new UserInterfaceEventListener_1.CurveModelDefinitionEventListener();
    var shapeSpaceNavigationEventListener = new UserInterfaceEventListener_1.ShapeSpaceNavigationEventListener(curveModelDefinitionEventListener);
    var curveSceneEventListener = new UserInterfaceEventListener_1.CurveSceneEventListener(curveModelDefinitionEventListener, shapeSpaceNavigationEventListener);
    var chartEventListener = new UserInterfaceEventListener_1.ChartEventListener(curveModelDefinitionEventListener.shapeNavigableCurve);
    var fileEventListener = new UserInterfaceEventListener_1.FileEventListener(curveModelDefinitionEventListener, curveSceneEventListener.curveSceneController);
    curveSceneEventListener.curveSceneController.renderFrame();
}
exports.main = main;
main();

})();

/******/ })()
;
//# sourceMappingURL=bundle.js.map